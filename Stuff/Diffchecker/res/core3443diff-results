--- a/server.src/prg/bas/Accfil.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Accfil.this);
-    private lib.bas.Std std=new lib.bas.Std(Accfil.this);
-    private Field s4 = new Field("99999");
-    private Field s5 = new Field("99999");
-    private Field tmp1 = new Field("X(100)");
-    private Field tmp2 = new Field("X(100)");
-    private Field tmp3 = new Field("X(100)");
-    private Field varde = new Field("X(30000)");
-    private Field tmp20 = new Field("X(20)");
-    private Field tmpHel = new Field("S99999999999999");
-    private Field tmpDec = new Field("S999999999999V99");
-    private Field tmpX = new Field("X");
-    private Field lstHel = new Field("-----------9");
-    private Field lstDec = new Field("---------9,99");
-    private Field lstDat6 = new Field("999999");
-    private Field lstDat62 = new Field("999999");
-    private Field tmpKey = new Field("X(100)");
-    private Field lnrfr = new Field("999999");
-    private Field lnrti = new Field("999999");
-    private Field xtyp = new Field("XX");
-    private Field typ = new Field("X");
-    private Field separator = new Field("X");
-    private Field sepForts = new Field("X");
-    private Field maxs = new Field("99999");
--- a/server.src/prg/bas/Apiimp.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apiimp.this);
-    private lib.med.P8921 p8921=new lib.med.P8921(Apiimp.this, pa, medrecarea);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Apiimp.this);
-    private lib.med.Datab da=new lib.med.Datab(Apiimp.this);
-    private Field xmlTecken = new Field("X(100)");
-    private Field behormedaOk = new Field("X");
-    private Field medaPek = new Field("S9(9)");
-    private Field xmlLanguage = new Field("X(100)");
-    private Field xmlUserId = new Field("X(100)");
-    private Field xmlPassword = new Field("X(100)");
-    private Field visakod = new Field("XXX");
-    private Field tmpSprak = new Field("XX");
-    private Field antalInlogg = new Field("S9(9)");
-    private Field sessionid = new Field("9(15)");
-    private Field tid = new Field("9(8)");
-    private Field datum = new Field("9(8)");
-    private Field datum2 = new Field("9(8)");
-    private Field datumD = new Field("X(10)");
-    private Field veckodag = new Field("9(6)");
-    private Field bokfel = new Field("S9(10)");
-    private Field bokfeltext = new Field("X(80)");
--- a/server.src/prg/bas/Begr.java
-    //WORKING STORAGE SECTION
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Begr.this);
-    private lib.bas.Std std=new lib.bas.Std(Begr.this);
--- a/server.src/prg/bas/Behlogg.java
-    private lib.kun.Kundpost kunkund=new lib.kun.Kundpost(Behlogg.this, pa);
-    private lib.kun.Faktpost kunfakt=new lib.kun.Faktpost(Behlogg.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Behlogg.this, pa);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(Behlogg.this, pa);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Behlogg.this, pa);
-    private lib.lev.Ankmpost levankm=new lib.lev.Ankmpost(Behlogg.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Behlogg.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Behlogg.this, pa);
-    private lib.pro.Datab da=new lib.pro.Datab(Behlogg.this);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Behlogg.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Behlogg.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Behlogg.this, webpara, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmp100 = new Field("X(100)");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field p0 = new Field("X(50)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field datum1 = new Field("9(8)");
-    private Field datum2 = new Field("9(8)");
-    private Field datum3 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field ptrl2 = new Field("99999");
-    private Field ptrl3 = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field uppdlag = new Field("X");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field flagga1 = new Field("X");
-    private Field opened = new Field("X");
-    private Field selRegdatfr = new Field("9(8)");
-    private Field selRegdatti = new Field("9(8)");
-    private Field selTidwRegdatfr = new Field("9(8)");
-    private Field selTidwRegdatti = new Field("9(8)");
-    private Field selStoppdatfr = new Field("9(8)");
-    private Field selStoppdatti = new Field("9(8)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sumArv = new Field("S9(10)");
-    private Field sumInk = new Field("S9(10)");
-    private Field sumOvr = new Field("S9(10)V99");
-    private Field antal1 = new Field("99999");
-    private Field lopnr = new Field("99999");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field ti = new Field("99999");
-    private Field lnr = new Field("999");
-    private Field beh = new Field("X");
-    private Field felkod = new Field("999");
-    private Field valuta = new Field("XXX");
-    private Field mvaluta = new Field("XXX");
-    private Field ordPris = new Field("9(5)");
-    private Field avvPris = new Field("9(5)");
-    private Field tmpPris = new Field("9(5)");
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/bas/Beho.java
-    private Field tmpWindow = new Field("X(10)");
-    private Field tmp50x = new Field("X(50)");
-    private Field tmpLnr = new Field("S9(11)");
-    private Field nyBehoProg1 = new Field("X(4)");
-    private Field nyBehoProg2 = new Field("X(4)");
--- a/server.src/prg/bas/Behstat.java
-    private lib.kun.Kundpost kunkund=new lib.kun.Kundpost(Behstat.this, pa);
-    private lib.kun.Faktpost kunfakt=new lib.kun.Faktpost(Behstat.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Behstat.this, pa);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(Behstat.this, pa);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Behstat.this, pa);
-    private lib.lev.Ankmpost levankm=new lib.lev.Ankmpost(Behstat.this, pa);
-    private lib.gem.Moespost gemmoes=new lib.gem.Moespost(Behstat.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Behstat.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Behstat.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Behstat.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Behstat.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Behstat.this, webpara, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmp100 = new Field("X(100)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field p0 = new Field("X(50)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field ptrl2 = new Field("99999");
-    private Field ptrl3 = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field uppdlag = new Field("X");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field flagga1 = new Field("X");
-    private Field opened = new Field("X");
-    private Field selAtt = new Field("XXXX");
-    private Field selSort = new Field("X");
-    private Field selRegdatfr = new Field("9(8)");
-    private Field selRegdatti = new Field("9(8)");
-    private Field selTidwRegdatfr = new Field("9(8)");
-    private Field selTidwRegdatti = new Field("9(8)");
-    private Field selStoppdatfr = new Field("9(8)");
-    private Field selStoppdatti = new Field("9(8)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sumArv = new Field("S9(10)");
-    private Field sumInk = new Field("S9(10)");
-    private Field sumOvr = new Field("S9(10)V99");
-    private Field antal1 = new Field("99999");
-    private Field lopnr = new Field("99999");
-    private Field j = new Field("99999");
-    private Field ti = new Field("99999");
-    private Field lnr = new Field("999");
-    private Field beh = new Field("X");
-    private Field felkod = new Field("999");
-    private Field valuta = new Field("XXX");
-    private Field mvaluta = new Field("XXX");
-    private Field ordPris = new Field("9(5)");
-    private Field avvPris = new Field("9(5)");
-    private Field tmpPris = new Field("9(5)");
-    private void skrivut2() {
-        lib.bas.Medapost.fd bas_meda=basmeda.get();
-        lib.bas.Ftgspost.fd ftgs=basftgs.get();
-        lib.bas.Behkpost.fd behk=basbehk.get();
-        lib.bas.Behfpost.fd behf=basbehf.get();
-        fsort.open("INPUT");
-        call("prg.bas.strut", listfilnamn, "TMP/BEHSTAT2%S%0", webpara.userid, webpara.pid);
-        call("prg.bas.filut", "OPEN", listfilnamn);
-        listrad2Anva.set("User");
-        listrad2Att.set("Approval person");
-        listrad2Land.set("Country");
-        listrad2Ftg.set("Company");
-        listrad2Behk.set("Category");
-        listrad2Behf.set("Function");
-        call("prg.bas.filut", "WRITE", listrad2);
-        radnr.set(1);
-        fsortPost.init();
-        fsort.start(">=", "fsort_key2");
-        if (fsortFs.equals("00")) {
-            fsort.readNext();
-        }
-        while (fsortFs.equals("00")) {
-            if (fsortBeh.equals("W")) {
-                bas_meda.record.init();
-                bas_meda.kod.set(fsortAtt);
-                bas_meda.f9903Read();
-                ftgs.forecord.init();
-                ftgs.fokod.set(fsortFtg);
-                ftgs.f9904Read();
-                behk.post.init();
-                behk.kod.set(fsortBehk);
-                behk.read();
-                behf.post.init();
-                behf.kod.set(fsortBehf);
-                behf.read();
-                listrad2Anva.set(fsortAnva);
-                listrad2Att.set(bas_meda.name);
-                switch (fsortLand.getStringValue()) {
-                    case "SE":
-                        listrad2Land.set("Sweden");
-                        break;
-                    case "NO":
-                        listrad2Land.set("Norway");
-                        break;
-                    case "DK":
-                        listrad2Land.set("Denmark");
-                        break;
-                    case "FI":
-                        listrad2Land.set("Finland");
-                        break;
-                    default:
-                        listrad2Land.set(fsortLand);
-                }
-                listrad2Ftg.set(ftgs.foname);
-                listrad2Behk.set(behk.namn);
-                listrad2Behf.set(behf.namn);
-                call("prg.bas.filut", "WRITE", listrad2);
-                radnr.increment(1);
-                if (radnr.compareTo(62)>0) {
-                    call("prg.bas.filut", "WRITE", "\u000C");
-                    radnr.set(1);
-                }
-            }
-            fsort.readNext();
-        }
-        call("prg.bas.filut", "CLOSE", listfilnamn);
-        fsort.close();
-        utskrift();
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/bas/Blank.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Blank.this);
-    private Field finEof = new Field("X");
-    private Field futEof = new Field("X");
-    private Field fbmEof = new Field("X");
-    private Field tmp2 = new Field("XX");
-    private Field tmpAnt = new Field("9(9)");
--- a/server.src/prg/bas/Byt.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Byt.this);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Byt.this, pa);
-    private lib.lev.Parapost levpara=new lib.lev.Parapost(Byt.this, pa);
-    private lib.lon.Parapost lonpara=new lib.lon.Parapost(Byt.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Byt.this);
-    private lib.pro.Datab da=new lib.pro.Datab(Byt.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Byt.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Byt.this);
-    private Field numArgs = new Field("S9(11)");
-    private Field tmpOldKod = new Field("X(20)");
-    private Field tmpOldNiva = new Field("99");
-    private Field tmpBfar1 = new Field("9(4)");
-    private Field tmpBfar2 = new Field("9(4)");
-    private Field oldLosen = new Field("X(4)");
-    private Field tmpBehorig = new Field("X");
-    private Field tmp2n = new Field("99");
-    private Field scFunk = new Field("9");
-    private Field windowHandle = new Field("X(10)");
-    private void doBytBolagLoop() {
-        if (combiFtg.equals(SPACE)) {
-            std.colorInmOpen();
-            /*scrBolag*/
-            /*scrBolag{
-              std.stdFunk();
-              if (std.stdFunkNr.equals(0)) {
-              doBytBolagLoop();
-              return;
-              }
-              }
-              {
-              std.stdFunkNr.set(0);
-              }
-             */
-            toupper.toupper.set(scBol);
-            toupper.toupp();
-            scBol.set(toupper.toupper);
-            call("prg.bas.std1920", scBfar);
-            std.colorInmClosed();
-            /*scrBolag*/
-            if (std.stdFunkNr.equals(1) && std.crtposY.equals(2)) {
-                call("prg.bas.961001", pa.paraArea, scBol);
-                cancel("prg.bas.961001");
-                doBytBolagLoop();
-                return;
-            }
-            if ((scBol.ref(1,1).equals(SPACE) || scBol.ref(1,1).equals(".")) || 
-                    (scBfar.equals(ZERO)) || 
-                    (std.stdFunkNr.equals(27))) {
-                doBytBolagSlut();
-                return;
-            }
-        }
-        else {
-            scBol.set(combiFtg);
-            basftgs.get().f9904OpenIO();
-            basftgs.get().fokod.set(scBol);
-            basftgs.get().f9904Read();
-            basftgs.get().f9904Close();
-            if ((basftgs.get().f9904Eof.equals("N")) && 
-                    (pa.bfar.compareTo(basftgs.get().fominar)<0 || pa.bfar.compareTo(basftgs.get().fomaxar)>0)) {
-                scBfar.set(basftgs.get().fomaxar);
-            }
-            else {
-                scBfar.set(pa.bfar);
-            }
-        }
-        tmpOk.set("J");
-        basftgs.get().f9904OpenIO();
-        basftgs.get().fokod.set(scBol);
-        basftgs.get().f9904Read();
-        basftgs.get().f9904Close();
-        if (basftgs.get().f9904Eof.equals("J")) {
-            if (combiFtg.equals(SPACE)) {
-                call("prg.bas.visa", pa.paraArea, "F006");
-                std.crtpos.set(new Constant("0223"));
-                doBytBolagLoop();
-                return;
-            }
-            else {
-                tmpOk.set("N");
-                doBytBolagSlut();
-                return;
-            }
-        }
-        if ((!(pa.anvid.equals("SYAD")) && !(pa.anvid.equals("KSD!")) && !(pa.anvid.equals("KSD_"))) && 
-                (!(basftgs.get().fobehomedaO.equals(SPACE))) && 
-                (!(pa.anvid.equals(basftgs.get().fobehomeda[0])) && !(pa.anvid.equals(basftgs.get().fobehomeda[1])) && !(pa.anvid.equals(basftgs.get().fobehomeda[2])) && !(pa.anvid.equals(basftgs.get().fobehomeda[3])) && !(pa.anvid.equals(basftgs.get().fobehomeda[4])))) {
-            tmpBehorig.set("N");
-        }
-        else {
-            tmpBehorig.set("N");
-            x.set(1);
-            while (!(x.compareTo(48)>0)) {
-                if ((basmeda.get().bolF[x.getInt()-1].equals(scBol) || basmeda.get().bolF[x.getInt()-1].equals("*")) && 
-                        (basmeda.get().bolA[x.getInt()-1].equals(scBfar) || basmeda.get().bolA[x.getInt()-1].equals(SPACE))) {
-                    tmpBehorig.set("J");
-                }
-                x.increment(1);
-            }
-        }
-        if (tmpBehorig.equals("N")) {
-            if (combiFtg.equals(SPACE)) {
-                call("prg.bas.visa", pa.paraArea, "F005");
-                std.crtpos.set(new Constant("0223"));
-                doBytBolagLoop();
-                return;
-            }
-            else {
-                tmpOk.set("N");
-                doBytBolagSlut();
-                return;
-            }
-        }
-        if (basftgs.get().fosparr.equals("J")) {
-            if (combiFtg.equals(SPACE)) {
-                call("prg.bas.visa", pa.paraArea, "F007");
-                std.crtpos.set(new Constant("0223"));
-                doBytBolagLoop();
-                return;
-            }
-            else {
-                tmpOk.set("N");
-                doBytBolagSlut();
-                return;
-            }
-        }
-        if (basftgs.get().foaktiv.equals("N")) {
-            if (combiFtg.equals(SPACE)) {
-                call("prg.bas.visa", pa.paraArea, "F011");
-            }
-        }
-        if (std.stdOldPgm.ref(1,2).isNumeric() && !(std.stdOldPgm.ref(1,2).equals("00"))) {
-            tmp2n.ref(1,2).set(std.stdOldPgm.ref(1,2));
-            if (tmp2n.equals(27)) {
-                tmp2n.set(7);
-            }
-            if (!(basftgs.get().fomoduler.ref(tmp2n,1).equals("J"))) {
-                if (combiFtg.equals(SPACE)) {
-                    call("prg.bas.visa", pa.paraArea, "F008");
-                    std.crtpos.set(new Constant("0223"));
-                    doBytBolagLoop();
-                    return;
-                }
-                else {
-                    tmpOk.set("N");
-                    doBytBolagSlut();
-                    return;
-                }
-            }
-            if (std.stdOldPgm.ref(1,2).equals("04") && !(scBol.equals(oldBkstvftg)) && !(basftgs.get().fobolagpro.equals(SPACE))) {
-                if (combiFtg.equals(SPACE)) {
-                    call("prg.bas.visa", pa.paraArea, "F012");
-                    std.crtpos.set(new Constant("0223"));
-                    doBytBolagLoop();
-                    return;
-                }
-                else {
-                    tmpOk.set("N");
-                    doBytBolagSlut();
-                    return;
-                }
-            }
-            if (std.stdOldPgm.ref(1,2).equals("06") && !(scBol.equals(oldBkstvftg))) {
-                lonpara.get().f0609OpenIO();
-                lonpara.get().lopnr.set(1);
-                lonpara.get().f0609Read();
-                oldLosen.set(lonpara.get().losen);
-                lonpara.get().f0609Close();
-                oldBkstvftg.set(pa.bkstvftg);
-                pa.bkstvftg.set(scBol);
-                lonpara.get().f0609OpenIO();
-                lonpara.get().lopnr.set(1);
-                lonpara.get().f0609Read();
-                lonpara.get().f0609Close();
-                pa.bkstvftg.set(oldBkstvftg);
-                if (!(lonpara.get().losen.equals(SPACE)) && !(lonpara.get().losen.equals(oldLosen))) {
-                    if (combiFtg.equals(SPACE)) {
-                        call("prg.bas.visainm", pa.paraArea, "I002", std.stdText);
-                        if (!(lonpara.get().losen.equals(SPACE)) && (!(std.stdText.equals(lonpara.get().losen)) && !(std.stdText.equals(tmpSyad.ref(6,4))) && !(std.stdText.equals("1632")))) {
-                            call("prg.bas.visa", pa.paraArea, "F010");
-                            std.crtpos.set(new Constant("0223"));
-                            doBytBolagLoop();
-                            return;
-                        }
-                    }
-                    else {
-                        tmpOk.set("N");
-                        doBytBolagSlut();
-                        return;
-                    }
-                }
-            }
-        }
-        else {
-            tmp2n.set(99);
-        }
-        if (scBfar.compareTo(basftgs.get().fominar)<0 || scBfar.compareTo(basftgs.get().fomaxar)>0) {
-            if (combiFtg.equals(SPACE)) {
-                call("prg.bas.visa", pa.paraArea, "F009");
-                std.crtpos.set(new Constant("0323"));
-                doBytBolagLoop();
-                return;
-            }
-            else {
-                tmpOk.set("N");
-                doBytBolagSlut();
-                return;
-            }
-        }
-        if ((combiFtg.equals(SPACE) && std.stdNyttGranssnitt.equals("N")) || 
-                (!(combiFtg.equals(SPACE)))) {
-            pa.bkstvftg.set(scBol);
-            if (!(oldKamFtg.equals(SPACE))) {
-                oldKamFtg.set(scBol);
-            }
-            pa.delsystem.set(basftgs.get().fomoduler);
-        }
-        pa.bfar.set(scBfar);
-        doBytBolagStarta();
-        if (tmpFranFtgMedPro.equals("J")) {
-            pa.recid.set(da.file);
-            pa.action.set(da.closeAll);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            cancel("prg.pro.p4921");
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            cancel("prg.pro.p4921");
-        }
-    }
-
-    private void doBytBolagStarta() {
-        std.stdDelsystem.set(pa.delsystem);
-        std.stdBkstvftg.set(pa.bkstvftg);
-        std.stdBfar.set(pa.bfar);
-        std.stdText.set(SPACE);
-        std.stdText.set(concat("PROVER",limit(pa.bkstvftg,SPACE)));
-        acceptFrom(" FROM  ENVIRONMENT ",std.stdText,std.stdProver);
-        if (!(std.stdProver.equals("1")) && !(std.stdProver.equals("2"))) {
-            std.stdProver.set("1");
-        }
-        if (basftgs.get().fomedfo.equals("J")) {
-            std.stdMedver.set("3");
-        }
-        else {
-            std.stdText.set(SPACE);
-            std.stdText.set(concat("MEDVER",limit(pa.bkstvftg,SPACE)));
-            acceptFrom(" FROM  ENVIRONMENT ",std.stdText,std.stdMedver);
-            if (!(std.stdMedver.equals("1")) && !(std.stdMedver.equals("2"))) {
-                std.stdMedver.set("1");
-            }
-        }
-        //  Eftersom BEHO laddas ur av CANCEL ALL ovan görs ny inloggning 
-        beho.kom.set("S");
-        beho.funk.set(ZERO);
-        call(beho.beho, pa.paraArea, pa.beniv, pa.modulkod, beho.funk, beho.kom);
-        call("prg.bok.p1start", pa.paraArea);
-        cancel("prg.bok.p1start");
-        call("prg.lev.p3start", pa.paraArea);
-        cancel("prg.lev.p3start");
-        pa.periodantal.set(12);
-        bokpara.get().f9800OpenInput();
-        if (bokpara.get().f9800Eof.equals("N")) {
-            bokpara.get().f9800P.set(1);
-            bokpara.get().f9800Read();
-            if (bokpara.get().f9800Eof.equals("N")) {
-                pa.periodantal.set(bokpara.get().bookparamNum);
-                bokpara.get().f9801OpenInput();
-                bokpara.get().f9801Read();
-                bokpara.get().f9801Close();
-                tmpBfar1.ref(1).set(bokpara.get().bookperMin[0].ref(1,4));
-                tmpBfar2.ref(1).set(bokpara.get().bookperMax[pa.periodantal.getInt()-1].ref(1,4));
-            }
-        }
-        if (bokpara.get().f9800Eof.equals("J")) {
-            tmpBfar1.set(pa.bfar);
-            tmpBfar2.set(pa.bfar);
-        }
-        bokpara.get().f9800Close();
-        pa.namnftg.set(SPACE);
-        if (tmpBfar1.equals(tmpBfar2)) {
-            pa.namnftg.set(concat(limit(scBol,SPACE),tmpBfar1.ref(3,2)," ",basftgs.get().foname));
-        }
-        else {
-            pa.namnftg.set(concat(limit(scBol,SPACE),tmpBfar1.ref(3,2),"/",tmpBfar2.ref(3,2)," ",basftgs.get().foname));
-        }
-    }
--- a/server.src/prg/bas/Cllfrw.java
-    private Field s = new Field("99999");
-    private Field tmp = new Field("X(400)");
-    private Field pid = new Field("99999");
--- a/server.src/prg/bas/Cllut.java
-    private Field s = new Field("99999");
-    private Field tmp = new Field("X(400)");
-    private Field pid = new Field("99999");
-    private Field cmd = new Field("X(300)");
-    private Field svar = new Field("X(30000)");
--- a/server.src/prg/bas/Cllutget.java
-    private Field s = new Field("99999");
-    private Field tmp = new Field("X(400)");
-    private Field pid = new Field("99999");
--- a/server.src/prg/bas/Col.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Col.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Col.this);
-    private Field tmpAnvid = new Field("X(4)");
-    private Field filler26 = tmpFcol.redefine();
-    private Field tmpFcolR = filler26.extend("9");
-    private Field filler29 = tmpBcol.redefine();
-    private Field tmpBcolR = filler29.extend("9");
-    private Field tmpCol = new Field("X(30)");
-    private Field inteck = new Field("X");
-    private Field inteckKey = new Field("999");
-    private Field scTyp = new Field("99");
-    private Field windowHandle = new Field("X(10)");
-    private Field windowHandle2 = new Field("X(10)");
-    private Field windowHandle3 = new Field("X(10)");
-    private Field tmpBakgrund = new Field("X(80)");
-    private Field tmpRad1 = new Field("X(80)");
-    private Field tmpRubrik = new Field("X(80)");
-    private Field tmpRam = new Field("X(80)");
-    private Field tmpFunk = new Field("X(80)");
-    private Field tmpRad24 = new Field("X(80)");
-    private Field tmpMeddelande = new Field("X(80)");
-    private Field tmpLedtext = new Field("X(80)");
-    private Field tmpInmOpen = new Field("X(80)");
-    private Field tmpInmClosed = new Field("X(80)");
-    private Field tmpFonster = new Field("X(80)");
-    private void openUp() {
-        acceptFrom(" FROM  TERMINAL-INFO",terminalAbilities);
-        if (hasColor.equals("Y")) {
-            if (std.stdPgm.equals("KONV")) {
-                defaultCol();
-            }
-            else {
-                meda.f9903OpenIO();
-                meda.kod.set(std.stdAnvid);
-                meda.f9903Read();
-                if (meda.f9903Eof.equals("J") || meda.colbak.equals(SPACE)) {
-                    defaultCol();
-                }
-                else {
-                    std.stdColor.set(meda.col);
-                }
-                meda.f9903Close();
-            }
-            if (std.stdHalv.equals("J")) {
-                tmp91.ref(1).set(std.stdColhalv.ref(2,1));
-                tmp92.ref(1).set(std.stdColhalv.ref(1,1));
-                std.stdHalvProt.set(new Constant("32768").add(tmp91.multiply(32)).add(tmp92));
-            }
-            else {
-                std.stdHalvProt.set(ZERO);
-            }
-            tmp91.ref(1).set(std.stdColinmc.ref(2,1));
-            tmp92.ref(1).set(std.stdColinmc.ref(1,1));
-            std.stdInmProt.set(new Constant("32768").add(tmp91.multiply(32)).add(tmp92));
-            if (terminalName.equals("msk")) {
-                setback();
-            }
-        }
-        else {
-            std.stdHalvProt.set(ZERO);
-        }
-        tmpAnvid.set(std.stdAnvid);
-    }
-
-    private void setback() {
-        switch (meda.colbak.ref(2,1).getStringValue()) {
-            case "1":
-                call(std.unixSystem, "color 40");
-                break;
-            case "2":
-                call(std.unixSystem, "color 44");
-                break;
-            case "3":
-                call(std.unixSystem, "color 42");
-                break;
-            case "4":
-                call(std.unixSystem, "color 46");
-                break;
-            case "5":
-                call(std.unixSystem, "color 41");
-                break;
-            case "6":
-                call(std.unixSystem, "color 45");
-                break;
-            case "7":
-                call(std.unixSystem, "color 43");
-                break;
-            case "8":
-                call(std.unixSystem, "color 47");
-                break;
-        }
-    }
-
-    private void defaultCol() {
-        if ((terminalName.ref(1,3).equalsEither("msk", "pcf", "pcc", "ice", "5pm")) || 
-                (terminalName.ref(1,4).equalsEither("ansi", "tera", "java", "xter"))) {
-            std.stdColbak.set("18");
-            std.stdColrad1.set("18");
-            std.stdColrub.set("41");
-            std.stdColram.set("18");
-            std.stdColfunk.set("18");
-            std.stdColra24.set("18");
-            std.stdColmedd.set("58");
-            std.stdColledt.set("18");
-            std.stdColinmo.set("13");
-            std.stdColinmc.set("58");
-            std.stdColfons.set("18");
-            std.stdColhalv.set("48");
-        }
-        else {
-            std.stdColbak.set("18");
-            std.stdColrad1.set("18");
-            std.stdColrub.set("18");
-            std.stdColram.set("18");
-            std.stdColfunk.set("18");
-            std.stdColra24.set("18");
-            std.stdColmedd.set("18");
-            std.stdColledt.set("18");
-            std.stdColinmo.set("38");
-            std.stdColinmc.set("68");
-            std.stdColfons.set("81");
-            std.stdColhalv.set("18");
-        }
-    }
-
--- a/server.src/prg/bas/Conttype.java
-    private lib.bas.Std std=new lib.bas.Std(Conttype.this);
-    private Field tmp = new Field("X(100)");
--- a/server.src/prg/bas/Datachk.java
-    private lib.med.Datab da=new lib.med.Datab(Datachk.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Datachk.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Datachk.this, pa);
-    private lib.pro.Overpost proover=new lib.pro.Overpost(Datachk.this, pa);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(Datachk.this, pa);
-    private lib.pro.Undlpost proundl=new lib.pro.Undlpost(Datachk.this, pa);
-    private lib.pro.Befapost probefa=new lib.pro.Befapost(Datachk.this, pa);
-    private lib.pro.Calepost procale=new lib.pro.Calepost(Datachk.this, pa);
-    private lib.pro.Ifaapost proifaa=new lib.pro.Ifaapost(Datachk.this, pa);
-    private lib.pro.Ifatpost proifat=new lib.pro.Ifatpost(Datachk.this, pa);
-    private lib.pro.Agrppost proagrp=new lib.pro.Agrppost(Datachk.this, pa);
-    private lib.pro.Replpost prorepl=new lib.pro.Replpost(Datachk.this, pa);
-    private lib.bas.Webut webut=new lib.bas.Webut(Datachk.this, webpara, pa);
-    private Field filrad = new Field("X(1000)");
-    private Field fil1 = new Field("X(50)");
-    private Field fil2 = new Field("X(50)");
-    private Field fil3 = new Field("X(50)");
-    private Field fil4 = new Field("X(50)");
-    private Field fil5 = new Field("X(50)");
-    private Field tmpRekvnr = new Field("9(8)");
-    private Field felnr = new Field("S9(9)");
-    private Field feltext = new Field("X(100)");
--- a/server.src/prg/bas/Div03.java
-private lib.bas.Medapost basmeda=new lib.bas.Medapost(Div03.this);
-private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Div03.this);
-private lib.bas.Beho beho=new lib.bas.Beho(Div03.this);
-private lib.bas.Toupper toupper=new lib.bas.Toupper(Div03.this);
-private Field tmpX = new Field("X");
-private Field tmp2n = new Field("99");
-private Field tmp10x = new Field("X(10)");
-private Field tmp20x1a = tmp20xR2.extend("XX");
-private Field tmp20x1b = tmp20xR3.extend("99");
-private Field scFunk = new Field("9");
-private Field windowHandle = new Field("X(10)");
-private void loop() {
-    std.colorInmOpen();
-    /*scrBeho*/
-    /*scrBeho{
-      std.stdFunk();
-      if (std.stdFunkNr.equals(0) || std.stdFunkNr.equals(1)) {
-      loop();
-      return;
-      }
-      }
-      {
-      std.stdFunkNr.set(0);
-      }
-     */
-    std.colorInmClosed();
-    /*scrBeho*/
-    if (!(std.stdFunkNr.equals(27))) {
-        if (std.stdBehoPerBol.equals("J")) {
-            basbeho.get().bolag.set(std.stdBkstvftg);
-        }
-        else {
-            basbeho.get().bolag.set(SPACE);
-        }
-        basbeho.get().prog.set(std.stdOldPgm);
-        basbeho.get().f9901Start();
-        if (basbeho.get().f9901Eof.equals("N")) {
-            basbeho.get().f9901Readnext();
-        }
-        while (!(basbeho.get().f9901Eof.equals("J") || (std.stdBehoPerBol.equals("N") && !(basbeho.get().bolag.equals(SPACE))) || 
-                    (std.stdBehoPerBol.equals("J") && !(basbeho.get().bolag.equals(std.stdBkstvftg))) || 
-                    (y.compareTo(ZERO)>0 && !(basbeho.get().prog.ref(1,y).equals(std.stdOldPgm.ref(1,y)))))) {
-            if (!(basbeho.get().prog.ref(y.add(1),2).equals(SPACE)) && basbeho.get().prog.ref(y.add(3),2).equals(SPACE)) {
-                basbeho.get().f9901Delete();
-            }
-            basbeho.get().f9901Readnext();
-        }
-        x.set(1);
-        while (!(x.compareTo(32)>0)) {
-            if (!(scProg[x.getInt()-1].equals(ZERO)) && !(scNiva[x.getInt()-1].equals("0"))) {
-                if (std.stdBehoPerBol.equals("J")) {
-                    basbeho.get().bolag.set(std.stdBkstvftg);
-                }
-                else {
-                    basbeho.get().bolag.set(SPACE);
-                }
-                basbeho.get().prog.set(std.stdOldPgm);
-                basbeho.get().prog.ref(y.add(1),2).set(scProg[x.getInt()-1].ref(1,2));
-                basbeho.get().niva.set(scNiva[x.getInt()-1]);
-                basbeho.get().f9901Write();
-            }
-            x.increment(1);
-        }
-    }
-    basbeho.get().f9901Close();
-    std.colorInmOpen();
-    std.stdPgm.set(std.stdOldPgm);
-    atergang();
-    return;
-}
-
-private void atergang() {
-    throw exit;
-}
-
--- a/server.src/prg/bas/Ehf2pepp.java
-    private Field filPost = fil.extend("X(5000)");
-
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Ehf2pepp.this);
-    private lib.bas.Bapipost basbapi=new lib.bas.Bapipost(Ehf2pepp.this);
-    private lib.bas.Bebepost basbebe=new lib.bas.Bebepost(Ehf2pepp.this);
-    private lib.bas.Begrpost basbegr=new lib.bas.Begrpost(Ehf2pepp.this);
-    private lib.bas.Beh2post basbeh2=new lib.bas.Beh2post(Ehf2pepp.this);
-    private lib.bas.Mallpost basmall=new lib.bas.Mallpost(Ehf2pepp.this);
-    private lib.bas.Momspost basmoms=new lib.bas.Momspost(Ehf2pepp.this);
-    private lib.bas.Tidapost bastida=new lib.bas.Tidapost(Ehf2pepp.this);
-    private lib.bas.Vahupost basvahu=new lib.bas.Vahupost(Ehf2pepp.this);
-    private lib.bas.Varapost basvara=new lib.bas.Varapost(Ehf2pepp.this);
-    private lib.bas.Vashpost basvash=new lib.bas.Vashpost(Ehf2pepp.this);
-    private lib.bas.Vasrpost basvasr=new lib.bas.Vasrpost(Ehf2pepp.this);
-    private lib.med.Datab da=new lib.med.Datab(Ehf2pepp.this);
-    private lib.pro.Forepost profore=new lib.pro.Forepost(Ehf2pepp.this, pa);
-    private lib.pro.Overpost proover=new lib.pro.Overpost(Ehf2pepp.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Ehf2pepp.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Ehf2pepp.this, pa);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(Ehf2pepp.this, pa);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Ehf2pepp.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Ehf2pepp.this, pa);
-    private lib.pro.Vandpost provand=new lib.pro.Vandpost(Ehf2pepp.this, pa);
-    private lib.pro.Undlpost proundl=new lib.pro.Undlpost(Ehf2pepp.this, pa);
-    private lib.pro.Befapost probefa=new lib.pro.Befapost(Ehf2pepp.this, pa);
-    private lib.pro.Calepost procale=new lib.pro.Calepost(Ehf2pepp.this, pa);
-    private lib.pro.Ifakpost proifak=new lib.pro.Ifakpost(Ehf2pepp.this, pa);
-    private lib.pro.Ifaapost proifaa=new lib.pro.Ifaapost(Ehf2pepp.this, pa);
-    private lib.pro.Ifatpost proifat=new lib.pro.Ifatpost(Ehf2pepp.this, pa);
-    private lib.pro.Agrppost proagrp=new lib.pro.Agrppost(Ehf2pepp.this, pa);
-    private lib.pro.Replpost prorepl=new lib.pro.Replpost(Ehf2pepp.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Ehf2pepp.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Ehf2pepp.this, webpara, pa);
-    private Field filrad = new Field("X(1000)");
-    private Field bfarFr = new Field("9(4)");
-    private Field bfarTi = new Field("9(4)");
-    private Field ftgNameFr = new Field("X(30)");
-    private Field ftgNameNew = new Field("X(30)");
-    private Field ftgNamePek = new Field("S9(9)");
-    private Field fil1 = new Field("X(50)");
-    private Field fil2 = new Field("X(50)");
-    private Field fil3 = new Field("X(50)");
-    private Field fil4 = new Field("X(50)");
-    private Field fil5 = new Field("X(50)");
-    private Field felnr = new Field("S9(9)");
-    private Field feltext = new Field("X(100)");
--- a/server.src/prg/bas/Euro.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Euro.this);
-    private Field hbindiff = new Field("X(6)", "3332");
-    private void in2Hbok() {
-        lib.in2.Avskpost.fd avsk=in2avsk.get();
-        lib.bok.Hbokpost.fd hbok=bokhbok.get();
-        avsk.openIO();
-        hbbeOpenOutput();
-        hbbeClose();
-        hbbeOpenIO();
-        pa.bfar.set(ftgs.fominar);
-        while (!(pa.bfar.compareTo(ftgs.fomaxar)>0)) {
-            hbok.f9810OpenIO();
-            hbok.verId.init();
-            hbok.f9810Start();
-            if (hbok.f9810Eof.equals("N")) {
-                hbok.f9810Readnext();
-            }
-            while (!(hbok.f9810Eof.equals("J"))) {
-                if ((hbok.vertext.ref(1,10).equals("AVSKR VER ") && hbok.vertext.ref(11,4).isNumeric() && hbok.vertext.ref(15).equals(SPACE)) || 
-                        (hbok.vertext.ref(1,10).equals("AFSKR VER ") && hbok.vertext.ref(11,4).isNumeric() && hbok.vertext.ref(15).equals(SPACE)) || 
-                        (hbok.vertext.ref(1,10).equals("POIST VER ") && hbok.vertext.ref(11,4).isNumeric() && hbok.vertext.ref(15).equals(SPACE)) || 
-                        (hbok.vertext.ref(1,11).equals("DEPR ASSET ") && hbok.vertext.ref(12,4).isNumeric() && hbok.vertext.ref(16).equals(SPACE))) //  Detta fungerar nog inget vidare... 
-                {
-                    if (hbok.verkto.ref(4,1).equals("9")) {
-                        hbbePtyp.set(hbok.verptyp);
-                        hbbeVernr.set(hbok.ververnr);
-                        hbbeBfdat.set(hbok.verbokdag);
-                        hbbeRead();
-                        if (hbbeEof.equals("J")) {
-                            hbbeData.init();
-                            hbbeBfar.set(pa.bfar);
-                        }
-                        hbbeBelopp.increment(hbok.verbelopp);
-                        hbbeWrite();
-                    }
-                }
-                hbok.f9810Readnext();
-            }
-            hbok.f9810Close();
-            pa.bfar.increment(1);
-        }
-        avsk.key.init();
-        avsk.start();
-        if (avsk.eof.equals("N")) {
-            avsk.readnext();
-        }
-        while (!(avsk.eof.equals("J"))) {
-            hbbePtyp.set(avsk.ptyp);
-            hbbeVernr.set(avsk.vernr);
-            hbbeBfdat.set(avsk.bfDat);
-            hbbeRead();
-            if (hbbeEof.equals("J")) {
-                hbbeData.init();
-            }
-            hbbeBelopp.increment(avsk.belopp);
-            hbbeWrite();
-            avsk.readnext();
-        }
-        hbbeKey.init();
-        hbbeStart();
-        if (hbbeEof.equals("N")) {
-            hbbeReadnext();
-        }
-        while (!(hbbeEof.equals("J"))) {
-            if (!(hbbeBelopp.equals(ZERO))) {
-                if (hbbeBfar.compareTo(ftgs.fominar)<0 || hbbeBfar.compareTo(ftgs.fomaxar)>0) {
-                    /**/
-                    /**/
-                }
-                else {
-                    pa.bfar.set(hbbeBfar);
-                    hbok.f9810OpenIO();
-                    hbok.verrecord.init();
-                    hbok.verptyp.set(hbbePtyp);
-                    hbok.ververnr.set(hbbeVernr);
-                    hbok.f9810Start();
-                    if (hbok.f9810Eof.equals("N")) {
-                        hbok.f9810Readnext();
-                    }
-                    while (!(hbok.f9810Eof.equals("J") || !(hbok.verptyp.equals(hbbePtyp)) || !(hbok.ververnr.equals(hbbeVernr)) || hbok.vertyp.equals("K"))) {
-                        hbok.f9810Readnext();
-                    }
-                    if (hbok.f9810Eof.equals("J") || !(hbok.verptyp.equals(hbbePtyp)) || !(hbok.ververnr.equals(hbbeVernr))) {
-                        /**/
-                        /**/
-                    }
-                    else {
-                        hbok.verbelopp.decrement(hbbeBelopp);
-                        hbok.f9810Write();
-                        hbok.verrecord.init();
-                        hbok.verptyp.set(hbbePtyp);
-                        hbok.ververnr.set(hbbeVernr);
-                        hbok.verlopnr.set(new Constant("999999"));
-                        hbok.f9810Startprev();
-                        if (hbok.f9810Eof.equals("N")) {
-                            hbok.f9810Readprev();
-                        }
-                        if (hbok.f9810Eof.equals("J") || !(hbok.verptyp.equals(hbbePtyp)) || !(hbok.ververnr.equals(hbbeVernr))) {
-                            hbok.verptyp.set(hbbePtyp);
-                            hbok.ververnr.set(hbbeVernr);
-                            hbok.verlopnr.set(1);
-                        }
-                        else {
-                            hbok.verlopnr.increment(1);
-                        }
-                        hbok.verbokdag.set(hbbeBfdat);
-                        hbok.verptyp2.set(hbbePtyp);
-                        hbok.ververnr2.set(hbbeVernr);
-                        hbok.verkto.set(hbindiff);
-                        hbok.verbokdag3.set(hbbeBfdat);
-                        hbok.verkst.set(SPACE);
-                        hbok.verkto4.set(hbindiff);
-                        hbok.verbokdag4.set(hbbeBfdat);
-                        hbok.verkbr.set(SPACE);
-                        hbok.verbokdag5.set(hbbeBfdat);
-                        hbok.verbelopp.set(hbbeBelopp);
-                        hbok.vertyp.set(SPACE);
-                        hbok.vertext.set("EUROKONV - INV AVSKRIVNING");
-                        hbok.veruvaluta.set(SPACE);
-                        hbok.verubelopp.set(ZERO);
-                        hbok.verreganv.set("EURO");
-                        acceptFromDate(hbok.verregdat);
-                        acceptFromTime(hbok.verregtid);
-                        hbok.f9810Write();
-                    }
-                    hbok.f9810Close();
-                }
-            }
-            hbbeReadnext();
-        }
-        avsk.close();
-        hbbeClose();
-    }
-    private void korrStart() {
-        korrEof.set("N");
-        korr.start("NOT<", "korr_key");
-        if (korr.invalidKey()) {
-            korrEof.set("J");
-        }
-    }
-
-    private void korrReadnext() {
-        korrEof.set("N");
-        korr.readNext();
-        if (korr.atEnd()) {
-            korrEof.set("J");
-        }
-    }
-
--- a/server.src/prg/bas/Europrof.java
-    private Field z13TknG = new Field("X(10)");
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
--- a/server.src/prg/bas/Expfil.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Expfil.this);
-    private Field kolField = new Field("X(5000)");
-    private Field tabfilPek = new Field("S9(9)");
-    private Field tabfilTmpPek = new Field("S9(9)");
-    private Field tabfilAmp = new Field("S9(9)");
-    private Field tabfilP1 = new Field("X(80)");
-    private Field tabfilP = new Field("X(100)");
-    private Field tabfilPPek = new Field("S9(9)");
-    private Field tabfilTmpP = new Field("X(100)");
-    private Field tabfilTmpPPek = new Field("S9(9)");
-    private Field tabfilSkriv = new Field("X");
--- a/server.src/prg/bas/Export.java
-    private Field tmpField2 = new Field("X(200)");
--- a/server.src/prg/bas/Faxfaxa.java
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(Faxfaxa.this);
-    private lib.bas.Std std=new lib.bas.Std(Faxfaxa.this);
-    private Field exitStatus = new Field("99");
-    private Field path = new Field("X(50)");
-    private Field fil2a = new Field("X(50)");
-    private Field fil2 = new Field("X(50)");
--- a/server.src/prg/bas/Faxlistq.java
-    private lib.bas.Std std=new lib.bas.Std(Faxlistq.this);
-    private lib.med.Datab da=new lib.med.Datab(Faxlistq.this);
-    private Field faxspoolfil = new Field("X(50)");
-    private Field exitStatus = new Field("99");
-                if (true||i.compareTo(0)>0) { //fax avstängt
-                else {
-                    switch (faxq.felkod.intValue()) {
-                        case 2:
-                            feltext.set("kf2");
-                            break;
-                        case 3:
-                            feltext.set("kf3");
-                            break;
-                        case 4:
-                            feltext.set("kf4");
-                            break;
-                        case 5:
-                            feltext.set("kf5");
-                            break;
-                        case 101:
-                            feltext.set("kfA");
-                            break;
-                        case 102:
-                            feltext.set("530");
-                            break;
-                        default:
-                            if (faxq.felkod.compareTo(10)<0) {
-                                feltext.set("kfm");
-                            }
-                            else if (faxq.felkod.compareTo(16)<0) {
-                                feltext.set("kfa");
-                            }
-                            else {
-                                feltext.set("OkF");
-                            }
-                    }
-                }
--- a/server.src/prg/bas/Faxrunq.java
-    private lib.pri.Sektpost prisekt=new lib.pri.Sektpost(Faxrunq.this);
-    private lib.med.Datab da=new lib.med.Datab(Faxrunq.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp4 = new Field("X(1000)");
--- a/server.src/prg/bas/Faxvisa.java
--- a/server.src/prg/bas/Filin.java
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Filin.this);
--- a/server.src/prg/bas/Filut.java
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Filut.this);
--- a/server.src/prg/bas/Ftgstimp.java
-    private lib.bas.Std std=new lib.bas.Std(Ftgstimp.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Ftgstimp.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Ftgstimp.this, webpara, pa);
-    private Field felnr = new Field("S9(9)");
-    private Field feltext = new Field("X(100)");
--- a/server.src/prg/bas/Ftgstmap.java
-    private lib.bas.Std std=new lib.bas.Std(Ftgstmap.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Ftgstmap.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Ftgstmap.this, webpara, pa);
-    private Field filrad = new Field("X(1000)");
-    private Field fil1 = new Field("X(50)");
-    private Field fil2 = new Field("X(50)");
-    private Field fil3 = new Field("X(50)");
-    private Field fil4 = new Field("X(50)");
-    private Field fil5 = new Field("X(50)");
-    private Field felnr = new Field("S9(9)");
-    private Field feltext = new Field("X(100)");
--- a/server.src/prg/bas/Gdpr.java
-    private Field fsortData = fsortPost.extend();
-    private Field fsortBeh = fsortData.extend("X");
-    private lib.bas.Beh2post basbeh2=new lib.bas.Beh2post(Gdpr.this);
-    private lib.bas.Behfpost basbehf=new lib.bas.Behfpost(Gdpr.this);
-    private lib.bas.Behkpost basbehk=new lib.bas.Behkpost(Gdpr.this);
-    private lib.kun.Kundpost kunkund=new lib.kun.Kundpost(Gdpr.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Gdpr.this, pa);
-    private lib.lev.Ankmpost levankm=new lib.lev.Ankmpost(Gdpr.this, pa);
-    private lib.pro.Agrppost proagrp=new lib.pro.Agrppost(Gdpr.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(Gdpr.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Gdpr.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Gdpr.this, webpara, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp1 = new Field("X(200)");
-    private Field tmp2 = new Field("X(200)");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmp100 = new Field("X(100)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p0 = new Field("X(50)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field ptrl2 = new Field("99999");
-    private Field ptrl3 = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");

-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field uppdlag = new Field("X");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field opened = new Field("X");
-    private Field selAtt = new Field("XXXX");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sumArv = new Field("S9(10)");
-    private Field sumInk = new Field("S9(10)");
-    private Field sumOvr = new Field("S9(10)V99");
-    private Field lopnr = new Field("99999");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field ti = new Field("99999");
-    private Field lnr = new Field("999");
-    private Field beh = new Field("X");
-    private Field felkod = new Field("999");
-    private Field valuta = new Field("XXX");
-    private Field mvaluta = new Field("XXX");
-    private Field ordPris = new Field("9(5)");
-    private Field avvPris = new Field("9(5)");
-    private Field tmpPris = new Field("9(5)");
-    private Field nygrp = new Field("XXXX");
-    private Field fileSize = fileInfo.extend("S9(11)");
-    private Field fileDate = fileInfo.extend("S9(11)");
-    private Field fileTime = fileInfo.extend("S9(11)");
-    private void skrivutExport() {
-        lib.bas.Medapost.fd bas_meda=basmeda.get();
-        lib.bas.Behkpost.fd behk=basbehk.get();
-        lib.bas.Behfpost.fd behf=basbehf.get();
-        fsort.open("INPUT");
-        call(webpara.strut, tmpStrut, "TMP/GDPR2%S%0", webpara.userid, webpara.pid);
-        listfilnamn.set(tmpStrut);
-        call("prg.bas.filut", "OPEN", listfilnamn);
-        call("prg.bas.filut", "WRITETAB", "User");
-        call("prg.bas.filut", "WRITETAB", "Country");
-        call("prg.bas.filut", "WRITETAB", "Company");
-        oldFsort.set(SPACE);
-        listradx.set(SPACE);
-        radnr.set(1);
-        fsortPost.init();
-        fsort.start(">=", "fsort_key");
-        if (fsortFs.equals("00")) {
-            fsort.readNext();
-        }
-        while (fsortFs.equals("00")) {
-            if (fsortBeh.equals("W")) //           IF FSORT-POST(1:110) NOT = OLD-FSORT AND NOT OLD-FSORT = SPACE AND LISTRADX-FTG NOT = SPACE OR LISTRADX-FTG(195:) NOT = SPACE 
-                //              PERFORM SKRIVUT-EXPORT-RAD 
-                //           END-IF           
-                //           MOVE FSORT-POST(1:110) TO OLD-FSORT 
-                //           INITIALIZE FORECORD 
-                //           MOVE FSORT-FTG TO FOKOD 
-                //           PERFORM F9904-READ 
-            {
-                bas_meda.record.init();
-                bas_meda.kod.set(fsortAnva);
-                bas_meda.f9903Read();
-                if (listradx.equals(SPACE)) {
-                    behk.post.init();
-                    //              MOVE FSORT-BEHK TO BEHK-KOD 
-                    behk.read();
-                    behf.post.init();
-                    //              MOVE FSORT-BEHF TO BEHF-KOD 
-                    behf.read();
-                    listradxAnva.set(fsortAnvanamn);
-                    switch (fsortAnva.getStringValue()) {
-                        case "SE":
-                            listradxLand.set("Sweden");
-                            break;
-                        case "NO":
-                            listradxLand.set("Norway");
-                            break;
-                        case "DK":
-                            listradxLand.set("Denmark");
-                            break;
-                        case "FI":
-                            listradxLand.set("Finland");
-                            break;
-                        default:
-                            listradxLand.set(fsortAnva);
-                    }
-                    //              MOVE FSORT-BEHG TO LISTRADX-BEHG 
-                    if (bas_meda.bolF[0].equals("*") && bas_meda.behgrpftgO[0].equals(SPACE)) {
-                        call(webpara.strut, tmpStrut, "%m", "All");
-                        listradxFtg.set(tmpStrut);
-                    }
-                    else {
-                        listradxFtg.set(fsortFtg);
-                    }
-                }
-                else {
-                    if (!((bas_meda.bolF[0].equals("*") && bas_meda.behgrpftgO[0].equals(SPACE)))) {
-                        x.set(1);
-                        x.increment(listradxFtg.countTrailing(SPACE));
-                        listradxFtg.ref(new Constant("203").subtract(x)).set(fsortFtg);
-                    }
-                }
-            }
-            fsort.readNext();
-        }
-        if (!(listradxFtg.equals(SPACE))) {
-            skrivutExportRad();
-        }
-        call("prg.bas.filut", "CLOSE", listfilnamn);
-        fsort.close();
-        call(webpara.strut, tmpStrut, "GDPRX%S%0", webpara.userid, webpara.pid);
-        exportfilnamn.set(tmpStrut);
-        call("prg.bas.cllut", "cp %0 TMP/%0.xls", listfilnamn, exportfilnamn);
-        call(webpara.webut, "%cPRG/BAS/WEBXLS+%u+gdpr.xls", 4, exportfilnamn);
-    }
-
-    private void skrivutExportRad() {
-        call("prg.bas.filut", "WRITETAB", "%S", listradxAnva);
-        call("prg.bas.filut", "WRITETAB", "%S", listradxLand);
-        call("prg.bas.filut", "WRITETAB", "%S", listradxFtg);
-        listradx.set(SPACE);
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/bas/Getaren.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Getaren.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Getaren.this);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Getaren.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Getaren.this);
--- a/server.src/prg/bas/Getcol.java

--- a/server.src/prg/bas/Getxsl.java
-    private lib.bas.Std std=new lib.bas.Std(Getxsl.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Getxsl.this);
--- a/server.src/prg/bas/Hcp.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Hcp.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Hcp.this);
-    private Field windowHandle = new Field("X(10)");
-    private void lasSelectLoop() {
-        setEnv("SCREEN","ALPHA-UPDATES=Unchanged, Auto-Prompt");
-        std.colorInmOpen();
-        std.stdFunk();
-        if (std.stdFunkNr.equals(0)) {
-            lasSelectLoop();
-            return;
-        }
-        std.stdFunkNr.set(0);
-        toupper.toupper.set(scSkrivare);
-        toupper.toupp();
-        scSkrivare.set(toupper.toupper);
-        std.colorInmClosed();
-        setEnv("SCREEN","ALPHA-UPDATES=Unchanged");
-        if (std.stdFunkNr.equals(1)) {
-            call("prg.bas.961201", pa.paraArea, scSkrivare);
-            cancel("prg.bas.961201");
-            std.crtpos.set(new Constant("0215"));
-            lasSelectLoop();
-            return;
-        }
-        if ((!(scSkrivare.ref(1,1).equals(SPACE)) && !(scSkrivare.ref(1,1).equals("."))) && 
-                (!(std.stdFunkNr.equals(27)))) {
-            basskri.get().kod.set(scSkrivare);
-            basskri.get().f9902Read();
-            if (basskri.get().f9902Eof.equals("J")) {
-                std.crtpos.set(new Constant("0215"));
-                lasSelectLoop();
-                return;
-            }
-        }
-    }
-
--- a/server.src/prg/bas/Initjwt.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Initjwt.this);
-    private lib.bas.Std std=new lib.bas.Std(Initjwt.this);
-    private Field p0 = new Field("X(50)");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(50)");
-    private Field p4 = new Field("X(50)");
-    private Field p5 = new Field("X(50)");
--- a/server.src/prg/bas/Initlp.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Initlp.this);
-    private lib.bas.Std std=new lib.bas.Std(Initlp.this);
-    private Field jwt = new Field("X(2000)");
-    private Field cmd = new Field("X(5000)");
--- a/server.src/prg/bas/Inlo.java
-    private lib.bas.Std std=new lib.bas.Std(Inlo.this);
--- a/server.src/prg/bas/Inlorapp.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Inlorapp.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Inlorapp.this);
-    private Field tmpFunk = new Field("X");
-    private Field tmpFunkNr = new Field("999");
-    private Field tmpAntalAnv = new Field("99");
-    private Field tmpAntalWeb = new Field("99");
-    private Field tmpMaxAntalAnv = new Field("X(10)");
-    private Field tmpDat = new Field("9(8)");
-    private Field x = new Field("S9(9)");
-    private Field tmp20x = new Field("X(20)");
-    private Field tmpZ9 = new Field("Z9");
-    private Field tmp9 = new Field("9");
-    private Field tmp = new Field("X(300)");
-    private Field delsys = new Field("XXX");
-    private Field regkod = new Field("X(20)");
-    private Field tmpReg = new Field("X(20)");
-    private Field post = new Field("X(2000)");
-    private Field oldPost = new Field("X(2000)");
-    private Field nyPost = new Field("X(2000)");
-    private Field falt = new Field("X(20)");
-    private Field oldvarde = new Field("X(1000)");
-    private Field nyttvarde = new Field("X(1000)");
-    private Field ptr = new Field("99999");
-    private Field aktFalt = new Field("X(20)");
--- a/server.src/prg/bas/Inlorapp2.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Inlorapp2.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Inlorapp2.this);
-    private Field tmpFunk = new Field("X");
-    private Field tmpFunkNr = new Field("999");
-    private Field tmpAntalAnv = new Field("99");
-    private Field tmpAntalWeb = new Field("99");
-    private Field tmpMaxAntalAnv = new Field("X(10)");
-    private Field tmpDat = new Field("9(8)");
-    private Field x = new Field("S9(9)");
-    private Field tmp20x = new Field("X(20)");
-    private Field tmpZ9 = new Field("Z9");
-    private Field tmp9 = new Field("9");
-    private Field tmp = new Field("X(300)");
-    private Field delsys = new Field("XXX");
-    private Field regkod = new Field("X(20)");
-    private Field datum = new Field("9(8)");
-    private Field sprak = new Field("XX");
-    private Field tmpReg = new Field("X(20)");
-    private Field post = new Field("X(2000)");
-    private Field oldPost = new Field("X(2000)");
-    private Field nyPost = new Field("X(2000)");
-    private Field falt = new Field("X(20)");
-    private Field oldvarde = new Field("X(1000)");
-    private Field nyttvarde = new Field("X(1000)");
-    private Field ptr = new Field("99999");
-    private Field aktFalt = new Field("X(20)");
--- a/server.src/prg/bas/Inst.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Inst.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Inst.this);
--- a/server.src/prg/bas/K22kont.java
-    private lib.bas.Std std=new lib.bas.Std(K22kont.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K22kont.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K22kont.this);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(K22kont.this, pa);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K22kont.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K22kont.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K22kont.this);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(K22kont.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");
-    private Field tmpDatum = new Field("9(8)");
-    private Field startdat = new Field("9(8)");
-    private Field slutdat = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field opened = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field testKod = new Field("X(100)");
-    private Field selKod = new Field("X(100)");
-    private Field sumAmount = new Field("S9(9)V99");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/bas/Konv.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Konv.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Konv.this);
-    private Field tmpLnr = new Field("9(6)");
-    private void konvertPgmSaknas() {
-        floggPost.set("*** KONVERTERINGSPROGRAM SAKNAS ***");
-        floggPost.write();
-        tmpFel.set("J");
-    }
-
-    private void fvalOpenOutput() {
-        fval.open("OUTPUT");
-    }
-
-    private void fvalOpenInput() {
-        fval.open("INPUT");
-    }
-
-    private void fvalRead() {
-        fvalEof.set("N");
-        fval.read();
-        if (fval.invalidKey()) {
-            fvalEof.set("J");
-        }
-        if (fvalFs.equals("9D")) {
-            c_sleep("1");
-            fvalRead();
-            return;
-        }
-    }
-
-    private void fvalStartprev() {
-        fvalEof.set("N");
-        fval.start("NOT>", "fval_id");
-        if (fval.invalidKey()) {
-            fvalEof.set("J");
-        }
-    }
-
-    private void fvalReadprev() {
-        fvalEof.set("N");
-        fval.readPrevious();
-        if (fval.atEnd()) {
-            fvalEof.set("J");
-        }
-        if (fvalFs.equals("99")) {
-            fval.start("<", "fval_id");
-            c_sleep("1");
-            fvalReadprev();
-            return;
-        }
-    }
-    private void fvalDelete() {
-        fval.delete();
-    }
-
--- a/server.src/prg/bas/Ksdpass.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Ksdpass.this);
-    private lib.bas.Std std=new lib.bas.Std(Ksdpass.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Ksdpass.this);
--- a/server.src/prg/bas/Ktrlpri.java
-    private lib.pri.Landpost priland=new lib.pri.Landpost(Ktrlpri.this);
-    private lib.pri.Ugfdpost priugfd=new lib.pri.Ugfdpost(Ktrlpri.this);
-    private Field md = new Field("X");
-    private Field sa = new Field("X");
-    private Field felKomm = new Field("X(50)");
-    private Field fel9 = new Field("9");
-    private Field ar1 = new Field("S9(9)");
-    private Field ar2 = new Field("S9(9)");
-    private void pris2() {
-        felReg.set("PRIS");
-        pris.key.init();
-        pris.start();
-        if (pris.eof.equals("N")) {
-            pris.readnext();
-        }
-        while (!(pris.eof.equals("J"))) {
-            if (!(pris.vdag.equals(SPACE))) {
-                vdag.kod.set(pris.vdag);
-                vdag.read();
-                if (vdag.eof.equals("N") && vdag.antal.compareTo(1)>0) {
-                    felNr.set(3);
-                    fel();
-                }
-            }
-            pris.readnext();
-        }
-    }
-
-    private void pris3() {
-        felReg.set("TIDN");
-        tidn.key.init();
-        tidn.start();
-        if (tidn.eof.equals("N")) {
-            tidn.readnext();
-        }
-        while (!(tidn.eof.equals("J"))) {
-            sa.set("N");
-            md.set("N");
-            pris.key.init();
-            pris.tidn.set(tidn.key);
-            pris.start();
-            if (pris.eof.equals("N")) {
-                pris.readnext();
-            }
-            while (!(pris.eof.equals("J") || !(pris.tidn.equals(tidn.key)))) {
-                if (pris.enhet.equals("MD")) {
-                    md.set("J");
-                }
-                if (pris.enhet.equals("SA") && pris.frm.ref(1,3).equals("1/1")) {
-                    sa.set("J");
-                }
-                pris.readnext();
-            }
-            if (sa.equals("J") && md.equals("J")) {
-                felNr.set(4);
-                fel();
-            }
-            tidn.readnext();
-        }
-    }
-
--- a/server.src/prg/bas/Lasupp.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Lasupp.this);
-    private lib.med.Datab da=new lib.med.Datab(Lasupp.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Lasupp.this, webpara, pa);
--- a/server.src/prg/bas/Lichist.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Lichist.this);
-    private lib.bas.Std std=new lib.bas.Std(Lichist.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Lichist.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Lichist.this);
-    private Field tmpFunk = new Field("X");
-    private Field tmpFunkNr = new Field("999");
-    private Field tmpMaxAntalAnv = new Field("X(10)");
-    private Field tmpLedigt = new Field("S9(9)");
-    private Field tmpLedigtD = new Field("ZZZZZZZZ9");
-    private Field x = new Field("S9(9)");
-    private Field tmp20x = new Field("X(20)");
-    private Field tmpZ9 = new Field("Z9");
-    private Field tmp9 = new Field("9");
-    private Field ledigtEof = new Field("X");
-    private Field modulFilnamn = new Field("X(50)");
-    private Field modulEof = new Field("X");
-    private Field post = new Field("X(1000)");
-    private Field namn = new Field("X(20)");
-    private Field varde = new Field("X(50)");
-    private Field vardeN = new Field("9(9)");
-    private Field pOk = new Field("X");
-    private Field kundid = new Field("9999");
-    private Field maxiUppd = new Field("X");
--- a/server.src/prg/bas/Listhuv.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Listhuv.this);
-    private Field listhuvPgm = new Field("X(12)");
-    private Field textTmp2 = new Field("X(200)");
--- a/server.src/prg/bas/Loadrel.java
-    private Field paFtg = new Field("X(4)");
--- a/server.src/prg/bas/Loggbyt.java
-    private lib.gem.Loggpost gemlogg=new lib.gem.Loggpost(Loggbyt.this, pa);
-    private lib.gem.Upptpost gemuppt=new lib.gem.Upptpost(Loggbyt.this, pa);
-    private lib.gem.Aktupost gemaktu=new lib.gem.Aktupost(Loggbyt.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Loggbyt.this);
-    private Field n = new Field("S9(11)");
-    private Field s = new Field("99999");
-    private Field s1 = new Field("99999");
-    private Field s2 = new Field("99999");
-    private Field s4 = new Field("99999");
-    private Field s5 = new Field("99999");
-    private Field post = new Field("X(2000)");
-    private Field tmp = new Field("X(100)");
-    private Field tmp1 = new Field("X(100)");
-    private Field tmp2 = new Field("X(100)");
-    private Field tmp3 = new Field("X(100)");
-    private Field falt = new Field("X(20)");
-    private Field oldvarde = new Field("X(1000)");
-    private Field nyttvarde = new Field("X(1000)");
-    private Field varde = new Field("X(2000)");
-    private Field ptr = new Field("99999");
-    private Field l = new Field("99999");
-    private Field tmp20 = new Field("X(20)");
-    private Field tmpHel = new Field("S99999999999999");
-    private Field tmpDec = new Field("S999999999999V99");
-    private Field lstHel = new Field("-----------9");
-    private Field lstDec = new Field("---------9,99");
-    private Field lstDat6 = new Field("999999");
-    private Field lstDat62 = new Field("999999");
-    private Field tmpKey = new Field("X(100)");
-    private Field lnrfr = new Field("999999");
-    private Field lnrti = new Field("999999");
-    private Field typ = new Field("X");
-    private Field typvar = new Field("X");
-    private Field x = new Field("9(9)");
-    private Field rtyp = new Field("X(20)");
--- a/server.src/prg/bas/Loggrapp.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Loggrapp.this);
-    private lib.gem.Upptpost gemuppt=new lib.gem.Upptpost(Loggrapp.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Loggrapp.this);
-    private Field tmpFunk = new Field("X");
-    private Field tmpFunkNr = new Field("999");
-    private Field tmpAntalAnv = new Field("99");
-    private Field tmpAntalWeb = new Field("99");
-    private Field tmpMaxAntalAnv = new Field("X(10)");
-    private Field tmpDat = new Field("9(8)");
-    private Field x = new Field("S9(9)");
-    private Field tmp20x = new Field("X(20)");
-    private Field tmpZ9 = new Field("Z9");
-    private Field tmp9 = new Field("9");
-    private Field post = new Field("X(2000)");
-    private Field nyPost = new Field("X(2000)");
-    private Field falt = new Field("X(20)");
-    private Field oldvarde = new Field("X(1000)");
-    private Field ptr = new Field("99999");
--- a/server.src/prg/bas/Mall2xsl.java
-    private Field fsortEof = new Field("X", "N");
-    private Field n = new Field("S9(11)");
-    private Field ptr = new Field("99999");
-    private Field aCnt = new Field("99999");
-    private Field lstNum = new Field("ZZZZ9,99");
-    java.util.Vector attributesets;
-	attributesets=new java.util.Vector();
--- a/server.src/prg/bas/Mallvar.java
-    private Field exitStatus = new Field("999");
--- a/server.src/prg/bas/Movetest.java
-    private Field fskrivPost = fskriv.extend("X(100)");
-    private Field fsortData = fsortPost.extend("X(50)");
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Movetest.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Movetest.this);
-    private lib.lev.Parapost levpara=new lib.lev.Parapost(Movetest.this, pa);
-    private lib.med.P8921 p8921=new lib.med.P8921(Movetest.this, pa, medrecarea);
-    private lib.med.Ktkppost medktkp=new lib.med.Ktkppost(Movetest.this, pa);
-    private lib.med.Stddata stddata=new lib.med.Stddata(Movetest.this);
-    private lib.med.Datab da=new lib.med.Datab(Movetest.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Movetest.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Movetest.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Movetest.this);
--- a/server.src/prg/bas/Ntisbekr.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Ntisbekr.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Ntisbekr.this);
-    private lib.lev.Ankfpost levankf=new lib.lev.Ankfpost(Ntisbekr.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Ntisbekr.this);
-    private Field s6 = new Field("99999");
-    private Field s7 = new Field("99999");
-    private Field pamFilnamn = new Field("X(50)");
-    private Field mejlserver = new Field("X(50)");
-    private Field franmejl = new Field("X(50)");
-    private Field flagga1 = new Field("X");
-    private Field sprak = new Field("XX");
--- a/server.src/prg/bas/Ntislogg.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Ntislogg.this);
-    private lib.bas.Std std=new lib.bas.Std(Ntislogg.this);
--- a/server.src/prg/bas/P001d.java
-    private lib.lev.Parapost levpara=new lib.lev.Parapost(P001d.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P001d.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P001d.this);
-    private Field oldLosen = new Field("X(25)");
-    private Field tmpMelosenUpper = new Field("X(25)");
-    private Field tmpDefaultBol = new Field("X(4)");
-    private Field tmpDefaultBar = new Field("9(4)");
-    private Field tmpBytkvar = new Field("9");
--- a/server.src/prg/bas/P0deltst.java
-    private lib.bas.Beho beho=new lib.bas.Beho(P0deltst.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P0deltst.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(P0deltst.this);
-    private lib.med.Datab da=new lib.med.Datab(P0deltst.this);
-    private Field x = new Field("S9(9)");
--- a/server.src/prg/bas/P0init.java
-    private lib.bas.Datapost basdata=new lib.bas.Datapost(P0init.this);
-    private lib.bas.Mopapost basmopa=new lib.bas.Mopapost(P0init.this);
-    private lib.bas.Parapost baspara=new lib.bas.Parapost(P0init.this);
-    private lib.bas.Sortpost bassort=new lib.bas.Sortpost(P0init.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(P0init.this);
--- a/server.src/prg/bas/Post2fil.java
-    private Field tmp = new Field("X(400)");
-    private Field pid = new Field("99999");
--- a/server.src/prg/bas/Readtest.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Readtest.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Readtest.this);
-    private lib.lev.Parapost levpara=new lib.lev.Parapost(Readtest.this, pa);
-    private lib.med.P8921 p8921=new lib.med.P8921(Readtest.this, pa, medrecarea);
-    private lib.med.Stddata stddata=new lib.med.Stddata(Readtest.this);
-    private lib.med.Datab da=new lib.med.Datab(Readtest.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Readtest.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Readtest.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Readtest.this);
-    private Field alnum = new Field("X(10)");
-    private Field num = new Field("S9(10)");
-    private Field dec = new Field("S9(10)V99");
-    private Field num2 = new Field("S9(10)");
-    private Field dec2 = new Field("S9(10)V99");
-    private Field numedit = new Field("-ZZZZZZZZZ9");
-    private Field decedit = new Field("---B--9,99");
-    private Field num4 = new Field("9999");
-    private Field snum4 = new Field("S9999");
-    private Field alnum4 = new Field("XXXX");
-    private Field stdTime2 = new Field("999999");
-    private Field stdTime3 = new Field("XXXXXX");
--- a/server.src/prg/bas/Regoppna.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Regoppna.this);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Regoppna.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Regoppna.this);
-    private Field tmpFunk = new Field("X");
-    private Field tmpFunkNr = new Field("999");
-    private Field tmpAntalAnv = new Field("99");
-    private Field tmpAntalWeb = new Field("99");
-    private Field tmpMaxAntalAnv = new Field("X(10)");
-    private Field tmpDat = new Field("9(8)");
-    private Field x = new Field("S9(9)");
-    private Field tmp20x = new Field("X(20)");
-    private Field tmpZ9 = new Field("Z9");
-    private Field tmp9 = new Field("9");
--- a/server.src/prg/bas/Regstat.java
-    private lib.gem.Aktupost gemaktu=new lib.gem.Aktupost(Regstat.this, pa);
-    private Field s4 = new Field("99999");
-    private Field s5 = new Field("99999");
-    private Field post = new Field("X(2000)");
-    private Field tmp3 = new Field("X(100)");
-    private Field falt = new Field("X(20)");
-    private Field oldvarde = new Field("X(1000)");
-    private Field nyttvarde = new Field("X(1000)");
-    private Field varde = new Field("X(2000)");
-    private Field ptr = new Field("99999");
-    private Field l = new Field("99999");
-    private Field tmp20 = new Field("X(20)");
-    private Field tmpHel = new Field("S99999999999999");
-    private Field tmpDec = new Field("S999999999999V99");
-    private Field lstHel = new Field("-----------9");
-    private Field lstDec = new Field("---------9,99");
-    private Field lstDat6 = new Field("999999");
-    private Field lstDat62 = new Field("999999");
-    private void raderalogg() {
-        lib.gem.Loggpost.fd logg=gemlogg.get();
-        if (s.compareTo(20)>0) {
-            s.set(20);
-        }
-        s2.set(c_paramsize(3));
-        if (s2.compareTo(60)>0) {
-            s2.set(60);
-        }
-        logg.key.set(HIGH_VALUE);
-        logg.reg.set(r.ref(1,s));
-        fixareg();
-        logg.openIO();
-        logg.regkey.set(regkey.ref(1,s2));
-        tmpKey.set(logg.key.ref(1,80));
-        logg.startprev();
-        if (logg.fs1.equals(0)) {
-            logg.readprev();
-        }
-        while ((logg.fs1.equals(0) && logg.key.ref(1,80).equals(tmpKey))) {
-            logg.delete();
-            logg.readprev();
-        }
-        logg.close();
-    }
-
--- a/server.src/prg/bas/Setheadr.java
-    private lib.bas.Std std=new lib.bas.Std(Setheadr.this);
--- a/server.src/prg/bas/Skapatest.java
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(Skapatest.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Skapatest.this);
-        //        CALL "PRG/BAS/CLLUT" USING "cp -r DTA/%S/MED DTA/%S/" FOBOLAGMED FOKOD 
-        //        IF EXIT-STATUS > 0 
-        //           CALL WEBUT USING "FEL: %0" "Kopiering av MED misslyckades" 
-        //           EXIT PARAGRAPH 
-        //        END-IF 
-        //        MOVE SPACE TO FOBOLAGMED 
--- a/server.src/prg/bas/Sstatus.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Sstatus.this);
-    private lib.bas.Std std=new lib.bas.Std(Sstatus.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Sstatus.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Sstatus.this);
-    private Field tmpFunk = new Field("X");
-    private Field tmpFunkNr = new Field("999");
-    private Field tmpLedigt = new Field("S9(9)");
-    private Field tmpLedigtD = new Field("ZZZZZZZZ9");
-    private Field x = new Field("S9(9)");
-    private Field tmp9 = new Field("9");
-    private Field ledigtEof = new Field("X");
-    private Field modulFilnamn = new Field("X(50)");
-    private Field modulEof = new Field("X");
--- a/server.src/prg/bas/Sstatus2.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Sstatus2.this);
-    private Field tmpFunk = new Field("X");
-    private Field tmpFunkNr = new Field("999");
-    private Field tmpAntalAnv = new Field("99");
-    private Field tmpAntalWeb = new Field("99");
-    private Field tmpMaxAntalAnv = new Field("X(10)");
-    private Field tmpDat = new Field("9(8)");
-    private Field x = new Field("S9(9)");
-    private Field tmp20x = new Field("X(20)");
-    private Field tmpZ9 = new Field("Z9");
-    private Field tmp9 = new Field("9");
-    private Field ledigtEof = new Field("X");
-    private Field modulFilnamn = new Field("X(50)");
-    private Field modulEof = new Field("X");
--- a/server.src/prg/bas/Std1920.java
-    private Field datumLenD = new Field("Z9");
--- a/server.src/prg/bas/Stdano.java
-    private lib.bas.Std std=new lib.bas.Std(Stdano.this);
--- a/server.src/prg/bas/Stdarbdg.java
-    private Field tmpVecka1start = new Field("9(6)");
--- a/server.src/prg/bas/Stdbeh.java
-    private lib.gem.Bsynpost gembsyn=new lib.gem.Bsynpost(Stdbeh.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Stdbeh.this);
-    private Field tmp = new Field("X(100)");
-    private void atergang() {
-        throw exit;
-    }
-
--- a/server.src/prg/bas/Stdbehl.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Stdbehl.this);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Stdbehl.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Stdbehl.this);
-    private lib.gem.Bsynpost gembsyn=new lib.gem.Bsynpost(Stdbehl.this, pa);
-    private lib.gem.Pgempost gempgem=new lib.gem.Pgempost(Stdbehl.this, pa);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Stdbehl.this);
-    private lib.pro.Datab da=new lib.pro.Datab(Stdbehl.this);
-    private lib.pro.Forepost profore=new lib.pro.Forepost(Stdbehl.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Stdbehl.this);
-    private Field tmp = new Field("X(100)");
-    private Field i = new Field("999");
-    private Field anva = new Field("XXXX");
--- a/server.src/prg/bas/Stdbytpw.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Stdbytpw.this);
-    private lib.bas.Std std=new lib.bas.Std(Stdbytpw.this);
-    private Field paTyp = new Field("X");
--- a/server.src/prg/bas/Stdcall.java
--- a/server.src/prg/bas/Stdcat.java
-    private Field fstat = new Field("999");
--- a/server.src/prg/bas/Stdchks.java
-    private Field tmpKidX = new Field("99");
-    private Field tmpKidKtrl = new Field("9");
--- a/server.src/prg/bas/Stddat30.java
-    private Field tmpDagnr = new Field("9(6)");
-    private Field tmpVdag = new Field("9(6)");
-    private Field tmpVecka1start = new Field("9(6)");
-    private Field svarR = svar.redefine();
-    private Field svarAr = svarR.extend("9(4)");
-    private Field svarMan = svarR.extend("99");
-    private Field svarDag = svarR.extend("99");
--- a/server.src/prg/bas/Stddatfk.java
-    private Field paramPek = new Field("S9(11)");
-    private Field delim = new Field("X");
--- a/server.src/prg/bas/Stddatk.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Stddatk.this);
-    private Field paramPek = new Field("S9(11)");
--- a/server.src/prg/bas/Stddel.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Stddel.this);
-    private lib.bas.Std std=new lib.bas.Std(Stddel.this);
--- a/server.src/prg/bas/Stddisk.java
-    private Field tmpWindow = new Field("X(10)");
--- a/server.src/prg/bas/Stddisk2.java
-    private Field tmpWindow = new Field("X(10)");
--- a/server.src/prg/bas/Stdfix8.java
--- a/server.src/prg/bas/Stdkoan.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Stdkoan.this);
-    private lib.bas.Std std=new lib.bas.Std(Stdkoan.this);
-    private Field losen1 = new Field("X(25)");
-    private Field losen2 = new Field("X(25)");
--- a/server.src/prg/bas/Stdkonv.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Stdkonv.this);
-    private lib.bas.Std std=new lib.bas.Std(Stdkonv.this);
-    private Field filnamn = new Field("X(50)", SPACE);
-    private Field antal = new Field("S9(9)");
-    private Field antalTot = new Field("S9(9)");
-    private Field antal10 = new Field("S9(9)");
-    private Field antal20 = new Field("S9(9)");
-    private Field antal30 = new Field("S9(9)");
-    private Field antal40 = new Field("S9(9)");
-    private Field antal50 = new Field("S9(9)");
-    private Field antal60 = new Field("S9(9)");
-    private Field antal70 = new Field("S9(9)");
-    private Field antal80 = new Field("S9(9)");
-    private Field antal90 = new Field("S9(9)");
--- a/server.src/prg/bas/Stdmatch.java
-    private lib.bas.Std std=new lib.bas.Std(Stdmatch.this);
-    private Field selCount = new Field("S9(9)");
-    private Field selPek3 = new Field("S9(9)");
--- a/server.src/prg/bas/Stdmod10.java
-    private lib.bas.Std std=new lib.bas.Std(Stdmod10.this);
--- a/server.src/prg/bas/Stdpar.java
-    private Field parPek = new Field("S9(9)");
--- a/server.src/prg/bas/Stdprfix.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Stdprfix.this);
--- a/server.src/prg/bas/Stdrmctl.java
-    private lib.bas.Std std=new lib.bas.Std(Stdrmctl.this);
--- a/server.src/prg/bas/Stdtouch.java
-    private Field touchfil = new Field("X(100)");
-    private Field svar = new Field("999");
--- a/server.src/prg/bas/Stdtoxml.java
-    private lib.bas.Std std=new lib.bas.Std(Stdtoxml.this);
--- a/server.src/prg/bas/Stdttcp.java
-private lib.bas.Paraarea pa=new lib.bas.Paraarea(Stdttcp.this);
-private Field tmpWindow = new Field("X(10)");
--- a/server.src/prg/bas/Stdutskr.java
-    private lib.bas.Blnkpost basblnk=new lib.bas.Blnkpost(Stdutskr.this);
-    private Field windowHandle = new Field("X(10)");
-    private Field tmpBlankettSt = new Field("S9(9)");
-    private Field edispoolfil = new Field("X(50)");
-    private Field avbrottTecken = new Field("X");
-    private Field faxWindow = new Field("X(10)");
-    private Field landskod = new Field("X(10)");
-    private Field tel = new Field("X(50)");
--- a/server.src/prg/bas/Stdval.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Stdval.this);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Stdval.this, pa);
--- a/server.src/prg/bas/Stdval2.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Stdval2.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Stdval2.this);
-    private lib.pro.Forepost profore=new lib.pro.Forepost(Stdval2.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Stdval2.this);
--- a/server.src/prg/bas/Stdviite.java
--- a/server.src/prg/bas/Stdxml.java
-    private lib.bas.Std std=new lib.bas.Std(Stdxml.this);
-    private lib.med.Datab da=new lib.med.Datab(Stdxml.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Stdxml.this);
-    private lib.med.P8prisl p8prisl=new lib.med.P8prisl(Stdxml.this);
-    private lib.med.P8calc p8calc=new lib.med.P8calc(Stdxml.this);
-    private Field pgm = new Field("X(12)", "STDXML");
--- a/server.src/prg/bas/Strut.java
-    private Field fskrivTmp = new Field("X(5000)");
-    private Field tmpNamn = new Field("X(50)");
-    private Field tmp = new Field("X(100)");
-    private Field losen = new Field("X(20)");
-    private Field remote = new Field("X(20)");
-    private Field ii = new Field("99999");
-    private Field ij = new Field("99999");
-    private Field ik = new Field("99999");
-    private Field yy = new Field("S9999");
-    private Field z = new Field("99999");
-    private Field oz = new Field("99999");
-    private Field lc = new Field("99999");
-    private Field td = new Field("X");
-    private Field tdix = new Field("99999");
-    private Field colspan = new Field("9999");
-    private Field tr = new Field("X");
-    private Field pre = new Field("X");
-    private Field summa = new Field("X");
-    private Field html = new Field("X(50)");
-    private Field nosort = new Field("X");
-    private Field revorder = new Field("X");
-    private Field liggande = new Field("X");
-    private Field blnk = new Field("X");
-    private Field lstNr = new Field("------9");
-    private Field format2 = new Field("X(300)");
-    private Field format2s = new Field("X(50)");
-    private Field ostype = new Field("X(20)");
-    private Field skkommlist1 = new Field("X(60)");
-    private Field skkommlist2 = new Field("X(60)");
-    private Field radnr = new Field("9999", 0);
-    private Field kolnr = new Field("9999");
-    private Field nxtbold = new Field("X");
-    private Field nxtbel = new Field("X");
-    private Field nxttext = new Field("X(100)");
-    private Field nxtz = new Field("99");
-    private Field tmpBlankett = new Field("X(8)");
--- a/server.src/prg/bas/Suppanv1.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Suppanv1.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Suppanv1.this);
--- a/server.src/prg/bas/Synklogg.java
-    private lib.gem.Upptpost gemuppt=new lib.gem.Upptpost(Synklogg.this, pa);
-    private Field tmp = new Field("X(100)");
-    private Field tmp3 = new Field("X(100)");
-    private Field ptr = new Field("99999");
-    private Field l = new Field("99999");
-    private Field tmpKey = new Field("X(100)");
-    private Field lnrfr = new Field("999999");
-    private Field lnrti = new Field("999999");
--- a/server.src/prg/bas/Sysfel.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Sysfel.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Sysfel.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Sysfel.this);
-    private Field windowHandle = new Field("X(10)");
-    private Field pgmFile = new Field("X(100)");
-    private Field pgmPrev = new Field("X(100)");
-    private Field beskrivning = new Field();
--- a/server.src/prg/bas/Testdata.java
-    private lib.bas.Webut webut=new lib.bas.Webut(Testdata.this, webpara, pa);
-    private Field wsetEof = new Field("X", "N");
-    private Field wspaEof = new Field("X", "N");
--- a/server.src/prg/bas/Testgmnc.java
-    Hashtable<String,Integer> korda=new Hashtable();
--- a/server.src/prg/bas/Tillfinl.java
-    private lib.lon.Parapost lonpara=new lib.lon.Parapost(Tillfinl.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Tillfinl.this);
-    private Field tmpRefrWindow = new Field("X(10)");
-    private Field tmpExtrWindow = new Field("X(10)");
-    private Field windowHandle = new Field("X(10)");
--- a/server.src/prg/bas/Toinws.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Toinws.this);
-    private Field xmlTecken = new Field("X(100)");
-    private Field behormedaOk = new Field("X");
-    private Field medaPek = new Field("S9(9)");
-    private Field xmlLanguage = new Field("X(100)");
-    private Field visakod = new Field("XXX");
-    private Field tmpSprak = new Field("XX");
-    private Field antalInlogg = new Field("S9(9)");
-    private Field sessionid = new Field("9(15)");
-    private Field tid = new Field("9(8)");
-    private Field datum = new Field("9(8)");
-    private Field datum2 = new Field("9(8)");
-    private Field datumD = new Field("X(10)");
-    private Field veckodag = new Field("9(6)");
-    private Field bokfel = new Field("S9(10)");
-    private Field bokfeltext = new Field("X(80)");
--- a/server.src/prg/bas/Tzdat.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Tzdat.this);
-    private lib.bas.Std std=new lib.bas.Std(Tzdat.this);
-    private Field hw = new Field("X(20)");
-    private Field exitStatus = new Field("99");
-    private Field oldCobdat = new Field("9(8)");
-    private Field oldCobtim = new Field("99");
-    private Field oldTzdat = new Field("9(8)");
-    private Field cobtid = new Field("9(8)");
--- a/server.src/prg/bas/Tztid.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Tztid.this);
-    private lib.bas.Std std=new lib.bas.Std(Tztid.this);
-    private Field hw = new Field("X(20)");
-    private Field exitStatus = new Field("99");
-    private Field tmpTid = new Field("9(8)");
-    private Field oldCobtim = new Field("99");
-    private Field oldTztim = new Field("99");
--- a/server.src/prg/bas/Urldec.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Urldec.this);
-    private Field operatingSystem = new Field("X(10)", "UNIX");
-    private Field i = new Field("999");
-    private Field j = new Field("999");
-    private Field ptr = new Field("99999");
-    private Field konv = new Field("X(10000)");
-    private Field h1 = new Field("X");
-    private Field h2 = new Field("X");
-    private Field d1 = new Field("99");
-    private Field d2 = new Field("99");
-    private Field p = new Field("99999");
-    private Field x = new Field("99999");
-    private Field tmp = new Field("99999");
-    private Field p2 = new Field("99999");
-    private Field d = new Field("999");
-    private Field c = new Field("X(256)");
--- a/server.src/prg/bas/Utftowin.java
-    private lib.bas.Std std=new lib.bas.Std(Utftowin.this);
--- a/server.src/prg/bas/Visa.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Visa.this);
-    private Field windowHandle = new Field("X(10)");
-    private Field portUser = new Field("X(20)");
--- a/server.src/prg/bas/Visachk.java
-    private Field fvisa2Eof = new Field("X");
-    private void atergang() {
-        throw exit;
-    }
-
--- a/server.src/prg/bas/Visachk2.java
-    private Field fvisa2Eof = new Field("X");
-    private void atergang() {
-        throw exit;
-    }
-
--- a/server.src/prg/bas/Visachk3.java
-    private void atergang() {
-        throw exit;
-    }
-
--- a/server.src/prg/bas/Visachk4.java
-    private void atergang() {
-        throw exit;
-    }
-
--- a/server.src/prg/bas/Visaexp.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Visaexp.this);
--- a/server.src/prg/bas/Visaexpp.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Visaexpp.this);
--- a/server.src/prg/bas/Visaexpw.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Visaexpw.this);
--- a/server.src/prg/bas/Visafix.java
-    private lib.bas.Std std=new lib.bas.Std(Visafix.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Visafix.this);
--- a/server.src/prg/bas/Visaimp.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Visaimp.this);
--- a/server.src/prg/bas/Visautsk.java
-private lib.bas.Beho beho=new lib.bas.Beho(Visautsk.this);
-private lib.bas.Toupper toupper=new lib.bas.Toupper(Visautsk.this);
-private Field scFunk = new Field("9");
-private Field mainWindow = new Field("X(10)");
-private void lasSelectLoop() {
-    std.colorInmOpen();
-    /*scrSc*/
-    /*scrSc{
-      std.stdFunk();
-      if (std.stdFunkNr.equals(0)) {
-      lasSelectLoop();
-      return;
-      }
-      }
-      {
-      std.stdFunkNr.set(0);
-      }
-     */
-    toupper.toupper.set(skrivare);
-    toupper.toupp();
-    skrivare.set(toupper.toupper);
-    std.colorInmClosed();
-    /*scrSc*/
-    if (std.stdFunkNr.equals(1)) {
-        if (std.crtposY.equals(6)) {
-            call("prg.bas.961201", pa.paraArea, skrivare);
-            cancel("prg.bas.961201");
-            std.crtpos.set(new Constant("0838"));
-        }
-        lasSelectLoop();
-        return;
-    }
-    if (std.stdFunkNr.equals(27)) {
-        lasSelectSlut();
-        return;
-    }
-    if (skrivare.equals(SPACE)) {
-        std.crtpos.set(new Constant("0620"));
-        lasSelectLoop();
-        return;
-    }
-    basskri.get().kod.set(skrivare);
-    basskri.get().f9902Read();
-    if (basskri.get().f9902Eof.equals("J")) {
-        std.crtpos.set(new Constant("0620"));
-        lasSelectLoop();
-        return;
-    }
-}
-private void lasFunk() {
-    std.crtpos.set(2214);
-    scFunk.set(2);
-    std.colorInmOpen();
-    std.stdFunk();
-    if (std.stdFunkNr.equals(0) || std.stdFunkNr.equals(1)) {
-        lasFunk();
-        return;
-    }
-    std.stdFunkNr.set(0);
-    std.colorInmClosed();
-    if (std.stdFunkNr.equals(27)) {
-        scFunk.set(0);
-    }
-    if (!(scFunk.equals(0)) && !(scFunk.equals(1)) && !(scFunk.equals(2))) {
-        lasFunk();
-        return;
-    }
-    if (!(scFunk.equals(0))) {
-        beho.kom.set("K");
-        beho.funk.set(scFunk);
-        call(beho.beho, pa.paraArea, pa.beniv, pa.modulkod, beho.funk, beho.kom);
-        if (beho.kom.equals("N")) {
-            lasFunk();
-            return;
-        }
-    }
-}
--- a/server.src/prg/bas/Visaw.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Visaw.this);
-    private Field numArgs = new Field("S9(11)");
-    private Field tmpTecken7kod = new Field("XX");
-    private Field tmpLnr = new Field("9999");
--- a/server.src/prg/bas/Webacc.java
-    private Field s2 = new Field("99999");
-    private Field s4 = new Field("99999");
-    private Field s5 = new Field("99999");
-    private Field tmp3 = new Field("X(100)");
-    private Field ptr = new Field("99999");
-    private Field ptrv = new Field("99999");
-    private Field lstHel = new Field("------------9");
-    private Field lstDec = new Field("----------9,99");
-    private Field lstDat6 = new Field("999999");
-    private Field lstDat62 = new Field("999999");
-    private Field tmpKey = new Field("X(100)");
-    private Field lnrfr = new Field("999999");
-    private Field lnrti = new Field("999999");
--- a/server.src/prg/bas/Webbytpw.java
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webbytpw.this);
-    private Field spara = new Field("X(50)");
-    private Field startprg = new Field("X(20)");
-    private Field startnr = new Field("999");
-    private Field ver = new Field("X(10)");
-    private Field qvalue = new Field("X(300)");
-    private Field getNamn = new Field("X(50)");
--- a/server.src/prg/bas/Webchkpw.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Webchkpw.this);
-    private lib.bas.Std std=new lib.bas.Std(Webchkpw.this);
--- a/server.src/prg/bas/Webclftg.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Webclftg.this);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Webclftg.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webclftg.this);
-    private lib.pro.Datab da=new lib.pro.Datab(Webclftg.this);
-    private lib.pro.Forepost profore=new lib.pro.Forepost(Webclftg.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Webclftg.this);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webclftg.this, pa);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webclftg.this);
-    private Field tmp = new Field("X(50)");
-    private Field tmpBehorig = new Field("X");
-    private Field i = new Field("99");
--- a/server.src/prg/bas/Webcook.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webcook.this);
-    private Field operatingSystem = new Field("X(10)", "UNIX");
-    private Field h1 = new Field("X");
-    private Field h2 = new Field("X");
-    private Field d1 = new Field("99");
-    private Field d2 = new Field("99");
-    private Field p = new Field("99999");
-    private Field x = new Field("99999");
-    private Field tmp = new Field("99999");
-    private Field p2 = new Field("99999");
-    private Field d = new Field("999");
-    private Field c = new Field("X(256)");
--- a/server.src/prg/bas/Webcsv.java
-    private lib.bas.Std std=new lib.bas.Std(Webcsv.this);
--- a/server.src/prg/bas/Webdisp.java
-    private Field post = new Field("X(2000)");
-    private Field ptr = new Field("99999");
--- a/server.src/prg/bas/Webexp.java
-    private lib.bas.Std std=new lib.bas.Std(Webexp.this);
--- a/server.src/prg/bas/Webexp2.java
-    private lib.bas.Std std=new lib.bas.Std(Webexp2.this);
--- a/server.src/prg/bas/Webexpdok.java
-    private lib.bas.Std std=new lib.bas.Std(Webexpdok.this);
--- a/server.src/prg/bas/Webgetar.java
-    //WORKING STORAGE SECTION
-    private lib.bas.Std std=new lib.bas.Std(Webgetar.this);
-    private Field fil = new Field("X(50)");
--- a/server.src/prg/bas/Webgif.java
-    private lib.bas.Std std=new lib.bas.Std(Webgif.this);
--- a/server.src/prg/bas/Webimp.java
-    private lib.bas.Std std=new lib.bas.Std(Webimp.this);
--- a/server.src/prg/bas/Webimpdok.java
-    private lib.bas.Std std=new lib.bas.Std(Webimpdok.this);
--- a/server.src/prg/bas/Webimpl.java
-    private lib.bas.Std std=new lib.bas.Std(Webimpl.this);
--- a/server.src/prg/bas/Webin.java
-    private Field operatingSystem = new Field("X(10)", "UNIX");
-    private Field h1 = new Field("X");
-    private Field h2 = new Field("X");
-    private Field d1 = new Field("99");
-    private Field d2 = new Field("99");
-    private Field d = new Field("999");
-    private Field x = new Field("99999");
-    private Field p = new Field("99999");
-    private Field p2 = new Field("99999");
-    private Field tmp = new Field("99999");
--- a/server.src/prg/bas/Webin30.java
-    private Field operatingSystem = new Field("X(10)", "UNIX");
-    private Field n = new Field("S9(11)");
-    private Field c = new Field("X(256)");
-    private Field h1 = new Field("X");
-    private Field h2 = new Field("X");
-    private Field d1 = new Field("99");
-    private Field d2 = new Field("99");
-    private Field d = new Field("999");
-    private Field x = new Field("99999");
-    private Field p = new Field("99999");
-    private Field p2 = new Field("99999");
-    private Field tmp = new Field("99999");
-    private Field y = new Field("99999");
-    private Field tmpp = new Field("X(10)");
--- a/server.src/prg/bas/Webjwt.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Webjwt.this);
-    private lib.bas.Std std=new lib.bas.Std(Webjwt.this);
--- a/server.src/prg/bas/Weblexi.java
-    private void closeDown() {
-    }
-
--- a/server.src/prg/bas/Weblogg.java
-    private lib.gem.Upptpost gemuppt=new lib.gem.Upptpost(Weblogg.this, pa);
-    private lib.pro.Forepost profore=new lib.pro.Forepost(Weblogg.this, pa);
-    private Field nyPost = new Field("X(2000)");
-    private Field oldvarde = new Field("X(1000)");
-    private Field tmp20 = new Field("X(20)");
-    private Field tmpHel = new Field("S99999999999999");
-    private Field tmpDec = new Field("S999999999999V99");
-    private Field lstHel = new Field("------------9");
-    private Field lstDec = new Field("----------9,99");
-    private Field lstDat6 = new Field("999999");
-    private Field tmpKey = new Field("X(100)");
-        java.util.List anvval=java.util.Arrays.asList(p5.getStringValue().split(", *"));
--- a/server.src/prg/bas/Weblogh.java
-    private lib.gem.Upptpost gemuppt=new lib.gem.Upptpost(Weblogh.this, pa);
-    private lib.pro.Forepost profore=new lib.pro.Forepost(Weblogh.this, pa);
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field post = new Field("X(2000)");
-    private Field tmpPost = new Field("X(5000)");
-    private Field tmpAnt = new Field("9(9)");
-    private Field oldPost = new Field("X(2000)");
-    private Field nyPost = new Field("X(2000)");
-    private Field falt = new Field("X(20)");
-    private Field oldvarde = new Field("X(1000)");
-    private Field nyttvarde = new Field("X(1000)");
-    private Field ptr = new Field("99999");
-    private Field tmp20 = new Field("X(20)");
-    private Field tmpHel = new Field("S99999999999999");
-    private Field tmpDec = new Field("S999999999999V99");
-    private Field lstHel = new Field("------------9");
-    private Field lstDec = new Field("----------9,99");
-    private Field lstDat6 = new Field("999999");
-    private Field tmpKey = new Field("X(100)");
-    private Field oldLnr = new Field("9(6)");
-    private Field skrivitrad = new Field("X");
-    private Field datfr = new Field("9(8)");
-    private Field datti = new Field("9(8)");
-    private Field aktFalt = new Field("X(20)");
--- a/server.src/prg/bas/Webmall.java
-    private lib.bas.Std std=new lib.bas.Std(Webmall.this);
--- a/server.src/prg/bas/Webmult.java
-    private lib.bas.Std std=new lib.bas.Std(Webmult.this);
--- a/server.src/prg/bas/Webmvar.java
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Webmvar.this);
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("99999");
-    private Field s2 = new Field("99999");
-    private Field s3 = new Field("99999");
-    private Field s4 = new Field("99999");
-    private Field s5 = new Field("99999");
-    private Field tmp1 = new Field("X(300)");
-    private Field tmp2 = new Field("X(300)");
-    private Field exitStatus = new Field("999");
-    private Field namn = new Field("X(200)");
-    private Field def = new Field("X(200)");
-    private Field def2 = new Field("X(200)");
--- a/server.src/prg/bas/Webntis.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webntis.this);
-    private lib.med.Datab da=new lib.med.Datab(Webntis.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp4 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmp30 = new Field("X(30000)");
-    private Field oldPost = new Field("X(1000)");
-    private Field newPost = new Field("X(1000)");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field selBfdatfr = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field sel = new Field("X(1000)");
-    private Field selDatfr = new Field("9(8)");
-    private Field selDatti = new Field("9(8)");
-    private Field selMokl = new Field("X");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)V99");
-    private Field sum2 = new Field("S9(10)V99");
-    private Field oldFaknr = new Field("9(7)");
-    private Field paFaknr = new Field("9(7)");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field filNamn = new Field("X(50)");
-    private Field fxmlNamn = new Field("X(50)");
-    private Field fxslNamn = new Field("X(50)");
-    private Field fpdfNamn = new Field("X(50)");
-    private Field ftifNamn = new Field("X(50)");
-    private Field mall = new Field("X(8)");
-    private Field tmpKurs = new Field("999999V9999");
-    private Field tmpKursAntal = new Field("999999");
-    private Field lstBelv4 = new Field("---------9,9999");
-    private Field chefatt = new Field("X");
-    private Field visakod = new Field("XXXX");
--- a/server.src/prg/bas/Webpass.java
-    private Field wsetEof = new Field("X", "N");
-    private Field x = new Field("99");
-    private Field j = new Field("99");
-    private Field tmpPost = new Field("X(5000)");
-    private Field tmpPost2 = new Field("X(5000)");
-    private Field tmpAnt = new Field("9(9)");
-    private Field tmpAnt2 = new Field("9(9)");
--- a/server.src/prg/bas/Webpdf.java
-    private lib.bas.Std std=new lib.bas.Std(Webpdf.this);
--- a/server.src/prg/bas/Webpict.java
-    private lib.bas.Std std=new lib.bas.Std(Webpict.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Webpict.this);
--- a/server.src/prg/bas/Webpopup.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Webpopup.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Webpopup.this);
-    private Field n = new Field("S9(11)");
-    private Field s2 = new Field("99999");
-    private Field s3 = new Field("99999");
-    private Field s4 = new Field("99999");
-    private Field s5 = new Field("99999");
-    private Field s6 = new Field("99999");
-    private Field s7 = new Field("99999");
-    private Field pamFilnamn = new Field("X(50)");
-    private Field mejlserver = new Field("X(50)");
-    private Field franmejl = new Field("X(50)");
--- a/server.src/prg/bas/Webprn.java
-    private lib.bas.Std std=new lib.bas.Std(Webprn.this);
--- a/server.src/prg/bas/Webputar.java
-    private lib.bas.Std std=new lib.bas.Std(Webputar.this);
-    private Field fil = new Field("X(50)");
--- a/server.src/prg/bas/Webreg.java
-        if (true) {
-            return;
-        }
-        tmp.set("BAS.REG.");
-        tmp.ref(9).set(p1);
-        tmp80.set(p3);
-        call("prg.bas.regstat", tmp, "<", tmp80);
-        tmp.set("BAS.REG.");
-        tmp.ref(9).set(p1);
-        tmp80.set(p3);
-        call("prg.bas.regstat", tmp, "*", tmp80);
--- a/server.src/prg/bas/Webrf.java
-    private lib.bas.Std std=new lib.bas.Std(Webrf.this);
-    private Field tmp = new Field("X(200)");
--- a/server.src/prg/bas/Webrt.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Webrt.this);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Webrt.this);
-    private lib.bas.Parapost baspara=new lib.bas.Parapost(Webrt.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Webrt.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Webrt.this);
-    private lib.pro.Datab da=new lib.pro.Datab(Webrt.this);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webrt.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webrt.this);
-    private lib.bas.Std std=new lib.bas.Std(Webrt.this);
-    private Field losen = new Field("X(25)");
-    private Field remote = new Field("X(20)");
-    private Field prg = new Field("X(20)");
-    private Field par = new Field("X(50)");
-    private Field meddelande = new Field("XXX");
-    private Field tmpBehorig = new Field("X");
-    private Field i = new Field("99");
-    private Field x = new Field("99");
-    private Field j = new Field("99");
-    private Field loggnr = new Field("X(20)");
-    private Field mtidIdp = new Field("X");
-    private Field mtidId = new Field("XXXX");
-    private Field mtidMed = new Field("XXXX");
-    private Field mtidFtg = new Field("XXXX");
-    private Field startprg = new Field("X(20)");
-    private void main2() {
-        openUp();
-        if (prg.ref(9,6).equals("WEBTID") && mtidIdp.equals("J") && mtidId.compareTo(SPACE)>0 && webpara.userid.compareTo(SPACE)<=0) {
-            webpara.userid.set(mtidId);
-            webpara.ftg.set(mtidFtg);
-        }
-        acceptFrom(" FROM  ENVIRONMENT ","REMOTE_USER",remote);
-        toupper.toupper.set(remote);
-        toupper.toupp();
-        remote.set(toupper.toupper);
-        if (webpara.userid.equals(SPACE)) {
-            webpara.userid.set(remote);
-        }
-        //     IF USERID = SPACE AND PRG="PRG/PRO/WEBPRO6" CALL WEBUT USING "%c%c\\" 13 10 CALL PRG GO TO ATERGANG END-IF 
-        basmeda.get().kod.set(webpara.userid);
-        std.stdAnvid.set(basmeda.get().kod);
-        losen.set(webpara.passwd);
-        if (basmeda.get().kod.equals(SPACE)) {
-            loggaIn();
-            return;
-        }
-        if (prg.equals(SPACE) || prg.equals("TID") || prg.equals("UT") || prg.equals("UK2")) {
-            loggaIn();
-            return;
-        }
-        behorighet();
-        return;
-    }
-
-    private void behorighet() {
-        if (basmeda.get().kod.equals("SYAD")) {
-            if (losen.equals("1632") || basmeda.get().kod.equals(remote)) {
-                basftgs.get().f9904OpenInput();
-                if (!(basftgs.get().f9904Fs.equals("00")) && !(basftgs.get().f9904Fs.equals("35"))) {
-                    meddelande.set("mOF");
-                    loggaIn();
-                    return;
-                }
-                basftgs.get().fokod.set(webpara.ftg);
-                basftgs.get().f9904Read();
-                if (basftgs.get().f9904Eof.equals("J")) {
-                    meddelande.set("mFF");
-                    loggaIn();
-                    return;
-                }
-                if (!(basftgs.get().fomoduler.ref(4,1).equals("J"))) {
-                    meddelande.set("mPS");
-                    loggaIn();
-                    return;
-                }
-                webpara.moduler.set(basftgs.get().fomoduler);
-                webpara.ftgNamn.set(basftgs.get().foname);
-                webpara.medarb.set(basmeda.get().kod);
-                kor();
-                return;
-            }
-            else {
-                meddelande.set("mFL");
-                loggaIn();
-                return;
-            }
-        }
-        basmeda.get().f9903OpenInput();
-        if (!(basmeda.get().f9903Fs.equals("00")) && !(basmeda.get().f9903Fs.equals("35"))) {
-            meddelande.set("mOM");
-            loggaIn();
-            return;
-        }
-        basmeda.get().f9903Read();
-        if (basmeda.get().f9903Eof.equals("J")) {
-            meddelande.set("mMF");
-            loggaIn();
-            return;
-        }
-        if (!(losen.equals(basmeda.get().losen)) && !(basmeda.get().kod.equals(remote)) && !((basmeda.get().kod.equals(mtidId) && mtidIdp.equals("J")))) {
-            meddelande.set("mFL");
-            loggaIn();
-            return;
-        }
-        if (webpara.ftg.equals(SPACE)) {
-            if (!(basmeda.get().boldefF.equals(SPACE))) {
-                webpara.ftg.set(basmeda.get().boldefF);
-            }
-        }
-        if (webpara.ftg.equals(SPACE)) {
-            meddelande.set("mAF");
-            loggaIn();
-            return;
-        }
-        basftgs.get().f9904OpenInput();
-        if (!(basftgs.get().f9904Fs.equals("00")) && !(basftgs.get().f9904Fs.equals("35"))) {
-            meddelande.set("mOF");
-            loggaIn();
-            return;
-        }
-        basftgs.get().fokod.set(webpara.ftg);
-        basftgs.get().f9904Read();
-        if (basftgs.get().f9904Eof.equals("J")) {
-            meddelande.set("mFF");
-            loggaIn();
-            return;
-        }
-        if (!(basftgs.get().fomoduler.ref(4,1).equals("J"))) {
-            meddelande.set("mPS");
-            loggaIn();
-            return;
-        }
-        if ((!(basmeda.get().kod.equals("SYAD"))) && 
-                (!(basftgs.get().fobehomedaO.equals(SPACE))) && 
-                (!(basmeda.get().kod.equals(basftgs.get().fobehomeda[0])) && !(basmeda.get().kod.equals(basftgs.get().fobehomeda[1])) && !(basmeda.get().kod.equals(basftgs.get().fobehomeda[2])) && !(basmeda.get().kod.equals(basftgs.get().fobehomeda[3])) && !(basmeda.get().kod.equals(basftgs.get().fobehomeda[4])))) {
-            tmpBehorig.set("N");
-        }
-        else {
-            tmpBehorig.set("N");
-            i.set(1);
-            while (!(i.compareTo(48)>0)) {
-                if (basmeda.get().bolF[i.getInt()-1].equals(webpara.ftg) || basmeda.get().bolF[i.getInt()-1].equals("*")) {
-                    tmpBehorig.set("J");
-                }
-                i.increment(1);
-            }
-        }
-        if (tmpBehorig.equals("N")) {
-            meddelande.set("mEB");
-            loggaIn();
-            return;
-        }
-        webpara.moduler.set(basftgs.get().fomoduler);
-        webpara.ftgNamn.set(basftgs.get().foname);
-        webpara.medarb.set(basmeda.get().kod);
-        if (basmeda.get().sprak.compareTo(SPACE)>0) {
-            std.stdSprak.set(basmeda.get().sprak);
-        }
-        bassyst.get().f9906OpenIO();
-        bassyst.get().lopnr.set(1);
-        bassyst.get().f9906Read();
-        bassyst.get().f9906Close();
-        std.stdSpraknrO.set(bassyst.get().spraknrO);
-        if (std.stdSpraknrO.equals(SPACE)) {
-            std.stdSpraknr[0].set("SV");
-        }
-        std.stdSpraknrEget.set(1);
-        x.set(1);
-        while (!(x.compareTo(30)>0)) {
-            if (std.stdSpraknr[x.getInt()-1].equals(std.stdSprak)) {
-                std.stdSpraknrEget.set(x);
-            }
-            x.increment(1);
-        }
-        kor();
-        return;
-    }
-
-    private void kor() {
-        if (prg.equals("TID") || prg.ref(9,6).equals("WEBTID")) {
-            if (webpara.userid.compareTo(SPACE)>0) {
-                std.stationId2.set(SPACE);
-                std.stationId2.set(concat(limit(webpara.userid,SPACE),limit("%",SPACE),limit(loggnr,SPACE)));
-            }
-            else {
-                std.stationId2.set(SPACE);
-                std.stationId2.set(concat(limit(mtidId,SPACE),limit("%",SPACE),limit(loggnr,SPACE)));
-            }
-            pa.bkstvftg.set(webpara.ftg);
-            promeda.get().medaridG.init();
-            promeda.get().medarid.set(webpara.medarb);
-            pa.recid.set(da.meda);
-            pa.action.set(da.read);
-            prorecarea.recArea.set(promeda.get().post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            promeda.get().post.set(prorecarea.recArea);
-            if (!(promeda.get().toMtid.equals("J")) && !(webpara.medarb.equals("SYAD"))) {
-                meddelande.set("mRT");
-                loggaIn();
-                return;
-            }
-        }
-        else {
-            if (prg.equals(startprg)) {
-                if (loggnr.equals(SPACE)) {
-                    acceptFrom(" FROM  ENVIRONMENT ","REMOTE_PORT",loggnr);
-                }
-                std.stationId2.set(SPACE);
-                std.stationId2.set(concat(limit(webpara.userid,SPACE),limit("%",SPACE),limit(loggnr,SPACE)));
-                std.stdBkstvftg.set(webpara.ftg);
-                pa.bkstvftg.set(webpara.ftg);
-                call("prg.bas.beho", pa.paraArea, 99, prg, "00", "S");
-                cancel("prg.bas.beho");
-                if (returnCode.equals(1)) {
-                    meddelande.set("mFU");
-                    prg.set("FULLT");
-                    loggaIn();
-                    return;
-                }
-            }
-            else {
-                if (loggnr.equals(SPACE)) {
-                    acceptFrom(" FROM  ENVIRONMENT ","REMOTE_PORT",loggnr);
-                }
-                std.stationId2.set(SPACE);
-                std.stationId2.set(concat(limit(webpara.userid,SPACE),limit("%",SPACE),limit(loggnr,SPACE)));
-                std.stdBkstvftg.set(webpara.ftg);
-                pa.bkstvftg.set(webpara.ftg);
-                call("prg.bas.beho", pa.paraArea, 99, prg, "00", "S");
-                cancel("prg.bas.beho");
-                if (returnCode.equals(1)) {
-                    call(webpara.webut, "Set-Cookie: ID=; path=/");
-                    prg.set("UK");
-                    loggaIn();
-                    return;
-                }
-            }
-        }
-        call(webpara.webut, "Set-Cookie: LOGG=%s; path=/; expires=Fri, 31-Dec-24 00:00:00 GMT", loggnr);
-        if ((prg.equals("TID") || prg.ref(9,6).equals("WEBTID")) && mtidIdp.equals("J")) {
-            call(webpara.webut, "Set-Cookie: MTIDID=%0; path=/; expires=Fri, 31-Dec-24 00:00:00 GMT", webpara.userid);
-            call(webpara.webut, "Set-Cookie: MTIDMED=%0; path=/; expires=Fri, 31-Dec-24 00:00:00 GMT", webpara.medarb);
-            call(webpara.webut, "Set-Cookie: MTIDFTG=%0; path=/; expires=Fri, 31-Dec-24 00:00:00 GMT", webpara.ftg);
-        }
-        call(webpara.webut, "%c%c\\", 13, 10);
-        closeDown();
-        call(prg);
-        atergang();
-        return;
-    }
-
-    private void loggaIn() {
-        if (!((prg.equals("TID") || prg.ref(9,6).equals("WEBTID") || prg.equals("UT") || prg.equals("FULLT") || prg.equals("UK") || prg.equals("UK2")))) {
-            if (webpara.userid.compareTo(SPACE)>0) {
-                std.stdBkstvftg.set(webpara.ftg);
-                pa.bkstvftg.set(webpara.ftg);
-                call("prg.bas.beho", pa.paraArea, 99, prg, "00", "A");
-                cancel("prg.bas.beho");
-            }
-        }
-        call(webpara.webut, "%c%c\\", 13, 10);
-        call(webpara.webut, "<HTML>");
-        call(webpara.webut, "<HEAD>");
-        call(webpara.webut, webpara.stil);
-        call(webpara.webut, "<STYLE type='text/css'>");
-        call(webpara.webut, "small.path {color:black;font-family:Helvetica,sans-serif}");
-        call(webpara.webut, "small.path :link {color:black}");
-        call(webpara.webut, "div.marathon {color:red;font-family:Helvetica,sans-serif;font-weight:bold;text-align:center}");
-        call(webpara.webut, "td.pathk {border:thin outset;padding:0px 5px}");
-        call(webpara.webut, "td.pathk img {border: none}");
-        call(webpara.webut, "</STYLE>");
-        call(webpara.webut, "<TITLE>");
-        call(webpara.webut, "MARATHON");
-        call(webpara.webut, "</TITLE>");
-        call(webpara.webut, "<script src=/std.html></script>");
-        call(webpara.webut, "<SCRIPT>");
-        if (prg.equals("UK")) {
-            call(webpara.webut, "top.location=window.location.pathname+'?UK2'");
-            call(webpara.webut, "</SCRIPT>");
-            throw exit;
-        }
-        if (prg.equals("UK2")) {
-            meddelande.set("mUK");
-        }
-        call(webpara.webut, "document.cookie='ID=; path=/'");
-        call(webpara.webut, "document.cookie='PASS=; path=/'");
-        call(webpara.webut, "document.cookie='FTG=; path=/'");
-        call(webpara.webut, "if (top.location!=window.location){top.location=window.location}");
-        call(webpara.webut, "if (document.cookie.indexOf('FxRxExSxH2=J')>=0){document.cookie='FxRxExSxH2=N'}else{window.location.reload()}");
-        call(webpara.webut, "</SCRIPT></HEAD>");
-        call(webpara.webut, "<BODY class=upp>");
-        if (prg.equals("UT")) {
-            std.stationId2.set(SPACE);
-            std.stationId2.set(concat(limit(webpara.userid,SPACE),limit("%",SPACE),limit(loggnr,SPACE)));
-            std.stdBkstvftg.set(webpara.ftg);
-            pa.bkstvftg.set(webpara.ftg);
-            call("prg.bas.beho", pa.paraArea, 99, prg, "00", "A");
-            cancel("prg.bas.beho");
-            meddelande.set("mUL");
-        }
-        call(webpara.webut, "<table cellspacing=0 align=middle>");
-        call(webpara.webut, "<td align=right>");
-        if (!((prg.equals("TID") || prg.ref(9,6).equals("WEBTID")))) {
-            call(webpara.webut, "<table align=right cellspacing=0 cellpadding=0><tr>");
-            //         PERFORM WKNAPPAR 
-            call(webpara.webut, "</table>");
-        }
-        call(webpara.webut, "<tr>");
-        call(webpara.webut, "<td align=middle><br>");
-        if ((prg.equals("TID") || prg.ref(9,6).equals("WEBTID"))) {
-            call(webpara.webut, "<div class=marathon>M A R A T H O N &nbsp; T I D</div>");
-        }
-        else {
-            call(webpara.webut, "<div class=marathon>M A R A T H O N</div>");
-        }
-        call(webpara.webut, "<tr valign=middle height=200><td align=middle colspan=3><form name=login action=javascript:go()>");
-        call(webpara.webut, "<pre><b>");
-        call(webpara.webut, "%c%m <input style='font-family:monospace' name=ID size=4 maxlength=4 value=''\\", 10, "mAK");
-        call(webpara.webut, " onChange=%cthis.value=this.value.toUpperCase();\\", 34);
-        call(webpara.webut, " document.cookie='ID='+this.value+'; path=/'%c>", 34);
-        call(webpara.webut, "%m <input  style='font-family:monospace' type=password name=PASS size=4 maxlength=4 value=''\\", "mLO");
-        call(webpara.webut, " onChange=%cthis.value=this.value.toUpperCase ();\\", 34);
-        call(webpara.webut, " document.cookie='PASS='+this.value+'; path=/'%c>", 34);
-        call(webpara.webut, "%m <input  style='font-family:monospace' name=FTG size=4 maxlength=4 value=''\\", "mFO");
-        call(webpara.webut, " onChange=%cthis.value=this.value.toUpperCase ();\\", 34);
-        call(webpara.webut, " document.cookie='FTG='+this.value+'; path=/'%c>", 34);
-        if (webpara.msie.equals("J")) {
-            call(webpara.webut, "%c<input type=submit value='    OK    '>", 10);
-        }
-        else {
-            call(webpara.webut, "%c<input type=button value='    OK    ' onclick='javascript:go()'>", 10);
-        }
-        call(webpara.webut, "</pre></b></FORM>");
-        if (meddelande.compareTo(SPACE)>0) {
-            call(webpara.webut, "<tr valign=bottom><td bgcolor=red align=center width=1000 height=10>%m", meddelande);
-        }
-        call(webpara.webut, "<tr valign=bottom><td align=left width=1000 height=10>%m %s", "ver", ver);
-        call(webpara.webut, "</table><SCRIPT>");
-        call(webpara.webut, "document.login.ID.focus()");
-        call(webpara.webut, "function go(){");
-        if ((prg.equals("TID") || prg.ref(9,6).equals("WEBTID"))) {
-            call(webpara.webut, "window.location.search='?PRG/PRO/WEBTIDFR'");
-        }
-        else {
-            if (prg.ref(1,3).equals("PRG")) {
-                call(webpara.webut, "window.location.search='?%0+%0'", prg, par);
-            }
-            else {
-                call(webpara.webut, "window.location.search='?%0'", startprg);
-            }
-        }
-        call(webpara.webut, "}");
-        call(webpara.webut, "</SCRIPT>");
-        call(webpara.webut, "</BODY></HTML>");
-        closeDown();
-        atergang();
-        return;
-    }
-
-    private void openUp() {
-        webpara.userid.init();
-        webpara.passwd.init();
-        webpara.ftg.init();
-        call(webpara.webin);
-        display("UPONCOMMAND-LINE",webpara.getPost.ref(1,200),"\n");
-        acceptFromCommandLine(tmp);
-        unstring(tmp,new Object[]{new String(new char[]{0x01})},prg,par);
-        if (prg.ref(9,3).equals("WEB")) {
-            std.stdPgm.set(prg.ref(9));
-        }
-        else {
-            std.stdPgm.set("WEB");
-        }
-        //     CALL WEBUT USING "Content-type: text/html%c%c" 13 10 
-        call(webpara.webut, "Set-Cookie: FxRxExSxH2=J");
-        std.operatingSystem.set("UNIX");
-        //     ACCEPT SYSTEM-INFORMATION FROM SYSTEM-INFO 
-        call("prg.bas.tzdat", std.stdToday);
-        call("prg.bas.tztid", std.stdTime);
-        webpara.today.set(std.stdToday);
-        acceptFrom(" FROM  ENVIRONMENT ","MARAVER",ver);
-        baspara.get().f9908OpenInput();
-        baspara.get().namn.set(SPACE);
-        baspara.get().value.set(SPACE);
-        baspara.get().f9908Read();
-        while (!(baspara.get().f9908Eof.equals("J"))) {
-            if (!(baspara.get().namn.ref(1,1).equals(SPACE)) && !(baspara.get().namn.ref(1,1).equals("#"))) {
-                if (baspara.get().value.ref(1,1).equals(new String(new char[]{0x22}))) {
-                    x.set(2);
-                    while (!(x.compareTo(25)>0 || baspara.get().value.ref(x,1).equals(new String(new char[]{0x22})))) {
-                        x.increment(1);
-                    }
-                    x.decrement(2);
-                    if (x.compareTo(ZERO)>0) {
-                        setEnv(baspara.get().namn,baspara.get().value);
-                    }
-                }
-                else {
-                    setEnv(baspara.get().namn,baspara.get().value);
-                }
-            }
-            baspara.get().namn.set(SPACE);
-            baspara.get().value.set(SPACE);
-            baspara.get().f9908Read();
-        }
-        baspara.get().f9908Close();
-        acceptFrom(" FROM  ENVIRONMENT ","SPRAK",std.stdSprak);
-        if (std.stdSprak.equals(SPACE)) {
-            std.stdSprak.set("SV");
-        }
-        call(webpara.webcookies);
-        call(webpara.webcookies, "ID", webpara.userid);
-        call(webpara.webcookies, "PASS", webpara.passwd);
-        call(webpara.webcookies, "FTG", webpara.ftg);
-        call(webpara.webcookies, "LOGG", loggnr);
-        call(webpara.webcookies, "MTIDID", mtidId);
-        call(webpara.webcookies, "MTIDFTG", mtidFtg);
-        call(webpara.webcookies, "MTIDMED", mtidMed);
-        call(webpara.webcookies, "storlek", webpara.sz);
-        call(webpara.webcookies, "startprg", startprg);
-        if (startprg.equals(SPACE)) {
-            startprg.set("PRG/PRO/WEBPROS");
-        }
-        webpara.userid.convert(new String(new char[]{0xe9,0xe5,0xe4,0xf6,0xfc,0xc9,0xc5,0xc4,0xd6,0xdc,0xe6,0xf8,0xc6,0xd8}),"`}{|~@][\\^");
-        webpara.passwd.convert(new String(new char[]{0xe9,0xe5,0xe4,0xf6,0xfc,0xc9,0xc5,0xc4,0xd6,0xdc,0xe6,0xf8,0xc6,0xd8}),"`}{|~@][\\^");
-        webpara.ftg.convert(new String(new char[]{0xe9,0xe5,0xe4,0xf6,0xfc,0xc9,0xc5,0xc4,0xd6,0xdc,0xe6,0xf8,0xc6,0xd8}),"`}{|~@][\\^");
-        if (webpara.sz.compareTo(ZERO)<=0) {
-            webpara.sz.set(12);
-        }
-        call(webpara.webcookies, "mtididp", mtidIdp);
-        acceptFrom(" FROM  ENVIRONMENT ","HTTP_USER_AGENT",tmp);
-        i.set(0);
-        i.increment(tmp.count("MSIE"));
-        if (i.compareTo(0)>0) {
-            webpara.msie.set("J");
-        }
-        else {
-            webpara.msie.set("N");
-        }
-        i.set(0);
-        i.increment(tmp.count("Mac"));
-        if (i.compareTo(0)>0) {
-            webpara.mac.set("J");
-        }
-        else {
-            webpara.mac.set("N");
-        }
-        webpara.stil.set(SPACE);
-        if (webpara.msie.equals("J")) {
-            if (prg.ref(9,5).equals("WEBTI")) {
-                webpara.stil.set(concat("<STYLE type='text/css'>","body,td,th,p,li,b {font-family:Helvetica,sans-serif;font-size:",webpara.sz,"pt;} ","input.tt,td.exporterade {font-family:monospace;font-size:75%} ","td.exporterade {border:inset;background:#c0c0c0;font-size:75%} ","th.bel {text-align:right} ","td.bel {border-left:solid 1ex white; text-align:right} ","body {background:white} ","body.upp,body.Vanster {background:lightblue} ","body {border:solid black; border-width:1px 0px 0px 1px} ","body.vanster {border-width:0px 0px 0px 0px} ","body.upp {border-width:0px 0px 0px 0px} ",":hover {background:lightblue} ","pre, pre b  {font-family:monospace} ","</STYLE>"));
-            }
-            else if (prg.ref(9,5).equals("WEBKA")) {
-                webpara.stil.set(concat("<STYLE type='text/css'>","body,td,th,p,li,b {font-family:Helvetica,sans-serif;font-size:",webpara.sz,"pt;} ","body {background:white} ","body {border:solid black; border-width:1px 0px 0px 1px} ",":link {color:blue} :vlink {color:blue} :alink {color:blue} ","body.upp,body.vanster {background:#F0F0F0} ","body.vanster {border-width:0px 0px 0px 0px} ","body.upp {border-width:0px 0px 0px 0px} ",":hover {background:#c0c0c0} ","pre, pre b  {font-family:monospace} ","tr.summa td {font-weight:bold} ","table.lista tr td, table.lista tr th {padding:0ex 0ex} ","th.bel {text-align:right} ","td.bel {border-left:solid 1ex white; text-align:right} ","td.bel1, td.bel3, td.bel5{border-left:solid 1ex white;text-align:right} ","td.bel2, td.bel4, td.bel6 {border-left:solid 1ex white;text-align:right;background:#F0F0F0} ","</STYLE>"));
-            }
-            else if (prg.ref(9,5).equals("WEBBU")) {
-                webpara.stil.set(concat("<STYLE type='text/css'>","body,td,th,p,li,b {font-family:Helvetica,sans-serif;font-size:",webpara.sz,"pt;} ","input {font-family:monospace;font-size:75%} ","body {background:white} ","body {border:solid black; border-width:1px 0px 0px 1px} ",":link {color:blue} :vlink {color:blue} :alink {color:blue} ","body.upp,body.vanster {background:cyan} ","body.vanster {border-width:0px 0px 0px 0px} ","body.upp {border-width:0px 0px 0px 0px} ",":hover {background:#c0c0c0} ","pre, pre b  {font-family:monospace} ","tr.summa td {font-weight:bold} ","table.lista tr td, table.lista tr th {padding:0ex 0ex} ","th.bel {text-align:right} ","td.bel {border-left:solid 1ex white; text-align:right} ","td.bel1, td.bel3, td.bel5{border-left:solid 1ex white;text-align:right} ","td.bel2, td.bel4, td.bel6 {border-left:solid 1ex white;text-align:right;background:#F0F0F0} ","</STYLE>"));
-            }
-            else if (prg.ref(9,5).equals("WEBPR")) {
-                webpara.stil.set(concat("<STYLE type='text/css'>","body,td,th,p,li,b {font-family:Helvetica,sans-serif;font-size:",webpara.sz,"pt;} ","body {background:white} ","body {border:solid black; border-width:1px 0px 0px 1px} ",":link {color:blue} :vlink {color:blue} :alink {color:blue} ","body.upp,body.vanster {background:lightgreen} ","body.vanster {border-width:0px 0px 0px 0px} ","body.upp {border-width:0px 0px 0px 0px} ",":hover {background:#c0c0c0} ","pre, pre b  {font-family:monospace} ","tr.summa td {font-weight:bold} ","table.lista tr td, table.lista tr th {padding:0ex 0ex} ","th.bel {text-align:right} ","td.bel {border-left:solid 1ex white; text-align:right} ","td.bel1, td.bel3, td.bel5{border-left:solid 1ex white;text-align:right} ","td.bel2, td.bel4, td.bel6 {border-left:solid 1ex white;text-align:right;background:lightgreen} ","</STYLE>"));
-            }
-            else {
-                webpara.stil.set(concat("<STYLE type='text/css'>","body,td,th,p,li,b {font-family:Helvetica,sans-serif;font-size:",webpara.sz,"pt;} ","body {background:white} ","body {border:solid black; border-width:1px 0px 0px 1px} ",":link {color:blue} :vlink {color:blue} :alink {color:blue} ","body.upp,body.vanster {background:white} ","body.vanster {border-width:0px 0px 0px 0px} ","body.upp {border-width:0px 0px 0px 0px} ",":hover {background:#c0c0c0} ","pre, pre b  {font-family:monospace} ","</STYLE>"));
-            }
-        }
-        else {
-            if (prg.ref(9,5).equals("WEBTI")) {
-                webpara.stil.set(concat("<STYLE type='text/css'>body,td,th,p,li,b {font-family:Helvetica,sans-serif;font-size:",webpara.sz,"pt;} ","input.tt,td.exporterade {font-family:monospace;font-size:75%} ","td.exporterade {border:inset;background:#c0c0c0;font-size:75%} ","th.bel {text-align:right} ","td.bel {border-left:solid 1ex white; text-align:right} ","body {background:white} ","body.upp,body.vanster {background:lightblue} ",":hover {background:lightgreen} ","pre, pre b  {font-family:monospace} ","</STYLE>"));
-            }
-            else if (prg.ref(9,5).equals("WEBKA")) {
-                webpara.stil.set(concat("<STYLE type='text/css'>body,td,th,p,li,b {font-family:Helvetica,sans-serif;font-size:",webpara.sz,"pt;} ","body {background:white} ",":link {color:blue} :vlink {color:blue} :alink {color:blue} ","body.upp,body.vanster {background:#F0F0F0} ","pre, pre b  {font-family:monospace} ","tr.summa td {font-weight:bold} ","table.lista tr td, table.lista tr th {padding:0ex 0ex} ","th.bel {text-align:right} ","td.bel {border-left:solid 1ex white; text-align:right} ","td.bel1, td.bel3, td.bel5{border-left:solid 1ex white;text-align:right} ","td.bel2, td.bel4, td.bel6 {border-left:solid 1ex white;text-align:right;background:#F0F0F0} ","</STYLE>"));
-            }
-            else if (prg.ref(9,5).equals("WEBBU")) {
-                webpara.stil.set(concat("<STYLE type='text/css'>body,td,th,p,li,b {font-family:Helvetica,sans-serif;font-size:",webpara.sz,"pt;} ","input {font-family:monospace;font-size:75%}","body {background:white} ",":link {color:blue} :vlink {color:blue} :alink {color:blue} ","body.upp,body.vanster {background:cyan} ","pre, pre b  {font-family:monospace} ","tr.summa td {font-weight:bold} ","table.lista tr td, table.lista tr th {padding:0ex 0ex} ","th.bel {text-align:right} ","td.bel {border-left:solid 1ex white; text-align:right} ","td.bel1, td.bel3, td.bel5{border-left:solid 1ex white;text-align:right} ","td.bel2, td.bel4, td.bel6 {border-left:solid 1ex white;text-align:right;background:#F0F0F0} ","</STYLE>"));
-            }
-            else if (prg.ref(9,5).equals("WEBPR")) {
-                webpara.stil.set(concat("<STYLE type='text/css'>body,td,th,p,li,b {font-family:Helvetica,sans-serif;font-size:",webpara.sz,"pt;} ","body {background:white} ",":link {color:blue} :vlink {color:blue} :alink {color:blue} ","body.upp,body.vanster {background:lightgreen} ","pre, pre b  {font-family:monospace} ","tr.summa td {font-weight:bold} ","table.lista tr td, table.lista tr th {padding:0ex 0ex} ","th.bel {text-align:right} ","td.bel {border-left:solid 1ex white; text-align:right} ","td.bel1, td.bel3, td.bel5{border-left:solid 1ex white;text-align:right} ","td.bel2, td.bel4, td.bel6 {border-left:solid 1ex white;text-align:right;background:lightgreen} ","</STYLE>"));
-            }
-            else {
-                webpara.stil.set(concat("<STYLE type='text/css'>body,td,th,p,li,b {font-family:Helvetica,sans-serif;font-size:",webpara.sz,"pt;} ","body {background:white} ",":link {color:blue} :vlink {color:blue} :alink {color:blue} ","body.upp,body.vanster {background:white} ","pre, pre b  {font-family:monospace} ","</STYLE>"));
-            }
-        }
-    }
-
-    private void closeDown() {
-        basmeda.get().f9903Close();
-    }
-
--- a/server.src/prg/bas/Websess.java
-    private Field tmp = new Field("X(300)");
--- a/server.src/prg/bas/Websinfo.java
-    private lib.bas.Std std=new lib.bas.Std(Websinfo.this);
-    private Field arende = new Field("X(10)");
-    private Field fil = new Field("X(50)");
--- a/server.src/prg/bas/Webslk.java
-    private lib.bas.Std std=new lib.bas.Std(Webslk.this);
--- a/server.src/prg/bas/Websort.java
-    private Field losen = new Field("X(20)");
-    private Field remote = new Field("X(20)");
-    private Field ij = new Field("99999");
--- a/server.src/prg/bas/Webspar.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Webspar.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Webspar.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Webspar.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webspar.this);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webspar.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Webspar.this);
-    private Field wsetEof = new Field("X", "N");
-    private Field wspaEof = new Field("X", "N");
-    private Field j = new Field("999");
-    private Field qv1 = new Field("X(100)");
-    private Field qv2 = new Field("X(100)");
-    private Field qv3 = new Field("X(100)");
-    private Field tmpLosenbytdgr = new Field("9(6)");
-    private Field getNamn = new Field("X(50)");
-    private Field ulosen = new Field("X(10)");
-    private Field tmpMinlosen = new Field("99");
--- a/server.src/prg/bas/Webspkod.java
-    private void closeDown() {
-    }
-
--- a/server.src/prg/bas/Websupp.java
-    private Field tmp = new Field("X(100)");
-    private Field tmp2 = new Field("X(100)");
--- a/server.src/prg/bas/Webtest.java
-    private Field fsort2Lnr = fsort2Key.extend("9(6)");
-    private Field fsort2Data = fsort2Post.extend();
-    private Field fsort2Falt = fsort2Data.extend("X(20)");
-    private lib.gem.Loggpost gemlogg=new lib.gem.Loggpost(Webtest.this, pa);
-    private lib.gem.Upptpost gemuppt=new lib.gem.Upptpost(Webtest.this, pa);
-    private lib.gem.Aktupost gemaktu=new lib.gem.Aktupost(Webtest.this, pa);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Webtest.this);
-    private lib.pro.Forepost profore=new lib.pro.Forepost(Webtest.this, pa);
-    private lib.bas.Webut webut=new lib.bas.Webut(Webtest.this, webpara, pa);
--- a/server.src/prg/bas/Webtiff.java
-    private lib.bas.Std std=new lib.bas.Std(Webtiff.this);
--- a/server.src/prg/bas/Webtrans.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Webtrans.this);
-    private Field ptr = new Field("99999");
-        while (!(post.equals(all("\u0000")))) //        MOVE 1 TO PTR 
-            //        UNSTRING POST DELIMITED BY "," OR "." OR "?" OR " " INTO FRTEXT WITH POINTER PTR 
-            //        PERFORM UNTIL PTR > 1000 
-            //           IF FRTEXT = SPACE OR "," OR "." OR "?" 
-            //              MOVE FRTEXT TO TITEXT 
-            //           ELSE 
-            //              PERFORM TRANS 
-            //           END-IF 
-            //           CALL WEBUT USING "%0\\" TITEXT 
-            //           DISPLAY POST(PTR - 1:1) UPON SYSOUT WITH NO ADVANCING 
-            //            
-            //           IF POST(PTR:) = SPACE           
-            //              EXIT PERFORM 
-            //           END-IF 
-            //           UNSTRING POST DELIMITED BY "," OR "." OR "?" OR " " INTO FRTEXT WITH POINTER PTR 
-            //        END-PERFORM    
-            //        CALL WEBUT USING " " 
--- a/server.src/prg/bas/Weburlc.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Weburlc.this);
-    private Field operatingSystem = new Field("X(10)", "UNIX");
-    private Field n = new Field("S9(11)");
-    private Field h1 = new Field("X");
-    private Field h2 = new Field("X");
-    private Field d1 = new Field("99");
-    private Field d2 = new Field("99");
-    private Field p = new Field("99999");
-    private Field x = new Field("99999");
-    private Field tmp = new Field("99999");
-    private Field p2 = new Field("99999");
-    private Field d = new Field("999");
-    private Field c = new Field("X(256)");
--- a/server.src/prg/bas/Webut.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webut.this);
-    private Field losen = new Field("X(20)");
-    private Field remote = new Field("X(20)");
-    private Field ii = new Field("99999");
-    //private Field chex = new Field("X(512)");
-    private Field dx = new Field("X(200)");
-    private Field tmpTecken7kod = new Field("XX");
--- a/server.src/prg/bas/Webut2.java
-    private Field s = new Field("99999");
-    private Field tmp = new Field("X(400)");
-    private Field pid = new Field("99999");
-    private Field cmd = new Field("X(300)");
-    private Field svar = new Field("X(30000)");
-    private Field exitStatus = new Field("999");
--- a/server.src/prg/bas/Webval.java
-    private lib.gem.Bsynpost gembsyn=new lib.gem.Bsynpost(Webval.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webval.this);
-    private lib.med.Datab da=new lib.med.Datab(Webval.this);
--- a/server.src/prg/bas/Webvalf.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webvalf.this);
-    private lib.pro.Datab da=new lib.pro.Datab(Webvalf.this);
-    private lib.pro.Forepost profore=new lib.pro.Forepost(Webvalf.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webvalf.this, pa);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webvalf.this);
--- a/server.src/prg/bas/Webvisa.java
-    private Field tmp = new Field("X(100)");
--- a/server.src/prg/bas/Webxls.java
-    private lib.bas.Std std=new lib.bas.Std(Webxls.this);
--- a/server.src/prg/bas/Wintoutf.java
-    private lib.bas.Std std=new lib.bas.Std(Wintoutf.this);
--- a/server.src/prg/bas/Xkase01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xkase01.this);
-    private Field wspaEof = new Field("X", "N");
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
--- a/server.src/prg/bas/Xkase02.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xkase02.this);
-    private Field kurs = new Field("999999V9999");
-    private Field antal = new Field("999999");
--- a/server.src/prg/bas/Xkase03.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xkase03.this);
-    private Field wspaEof = new Field("X", "N");
--- a/server.src/prg/bas/Xmlut.java
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Xmlut.this);
-    private Field fskrivTmp = new Field("X(5000)");
-    private Field tmp = new Field("X(100)");
-    private Field xmlEof = new Field("X", "N");
-    private Field xml2Eof = new Field("X", "N");
-    private Field losen = new Field("X(20)");
-    private Field remote = new Field("X(20)");
-    private Field ii = new Field("9999");
-    private Field ij = new Field("9999");
-    private Field ik = new Field("9999");
-    private Field yy = new Field("S9999");
-    private Field oz = new Field("9999");
-    private Field td = new Field("X");
-    private Field tdix = new Field("9999");
-    private Field colspan = new Field("9999");
-    private Field tr = new Field("X");
-    private Field pre = new Field("X");
-    private Field summa = new Field("X");
-    private Field html = new Field("X(50)");
-    private Field nosort = new Field("X");
-    private Field revorder = new Field("X");
-    private Field liggande = new Field("X");
-    private Field blnk = new Field("X");
-    private Field lstNr = new Field("------9");
-    private Field ostype = new Field("X(20)");
-    private Field skkommlist1 = new Field("X(60)");
-    private Field skkommlist2 = new Field("X(60)");
-    private Field radnr = new Field("9999", 0);
-    private Field kolnr = new Field("9999");
-    private Field nxtbold = new Field("X");
-    private Field nxtbel = new Field("X");
-    private Field nxttext = new Field("X(100)");
-    private Field nxtz = new Field("99");
-    private Field tmpBlankett = new Field("X(8)");
--- a/server.src/prg/bas/Zwspa546.java
-    private lib.bas.Paraarea pa=new lib.bas.Paraarea(Zwspa546.this);
--- a/server.src/prg/bok/Camt053.java
-import java.text.*;
-import javax.xml.parsers.*;
-    private String currency;
--- a/server.src/prg/bok/Dimnamn.java
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Dimnamn.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Dimnamn.this);
-    private lib.med.Datab da=new lib.med.Datab(Dimnamn.this);
-    private lib.bas.Std std=new lib.bas.Std(Dimnamn.this);
-    private Field pgm = new Field("X(11)", "0140");
--- a/server.src/prg/bok/Expeam.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Expeam.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Expeam.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Expeam.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Expeam.this);
-    private lib.kun.Kundpost kunkund=new lib.kun.Kundpost(Expeam.this, pa);
-    private lib.kun.Faktpost kunfakt=new lib.kun.Faktpost(Expeam.this, pa);
-    private lib.kun.Fakbpost kunfakb=new lib.kun.Fakbpost(Expeam.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Expeam.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Expeam.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field p6 = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field sel = new Field("X(1000)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/bok/Fixaatt.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Fixaatt.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Fixaatt.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Fixaatt.this, pa);
-    private lib.pro.Datab da=new lib.pro.Datab(Fixaatt.this);
--- a/server.src/prg/bok/K00201.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K00201.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K00201.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K00201.this);
-    private lib.kun.Kundpost kunkund=new lib.kun.Kundpost(K00201.this, pa);
-    private lib.kun.Faktpost kunfakt=new lib.kun.Faktpost(K00201.this, pa);
-    private lib.kun.Fakbpost kunfakb=new lib.kun.Fakbpost(K00201.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K00201.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field p6 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field filpostLen = new Field("S9(9)");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/bok/K267arc.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K267arc.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K267arc.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K267arc.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K267arc.this);
-    private lib.bok.Dbokpost bokdbok=new lib.bok.Dbokpost(K267arc.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(K267arc.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K267arc.this);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(K267arc.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(K267arc.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(K267arc.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(K267arc.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K267arc.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K267arc.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp1 = new Field("X(300)");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field filNamn2 = new Field("X(100)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel = new Field("S9(10)");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selPeriod = new Field("9(6)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field ejSlutford = new Field("X");
-    private Field tmpKey = new Field("X(1000)");
-    private Field oldKey = new Field("X(12)");
-    private void namngeFsort() {
-        fsortNamn.set(SPACE);
-        fsortNamn.set(concat(limit("TMP/arc",SPACE),limit(webpara.userid,SPACE),limit(webpara.pid,SPACE)));
-    }
-
--- a/server.src/prg/bok/K2aldan.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(K2aldan.this, pa);
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(K2aldan.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(K2aldan.this, pa);
-    private lib.lev.Fakapost levfaka=new lib.lev.Fakapost(K2aldan.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(K2aldan.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K2aldan.this);
-    private Field bfstatEof = new Field("X");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field oldPost = new Field("X(1000)");
-    private Field newPost = new Field("X(1000)");
-    private Field path = new Field("X(50)");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptr2 = new Field("99999");
-    private Field antal = new Field("9(9)");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field belopp = new Field("S9(10)V99");
-    private Field beloppP = new Field("S9(10)V99");
-    private Field beloppM = new Field("S9(10)V99");
-    private Field valutaP = new Field("XXX");
-    private Field valutaM = new Field("XXX");
-    private Field forsta = new Field("X");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selKf = new Field("X");
-    private Field selLs = new Field("X");
-    private Field selFs = new Field("X");
-    private Field selIf = new Field("X");
-    private Field selIk = new Field("X");
-    private Field selPftgs = new Field("X(1000)");
-    private Field selMftgs = new Field("X(1000)");
-    private Field selValu = new Field("XXX");
-    private Field selKto = new Field("X(1000)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field pftg = new Field("XXXX");
-    private Field mftg = new Field("XXXX");
-    private Field mot = new Field("XXXX");
-    private Field pftgsIx = new Field("99999");
-    private Field sumbel1 = new Field("S9(10)V99");
-    private Field sumbel2 = new Field("S9(10)V99");
-    private Field sumbel3 = new Field("S9(10)V99");
-    private Field sumbel4 = new Field("S9(10)V99");
-    private Field oldFaknr = new Field("9(7)");
-    private Field paFaknr = new Field("9(7)");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field oldVer = new Field("X(8)");
-    private Field oldBfdat = new Field("9(8)");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field xmlFilnamn = new Field("X(100)");
-    private Field xlsFilnamn = new Field("X(100)");
-    private void stangRaderaBfstat() {
-        bfstat.close();
-        bfstat.deleteFile();
-    }
-
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void skrivForm() {
-        call(webpara.webut, "id/H|XXXX|%m|", "Kod");
-        call(webpara.webut, "rubrik| |%m|", "490");
-        call(webpara.webut, "knapp/h| |EXPORT%c%m|", 1, "090");
-        call(webpara.webut, "perint| |%m;PERDAT|", "Per");
-        call(webpara.webut, "BAS.FTGS.backoffice=J;endavst=J| |%m;PFTG|", "PFo");
-        //     CALL WEBUT USING "BAS.FTGS.backoffice=J;endavst=J/M| |%m;MFTG|" "MFo" 
-    }
-
-    private void skrivDefault() {
-        call(webpara.webut, "0000");
-        call(webpara.webut, "%001-%012", webpara.today.ref(3,2), webpara.today.ref(3,2));
-        call(webpara.webut, webpara.kamftg);
-    }
-
--- a/server.src/prg/bok/K2aldane.java
-    private lib.lev.Fakapost levfaka=new lib.lev.Fakapost(K2aldane.this, pa);
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(K2aldane.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K2aldane.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(K2aldane.this, webpara, pa);
-    private Field bfstatEof = new Field("X");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field oldPost = new Field("X(1000)");
-    private Field newPost = new Field("X(1000)");
-    private Field path = new Field("X(50)");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptr2 = new Field("99999");
-    private Field antal = new Field("9(9)");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field belopp = new Field("S9(10)V99");
-    private Field beloppP = new Field("S9(10)V99");
-    private Field beloppM = new Field("S9(10)V99");
-    private Field valutaP = new Field("XXX");
-    private Field valutaM = new Field("XXX");
-    private Field forsta = new Field("X");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selKf = new Field("X");
-    private Field selLs = new Field("X");
-    private Field selFs = new Field("X");
-    private Field selIf = new Field("X");
-    private Field selIk = new Field("X");
-    private Field selPftgs = new Field("X(1000)");
-    private Field selMftgs = new Field("X(1000)");
-    private Field selValu = new Field("XXX");
-    private Field selKto = new Field("X(1000)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field pftg = new Field("XXXX");
-    private Field mftg = new Field("XXXX");
-    private Field mot = new Field("XXXX");
-    private Field pftgsIx = new Field("99999");
-    private Field sumbel1 = new Field("S9(10)V99");
-    private Field sumbel2 = new Field("S9(10)V99");
-    private Field sumbel3 = new Field("S9(10)V99");
-    private Field sumbel4 = new Field("S9(10)V99");
-    private Field oldFaknr = new Field("9(7)");
-    private Field paFaknr = new Field("9(7)");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field lista2Typ = new Field("XXX");
-    private Field oldVer = new Field("X(8)");
-    private Field oldBfdat = new Field("9(8)");
-    private Field exportfilnamn = new Field("X(50)");
-    private void stangRaderaBfstat() {
-        bfstat.close();
-        bfstat.deleteFile();
-    }
-
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void skrivForm() {
-        call(webpara.webut, "id/H|XXXX|%m|", "Kod");
-        call(webpara.webut, "rubrik| |%m|", "490");
-        call(webpara.webut, "knapp/h| |EXPORT%c%m|", 1, "090");
-        call(webpara.webut, "perint| |%m;PERDAT|", "Per");
-        call(webpara.webut, "BAS.FTGS.backoffice=J;endavst=J| |%m;PFTG|", "PFo");
-        //     CALL WEBUT USING "BAS.FTGS.backoffice=J;endavst=J/M| |%m;MFTG|" "MFo" 
-    }
-
-    private void skrivDefault() {
-        call(webpara.webut, "0000");
-        call(webpara.webut, "%001-%012", webpara.today.ref(3,2), webpara.today.ref(3,2));
-        call(webpara.webut, webpara.kamftg);
-    }
-
--- a/server.src/prg/bok/K446mraf.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K446mraf.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K446mraf.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K446mraf.this);
-    private lib.kun.Kundpost kunkund=new lib.kun.Kundpost(K446mraf.this, pa);
-    private lib.kun.Faktpost kunfakt=new lib.kun.Faktpost(K446mraf.this, pa);
-    private lib.kun.Fakbpost kunfakb=new lib.kun.Fakbpost(K446mraf.this, pa);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(K446mraf.this, pa);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(K446mraf.this, pa);
-    private lib.med.P8calc p8calc=new lib.med.P8calc(K446mraf.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K446mraf.this);
-    private lib.med.Datab da=new lib.med.Datab(K446mraf.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field sel = new Field("X(1000)");
-    private Field selFtg = new Field("XXXX");
--- a/server.src/prg/bok/K519cart.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K519cart.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K519cart.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K519cart.this);
-    private lib.bok.Dipapost bokdipa=new lib.bok.Dipapost(K519cart.this, pa);
-    private lib.kun.Kundpost kunkund=new lib.kun.Kundpost(K519cart.this, pa);
-    private lib.kun.Faktpost kunfakt=new lib.kun.Faktpost(K519cart.this, pa);
-    private lib.kun.Fakbpost kunfakb=new lib.kun.Fakbpost(K519cart.this, pa);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(K519cart.this, pa);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(K519cart.this, pa);
-    private lib.gem.Kiccpost gemkicc=new lib.gem.Kiccpost(K519cart.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K519cart.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmpHel = new Field("S9(10)");
-    private Field sel = new Field("X(1000)");
-    private Field selFtg = new Field("XXXX");
--- a/server.src/prg/bok/K519icbs.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K519icbs.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K519icbs.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K519icbs.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K519icbs.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K519icbs.this);
-    private lib.pro.Jinkpost projink=new lib.pro.Jinkpost(K519icbs.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field rubIntercompany = new Field("X(10)");
-    private Field manNr = new Field("99");
-    private Field manPek = new Field("S9(9)");
-    private Field sumIntercompanyStart = new Field("S9(9)");
-    private Field sumIntercompanySlut = new Field("S9(9)");
-    private Field tmpHel = new Field("S9(10)");
-    private Field sel = new Field("X(1000)");
-    private Field selFtg = new Field("XXXX");
--- a/server.src/prg/bok/K519icpl.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K519icpl.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K519icpl.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K519icpl.this);
-    private lib.kun.Kundpost kunkund=new lib.kun.Kundpost(K519icpl.this, pa);
-    private lib.kun.Faktpost kunfakt=new lib.kun.Faktpost(K519icpl.this, pa);
-    private lib.kun.Fakbpost kunfakb=new lib.kun.Fakbpost(K519icpl.this, pa);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(K519icpl.this, pa);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(K519icpl.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K519icpl.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field manNr = new Field("99");
-    private Field manPek = new Field("S9(9)");
-    private Field tmpHel = new Field("S9(10)");
-    private Field selFtg = new Field("XXXX");
--- a/server.src/prg/bok/K519mraf.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K519mraf.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K519mraf.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K519mraf.this);
-    private lib.kun.Kundpost kunkund=new lib.kun.Kundpost(K519mraf.this, pa);
-    private lib.kun.Faktpost kunfakt=new lib.kun.Faktpost(K519mraf.this, pa);
-    private lib.kun.Fakbpost kunfakb=new lib.kun.Fakbpost(K519mraf.this, pa);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(K519mraf.this, pa);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(K519mraf.this, pa);
-    private lib.med.P8calc p8calc=new lib.med.P8calc(K519mraf.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K519mraf.this);
-    private lib.med.Datab da=new lib.med.Datab(K519mraf.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field sel = new Field("X(1000)");
-    private Field selFtg = new Field("XXXX");
--- a/server.src/prg/bok/K519mva.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K519mva.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K519mva.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K519mva.this);
-    private lib.bok.Dipapost bokdipa=new lib.bok.Dipapost(K519mva.this, pa);
-    private lib.kun.Kundpost kunkund=new lib.kun.Kundpost(K519mva.this, pa);
-    private lib.kun.Faktpost kunfakt=new lib.kun.Faktpost(K519mva.this, pa);
-    private lib.kun.Fakbpost kunfakb=new lib.kun.Fakbpost(K519mva.this, pa);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(K519mva.this, pa);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(K519mva.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K519mva.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field manNr = new Field("99");
-    private Field manPek = new Field("S9(10)");
-    private Field tmpHel = new Field("S9(10)");
-    private Field sel = new Field("X(1000)");
-    private Field selFtg = new Field("XXXX");
--- a/server.src/prg/bok/K649bl.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K649bl.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K649bl.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K649bl.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K649bl.this);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(K649bl.this, pa);
-    private lib.bok.Dipapost bokdipa=new lib.bok.Dipapost(K649bl.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(K649bl.this, pa);
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(K649bl.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(K649bl.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K649bl.this);
--- a/server.src/prg/bok/K649bl2.java
-    private Field fsortEof = new Field("X", "N");
--- a/server.src/prg/bok/K83tem.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K83tem.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K83tem.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K83tem.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K83tem.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K83tem.this);
-    private lib.bas.Std std=new lib.bas.Std(K83tem.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K83tem.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K83tem.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field filNamn2 = new Field("X(100)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selPeriod = new Field("9(6)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field ejSlutford = new Field("X");
-    private Field tmpKey = new Field("X(1000)");
-    private Field oldKey = new Field("X(12)");
--- a/server.src/prg/bok/K896mpp.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K896mpp.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K896mpp.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K896mpp.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K896mpp.this);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(K896mpp.this, pa);
-    private lib.bok.Dipapost bokdipa=new lib.bok.Dipapost(K896mpp.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(K896mpp.this, pa);
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(K896mpp.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(K896mpp.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K896mpp.this);
--- a/server.src/prg/bok/K896mpp2.java
-    private Field fbusinesspartnersEof = new Field("X", "N");
-    private Field finvoicesEof = new Field("X", "N");
--- a/server.src/prg/bok/P1108019.java
-    private lib.bok.Budgpost bokbudg=new lib.bok.Budgpost(P1108019.this, pa);
-    private lib.bok.Rapapost bokrapa=new lib.bok.Rapapost(P1108019.this, pa);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(P1108019.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P1108019.this);
-    private Field antal = new Field("9");
--- a/server.src/prg/bok/P16001.java
-    private void fselOpenOutput() {
-        fsel.open("OUTPUT");
-    }
-
-    private void fselOpenInput() {
-        fsel.open("INPUT");
-    }
-
-    private void fselReadKl() {
-        fselEof.set("N");
-        fsel.readWithLock();
-        if (fsel.invalidKey()) {
-            fselEof.set("J");
-        }
-        if (fselFs.equals("9D")) {
-            c_sleep("1");
-            fselReadKl();
-            return;
-        }
-    }
-
-    private void fkorrOpenOutput() {
-        fkorr.open("OUTPUT");
-    }
-
-    private void fkorrOpenInput() {
-        fkorr.open("INPUT");
-    }
-
-    private void fkorrReadKl() {
-        fkorrEof.set("N");
-        fkorr.readWithLock();
-        if (fkorr.invalidKey()) {
-            fkorrEof.set("J");
-        }
-        if (fkorrFs.equals("9D")) {
-            c_sleep("1");
-            fkorrReadKl();
-            return;
-        }
-    }
-
-    private void fkorrStart() {
-        fkorrEof.set("N");
-        fkorr.start("NOT<", "fkorr_key");
-        if (fkorr.invalidKey()) {
-            fkorrEof.set("J");
-        }
-    }
-
-    private void fkorrReadnext() {
-        fkorrEof.set("N");
-        fkorr.readNext();
-        if (fkorr.atEnd()) {
-            fkorrEof.set("J");
-        }
-        if (fkorrFs.equals("9D")) {
-            fkorr.start(">", "fkorr_key");
-            c_sleep("1");
-            fkorrReadnext();
-            return;
-        }
-    }
-
--- a/server.src/prg/bok/P16001n.java
-    private void fselOpenOutput() {
-        fsel.open("OUTPUT");
-    }
-
-    private void fselOpenInput() {
-        fsel.open("INPUT");
-    }
-
-    private void fselReadKl() {
-        fselEof.set("N");
-        fsel.readWithLock();
-        if (fsel.invalidKey()) {
-            fselEof.set("J");
-        }
-        if (fselFs.equals("9D")) {
-            c_sleep("1");
-            fselReadKl();
-            return;
-        }
-    }
-
-    private void fkorrOpenOutput() {
-        fkorr.open("OUTPUT");
-    }
-
-    private void fkorrOpenInput() {
-        fkorr.open("INPUT");
-    }
-
-    private void fkorrReadKl() {
-        fkorrEof.set("N");
-        fkorr.readWithLock();
-        if (fkorr.invalidKey()) {
-            fkorrEof.set("J");
-        }
-        if (fkorrFs.equals("9D")) {
-            c_sleep("1");
-            fkorrReadKl();
-            return;
-        }
-    }
-
-    private void fkorrStart() {
-        fkorrEof.set("N");
-        fkorr.start("NOT<", "fkorr_key");
-        if (fkorr.invalidKey()) {
-            fkorrEof.set("J");
-        }
-    }
-
-    private void fkorrReadnext() {
-        fkorrEof.set("N");
-        fkorr.readNext();
-        if (fkorr.atEnd()) {
-            fkorrEof.set("J");
-        }
-        if (fkorrFs.equals("9D")) {
-            fkorr.start(">", "fkorr_key");
-            c_sleep("1");
-            fkorrReadnext();
-            return;
-        }
-    }
-
--- a/server.src/prg/bok/P16002.java
-    private void fselOpenOutput() {
-        fsel.open("OUTPUT");
-    }
-
-    private void fselOpenInput() {
-        fsel.open("INPUT");
-    }
-
-    private void fselReadKl() {
-        fselEof.set("N");
-        fsel.readWithLock();
-        if (fsel.invalidKey()) {
-            fselEof.set("J");
-        }
-        if (fselFs.equals("9D")) {
-            c_sleep("1");
-            fselReadKl();
-            return;
-        }
-    }
-
-    private void fkorrOpenOutput() {
-        fkorr.open("OUTPUT");
-    }
-
-    private void fkorrOpenInput() {
-        fkorr.open("INPUT");
-    }
-
-    private void fkorrReadKl() {
-        fkorrEof.set("N");
-        fkorr.readWithLock();
-        if (fkorr.invalidKey()) {
-            fkorrEof.set("J");
-        }
-        if (fkorrFs.equals("9D")) {
-            c_sleep("1");
-            fkorrReadKl();
-            return;
-        }
-    }
-
-    private void fkorrStart() {
-        fkorrEof.set("N");
-        fkorr.start("NOT<", "fkorr_key");
-        if (fkorr.invalidKey()) {
-            fkorrEof.set("J");
-        }
-    }
-
-    private void fkorrReadnext() {
-        fkorrEof.set("N");
-        fkorr.readNext();
-        if (fkorr.atEnd()) {
-            fkorrEof.set("J");
-        }
-        if (fkorrFs.equals("9D")) {
-            fkorr.start(">", "fkorr_key");
-            c_sleep("1");
-            fkorrReadnext();
-            return;
-        }
-    }
-
--- a/server.src/prg/bok/P16003.java
-    private void fselOpenOutput() {
-        fsel.open("OUTPUT");
-    }
-
-    private void fselOpenInput() {
-        fsel.open("INPUT");
-    }
-
-    private void fselReadKl() {
-        fselEof.set("N");
-        fsel.readWithLock();
-        if (fsel.invalidKey()) {
-            fselEof.set("J");
-        }
-        if (fselFs.equals("9D")) {
-            c_sleep("1");
-            fselReadKl();
-            return;
-        }
-    }
-
-    private void fkorrOpenOutput() {
-        fkorr.open("OUTPUT");
-    }
-
-    private void fkorrOpenInput() {
-        fkorr.open("INPUT");
-    }
-
-    private void fkorrReadKl() {
-        fkorrEof.set("N");
-        fkorr.readWithLock();
-        if (fkorr.invalidKey()) {
-            fkorrEof.set("J");
-        }
-        if (fkorrFs.equals("9D")) {
-            c_sleep("1");
-            fkorrReadKl();
-            return;
-        }
-    }
-
-    private void fkorrStart() {
-        fkorrEof.set("N");
-        fkorr.start("NOT<", "fkorr_key");
-        if (fkorr.invalidKey()) {
-            fkorrEof.set("J");
-        }
-    }
-
-    private void fkorrReadnext() {
-        fkorrEof.set("N");
-        fkorr.readNext();
-        if (fkorr.atEnd()) {
-            fkorrEof.set("J");
-        }
-        if (fkorrFs.equals("9D")) {
-            fkorr.start(">", "fkorr_key");
-            c_sleep("1");
-            fkorrReadnext();
-            return;
-        }
-    }
-
--- a/server.src/prg/bok/P16004.java
-    private void fselOpenOutput() {
-        fsel.open("OUTPUT");
-    }
-
-    private void fselOpenInput() {
-        fsel.open("INPUT");
-    }
-    private void fselReadKl() {
-        fselEof.set("N");
-        fsel.readWithLock();
-        if (fsel.invalidKey()) {
-            fselEof.set("J");
-        }
-        if (fselFs.equals("9D")) {
-            c_sleep("1");
-            fselReadKl();
-            return;
-        }
-    }
-
-    private void fkorrOpenOutput() {
-        fkorr.open("OUTPUT");
-    }
-
-    private void fkorrOpenInput() {
-        fkorr.open("INPUT");
-    }
-
-    private void fkorrReadKl() {
-        fkorrEof.set("N");
-        fkorr.readWithLock();
-        if (fkorr.invalidKey()) {
-            fkorrEof.set("J");
-        }
-        if (fkorrFs.equals("9D")) {
-            c_sleep("1");
-            fkorrReadKl();
-            return;
-        }
-    }
-
-    private void fkorrStart() {
-        fkorrEof.set("N");
-        fkorr.start("NOT<", "fkorr_key");
-        if (fkorr.invalidKey()) {
-            fkorrEof.set("J");
-        }
-    }
-
-    private void fkorrReadnext() {
-        fkorrEof.set("N");
-        fkorr.readNext();
-        if (fkorr.atEnd()) {
-            fkorrEof.set("J");
-        }
-        if (fkorrFs.equals("9D")) {
-            fkorr.start(">", "fkorr_key");
-            c_sleep("1");
-            fkorrReadnext();
-            return;
-        }
-    }
-
--- a/server.src/prg/bok/P16005.java
-    private void fselOpenOutput() {
-        fsel.open("OUTPUT");
-    }
-
-    private void fselOpenInput() {
-        fsel.open("INPUT");
-    }
-
-    private void fselReadKl() {
-        fselEof.set("N");
-        fsel.readWithLock();
-        if (fsel.invalidKey()) {
-            fselEof.set("J");
-        }
-        if (fselFs.equals("9D")) {
-            c_sleep("1");
-            fselReadKl();
-            return;
-        }
-    }
-
-    private void fkorrOpenOutput() {
-        fkorr.open("OUTPUT");
-    }
-
-    private void fkorrOpenInput() {
-        fkorr.open("INPUT");
-    }
-
-    private void fkorrReadKl() {
-        fkorrEof.set("N");
-        fkorr.readWithLock();
-        if (fkorr.invalidKey()) {
-            fkorrEof.set("J");
-        }
-        if (fkorrFs.equals("9D")) {
-            c_sleep("1");
-            fkorrReadKl();
-            return;
-        }
-    }
-
-    private void fkorrStart() {
-        fkorrEof.set("N");
-        fkorr.start("NOT<", "fkorr_key");
-        if (fkorr.invalidKey()) {
-            fkorrEof.set("J");
-        }
-    }
-
-    private void fkorrReadnext() {
-        fkorrEof.set("N");
-        fkorr.readNext();
-        if (fkorr.atEnd()) {
-            fkorrEof.set("J");
-        }
-        if (fkorrFs.equals("9D")) {
-            fkorr.start(">", "fkorr_key");
-            c_sleep("1");
-            fkorrReadnext();
-            return;
-        }
-    }
-
--- a/server.src/prg/bok/P16006.java
-    private void fselOpenOutput() {
-        fsel.open("OUTPUT");
-    }
-
-    private void fselOpenInput() {
-        fsel.open("INPUT");
-    }
-    private void fselReadKl() {
-        fselEof.set("N");
-        fsel.readWithLock();
-        if (fsel.invalidKey()) {
-            fselEof.set("J");
-        }
-        if (fselFs.equals("9D")) {
-            c_sleep("1");
-            fselReadKl();
-            return;
-        }
-    }
-
-    private void fkorrOpenOutput() {
-        fkorr.open("OUTPUT");
-    }
-
-    private void fkorrOpenInput() {
-        fkorr.open("INPUT");
-    }
-
-    private void fkorrReadKl() {
-        fkorrEof.set("N");
-        fkorr.readWithLock();
-        if (fkorr.invalidKey()) {
-            fkorrEof.set("J");
-        }
-        if (fkorrFs.equals("9D")) {
-            c_sleep("1");
-            fkorrReadKl();
-            return;
-        }
-    }
-
-    private void fkorrStart() {
-        fkorrEof.set("N");
-        fkorr.start("NOT<", "fkorr_key");
-        if (fkorr.invalidKey()) {
-            fkorrEof.set("J");
-        }
-    }
-
-    private void fkorrReadnext() {
-        fkorrEof.set("N");
-        fkorr.readNext();
-        if (fkorr.atEnd()) {
-            fkorrEof.set("J");
-        }
-        if (fkorrFs.equals("9D")) {
-            fkorr.start(">", "fkorr_key");
-            c_sleep("1");
-            fkorrReadnext();
-            return;
-        }
-    }
-
--- a/server.src/prg/bok/P16007.java
-    private lib.pro.Ogrppost proogrp=new lib.pro.Ogrppost(P16007.this, pa);
-    private lib.pro.Oogrpost prooogr=new lib.pro.Oogrpost(P16007.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(P16007.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(P16007.this);
-    private lib.med.Datab da=new lib.med.Datab(P16007.this);
-    private void fselOpenOutput() {
-        fsel.open("OUTPUT");
-    }
-
-    private void fselOpenInput() {
-        fsel.open("INPUT");
-    }
-
-    private void fselReadKl() {
-        fselEof.set("N");
-        fsel.readWithLock();
-        if (fsel.invalidKey()) {
-            fselEof.set("J");
-        }
-        if (fselFs.equals("9D")) {
-            c_sleep("1");
-            fselReadKl();
-            return;
-        }
-    }
-
-    private void fkorrOpenOutput() {
-        fkorr.open("OUTPUT");
-    }
-
-    private void fkorrOpenInput() {
-        fkorr.open("INPUT");
-    }
-
-    private void fkorrReadKl() {
-        fkorrEof.set("N");
-        fkorr.readWithLock();
-        if (fkorr.invalidKey()) {
-            fkorrEof.set("J");
-        }
-        if (fkorrFs.equals("9D")) {
-            c_sleep("1");
-            fkorrReadKl();
-            return;
-        }
-    }
-
-    private void fkorrStart() {
-        fkorrEof.set("N");
-        fkorr.start("NOT<", "fkorr_key");
-        if (fkorr.invalidKey()) {
-            fkorrEof.set("J");
-        }
-    }
-
-    private void fkorrReadnext() {
-        fkorrEof.set("N");
-        fkorr.readNext();
-        if (fkorr.atEnd()) {
-            fkorrEof.set("J");
-        }
-        if (fkorrFs.equals("9D")) {
-            fkorr.start(">", "fkorr_key");
-            c_sleep("1");
-            fkorrReadnext();
-            return;
-        }
-    }
-
--- a/server.src/prg/bok/P160w.java
-    private lib.bas.Beho beho=new lib.bas.Beho(P160w.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P160w.this);
--- a/server.src/prg/bok/P17001.java
-    private Field filpek = new Field("9999");
-    private Field z = new Field("S9(10)");
-    private Field tmp1n = new Field("9");
-    private Field tmp2n3 = new Field("99");
-    private void aAckuAdd() {
-        aAcku[tmp4n.getInt()-1].increment(kont.cbrBelopp[cbrpek]);
-	cbrpek++;
-        tmp4n.increment(1);
-    }
-    private void rappUtskRad4Loop() {
-    }
-
-    private void fktoOpenOutput() {
-        fkto.open("OUTPUT");
-    }
-
-    private void fktoOpenInput() {
-        fkto.open("INPUT");
-    }
-
-    private void fktoReadKl() {
-        fktoEof.set("N");
-        fkto.readWithLock();
-        if (fkto.invalidKey()) {
-            fktoEof.set("J");
-        }
-        if (fktoFs.equals("9D")) {
-            c_sleep("1");
-            fktoReadKl();
-            return;
-        }
-    }
-
-    private void fktoReadnextKl() {
-        fktoEof.set("N");
-        fkto.readNext();
-        if (fkto.atEnd()) {
-            fktoEof.set("J");
-        }
-        if (fktoFs.equals("9D")) {
-            fkto.start(">", "fkto_id");
-            c_sleep("1");
-            fktoReadnextKl();
-            return;
-        }
-    }
-
-    private void fktoCommit() {
-        unlockFiles();
-    }
-
-    private void fktoDelete() {
-        fkto.delete();
-    }
-
--- a/server.src/prg/bok/P1auto.java
-    private lib.bas.Std std=new lib.bas.Std(P1auto.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P1auto.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P1auto.this);
-    private Field pgm = new Field("X(11)", "01AUTO");
--- a/server.src/prg/bok/P1bytkod.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(P1bytkod.this);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P1bytkod.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(P1bytkod.this);
-    private lib.pro.Forepost profore=new lib.pro.Forepost(P1bytkod.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P1bytkod.this);
-        lib.inv.Peripost.fd peri=invperi.get();
--- a/server.src/prg/bok/P1deltst.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P1deltst.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P1deltst.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P1deltst.this);
--- a/server.src/prg/bok/P1dim.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P1dim.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(P1dim.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P1dim.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P1dim.this);
-    private Field pgm = new Field("X(11)", "0140");
--- a/server.src/prg/bok/P1dimr.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P1dimr.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(P1dimr.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P1dimr.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P1dimr.this);
-    private Field pgm = new Field("X(11)", "0140");
-    private Field paKto = new Field("X(6)");
--- a/server.src/prg/bok/P1init.java
-    private lib.bas.Std std=new lib.bas.Std(P1init.this);
--- a/server.src/prg/bok/P1init2.java
-    private lib.bas.Beho beho=new lib.bas.Beho(P1init2.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P1init2.this);
-    private Field scAntPer = new Field("99");
--- a/server.src/prg/bok/P1konc.java
-    private lib.bok.Botrpost bokbotr=new lib.bok.Botrpost(P1konc.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P1konc.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P1konc.this);
-    private Field fkontEof = new Field("X", "N");
-    private Field ficplEof = new Field("X", "N");
-    private Field fkstEof = new Field("X", "N");
-    private Field ftempEof = new Field("X", "N");
-    private Field fackuEof = new Field("X", "N");
-    private Field fbudgEof = new Field("X", "N");
--- a/server.src/prg/bok/P1perib.java
-    private lib.bas.Std std=new lib.bas.Std(P1perib.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P1perib.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P1perib.this);
-    private Field ibKtyp = new Field("X");
-    private Field ibKontKbr = new Field("X");
-    private Field ibKontKst = new Field("X");
-    private Field ibKto = new Field("X(6)");
-    private Field ibKst = new Field("X(6)");
-    private Field ibKbr = new Field("X(6)");
-    private Field ibBelopp = new Field("S9(10)V99");
--- a/server.src/prg/bok/P1radera.java
-    private lib.bas.Std std=new lib.bas.Std(P1radera.this);
--- a/server.src/prg/bok/P1start.java
-    private lib.bas.Std std=new lib.bas.Std(P1start.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P1start.this);
-    private Field pgm = new Field("X(12)", "01START");
--- a/server.src/prg/bok/P1uppd.java
-    private lib.bas.Beho beho=new lib.bas.Beho(P1uppd.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P1uppd.this);
-    private Field pgm = new Field("X(11)", "0140");
--- a/server.src/prg/bok/P1uppdib.java
-    private lib.bas.Std std=new lib.bas.Std(P1uppdib.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P1uppdib.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P1uppdib.this);
-    private Field pgm = new Field("X(11)", "01UPPDIB");
--- a/server.src/prg/bok/Rptval.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Rptval.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Rptval.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Rptval.this);
-    private lib.bok.Dipapost bokdipa=new lib.bok.Dipapost(Rptval.this, pa);
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(Rptval.this, pa);
-    private lib.bok.Icplpost bokicpl=new lib.bok.Icplpost(Rptval.this, pa);
-    private lib.gem.Bkunpost gembkun=new lib.gem.Bkunpost(Rptval.this, pa);
-    private lib.gem.Kiccpost gemkicc=new lib.gem.Kiccpost(Rptval.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Rptval.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field fkontEof = new Field("X", "N");
-    private Field num = new Field("S9(9)V99");
-    private Field kurs = new Field("999999V9999");
-    private Field kursAntal = new Field("999999");
--- a/server.src/prg/bok/Stdovfar.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Stdovfar.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Stdovfar.this);
-    private Field tmpIb = new Field("S9999999999V99");
-    private Field lineNumber = new Field("99");
-    private Field linesAPage = new Field("99", 41);
-    private Field pageNumber = new Field("999");
-    private Field listaExist = new Field("X");
-    private Field sv1 = new Field("XXX");
-    private Field sv2 = new Field("X(25)");
--- a/server.src/prg/bok/Verdok.java
--- a/server.src/prg/bok/Vregkun.java
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(Vregkun.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Vregkun.this, pa);
-    private lib.bok.Autopost bokauto=new lib.bok.Autopost(Vregkun.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(Vregkun.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Vregkun.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Vregkun.this);
-    private Field pxxDoBalKst = new Field("X");
-    private Field kundid = new Field("X(10)");
-    private Field totTotaltKrab = new Field("S9(9)");
-    private Field totUTotaltKrab = new Field("S9(9)");
-    private Field krabFfdat2 = new Field("9(8)");
-    private Field krabFfdat2D = new Field("X(8)");
-    private Field krabBelD = new Field("---B---B--9");
-    private Field krabBelSt = new Field("S9(9)");
-    private Field krabDgr = new Field("9(6)");
-    private Field krabBehKrab = new Field("S9(9)");
-    private Field krabUBehKrab = new Field("S9(9)");
-    private Field krabBehKrabnet = new Field("S9(9)");
-    private Field krabUBehKrabnet = new Field("S9(9)");
-    private Field skHead = new Field("999");
-    private Field skNr = new Field("ZZ9");
-    private Field skFaktnr = new Field("X(10)");
-    private Field skFtyp = new Field("XX");
-    private Field skKundnr = new Field("X(10)");
-    private Field skKto = new Field("X(6)");
-    private Field skKst = new Field("X(6)");
-    private Field skKbr = new Field("X(6)");
-    private Field skBelopp = new Field("S9(9)V99");
-    private Field skUbelopp = new Field("S9(9)V99");
-    private Field skRantaDgr = new Field("S9(9)");
-    private Field skRanta = new Field("S9(9)V99");
-    private Field skRstopp = new Field("X");
-    private Field gxxBokBelopp = new Field("S999999999V99");
-    private Field gxxSaldo = new Field("S999999999V99");
-    private Field gxx10Varning = new Field("X");
-    private Field gxxKommNr = new Field("999");
-    private Field gxxNastaRadnr = new Field("999");
-    private Field gxxScnr = new Field("999");
-    private Field gxxTopRadnr = new Field("999");
-    private Field gxxLedigt = new Field("ZZ9");
-    private Field gxxBetbel = new Field("S9(9)");
-    private Field gxxUbetbel = new Field("S9(9)");
-    private Field gxxRest = new Field("S9(9)");
-    private Field tmp22nD = new Field("Z9.99-");
-    private Field tmp2x = new Field("XX");
-    private Field tmp3x = new Field("XXX");
-    private Field tmp3n = new Field("999");
-    private Field tmp3n1 = new Field("999");
-    private Field tmp3n2 = new Field("999");
-    private Field tmp3n3 = new Field("999");
-    private Field tmp3n4 = new Field("999");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S999999999V99");
-    private Field tmpNum2 = new Field("S999999999V99");
-    private Field tmpNumD = new Field("ZZZBZZZBZZ9.99-");
-    private Field tmp10x = new Field("X(25)");
-    private Field tmp25x = new Field("X(25)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
--- a/server.src/prg/bok/Vreglev.java
-    private Field printerline = lineprinter.extend("X(200)");
-
-    private lib.lev.Parapost levpara=new lib.lev.Parapost(Vreglev.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(Vreglev.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Vreglev.this, pa);
-    private lib.bok.Autopost bokauto=new lib.bok.Autopost(Vreglev.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Vreglev.this);
-    private Field pxxKrabKto = new Field("X(6)");
-    private Field pxxKrabKst = new Field("X(6)");
-    private Field pxxKrabAvr = new Field("X");
-    private Field pxxDagForeFri = new Field("X");
-    private Field pxxMediaBgc = new Field("X");
-    private Field pxxMediaPgc = new Field("X");
-    private Field pxxDoBalKst = new Field("X");
-    private Field beForstaDanr = new Field("S9(9)");
-    private Field beSistaDanr = new Field("S9(9)");
-    private Field beNastaLedig = new Field("S9(9)", 1);
-    private Field slHead = new Field("999");
-    private Field slNr = new Field("ZZ9");
-    private Field slFaktnr = new Field("X(10)");
-    private Field slFtyp = new Field("XX");
-    private Field slLevenr = new Field("X(10)");
-    private Field slKto = new Field("X(6)");
-    private Field slKst = new Field("X(6)");
-    private Field slKbr = new Field("X(6)");
-    private Field slBelopp = new Field("S999999999V99");
-    private Field slKrab = new Field("S999999999V99");
-    private Field slBetsatt = new Field("XX");
-    private Field slId = new Field("9(6)");
-    private Field slLopnr = new Field("9(3)");
-    private Field gxxBokBelopp = new Field("S999999999V99");
-    private Field gxxSaldo = new Field("S999999999V99");
-    private Field gxx10Varning = new Field("X");
-    private Field gxxKommNr = new Field("S9(9)");
-    private Field gxxNastaRadnr = new Field("S9(9)");
-    private Field gxxScnr = new Field("S9(9)");
-    private Field gxxTopRadnr = new Field("S9(9)");
-    private Field gxxLedigtD = new Field("ZZ9");
-    private Field tmpDdate = new Field("9(8)");
-    private Field tmpKrab = new Field("999V99");
-    private Field tmpKrabBelopp = new Field("S999999999V99");
-    private Field tmpKrabBelopp2 = new Field("S999999999V99");
-    private Field tmpTotbel = new Field("S9(9)V99");
-    private Field tmpLevenr = new Field("X(10)");
-    private Field x = new Field("S9(9)");
-    private Field tmpX = new Field("X");
-    private Field tmp2n = new Field("99");
-    private Field tmpPek = new Field("S9(9)");
-    private Field tmpPek1 = new Field("S9(9)");
-    private Field tmpPek2 = new Field("S9(9)");
-    private Field tmpPek3 = new Field("S9(9)");
-    private Field tmpPek4 = new Field("S9(9)");
-    private Field tmpHel = new Field("S999999999");
-    private Field tmpNum2 = new Field("S999999999V99");
-    private Field tmpNumD = new Field("ZZZBZZZBZZ9.99-");
-    private Field pa2 = new Field("X(65472)");
-    private Field pa2Pek = new Field("999");
-    private Field sc2 = new Field("X(200)");
-    private Field fel2 = new Field("X");
-    private Field felFinns = new Field("X");
-    private Field bfDatum = new Field("9(8)");
-    private void bfBankdag() {
-        call("prg.lev.p3kale", pa.paraArea, "N", bfDatum, bfDatum);
-        cancel("prg.lev.p3kale");
-    }
-
--- a/server.src/prg/bok/Vregper.java
-
-    private Field printerline = lineprinter.extend("X(108)");
-
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(Vregper.this, pa);
-    private lib.bok.Dbokpost bokdbok=new lib.bok.Dbokpost(Vregper.this, pa);
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(Vregper.this, pa);
-    private lib.bok.Ditrpost bokditr=new lib.bok.Ditrpost(Vregper.this, pa);
-    private lib.kun.Dfakpost kundfak=new lib.kun.Dfakpost(Vregper.this, pa);
-    private lib.lev.Dfakpost levdfak=new lib.lev.Dfakpost(Vregper.this, pa);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Vregper.this, pa);
-    private lib.inv.Tranpost invtran=new lib.inv.Tranpost(Vregper.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Vregper.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Vregper.this);
-    private Field exxNum = new Field("S9(9)V99");
-    private Field pxxPtyp2 = new Field("XX");
-    private Field pxxVerNr2 = new Field("9(6)");
-    private Field pxxBfDat2 = new Field("9(8)");
-    private Field kom = new Field("X");
-    private Field pxxCaller = new Field("X");
--- a/server.src/prg/bok/W11014.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(W11014.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W11014.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W11014.this);
-    private Field scFunk = new Field("9");
-    private Field exportfilnamn = new Field("X(50)");
-    private void fktoOpenOutput() {
-        fkto.open("OUTPUT");
-    }
-
-    private void fktoOpenInput() {
-        fkto.open("INPUT");
-    }
-
-    private void fktoRead() {
-        fktoEof.set("N");
-        fkto.read();
-        if (fkto.invalidKey()) {
-            fktoEof.set("J");
-        }
-        if (fktoFs.equals("9D")) {
-            c_sleep("1");
-            fktoRead();
-            return;
-        }
-    }
-
-    private void fktoReadKl() {
-        fktoEof.set("N");
-        fkto.readWithLock();
-        if (fkto.invalidKey()) {
-            fktoEof.set("J");
-        }
-        if (fktoFs.equals("9D")) {
-            c_sleep("1");
-            fktoReadKl();
-            return;
-        }
-    }
-
-    private void fktoReadnextKl() {
-        fktoEof.set("N");
-        fkto.readNext();
-        if (fkto.atEnd()) {
-            fktoEof.set("J");
-        }
-        if (fktoFs.equals("9D")) {
-            fkto.start(">", "fkto_id");
-            c_sleep("1");
-            fktoReadnextKl();
-            return;
-        }
-    }
-
-    private void fktoCommit() {
-        lib.bok.Kontpost.fd kont=bokkont.get();
-        unlockFiles();
-    }
-
-    private void fktoDelete() {
-        fkto.delete();
-    }
-
--- a/server.src/prg/bok/W141.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W141.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W141.this);
-    private Field scFunk = new Field("9");
-    private Field bxxPer = new Field("99");
-    private Field bxxPeriodnr = new Field("99");
-    private Field tmpKto = new Field("X(6)");
-    private Field tmpKst = new Field("X(6)");
-    private Field tmpKbr = new Field("X(6)");
-    private Field tmpBelopp = new Field("S999999999V99");
-    private Field tmpHel = new Field("S999999999");
-    private void nollastatus() {
-        call("prg.bas.signal", "NOTIS", webpara.userid, " ", " ", " ");
-    }
-
--- a/server.src/prg/bok/W161.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W161.this);
-    private Field scFunk = new Field("9");
-    private Field rowpek = new Field("999");
-    private Field oldKontonr = new Field("X(6)");
-    private Field tmp3n1 = new Field("999");
-    private Field tmp3n2 = new Field("999");
-    private Field tmp3n3 = new Field("999");
-    private void export() {
-        if (skri.filnamn.ref(1,3).equals("-F ")) {
-            tmp.set(skri.filnamn.ref(4));
-            skri.filnamn.set(tmp);
-        }
-        call("prg.bas.strut", exportfilnamn, "W161%S%0", webpara.userid, webpara.pid);
-        call("prg.bas.strut", tmp, "TMP/%0.xls", exportfilnamn);
-        call("prg.bas.expfil", skri.filnamn.ref(1,50), tmp.ref(1,50));
-        call(webpara.webut, "%cPRG/BAS/WEBXLS+%u+w161.xls", 4, exportfilnamn);
-    }
-
--- a/server.src/prg/bok/W162.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W162.this);
-    private Field pxxForstaPer = new Field("9999");
-    private Field pxxForstaNr = new Field("99");
-    private Field scFunk = new Field("9");
-    private Field tmp4n = new Field("9999");
-    private Field val = new Field("X(10)");
-    private Field retVal = new Field("X(10)");
-    private void fsortOpenExtend() {
-        fsort.open("EXTEND");
-        if (fsortFs.equals("9A")) {
-            c_sleep("1");
-            fsortOpenExtend();
-            return;
-        }
-        if (!(fsortFs1.equals("0"))) {
-            call("prg.bas.sysfel", fsortId, fsortFs);
-            cancel("prg.bas.sysfel");
-        }
-    }
-
--- a/server.src/prg/bok/W163.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W163.this);
-    private Field pxxForstaPer = new Field("9(6)");
-    private Field pxxForstaNr = new Field("99");
-    private Field scFunk = new Field("9");
-    private Field tmpHel = new Field("S9(9)");
-    private void fsortOpenOutput() {
-        fsort.open("OUTPUT");
-    }
-
-    private void fsortOpenInput() {
-        fsort.open("INPUT");
-    }
-
-    private void fsortCommit() {
-        unlockFiles();
-    }
-
--- a/server.src/prg/bok/W16501.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W16501.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W16501.this);
-    private Field scFunk = new Field("9");
--- a/server.src/prg/bok/W16502.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W16502.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W16502.this);
-    private Field scFunk = new Field("9");
-    private Field x = new Field("S9(9)");
-    private void fsortOpenInput() {
-        fsort.open("INPUT");
-    }
-
-    private void fsortReadKl() {
-        fsortEof.set("N");
-        fsort.readWithLock();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-        if (fsortFs.equals("9D")) {
-            c_sleep("1");
-            fsortReadKl();
-            return;
-        }
-    }
-
-    private void fsortReadnextKl() {
-        fsortEof.set("N");
-        fsort.readNext();
-        if (fsort.atEnd()) {
-            fsortEof.set("J");
-        }
-        if (fsortFs.equals("9D")) {
-            fsort.start(">", "fsort_id");
-            c_sleep("1");
-            fsortReadnextKl();
-            return;
-        }
-    }
-
-    private void fsortCommit() {
-        unlockFiles();
-    }
-
-    private void fsortDelete() {
-        fsort.delete();
-    }
-
-    private void fkundOpenInput() {
-        fkund.open("INPUT");
-    }
-
-    private void fkundReadKl() {
-        fkundEof.set("N");
-        fkund.readWithLock();
-        if (fkund.invalidKey()) {
-            fkundEof.set("J");
-        }
-        if (fkundFs.equals("9D")) {
-            c_sleep("1");
-            fkundReadKl();
-            return;
-        }
-    }
-
-    private void fkundStart() {
-        fkundEof.set("N");
-        fkund.start("NOT<", "fkund_id");
-        if (fkund.invalidKey()) {
-            fkundEof.set("J");
-        }
-    }
-
-    private void fkundReadnext() {
-        fkundEof.set("N");
-        fkund.readNext();
-        if (fkund.atEnd()) {
-            fkundEof.set("J");
-        }
-        if (fkundFs.equals("9D")) {
-            fkund.start(">", "fkund_id");
-            c_sleep("1");
-            fkundReadnext();
-            return;
-        }
-    }
-
-    private void fkundReadnextKl() {
-        fkundEof.set("N");
-        fkund.readNext();
-        if (fkund.atEnd()) {
-            fkundEof.set("J");
-        }
-        if (fkundFs.equals("9D")) {
-            fkund.start(">", "fkund_id");
-            c_sleep("1");
-            fkundReadnextKl();
-            return;
-        }
-    }
-
-    private void fkundCommit() {
-        unlockFiles();
-    }
-
-    private void fkundDelete() {
-        fkund.delete();
-    }
-
--- a/server.src/prg/bok/W16503.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W16503.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W16503.this);
-    private Field scFunk = new Field("9");
-    private Field proc = new Field("S9(9)V99");
-    private Field procPek = new Field("S9(9)");
-    private Field procDec = new Field("S9(9)");
-    private Field proc9 = new Field("9");
--- a/server.src/prg/bok/W16504.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W16504.this);
-    private Field scFunk = new Field("9");
-    private Field x = new Field("S9(9)");
-    private void fsortOpenInput() {
-        fsort.open("INPUT");
-    }
-
-    private void fsortReadKl() {
-        fsortEof.set("N");
-        fsort.readWithLock();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-        if (fsortFs.equals("9D")) {
-            c_sleep("1");
-            fsortReadKl();
-            return;
-        }
-    }
-
-    private void fsortReadnextKl() {
-        fsortEof.set("N");
-        fsort.readNext();
-        if (fsort.atEnd()) {
-            fsortEof.set("J");
-        }
-        if (fsortFs.equals("9D")) {
-            fsort.start(">", "fsort_id");
-            c_sleep("1");
-            fsortReadnextKl();
-            return;
-        }
-    }
-
-    private void fsortCommit() {
-        unlockFiles();
-    }
-
-    private void fsortDelete() {
-        fsort.delete();
-    }
-
-    private void fkundOpenInput() {
-        fkund.open("INPUT");
-    }
-
-    private void fkundReadKl() {
-        fkundEof.set("N");
-        fkund.readWithLock();
-        if (fkund.invalidKey()) {
-            fkundEof.set("J");
-        }
-        if (fkundFs.equals("9D")) {
-            c_sleep("1");
-            fkundReadKl();
-            return;
-        }
-    }
-
-    private void fkundStart() {
-        fkundEof.set("N");
-        fkund.start("NOT<", "fkund_id");
-        if (fkund.invalidKey()) {
-            fkundEof.set("J");
-        }
-    }
-
-    private void fkundReadnext() {
-        fkundEof.set("N");
-        fkund.readNext();
-        if (fkund.atEnd()) {
-            fkundEof.set("J");
-        }
-        if (fkundFs.equals("9D")) {
-            fkund.start(">", "fkund_id");
-            c_sleep("1");
-            fkundReadnext();
-            return;
-        }
-    }
-
-    private void fkundReadnextKl() {
-        fkundEof.set("N");
-        fkund.readNext();
-        if (fkund.atEnd()) {
-            fkundEof.set("J");
-        }
-        if (fkundFs.equals("9D")) {
-            fkund.start(">", "fkund_id");
-            c_sleep("1");
-            fkundReadnextKl();
-            return;
-        }
-    }
-
-    private void fkundCommit() {
-        unlockFiles();
-    }
-
-    private void fkundDelete() {
-        fkund.delete();
-    }
-
--- a/server.src/prg/bok/W16505.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W16505.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W16505.this);
-    private Field scFunk = new Field("9");
-    private Field x = new Field("S9(9)");
-    private void fsortOpenInput() {
-        fsort.open("INPUT");
-    }
-
-    private void fsortReadKl() {
-        fsortEof.set("N");
-        fsort.readWithLock();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-        if (fsortFs.equals("9D")) {
-            c_sleep("1");
-            fsortReadKl();
-            return;
-        }
-    }
-
-    private void fsortReadnextKl() {
-        fsortEof.set("N");
-        fsort.readNext();
-        if (fsort.atEnd()) {
-            fsortEof.set("J");
-        }
-        if (fsortFs.equals("9D")) {
-            fsort.start(">", "fsort_id");
-            c_sleep("1");
-            fsortReadnextKl();
-            return;
-        }
-    }
-
-    private void fsortCommit() {
-        unlockFiles();
-    }
-
-    private void fsortDelete() {
-        fsort.delete();
-    }
-
-    private void fkundOpenInput() {
-        fkund.open("INPUT");
-    }
-
-    private void fkundReadKl() {
-        fkundEof.set("N");
-        fkund.readWithLock();
-        if (fkund.invalidKey()) {
-            fkundEof.set("J");
-        }
-        if (fkundFs.equals("9D")) {
-            c_sleep("1");
-            fkundReadKl();
-            return;
-        }
-    }
-
-    private void fkundStart() {
-        fkundEof.set("N");
-        fkund.start("NOT<", "fkund_id");
-        if (fkund.invalidKey()) {
-            fkundEof.set("J");
-        }
-    }
-
-    private void fkundReadnext() {
-        fkundEof.set("N");
-        fkund.readNext();
-        if (fkund.atEnd()) {
-            fkundEof.set("J");
-        }
-        if (fkundFs.equals("9D")) {
-            fkund.start(">", "fkund_id");
-            c_sleep("1");
-            fkundReadnext();
-            return;
-        }
-    }
-
-    private void fkundReadnextKl() {
-        fkundEof.set("N");
-        fkund.readNext();
-        if (fkund.atEnd()) {
-            fkundEof.set("J");
-        }
-        if (fkundFs.equals("9D")) {
-            fkund.start(">", "fkund_id");
-            c_sleep("1");
-            fkundReadnextKl();
-            return;
-        }
-    }
-
-    private void fkundCommit() {
-        unlockFiles();
-    }
-
-    private void fkundDelete() {
-        fkund.delete();
-    }
-
--- a/server.src/prg/bok/W165fildk.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W165fildk.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W165fildk.this);
-    private Field scFunk = new Field("9");
-    private Field lineNumber = new Field("99");
-    private Field linesAPage = new Field("99", 41);
-    private Field pageNumber = new Field("999");
-    private Field exportKundnr = new Field("X(50)");
-    private Field exportKundnamn = new Field("X(50)");
-    private Field exportInr = new Field("X(50)");
-    private Field exportFtyp = new Field("X(50)");
-    private Field exportBfdat = new Field("X(10)");
-    private Field x = new Field("S9(9)");
-    private void pageTest() {
-        lineNumber.increment(1);
-        if (lineNumber.compareTo(linesAPage)>0) {
-            newPage();
-        }
-    }
-
-    private void newPage() {
-        pageNumber.increment(1);
-        std.stdSel.set(lstData);
-        lineNumber.set(1);
-        call("prg.bas.listhuv", pa.paraArea, "U001", 120, pageNumber, lineNumber, std.stdSel, printerline);
-        while (!(printerline.equals("EOF"))) {
-            if (lineNumber.equals(1)) {
-                if (pageNumber.equals(1)) {
-                    if (skri.ff.equals("J")) {
-                        printerline.printAfter(0,new String(new char[]{0x0c}));
-                        printerline.printAfter(0);
-                    }
-                    else {
-                        printerline.printAfter(0);
-                    }
-                }
-                else {
-                    printerline.printAfter(0,new String(new char[]{0x0c}));
-                    printerline.printAfter(0);
-                }
-            }
-            else {
-                printerline.printAfter(1);
-            }
-            lineNumber.increment(1);
-            call("prg.bas.listhuv", pa.paraArea, "U001", 120, pageNumber, lineNumber, std.stdSel, printerline);
-        }
-        lineNumber.decrement(1);
-        cancel("prg.bas.listhuv");
-    }
-
-    private void fsortOpenInput() {
-        fsort.open("INPUT");
-    }
-
-    private void fsortReadKl() {
-        fsortEof.set("N");
-        fsort.readWithLock();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-        if (fsortFs.equals("9D")) {
-            c_sleep("1");
-            fsortReadKl();
-            return;
-        }
-    }
-
-    private void fsortReadnextKl() {
-        fsortEof.set("N");
-        fsort.readNext();
-        if (fsort.atEnd()) {
-            fsortEof.set("J");
-        }
-        if (fsortFs.equals("9D")) {
-            fsort.start(">", "fsort_id");
-            c_sleep("1");
-            fsortReadnextKl();
-            return;
-        }
-    }
-
-    private void fsortCommit() {
-        unlockFiles();
-    }
-
-    private void fsortDelete() {
-        fsort.delete();
-    }
-
-    private void fkundOpenInput() {
-        fkund.open("INPUT");
-    }
-
-    private void fkundReadKl() {
-        fkundEof.set("N");
-        fkund.readWithLock();
-        if (fkund.invalidKey()) {
-            fkundEof.set("J");
-        }
-        if (fkundFs.equals("9D")) {
-            c_sleep("1");
-            fkundReadKl();
-            return;
-        }
-    }
-
-    private void fkundStart() {
-        fkundEof.set("N");
-        fkund.start("NOT<", "fkund_id");
-        if (fkund.invalidKey()) {
-            fkundEof.set("J");
-        }
-    }
-
-    private void fkundReadnext() {
-        fkundEof.set("N");
-        fkund.readNext();
-        if (fkund.atEnd()) {
-            fkundEof.set("J");
-        }
-        if (fkundFs.equals("9D")) {
-            fkund.start(">", "fkund_id");
-            c_sleep("1");
-            fkundReadnext();
-            return;
-        }
-    }
-
-    private void fkundReadnextKl() {
-        fkundEof.set("N");
-        fkund.readNext();
-        if (fkund.atEnd()) {
-            fkundEof.set("J");
-        }
-        if (fkundFs.equals("9D")) {
-            fkund.start(">", "fkund_id");
-            c_sleep("1");
-            fkundReadnextKl();
-            return;
-        }
-    }
-
-    private void fkundCommit() {
-        unlockFiles();
-    }
-
-    private void fkundDelete() {
-        fkund.delete();
-    }
-
--- a/server.src/prg/bok/W16701.java
-    private lib.lev.Parapost levpara=new lib.lev.Parapost(W16701.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W16701.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W16701.this);
-    private Field scFunk = new Field("9");
-    private Field x = new Field("S9(9)");
-    private Field validOk = new Field("X");
-    private void fankRead() {
-        fankEof.set("N");
-        fank.read();
-        if (fank.invalidKey()) {
-            fankEof.set("J");
-        }
-        if (fankFs.equals("99")) {
-            c_sleep("1");
-            fankRead();
-            return;
-        }
-    }
-
--- a/server.src/prg/bok/W170.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W170.this);
-    private Field oldRappid = new Field("X(6)");
-    private Field scFunk = new Field("9");
-    private Field validOk = new Field("X");
-    private void screenVisa() {
-        if (!pa.centralRapp.equalsEither(pa.bkstvftg, SPACE)) {
-            call("prg.bas.visa", pa.paraArea, "B002");
-            std.colorMeddelande();
-        }
-    }
-
-    private void natt() {
-        natt.typ.set("U");
-        natt.lopnr.set(1);
-        natt.f9907Read();
-        while (!(natt.f9907Eof.equals("J"))) 
-            nattLoop();
-        natt.bolag.set(pa.bkstvftg);
-        natt.bfar.set(pa.bfar);
-        natt.anvid.set(pa.anvid);
-        natt.bdate.set(std.stdToday);
-        call("prg.bas.tztid", natt.btime);
-        natt.program.set("PRG/BOK/017001");
-        natt.program2.set("Rapport");
-        paRappid.set(scRappid);
-        paMinper.set(scMinper);
-        paMaxper.set(scMaxper);
-        paMinkto.set(scMinkto);
-        paMaxkto.set(scMaxkto);
-        paMinkst.set(scMinkst);
-        paMaxkst.set(scMaxkst);
-        paMinkbr.set(scMinkbr);
-        paMaxkbr.set(scMaxkbr);
-        paFilnamn.set(SPACE);
-        paSkrivare.set(scSkrivare);
-        paAntal.set(scAntal);
-        paKolumn.set(scKolumn);
-        if (scNodetalj.equals(std.stdJa)) {
-            paNodetalj.set("J");
-        }
-        if (scNodetalj.equals(std.stdNej)) {
-            paNodetalj.set("N");
-        }
-        if (scNodetaljz.equals(std.stdJa)) {
-            paNodetaljz.set("J");
-        }
-        if (scNodetaljz.equals(std.stdNej)) {
-            paNodetaljz.set("N");
-        }
-        if (scNodetaljbz.equals(std.stdJa)) {
-            paNodetaljbz.set("J");
-        }
-        if (scNodetaljbz.equals(std.stdNej)) {
-            paNodetaljbz.set("N");
-        }
-        paDetalj.set(scDetalj);
-        paAntPosKto.set(scAntPosKto);
-        paIndex.set(scIndex);
-        paFtgnamn.set(scFtgnamn);
-        paMinpernr.set(minpernr);
-        paMaxpernr.set(maxpernr);
-        natt.param.set(paPar);
-        natt.skrivare.set(scSkrivare);
-        natt.antal.set(scAntal);
-        natt.kdate.set(ZERO);
-        natt.ktime.set(ZERO);
-        natt.utskriven.set("N");
-        natt.bearbetad.set("N");
-        natt.select.set("N");
-        natt.f9907Write();
-        std.colorMeddelande();
-        call("prg.bas.visa", pa.paraArea, "F016");
-    }
-
-    private void nattLoop() {
-        natt.lopnr.increment(1);
-        natt.f9907Read();
-    }
-
--- a/server.src/prg/bok/W182.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W182.this);
-    private Field scFunk = new Field("9");
-    private Field tmpDim = new Field("X(25)");
-    private Field z = new Field("S9(9)");
-    private void getSelectKollaKst() {
-        scKstOkO.set(SPACE);
-        scKstOkAnt.set(ZERO);
-        if (!(scKst.equals(SPACE))) {
-            x.set(1);
-            while (!(x.compareTo(40)>0)) {
-                y.set(x);
-                while (!((x.compareTo(40)>0) || 
-                            (scKst.ref(x,1).equalsEither(SPACE, ",")))) {
-                    x.increment(1);
-                }
-                scKstOkAnt.increment(1);
-                scKstOk[scKstOkAnt.getInt()-1].set(scKst.ref(y,x.subtract(y)));
-                while (!((x.compareTo(40)>0) || 
-                            (!(scKst.ref(x,1).equals(SPACE)) && !(scKst.ref(x,1).equals(","))))) {
-                    x.increment(1);
-                }
-            }
-        }
-    }
-
-    private void fktoOpenInput() {
-        fkto.open("INPUT");
-    }
-
-    private void fbelOpenInput() {
-        fbel.open("INPUT");
-    }
-
--- a/server.src/prg/bok/W19002.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W19002.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W19002.this);
-    private Field scFunk = new Field("9");
-    private Field eof = new Field("9");
-    private Field firstRec = new Field("9");
-    private Field ptyp = new Field("XX");
-    private Field vernr = new Field("9(6)");
-    private Field oldPtyp = new Field("XX");
-    private Field oldVernr = new Field("9(6)");
-    private Field kontonr = new Field("X(6)");
-    private Field oldKontonr = new Field("X(6)");
-    private Field period = new Field("99");
-    private Field oldPeriod = new Field("99");
-    private Field vdsum = new Field("S999999999V99");
-    private Field vksum = new Field("S999999999V99");
-    private Field vdtsum = new Field("S999999999V99");
-    private Field vktsum = new Field("S999999999V99");
-    private Field numdata = new Field("S999999999V99");
-    private Field numdata2 = new Field("S999999999V99");
-    private Field diff = new Field("X", "N");
-    private Field val = new Field("X(10)");
-    private Field retVal = new Field("X(10)");
--- a/server.src/prg/bok/W19006.java
-    private lib.kun.Kundpost kunkund=new lib.kun.Kundpost(W19006.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W19006.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W19006.this);
-    private Field scFunk = new Field("9");
-    private Field validOk = new Field("X");
-    private void fsortOpenInput() {
-        fsort.open("INPUT");
-    }
-
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-        if (fsortFs.equals("9D")) {
-            c_sleep("1");
-            fsortRead();
-            return;
-        }
-    }
-
-    private void fsortReadKl() {
-        fsortEof.set("N");
-        fsort.readWithLock();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-        if (fsortFs.equals("9D")) {
-            c_sleep("1");
-            fsortReadKl();
-            return;
-        }
-    }
-    private void fsortReadnextKl() {
-        fsortEof.set("N");
-        fsort.readNext();
-        if (fsort.atEnd()) {
-            fsortEof.set("J");
-        }
-        if (fsortFs.equals("9D")) {
-            fsort.start(">", "fsort_id");
-            c_sleep("1");
-            fsortReadnextKl();
-            return;
-        }
-    }
-
-    private void fsortCommit() {
-        unlockFiles();
-    }
-
-    private void fsortDelete() {
-        fsort.delete();
-    }
-
--- a/server.src/prg/bok/W90102.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W90102.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W90102.this);
-    private Field tmpCommandLine = new Field("X(100)");
--- a/server.src/prg/bok/W90105.java
--- a/server.src/prg/bok/W90108.java
-    private lib.med.Datab da=new lib.med.Datab(W90108.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(W90108.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W90108.this);
-    private Field tmpCommandLine = new Field("X(100)");
--- a/server.src/prg/bok/Webavpm.java
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(Webavpm.this, pa);
-    private lib.bok.Moklpost bokmokl=new lib.bok.Moklpost(Webavpm.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webavpm.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field oldPost = new Field("X(1000)");
-    private Field newPost = new Field("X(1000)");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selMokl = new Field("X");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field oldFaknr = new Field("9(7)");
-    private Field paFaknr = new Field("9(7)");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private void stangRaderaFsort() {
-        fsort.close();
-        fsort.deleteFile();
-    }
-
--- a/server.src/prg/bok/Webavpmb.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Webavpmb.this, pa);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Webavpmb.this);
-    private lib.bas.Std std=new lib.bas.Std(Webavpmb.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webavpmb.this);
-    private Field fsortNamn = new Field("X(50)");
--- a/server.src/prg/bok/Webavpmm.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Webavpmm.this, pa);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Webavpmm.this);
-    private lib.bas.Std std=new lib.bas.Std(Webavpmm.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webavpmm.this);
-    private lib.med.Datab da=new lib.med.Datab(Webavpmm.this);
-    private Field fsortNamn = new Field("X(50)");
--- a/server.src/prg/bok/Webavpmp.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Webavpmp.this, pa);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Webavpmp.this);
-    private Field fsortNamn = new Field("X(50)");
-    private Field momspl = new Field("X");
--- a/server.src/prg/bok/Webclea.java
-    private lib.bok.Botrpost bokbotr=new lib.bok.Botrpost(Webclea.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webclea.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Webclea.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webclea.this);
-    private lib.pro.Datab da=new lib.pro.Datab(Webclea.this);
-    private lib.bas.Std std=new lib.bas.Std(Webclea.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webclea.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Webclea.this, webpara, pa);
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field oldPost = new Field("X(1000)");
-    private Field newPost = new Field("X(1000)");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field testKodNum = new Field("9(15)");
-    private Field oldFaknr = new Field("9(7)");
-    private Field paFaknr = new Field("9(7)");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
--- a/server.src/prg/bok/Webfrg.java
-    private lib.bok.Dipapost bokdipa=new lib.bok.Dipapost(Webfrg.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webfrg.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Webfrg.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webfrg.this);
-    private lib.pro.Datab da=new lib.pro.Datab(Webfrg.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webfrg.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Webfrg.this, webpara, pa);
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field oldPost = new Field("X(1000)");
-    private Field newPost = new Field("X(1000)");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selEndtrans = new Field("X");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field oldFaknr = new Field("9(7)");
-    private Field paFaknr = new Field("9(7)");
-    private Field j = new Field("99999");
-    private void berPer() {
-        lib.bok.Hbokpost.fd hbok=bokhbok.get();
-        lib.bok.Parapost.fd para=bokpara.get();
-        belRor.set(0);
-        hbok.verId3.init();
-        hbok.verkto.set(selKto);
-        hbok.verbokdag3.set(para.bookperMin[i.getInt()-1]);
-        hbok.f9810Start3();
-        if (hbok.f9810Fs1.equals("0")) {
-            hbok.f9810Readnext3();
-        }
-        while ((hbok.f9810Fs1.equals("0") && hbok.verkto.equals(selKto) && hbok.verbokdag3.compareTo(para.bookperMax[i.getInt()-1])<=0)) {
-            belSaldo.increment(hbok.verbelopp);
-            hbok.f9810Readnext3();
-        }
-    }
-
--- a/server.src/prg/bok/Webiavst.java
-    private lib.lev.Fakapost levfaka=new lib.lev.Fakapost(Webiavst.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webiavst.this);
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field oldPost = new Field("X(1000)");
-    private Field newPost = new Field("X(1000)");
-    private Field path = new Field("X(50)");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field fi = new Field("X");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field forsta = new Field("X");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field oldFaknr = new Field("9(7)");
-    private Field paFaknr = new Field("9(7)");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field oldVer = new Field("X(8)");
-    private Field oldBfdat = new Field("9(8)");
--- a/server.src/prg/bok/Webktosp.java
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webktosp.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Webktosp.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webktosp.this);
-    private lib.pro.Datab da=new lib.pro.Datab(Webktosp.this);
-    private lib.bas.Std std=new lib.bas.Std(Webktosp.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webktosp.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Webktosp.this, webpara, pa);
-    private Field tmp2 = new Field("X(300)");
-    private Field post = new Field("X(1000)");
-    private Field oldPost = new Field("X(1000)");
-    private Field newPost = new Field("X(1000)");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field oldFaknr = new Field("9(7)");
-    private Field paFaknr = new Field("9(7)");
-    private Field j = new Field("99999");
--- a/server.src/prg/bok/Webmoms.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Webmoms.this);
-    private lib.bok.Dbokpost bokdbok=new lib.bok.Dbokpost(Webmoms.this, pa);
-    private lib.bok.Botrpost bokbotr=new lib.bok.Botrpost(Webmoms.this, pa);
-    private lib.kun.Kundpost kunkund=new lib.kun.Kundpost(Webmoms.this, pa);
-    private lib.kun.Faktpost kunfakt=new lib.kun.Faktpost(Webmoms.this, pa);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Webmoms.this, pa);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(Webmoms.this, pa);
-    private lib.bok.Dikopost bokdiko=new lib.bok.Dikopost(Webmoms.this, pa);
-    private lib.bok.Cleapost bokclea=new lib.bok.Cleapost(Webmoms.this, pa);
-    private lib.bok.Veripost bokveri=new lib.bok.Veripost(Webmoms.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webmoms.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Webmoms.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webmoms.this);
-    private lib.pro.Datab da=new lib.pro.Datab(Webmoms.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webmoms.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Webmoms.this, webpara, pa);
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field oldPost = new Field("X(1000)");
-    private Field newPost = new Field("X(1000)");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field clebelopp = new Field("S9(10)V99");
-    private Field skrivit = new Field("X");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field flagga1 = new Field("X");
-    private Field flagga2 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selKod = new Field("X(100)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field maxper = new Field("99");
-    private Field oldFaknr = new Field("9(7)");
-    private Field paFaknr = new Field("9(7)");
-    private Field oldKto = new Field("X(6)");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field namnkundlev = new Field("X(50)");
-    private Field faktdat = new Field("9(8)");
-    private Field faktnr = new Field("X(25)");
-    private Field nyttnr = new Field("9(6)");
-    private Field clptyp = new Field("XX");
-    private Field clkst = new Field("X(6)");
-        HashMap<String,String> momskonton=new HashMap();
-        lib.bok.Parapost.fd para=bokpara.get();
-        lib.bok.Hbokpost.fd hbok=bokhbok.get();
-        lib.bok.Moklpost.fd mokl=bokmokl.get();
-        lib.bok.Parapost.fd para=bokpara.get();
-        lib.bok.Moklpost.fd mokl=bokmokl.get();
--- a/server.src/prg/bok/Webmrp.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webmrp.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field oldPost = new Field("X(1000)");
-    private Field newPost = new Field("X(1000)");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field oldFaknr = new Field("9(7)");
-    private Field paFaknr = new Field("9(7)");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
--- a/server.src/prg/bok/Webovfar.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Webovfar.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Webovfar.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Webovfar.this);
-    private lib.kun.Kundpost kunkund=new lib.kun.Kundpost(Webovfar.this, pa);
-    private lib.kun.Faktpost kunfakt=new lib.kun.Faktpost(Webovfar.this, pa);
-    private lib.kun.Fakbpost kunfakb=new lib.kun.Fakbpost(Webovfar.this, pa);
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(Webovfar.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webovfar.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field filbelopp = new Field("9(13)V99");
-    private Field p6 = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field sel = new Field("X(1000)");
-    private Field selKto = new Field("X(6)");
-    private Field selDatfr = new Field("9(8)");
-    private Field selDatti = new Field("9(8)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field selTyp = new Field("X");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field filpost = new Field("X(200)");
-    private Field filpostLen = new Field("S9(9)");
-    private Field beloppD = new Field("----------9,99");
-    private Field beloppSt = new Field("S9(9)");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/bok/Webprel.java
-    private lib.bok.Veripost bokveri=new lib.bok.Veripost(Webprel.this, pa);
-    private lib.pro.Rekv rekv=new lib.pro.Rekv(Webprel.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webprel.this);
-    private lib.med.Datab da=new lib.med.Datab(Webprel.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webprel.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Webprel.this, webpara, pa);
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(10000)");
-    private Field path = new Field("X(50)");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field bfdat = new Field("9(8)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field tmp6n = new Field("9(6)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field saveMaxdatum = new Field("9(8)");
-    private Field saveBetlopnr = new Field("999");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field tmpBelopp3 = new Field("S9(10)V99");
-    private Field tmpBetbelopp = new Field("S9(10)V99");
-    private Field selFrBelopp = new Field("9(9)");
-    private Field selTiBelopp = new Field("9(9)");
-    private Field selKund = new Field("X(10)");
-    private Field selBet = new Field("X");
-    private Field selObet = new Field("X");
-    private Field selLeve = new Field("X(10)");
-    private Field selEpv = new Field("X");
-    private Field forsta = new Field("X");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field flagga1 = new Field("X");
-    private Field tmpBeh = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field radnr = new Field("99999");
-    private Field betnr = new Field("99999");
-    private Field tmpReferens = new Field("X(20)");
-    private Field invNrSt = new Field("S9(9)");
-    private Field invUnrSt = new Field("S9(9)");
-    private Field invText = new Field("X(25)");
-    private Field invTextLen = new Field("S9(9)");
-    private Field verisaknas = new Field("X");
-    private Field intsaknas = new Field("X");
-    private Field intnrOffsetL = new Field("999");
-    private Field intnrOffsetK = new Field("999");
-    private Field intnrOffsetP = new Field("999");
-    private Field intnrOffsetI = new Field("999");
-    private Field intnrOffsetJ = new Field("999");
-    private Field tmpDdate = new Field("9(8)");
-    private Field tmpKrab = new Field("999V99");
-    private Field ffDatum = new Field("9(8)");
-    private Field tmpKrabBelopp = new Field("S999999999V99");
-    private Field tmpKrabBelopp2 = new Field("S999999999V99");
-    private Field tmpTotbel = new Field("S9(9)V99");
-    private Field radKrab = new Field("S999999999V99");
-    private Field radKrabU = new Field("S999999999V99");
-    private Field tmpSparrad = new Field("X");
-    private void hittabfar() {
-        call("prg.bas.stdbeh", tmpBeh, webpara.userid, webpara.kamftg, "BOK", "PBOK-E", "BSP");
-        ftgs.forecord.init();
-        ftgs.fokod.set(webpara.kamftg);
-        ftgs.f9904OpenInput();
-        ftgs.f9904Read();
-        ftgs.f9904Close();
-        pa.bfar.set(ftgs.fominar);
-        while (!(pa.bfar.compareTo(ftgs.fomaxar)>0)) {
-            bok_para.f9800OpenIO();
-            bok_para.f9800P.set(1);
-            bok_para.f9800Read();
-            bok_para.f9800Close();
-            bok_para.f9801OpenInput();
-            bok_para.f9801Read();
-            bok_para.f9801Close();
-            i.set(1);
-            for (int _t=bok_para.bookparamNum.getInt(); _t>0; _t--) {
-                if (tmpBeh.compareTo("W")>=0 || !(bok_para.bookperSparr[i.getInt()-1].equals("J"))) {
-                    if (bfdat.compareTo(bok_para.bookperMin[i.getInt()-1])>=0 && bfdat.compareTo(bok_para.bookperMax[i.getInt()-1])<=0) {
-                        return;
-                    }
-                }
-                i.increment(1);
-            }
-            pa.bfar.increment(1);
-        }
-        pa.bfar.set(ZERO);
-    }
-
-    private void skrivKunrad() {
-        tmpRestbelopp.set(tmpBelopp2);
-        skrivKunradrad();
-    }
-
-    private void skrivKunradrad() {
-        lib.kun.Faktpost.fd kun_fakt=kunfakt.get();
-        lib.bok.Kontpost.fd kont=bokkont.get();
-        if (kun_fakt.slftyp.equals(SPACE)) {
-            call(webpara.webut, "%c|%S|%S|\\", 3, kun_fakt.slid, kun_fakt.slinr);
-        }
-        else {
-            call(webpara.webut, "%c|%S|%S-%S|\\", 3, kun_fakt.slid, kun_fakt.slftyp, kun_fakt.slinr);
-        }
-        if (kun_fakt.sluvaluta.equals(SPACE)) {
-            kun_fakt.sluvaluta.set(ftgs.fobasvaluta);
-        }
-        call(webpara.webut, "%B|%B|%B|%S|%S|%S|%S|%S|\\", tmpBelopp, tmpBelopp2, tmpRestbelopp, kun_fakt.sluvaluta, kun_fakt.slsrnr, kun_fakt.slkto);
-        kont.cbrnrecord.init();
-        kont.cbrnType.set("A");
-        kont.cbrnId1.set(kun_fakt.slkto);
-        kont.f9803aRead();
-        if (kont.cbrnKst.equalsEither("J", "B", "F")) {
-            call(webpara.webut, "%S|\\", kun_fakt.slkst);
-        }
-        else {
-            call(webpara.webut, "%S|\\", " ");
-        }
-        if (kont.cbrnKbr.equalsEither("J", "B")) {
-            call(webpara.webut, "%S|\\", kun_fakt.slkbr);
-        }
-        else {
-            call(webpara.webut, "%S|\\", " ");
-        }
-        call(webpara.webut, "%B", radKrab);
-    }
-
-    private void ffBankdag() {
-        call("prg.lev.p3kale", pa.paraArea, "N", ffDatum, ffDatum);
-        cancel("prg.lev.p3kale");
-    }
-
--- a/server.src/prg/bok/Webreg.java
-        if (true) {
-            return;
-        }
-        tmp.set("BOK.REG.");
-        tmp.ref(9).set(p1);
-        tmp80.set(p3);
-        call("prg.bas.regstat", tmp, "<", tmp80);
-        tmp.set("BOK.REG.");
-        tmp.ref(9).set(p1);
-        tmp80.set(p3);
-        call("prg.bas.regstat", tmp, "*", tmp80);
--- a/server.src/prg/bok/Webrrbr.java
-    private lib.bok.Dbokpost bokdbok=new lib.bok.Dbokpost(Webrrbr.this, pa);
-    private lib.bok.Moklpost bokmokl=new lib.bok.Moklpost(Webrrbr.this, pa);
-    private lib.lev.Parapost levpara=new lib.lev.Parapost(Webrrbr.this, pa);
-    private lib.lev.Betapost levbeta=new lib.lev.Betapost(Webrrbr.this, pa);
-    private lib.lev.Ankfpost levankf=new lib.lev.Ankfpost(Webrrbr.this, pa);
-    private lib.kun.Parapost kunpara=new lib.kun.Parapost(Webrrbr.this, pa);
-    private lib.in2.Invepost in2inve=new lib.in2.Invepost(Webrrbr.this, pa);
-    private lib.in2.Ityppost in2ityp=new lib.in2.Ityppost(Webrrbr.this, pa);
-    private lib.in2.Parapost in2para=new lib.in2.Parapost(Webrrbr.this, pa);
-    private lib.inv.Invepost invinve=new lib.inv.Invepost(Webrrbr.this, pa);
-    private lib.inv.Invtpost invinvt=new lib.inv.Invtpost(Webrrbr.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webrrbr.this, pa);
-    private lib.pro.Rekv rekv=new lib.pro.Rekv(Webrrbr.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webrrbr.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webrrbr.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Webrrbr.this, webpara, pa);
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field n = new Field("S9(11)");
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/bok/Websaft.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Websaft.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Websaft.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Websaft.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Websaft.this);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Websaft.this, pa);
-    private lib.bok.Dipapost bokdipa=new lib.bok.Dipapost(Websaft.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(Websaft.this, pa);
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(Websaft.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Websaft.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Websaft.this);
--- a/server.src/prg/bok/Websaft2.java
-    private lib.pro.Ogrppost proogrp=new lib.pro.Ogrppost(Websaft2.this, pa);
-    private lib.pro.Oogrpost prooogr=new lib.pro.Oogrpost(Websaft2.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Websaft2.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Websaft2.this);
-    private lib.med.Datab da=new lib.med.Datab(Websaft2.this);
-    private Field fmasterfilesEof = new Field("X", "N");
-    private Field fgeneralledgerentrylinesEof = new Field("X", "N");
-    private Field tmpTeckentabell = new Field("X(20)");
--- a/server.src/prg/bok/Webscb.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Webscb.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Webscb.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Webscb.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Webscb.this);
-    private lib.lev.Parapost levpara=new lib.lev.Parapost(Webscb.this, pa);
-    private lib.lev.Ankfpost levankf=new lib.lev.Ankfpost(Webscb.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Webscb.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webscb.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webscb.this);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webscb.this, pa);
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpHel2 = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field flagga1 = new Field("X");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field sparatnr = new Field("9(8)");
-    private Field exitStatus = new Field("999");
--- a/server.src/prg/bok/Webver.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webver.this);
-    private lib.med.Datab da=new lib.med.Datab(Webver.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webver.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Webver.this, webpara, pa);
-    private Field tmp80 = new Field("X(80)");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field saveMaxdatum = new Field("9(8)");
-    private Field saveBetlopnr = new Field("999");
-    private Field forsta = new Field("X");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field tmpBeh2 = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field invNrSt = new Field("S9(9)");
-    private Field invUnrSt = new Field("S9(9)");
-    private Field invText = new Field("X(25)");
-    private Field invTextLen = new Field("S9(9)");
-                    int k = 19;
-                    if (curInv.getInvNo().length() < 19){
-                        k = curInv.getInvNo().length();
-                    }
-        HashMap<String, Field> a=new HashMap();
--- a/server.src/prg/bok/Webverx.java
-    private lib.bok.Dbokpost bokdbok=new lib.bok.Dbokpost(Webverx.this, pa);
-    private lib.bok.Moklpost bokmokl=new lib.bok.Moklpost(Webverx.this, pa);
-    private lib.lev.Betapost levbeta=new lib.lev.Betapost(Webverx.this, pa);
-    private lib.lev.Ankfpost levankf=new lib.lev.Ankfpost(Webverx.this, pa);
-    private lib.kun.Parapost kunpara=new lib.kun.Parapost(Webverx.this, pa);
-    private lib.pro.Forepost profore=new lib.pro.Forepost(Webverx.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webverx.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Webverx.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Webverx.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webverx.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webverx.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webverx.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Webverx.this, webpara, pa);
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field path = new Field("X(50)");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field bfdat = new Field("9(8)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field tmpKbr = new Field("X");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field saveMaxdatum = new Field("9(8)");
-    private Field saveBetlopnr = new Field("999");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field tmpBelopp3 = new Field("S9(10)V99");
-    private Field tmpBetbelopp = new Field("S9(10)V99");
-    private Field tmpKund = new Field("X(10)");
-    private Field tmpIcc = new Field("X(25)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field forsta = new Field("X");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field flagga1 = new Field("X");
-    private Field tmpBeh = new Field("X");
-    private Field kolla = new Field("X");
-    private Field kollaFel = new Field("X");
-    private Field kollaBelopp = new Field("S9(10)V99");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field radnr = new Field("99999");
-    private Field betnr = new Field("99999");
-    private Field tmpReferens = new Field("X(20)");
-    private Field inkktoTyp = new Field("X");
-    private Field inkkto = new Field("X(6)");
-    private Field inkktoE = new Field("X(6)");
-    private Field inkktoG = new Field("X(6)");
-    private Field inkktoI = new Field("X(6)");
-    private Field inkktoJ = new Field("X(6)");
-    private Field inkkto9 = new Field("X(6)");
-    private Field inkktoPar = new Field("X(6)");
-    private Field inkkst = new Field("X(6)");
-    private Field inkkbr = new Field("X(6)");
-    private Field invNrSt = new Field("S9(9)");
-    private Field invUnrSt = new Field("S9(9)");
-    private Field invText = new Field("X(25)");
-    private Field invTextLen = new Field("S9(9)");
-    private Field avskrPeriod = new Field("999");
-    private Field korrny = new Field("X");
-    private Field nyttvernr = new Field("9(6)");
-    private Field verisaknas = new Field("X");
-    private Field intnrOffsetL = new Field("999");
-    private Field intnrOffsetK = new Field("999");
-    private Field intnrOffsetP = new Field("999");
-    private Field intnrOffsetI = new Field("999");
-    private Field intnrOffsetJ = new Field("999");
-    private Field tmpDdate = new Field("9(8)");
-    private Field tmpKrab = new Field("999V99");
-    private Field ffDatum = new Field("9(8)");
-    private Field pxxKrabKto = new Field("X(6)");
-    private Field pxxKrabKst = new Field("X(6)");
-    private Field pxxKrabAvr = new Field("X");
-    private Field pxxKrabAutmoms = new Field("X");
-    private Field tmpKrabBelopp = new Field("S999999999V99");
-    private Field tmpKrabBelopp2 = new Field("S999999999V99");
-    private Field tmpTotbel = new Field("S9(9)V99");
-    private Field radKrab = new Field("S999999999V99");
-    private Field radKrabU = new Field("S999999999V99");
-    private Field pxxBfDat = new Field("9(8)");
-    private Field tmpSparrad = new Field("X");
-    private Field tmpBeloppv4 = new Field("S9(10)V9999");
-    private Field tmpBelopp2v4 = new Field("S9(10)V9999");
-    private Field lstBelv4 = new Field("---------9,9999");
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/bok/Xcara01.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Xcara01.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Xcara01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xcara01.this);
-    private Field bfdat = new Field("9(8)", new Constant("20110531"));
-    private Field kurs = new Field("999999V9999");
-    private Field kursAntal = new Field("999999");
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/bok/Xcara02.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Xcara02.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Xcara02.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xcara02.this);
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field tmpStatus = new Field("X(50)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
-    private void kolla() {
-        tmpStatus.set(SPACE);
-    }
-
--- a/server.src/prg/bok/Xgmnc01.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Xgmnc01.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Xgmnc01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xgmnc01.this);
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/bok/Xgmnc02.java
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(Xgmnc02.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Xgmnc02.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Xgmnc02.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xgmnc02.this);
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/bok/Xgmnc03.java
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(Xgmnc03.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Xgmnc03.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Xgmnc03.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xgmnc03.this);
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/bok/Xgmnlb05.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Xgmnlb05.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Xgmnlb05.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xgmnlb05.this);
--- a/server.src/prg/bok/Xkase01.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Xkase01.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Xkase01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xkase01.this);
--- a/server.src/prg/bok/Xkase02.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xkase02.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xkase02.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Xkase02.this, pa);
-    private lib.pro.Datab da=new lib.pro.Datab(Xkase02.this);
--- a/server.src/prg/bok/Xnyhe01.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Xnyhe01.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Xnyhe01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xnyhe01.this);
-    private Field infilStart = new Field("S9(9)");
-    private Field infilPek = new Field("S9(9)");
-    private Field infilPek2 = new Field("S9(9)");
-    private Field infilField = new Field("X(200)");
-    private Field infilField2 = new Field("X(200)");
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field tmpStatus = new Field("X(50)");
-    private Field tmpId = new Field("X(6)");
-    private Field tmpNamnSv = new Field("X(50)");
-    private Field tmpNamnEn = new Field("X(50)");
-    private Field tmpAlt = new Field("X(50)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
--- a/server.src/prg/bok/Xtorm01.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Xtorm01.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Xtorm01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xtorm01.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Xtorm01.this, pa);
-    private lib.pro.Datab da=new lib.pro.Datab(Xtorm01.this);
--- a/server.src/prg/bok/Ygrouk.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Ygrouk.this, pa);
-    private lib.kun.Faktpost kunfakt=new lib.kun.Faktpost(Ygrouk.this, pa);
-    private lib.kun.Kundpost kunkund=new lib.kun.Kundpost(Ygrouk.this, pa);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Ygrouk.this, pa);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(Ygrouk.this, pa);
-    private lib.lev.Ankmpost levankm=new lib.lev.Ankmpost(Ygrouk.this, pa);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Ygrouk.this);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Ygrouk.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Ygrouk.this, pa);
-    private lib.pro.Datab da=new lib.pro.Datab(Ygrouk.this);
--- a/server.src/prg/bok/Ykribsii.java
-    private Field infilEof = new Field("X");
--- a/server.src/prg/dfa/P5fakts.java
-    private lib.pro.Datab da=new lib.pro.Datab(P5fakts.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(P5fakts.this);
-    private lib.pro.Stddata stddata=new lib.pro.Stddata(P5fakts.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P5fakts.this);
--- a/server.src/prg/dfa/P5fxml.java
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(P5fxml.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P5fxml.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P5fxml.this);
-    private Field pgm = new Field("X(11)", "054006");
-    private Field tmp1 = new Field("X(300)");
-    private Field frFaktnr = new Field("9(8)");
-    private Field tiFaktnr = new Field("9(8)");
-    private Field datum = new Field("X(10)");
-    private Field xslFilnamn = new Field("X(50)");
-    private Field pdfNamn = new Field("X(50)");
-    private Field pdfFilnamn = new Field("X(50)");
-    private void atergang() {
-        throw exit;
-    }
-
--- a/server.src/prg/dfa/W54001.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W54001.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W54001.this);
-    private Field scFunk = new Field("9");
-    private Field tmp2n = new Field("99");
-    private Field val = new Field("X(10)");
-    private Field retVal = new Field("X(10)");
--- a/server.src/prg/dfa/W54002.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W54002.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W54002.this);
-    private lib.bas.Header header=new lib.bas.Header(W54002.this);
-    private Field rubrik = new Field("X(19)", " UTSKRIFT FAKTUROR ");
-    private Field aaaStartLopnr = new Field("999");
-    private Field aaaKolumn = new Field("9");
-    private Field aaaSidrad = new Field("99");
-    private Field aaaPekare = new Field("99");
-    private Field aaaPek= new Field("9(9)");
-    private Field aaaSidpekare = new Field("99");
-    private Field aaaSidpek= new Field("9(9)");
-    private Field aaaOldKey1 = new Field("X(10)");
-    private Field aaaOldKey2 = new Field("X(10)");
-    private Field aaaOldKey3 = new Field("9(8)");
-    private Field aaaOldKey4 = new Field("9(8)");
-    private Field aaaOldEof = new Field("X");
-    private Field aaaRet = new Field("9");
-    private Field tmpHelD = new Field("ZZZBZZZBZZ9-");
-    private Field tmpHel2 = new Field("S9(9)");
-    private Field tmp1n = new Field("9");
-    private Field tmp6n = new Field("9(6)");
-    private Field tmpDate = new Field("9(8)");
-    private Field inteck = new Field("X");
-    private Field inteckKey = new Field("999");
-    private void header() {
-        std.stdPgm.set(pgm);
-        std.colorBakgrund();
-        headerTop();
-        headerBott();
-        std.colorBakgrund();
-    }
-
-    private void headerTop() {
-        std.colorRad1();
-        std.colorRad1();
-        std.colorBakgrund();
-        if (rubrik.ref(1,1).equals(SPACE)) {
-            header.rubrikR2.set(rubrik.ref(2));
-        }
-        else {
-            header.rubrikR2.set(rubrik);
-        }
-        std.colorRubrik();
-    }
-
-    private void headerBott() {
-        if (std.stdExtra.equals("J")) {
-            std.colorMeddelande();
-            std.colorRam();
-        }
-        else {
-            std.colorRam();
-        }
-        std.colorRad24();
-        if (!(pgm.ref(3).equals(SPACE))) {
-        }
-        if (!(pgm.ref(5).equals(SPACE))) {
-        }
-        if (!(pgm.ref(7).equals(SPACE))) {
-        }
-        headerTime();
-    }
-
-    private void headerTime() {
-        std.colorRad24();
-        call("prg.bas.tzdat", std.stdToday);
-        call("prg.bas.tztid", std.stdTime);
-    }
-
--- a/server.src/prg/dfa/W54003.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W54003.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W54003.this);
-    private Field scFunk = new Field("9");
-    private Field antalSelectSc = new Field("ZZZ9");
-    private Field val = new Field("X(10)");
-    private Field retVal = new Field("X(10)");
--- a/server.src/prg/dfa/W54005.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W54005.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W54005.this);
-    private Field antalSelectSc = new Field("ZZZ9");
-    private Field numdata = new Field("S9(8)V99");
-    private Field tmp3n = new Field("999");
-    private Field antal = new Field("S9(9)V99");
--- a/server.src/prg/dfa/Webfakt.java
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Webfakt.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Webfakt.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webfakt.this);
-    private Field pgm = new Field("X(11)", "054006");
-    private void atergang() {
-        throw exit;
-    }
-
--- a/server.src/prg/dfa/Webreg.java
-        if (true) {
-            return;
-        }
-        tmp.set("KUN.REG.");
-        tmp.ref(9).set(p1);
-        tmp80.set(p3);
-        call("prg.bas.regstat", tmp, "<", tmp80);
-        tmp.set("DFA.REG.");
-        tmp.ref(9).set(p1);
-        tmp80.set(p3);
-        call("prg.bas.regstat", tmp, "*", tmp80);
--- a/server.src/prg/gem/Addsokn.java
-    private lib.gem.Aktupost gemaktu=new lib.gem.Aktupost(Addsokn.this, pa);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Addsokn.this);
-    private lib.bas.Std std=new lib.bas.Std(Addsokn.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Addsokn.this);
-    private lib.pro.Datab da=new lib.pro.Datab(Addsokn.this);
-    private lib.pro.Pfripost propfri=new lib.pro.Pfripost(Addsokn.this, pa);
-    private lib.pro.Prfrpost proprfr=new lib.pro.Prfrpost(Addsokn.this, pa);
-    private lib.bas.Webut webut=new lib.bas.Webut(Addsokn.this, webpara, pa);
-    private Field tmp = new Field("X(300)");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p0 = new Field("X(50)");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(50)");
-    private Field p4 = new Field("X(50)");
-    private Field p5 = new Field("X(50)");
-    private Field flagga1 = new Field("X");
-    private Field flagga2 = new Field("X");
-    private Field beh = new Field("X");
-    private Field skrivitflik = new Field("X");
--- a/server.src/prg/gem/Ediutm.java
-    private lib.bas.Ediepost basedie=new lib.bas.Ediepost(Ediutm.this);
-    private lib.lev.Ankfpost levankf=new lib.lev.Ankfpost(Ediutm.this, pa);
-    private lib.lev.Ankapost levanka=new lib.lev.Ankapost(Ediutm.this, pa);
-    private lib.lev.Ankrpost levankr=new lib.lev.Ankrpost(Ediutm.this, pa);
-    private lib.lev.Ankmpost levankm=new lib.lev.Ankmpost(Ediutm.this, pa);
-    private lib.lev.Anktpost levankt=new lib.lev.Anktpost(Ediutm.this, pa);
-    private lib.lev.Anklpost levankl=new lib.lev.Anklpost(Ediutm.this, pa);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(Ediutm.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Ediutm.this, pa);
-    private lib.bas.Webut webut=new lib.bas.Webut(Ediutm.this, webpara, pa);
-    private Field tmp1 = new Field("X(100)");
-    private Field tmp5 = new Field("X(100)");
-    private Field tmpStatus = new Field("XX");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(2000)");
-    private Field p4 = new Field("X(50)");
-    private Field p5 = new Field("X(50)");
-    private Field poster = new Field("99999");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field tmpBel = new Field("S9(10)V99");
-    private Field tmpKurs = new Field("999999V9999");
-    private Field tmpKursAntal = new Field("999999");
-    private Field flagga1 = new Field("X");
-    private Field flagga2 = new Field("X");
-    private Field flagga3 = new Field("X");
-    private Field flagga4 = new Field("X");
-    private Field flagga5 = new Field("X");
-    private Field flagga510 = new Field("X");
-    private Field flagga6 = new Field("X");
-    private Field flagga7 = new Field("X");
-    private Field flagga8 = new Field("X");
-    private Field flagga9 = new Field("X");
-    private Field flagga10 = new Field("X");
-    private Field flagga11 = new Field("X");
-    private Field flagga12 = new Field("X");
-    private Field flagga13 = new Field("X");
-    private Field flagga14 = new Field("X");
-    private Field flagga15 = new Field("X");
-    private Field antalAnvisn = new Field("9");
-    private Field endaktiva = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field post = new Field("X(1000)");
-    private Field pkey = new Field("X(100)");
-    private Field pvalue = new Field("X(900)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field pOk = new Field("X");
-    private Field varningar = new Field("99");
-    private Field kolla = new Field("X");
-    private Field modul = new Field("XXX");
-    private Field mdx = new Field("9");
-    private Field mdy = new Field("9V9");
-    private Field tmp6 = new Field("9(6)");
-    private Field valuta = new Field("XXX");
-    private Field lunamn = new Field("X(50)");
-    private Field tmpX = new Field("X");
-    private Field kkrok = new Field("X");
-    private Field tmpTiKod = new Field("XXX");
-    private Field tmpErs = new Field("XX");
-    private Field tmp10000 = new Field("X(10000)");
-    private Field ptr = new Field("99999");
-    private Field ediVal = new Field("X");
-    private Field xmlFilnamn = new Field("X(100)");
-    private Field postbak = new Field("X(20000)");
-    private Field infil = new Field("X(100)");
-    private Field origfil = new Field("X(100)");
-    private Field media = new Field("XXXX");
-    private Field handelse = new Field("X(20)");
-    private Field tmpRad = new Field("9(6)");
-    private Field tmpRabnr = new Field("9(6)");
-    private Field tmpRabnr2 = new Field("9(6)");
-    private Field bokningsnummer = new Field("X(10)");
-    private Field datumMedia = new Field("X(10)");
-    private Field ordernummer = new Field("X(10)");
-    private Field tmpExtKod = new Field("X(25)");
-    private Field messClass = new Field("X(50)");
-    private Field tmpEdirKey = new Field("X(100)");
-    private Field tmpEdirRaDat = new Field("9(8)");
-    private Field lopnr = new Field("9(6)");
-    private void aviseraExternt() {
-        lib.bas.Medapost.fd meda=basmeda.get();
-        meda.f9903OpenInput();
-        meda.record.init();
-        meda.kod.set(webpara.userid);
-        meda.f9903Read();
-        meda.f9903Close();
-        if (meda.mail.equals(SPACE)) //        CALL WEBUT USING "%m%c" "EMS" 9 
-        {
-            return;
-        }
-        tmp2.set(meda.mail);
-        acceptFrom(" FROM  ENVIRONMENT ","SMTPSERVER",tmp80);
-        if (tmp80.equals(SPACE)) //        CALL WEBUT USING "%m" "MEA" 
-        {
-            return;
-        }
-        //     MOVE STD-SPRAK TO SPRAK 
-        //     IF MESPRAK > SPACE 
-        //        MOVE MESPRAK TO STD-SPRAK 
-        //     END-IF 
-        //     MOVE SPACE TO TMP3 
-        //     MOVE 1 TO I 
-        //     PERFORM UNTIL I > 48 OR (MEBOL-F(I) = "*" OR SPACE) 
-        //        ADD 1 TO I 
-        //     END-PERFORM 
-        //     IF I > 2 OR MEBOL-F(I) = "*" 
-        //        MOVE "H6fo" TO VISAKOD 
-        //        CALL "PRG/BAS/VISA" USING PARA-AREA VISAKOD STD-TEXT 
-        //        STRING "(" STD-TEXT DELIMITED BY "  " 
-        //        " " DELIMITED BY SIZE 
-        //        PA-BKSTVFTG ")" DELIMITED BY SPACE INTO TMP3 
-        //     END-IF 
-        std.stdText.set("New invoices");
-        visakod.set("HNFR");
-        std.stdText.set(SPACE);
-        call("prg.bas.visa", pa.paraArea, visakod, std.stdText);
-        komm.set(SPACE);
-        komm.set(concat("mmail "," ",limit(tmp80,SPACE)," ",limit(tmp2,SPACE)," ",limit(aviseringsmail,SPACE)," ","'",limit(std.stdText,"     ")," ",limit(tmp3,"     "),"' ","/dev/null 1>&2"));
-        tmp4.set(std.stdTeckentabell);
-        std.stdTeckentabell.set(SPACE);
-        std.stdTeckentabell.set(tmp4);
-        //     CALL UNIX-SYSTEM USING TMP GIVING RETURV 
-        webpara.returv.set(getCall("prg.bas.cllfrw", tmp, komm));
-        //    IF TMP contains "Ok: queued"                                   
-        std.stdSprak.set(sprak);
-        //           IF EXIT-STATUS > 0           
-        //              CALL WEBUT USING "<tr><td>%S</td><td>%m %b</td></tr>" MEKOD "Fel" EXIT-STATUS 
-        //           ELSE 
-        //              CALL WEBUT USING "<tr><td>%S</td><td>%m</td></tr>" MEKOD "018" 
-        //           END-IF           
-    }
-
--- a/server.src/prg/gem/Expesmoms.java
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Expesmoms.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Expesmoms.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Expesmoms.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp1 = new Field("X(200)");
-    private Field tmp2 = new Field("X(200)");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmp100 = new Field("X(100)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p0 = new Field("X(50)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field ptrl2 = new Field("99999");
-    private Field ptrl3 = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field uppdlag = new Field("X");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field flagga1 = new Field("X");
-    private Field opened = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selDatfr = new Field("9(8)");
-    private Field selDatti = new Field("9(8)");
-    private Field selEne = new Field("X");
-    private Field selRegdatfr = new Field("9(8)");
-    private Field selRegdatti = new Field("9(8)");
-    private Field selTidwRegdatfr = new Field("9(8)");
-    private Field selTidwRegdatti = new Field("9(8)");
-    private Field selStoppdatfr = new Field("9(8)");
-    private Field selStoppdatti = new Field("9(8)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sumArv = new Field("S9(10)");
-    private Field sumInk = new Field("S9(10)");
-    private Field sumOvr = new Field("S9(10)V99");
-    private Field antal1 = new Field("99999");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field ti = new Field("99999");
-    private Field lnr = new Field("999");
-    private Field felkod = new Field("999");
-    private Field valuta = new Field("XXX");
-    private Field mvaluta = new Field("XXX");
-    private Field ordPris = new Field("9(5)");
-    private Field avvPris = new Field("9(5)");
-    private Field tmpPris = new Field("9(5)");
-    private void skrivRadGen() {
-        lib.gem.Moespost.fd moes=gemmoes.get();
-        lib.lev.Faktpost.fd lev_fakt=levfakt.get();
-        lib.lev.Levepost.fd leve=levleve.get();
-        lib.lev.Ankmpost.fd ankm=levankm.get();
-        moes.post.init();
-        moes.typ.set("G");
-        moes.fakt.set(lev_fakt.llid);
-        //     PERFORM MOES-READ 
-        //     IF NOT MOES-FS = "00" 
-        moes.claveoperacion.set("I");
-        moes.clavetipolibro.set("E");
-        //     END-IF 
-        webpara.ut.set(selPer.ref(1,4));
-        webut.utText();
-        webut.utTab();
-        switch (leve.moms.getStringValue()) {
-            case "1":
-            case "2":
-                webpara.ut.set("2");
-                break;
-            case "3":
-            case "4":
-                webpara.ut.set("6");
-                break;
-            default:
-                webpara.ut.set("1");
-        }
-        webut.utText();
-        webut.utTab();
-        webpara.ut.set(moes.claveoperacion);
-        webut.utText();
-        webut.utTab();
-        webpara.ut.set(moes.clavetipolibro);
-        webut.utText();
-        webut.utTab();
-        webpara.ut.set(lev_fakt.llinr);
-        webut.utText();
-        webut.utTab();
-        webpara.utBel.set(lopnr);
-        webut.utHel();
-        webut.utTab();
-        webpara.ut.set(lev_fakt.llidate);
-        webut.utDatt();
-        webut.utTab();
-        webpara.ut.set(lev_fakt.llidate);
-        webut.utDatt();
-        webut.utTab();
-        webpara.ut.set(leve.landkod);
-        webut.utText();
-        webut.utTab();
-        //     MOVE SPACE TO UT 
-        //     MOVE 1 TO I J 
-        //     PERFORM 25 TIMES 
-        //     IF LEVAT(I:1) IS NUMERIC 
-        //        MOVE LEVAT(I:1) TO UT(J:1) 
-        //        ADD 1 TO J 
-        //     END-IF 
-        //     ADD 1 TO I 
-        //     END-PERFORM        
-        webpara.ut.set(leve.vat);
-        webut.utText();
-        webut.utTab();
-        webpara.ut.set(leve.name);
-        webut.utText();
-        webut.utTab();
-        webpara.ut.set(leve.adr2);
-        webut.utText();
-        webut.utSpace();
-        webpara.ut.set(leve.adr3);
-        webut.utText();
-        webut.utTab();
-        if (leve.postnr.equals(SPACE) && leve.postort.equals(SPACE)) {
-            unstring(leve.adr4,new Object[]{" "},leve.postnr,leve.postort);
-        }
-        webpara.ut.set(leve.postort);
-        webut.utText();
-        webut.utTab();
-        webpara.ut.set(leve.postnr);
-        webut.utText();
-        webut.utTab();
-        webpara.ut.set(moes.cocepto);
-        webut.utText();
-        webut.utTab();
-        //     IF (LLMOMS = 0 OR LLIBELOPP = LLMOMS OR LLIBELOPP = 0) 
-        //        PERFORM UT-TAB 
-        //        PERFORM UT-TAB 
-        //        PERFORM UT-TAB 
-        //     ELSE 
-        //        COMPUTE UT-BEL = (LLIBELOPP - LLMOMS) * LLSBELOPP / LLIBELOPP PERFORM UT-DECA PERFORM UT-TAB 
-        //        COMPUTE UT-BEL = 100 / (LLIBELOPP/LLMOMS - 1) PERFORM UT-DECA PERFORM UT-TAB 
-        //        COMPUTE UT-BEL = LLMOMS * LLSBELOPP / LLIBELOPP PERFORM UT-DECA PERFORM UT-TAB 
-        //     END-IF 
-        //     MOVE LLSBELOPP TO UT-BEL PERFORM UT-DECA PERFORM UT-TAB    
-        webpara.utBel.set(ankm.momsgrund);
-        webut.utDeca();
-        webut.utTab();
-        webpara.utBel.set(ankm.procent);
-        webut.utDeca();
-        webut.utTab();
-        webpara.utBel.set(ankm.moms);
-        webut.utDeca();
-        webut.utTab();
-        webpara.utBel.set(ankm.momsgrund.add(ankm.moms));
-        webut.utDeca();
-        webut.utTab();
-        webpara.ut.set(moes.key);
-        webut.utText();
-        webut.utLf();
-    }
-
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/gem/Fixamedd.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Fixamedd.this);
--- a/server.src/prg/gem/Getrefn.java
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Getrefn.this);
-    private lib.bas.Std std=new lib.bas.Std(Getrefn.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Getrefn.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Getrefn.this);
-    private Field tmp = new Field("X(300)");
--- a/server.src/prg/gem/Grodkicc.java
-    private lib.bas.Std std=new lib.bas.Std(Grodkicc.this);
--- a/server.src/prg/gem/Gronkicc.java
-    private lib.bas.Std std=new lib.bas.Std(Gronkicc.this);
--- a/server.src/prg/gem/Handlogg.java
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Handlogg.this);
--- a/server.src/prg/gem/K003expb.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K003expb.this);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(K003expb.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(K003expb.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K003expb.this);
-    private Field x = new Field("S9(9)");
-    private void expMeda() {
-        lib.bas.Medapost.fd bas_meda=basmeda.get();
-        lib.bok.Kontpost.fd kont=bokkont.get();
-        lib.pro.Medapost.fd pro_meda=promeda.get();
-        lib.pro.Defkpost.fd defk=prodefk.get();
-        bas_meda.f9903OpenInput();
-        ftgs.f9904OpenInput();
-        kont.f9803aOpenInput();
-        pro_meda.medaridG.init();
-        call("prg.pro.p4i", pa.paraArea, da.meda, da.startEg, pro_meda.post);
-        if (pa.ok()) {
-            call("prg.pro.p4i", pa.paraArea, da.meda, da.readnext, pro_meda.post);
-        }
-        while (pa.ok()) {
-            if (pro_meda.space.equals(SPACE) && !(pro_meda.status.equals(9))) {
-                bas_meda.record.init();
-                bas_meda.kod.set(pro_meda.medarid);
-                bas_meda.f9903Read();
-                ftgs.forecord.init();
-                ftgs.fokod.set(bas_meda.boldefF);
-                ftgs.f9904Read();
-                defk.post.init();
-                defk.typkk.set("U");
-                defk.grupp.set(pro_meda.grptht);
-                call("prg.pro.p4i", pa.paraArea, da.defk, da.read, defk.post);
-                //             MOVE D-BENKK(1) TO GRP-NAMN 
-                kont.cbrnrecord.init();
-                kont.cbrnType.set("E");
-                kont.cbrnId1.set(pro_meda.kostnst);
-                kont.f9803aRead();
-                defk.post.init();
-                defk.typkk.set("K");
-                defk.kat.set(pro_meda.perskat);
-                call("prg.pro.p4i", pa.paraArea, da.defk, da.read, defk.post);
-                //             MOVE D-BENKK(1) TO PERSKAT-NAMN 
-                call(webpara.xmlut, "<User>");
-                call(webpara.xmlut, "<id>%X</id>", pro_meda.medarid);
-                call(webpara.xmlut, "<name>%X</name>", pro_meda.namnmed);
-                call(webpara.xmlut, "<company id=%q>%X</company>", bas_meda.boldefF, ftgs.foname);
-                call(webpara.xmlut, "<email>%X</email>", bas_meda.mail);
-                //             CALL XMLUT USING "<user_group id=%q>%X</user_group>" M-GRPTHT GRP-NAMN 
-                call(webpara.xmlut, "<working_team>%X</working_team>", pro_meda.agrp);
-                call(webpara.xmlut, "<cost_center id=%q>%X</cost_center>", pro_meda.kostnst, kont.cbrnNamn);
-                //             CALL XMLUT USING "<staaf_category id=%q>%X</staaf_category>" M-PERSKAT PERSKAT-NAMN 
-                call(webpara.xmlut, "</User>");
-            }
-            call("prg.pro.p4i", pa.paraArea, da.meda, da.readnext, pro_meda.post);
-        }
-        bas_meda.f9903Close();
-        ftgs.f9904Close();
-        kont.f9803aClose();
-    }
-
--- a/server.src/prg/gem/K474lipr.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(K474lipr.this);
-    private lib.med.P8921 p8921=new lib.med.P8921(K474lipr.this, pa, medrecarea);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K474lipr.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K474lipr.this);
-    private lib.kun.Fakbpost kunfakb=new lib.kun.Fakbpost(K474lipr.this, pa);
-    private lib.lev.Ankrpost levankr=new lib.lev.Ankrpost(K474lipr.this, pa);
-    private lib.lev.Ankfpost levankf=new lib.lev.Ankfpost(K474lipr.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(K474lipr.this, pa);
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(K474lipr.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(K474lipr.this, pa);
-    private lib.bok.Budgpost bokbudg=new lib.bok.Budgpost(K474lipr.this, pa);
-    private lib.gem.Loggpost gemlogg=new lib.gem.Loggpost(K474lipr.this, pa);
-    private lib.gem.Hlogpost gemhlog=new lib.gem.Hlogpost(K474lipr.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(K474lipr.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K474lipr.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K474lipr.this);
-    private lib.pro.Datab proDa=new lib.pro.Datab(K474lipr.this);
-    private lib.med.Datab da=new lib.med.Datab(K474lipr.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmpDatum = new Field("9(8)");
-    private Field uppdKto = new Field("X(6)");
-    private Field uppdKst = new Field("X(6)");
-    private Field p6 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field radrubrik = new Field("X(200)");
-    private Field sum1 = new Field("9(5)");
-    private Field tmpFaknr = new Field("ZZZZZZZZZ9");
-    private Field bfar1 = new Field("9(4)");
-    private Field bfar2 = new Field("9(4)");
-    private Field oldRegkey = new Field("X(60)");
-    private Field oldLnr = new Field("9(6)");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
-    private void cbrnParam() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        para.f9800OpenInput();
-        para.f9800P.set(10);
-        para.f9800Read();
-        if (para.f9800Eof.equals("N") && !(para.bookparam.equals(SPACE))) {
-            pa.centralKont.set(para.bookparam);
-        }
-        else {
-            pa.centralKont.set(pa.bkstvftg);
-        }
-        para.f9800Close();
-    }
-
-    private void hittabfar() {
-        lib.bas.Ftgspost.fd ftgs=basftgs.get();
-        lib.bok.Parapost.fd para=bokpara.get();
-        pa.bfar.set(ftgs.fominar);
-        while (!(pa.bfar.compareTo(ftgs.fomaxar)>0)) {
-            para.f9800OpenIO();
-            para.f9800P.set(1);
-            para.f9800Read();
-            para.f9800Close();
-            para.f9801OpenInput();
-            para.f9801Read();
-            para.f9801Close();
-            pa.periodantal.set(para.bookparamNum);
-            i.set(1);
-            for (int _t=pa.periodantal.getInt(); _t>0; _t--) {
-                if (tmpDatum.compareTo(para.bookperMin[i.getInt()-1])>=0 && tmpDatum.compareTo(para.bookperMax[i.getInt()-1])<=0) {
-                    return;
-                }
-                i.increment(1);
-            }
-            pa.bfar.increment(1);
-        }
-        pa.bfar.set(ZERO);
-    }
-
-    private void oppnaFsort() {
-        fsortNamn.set(concat(limit("TMP/AKT",SPACE),limit(webpara.userid,SPACE),limit(webpara.pid,SPACE)));
-        fsortNamn.convert(".","_");
-        fsort.deleteFile();
-        fsort.open("OUTPUT");
-        fsort.close();
-        fsort.open("I-O");
-    }
-
-    private void stangRaderaFsort() {
-        fsort.close();
-        fsort.deleteFile();
-    }
-
--- a/server.src/prg/gem/K489jeev.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K489jeev.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K489jeev.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K489jeev.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K489jeev.this);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(K489jeev.this);
-    private lib.bas.Momspost basmoms=new lib.bas.Momspost(K489jeev.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(K489jeev.this);
-    private lib.bas.Maxipost basmaxi=new lib.bas.Maxipost(K489jeev.this);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(K489jeev.this, pa);
-    private lib.kun.Kundpost kunkund=new lib.kun.Kundpost(K489jeev.this, pa);
-    private lib.dfa.Fhuvpost dfafhuv=new lib.dfa.Fhuvpost(K489jeev.this, pa);
-    private lib.gem.Pgempost gempgem=new lib.gem.Pgempost(K489jeev.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(K489jeev.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K489jeev.this);
-    private lib.med.Datab da=new lib.med.Datab(K489jeev.this);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(K489jeev.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K489jeev.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K489jeev.this);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(K489jeev.this, pa);
-    private lib.bas.Webut webut=new lib.bas.Webut(K489jeev.this, webpara, pa);
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field oldPost = new Field("X(10000)");
-    private Field newPost = new Field("X(10000)");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field a = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field forsta = new Field("X");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field flagga1 = new Field("X");
-    private Field flagga2 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selFdatfr = new Field("9(8)");
-    private Field selFdatti = new Field("9(8)");
-    private Field selFnrfr = new Field("9(8)");
-    private Field selFnrti = new Field("9(8)");
-    private Field selKund = new Field("X(1000)");
-    private Field selProj = new Field("X(1000)");
-    private Field selPro = new Field("X");
-    private Field selMed = new Field("X");
-    private Field selDfa = new Field("X");
-    private Field selEnde = new Field("X");
-    private Field selEndejs = new Field("X");
-    private Field selEndeje = new Field("X");
-    private Field selKspexp = new Field("X");
-    private Field selKodNum = new Field("9(15)");
-    private Field selPtype = new Field("X");
-    private Field selPtypg = new Field("X");
-    private Field selPtypi = new Field("X");
-    private Field selPtypj = new Field("X");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)V99");
-    private Field sum2 = new Field("S9(10)V99");
-    private Field oldFaknr = new Field("9(7)");
-    private Field paFaknr8 = new Field("9(8)");
-    private Field tmpMail = new Field("X(50)");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field fskrivcEfalofpNamn = new Field("X(50)");
-    private Field fskrivcEfalofpPdf = new Field("X(50)");
-    private Field fskrivcEfasvefNamn = new Field("X(50)");
-    private Field fskrivcEfafmakNamn = new Field("X(50)");
-    private Field fskrivcEfamaraNamn = new Field("X(50)");
-    private Field fskrivcEfaehffNamn = new Field("X(50)");
-    private Field fskrivcFpNamn = new Field("X(50)");
-    private Field fskrivcIcdnNamn = new Field("X(50)");
-    private Field fskrivcIconNamn = new Field("X(50)");
-    private Field fpdfNamn = new Field("X(50)");
-    private Field tmpFilnamn = new Field("X(50)");
-    private Field tmpFilnamn2 = new Field("X(50)");
-    private Field tmpFilnamnPdf = new Field("X(50)");
-    private Field exitStatus = new Field("999");
-    private Field basvaluta = new Field("XXX");
-    private Field valuta = new Field("XXX");
-    private Field ediMottagare = new Field("XXXX");
-    private Field ediPartyidEget = new Field("X(25)");
-    private Field ediMail = new Field("X(50)");
-    private Field ediTest = new Field("X");
-    private Field ediposter = new Field("X");
-    private Field ediposterEfalofp = new Field("99999");
-    private Field ediposterEfasvef = new Field("99999");
-    private Field ediposterEfafmak = new Field("99999");
-    private Field ediposterFp = new Field("X");
-    private Field ediposterIcdn = new Field("X");
-    private Field ediposterIcon = new Field("X");
-    private Field edinr = new Field("99999");
-    private Field edifel = new Field("X");
-    private Field edifelEfalofp = new Field("X");
-    private Field edifelEfasvef = new Field("X");
-    private Field edifelEfafmak = new Field("X");
-    private Field edifelEfamara = new Field("X");
-    private Field edifelFp = new Field("X");
-    private Field edifelIcdn = new Field("X");
-    private Field edifelIcon = new Field("X");
-    private Field edifelMail = new Field("X");
-    private Field forstafakIcdn = new Field("9(7)");
-    private Field forstafakIcon = new Field("9(7)");
-    private Field antalfakIcdn = new Field("9(6)");
-    private Field antalfakIcon = new Field("9(6)");
-    private Field tmpTeckentabell = new Field("X(20)");
-    private Field mailrubrik = new Field("X(200)");
-    private Field tmpMailrubrik = new Field("X(200)");
--- a/server.src/prg/gem/K590lipr.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(K590lipr.this);
-    private lib.med.P8921 p8921=new lib.med.P8921(K590lipr.this, pa, medrecarea);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K590lipr.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K590lipr.this);
-    private lib.kun.Fakbpost kunfakb=new lib.kun.Fakbpost(K590lipr.this, pa);
-    private lib.lev.Ankrpost levankr=new lib.lev.Ankrpost(K590lipr.this, pa);
-    private lib.lev.Ankfpost levankf=new lib.lev.Ankfpost(K590lipr.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(K590lipr.this, pa);
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(K590lipr.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(K590lipr.this, pa);
-    private lib.bok.Budgpost bokbudg=new lib.bok.Budgpost(K590lipr.this, pa);
-    private lib.gem.Loggpost gemlogg=new lib.gem.Loggpost(K590lipr.this, pa);
-    private lib.gem.Hlogpost gemhlog=new lib.gem.Hlogpost(K590lipr.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(K590lipr.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K590lipr.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K590lipr.this);
-    private lib.pro.Datab proDa=new lib.pro.Datab(K590lipr.this);
-    private lib.med.Datab da=new lib.med.Datab(K590lipr.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmpDatum = new Field("9(8)");
-    private Field uppdKto = new Field("X(6)");
-    private Field uppdKst = new Field("X(6)");
-    private Field p6 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field radrubrik = new Field("X(200)");
-    private Field sum1 = new Field("9(5)");
-    private Field tmpFaknr = new Field("ZZZZZZZZZ9");
-    private Field bfar1 = new Field("9(4)");
-    private Field bfar2 = new Field("9(4)");
-    private Field oldRegkey = new Field("X(60)");
-    private Field oldLnr = new Field("9(6)");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
-    private void cbrnParam() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        para.f9800OpenInput();
-        para.f9800P.set(10);
-        para.f9800Read();
-        if (para.f9800Eof.equals("N") && !(para.bookparam.equals(SPACE))) {
-            pa.centralKont.set(para.bookparam);
-        }
-        else {
-            pa.centralKont.set(pa.bkstvftg);
-        }
-        para.f9800Close();
-    }
-
-    private void hittabfar() {
-        lib.bas.Ftgspost.fd ftgs=basftgs.get();
-        lib.bok.Parapost.fd para=bokpara.get();
-        pa.bfar.set(ftgs.fominar);
-        while (!(pa.bfar.compareTo(ftgs.fomaxar)>0)) {
-            para.f9800OpenIO();
-            para.f9800P.set(1);
-            para.f9800Read();
-            para.f9800Close();
-            para.f9801OpenInput();
-            para.f9801Read();
-            para.f9801Close();
-            pa.periodantal.set(para.bookparamNum);
-            i.set(1);
-            for (int _t=pa.periodantal.getInt(); _t>0; _t--) {
-                if (tmpDatum.compareTo(para.bookperMin[i.getInt()-1])>=0 && tmpDatum.compareTo(para.bookperMax[i.getInt()-1])<=0) {
-                    return;
-                }
-                i.increment(1);
-            }
-            pa.bfar.increment(1);
-        }
-        pa.bfar.set(ZERO);
-    }
-
-    private void oppnaFsort() {
-        fsortNamn.set(concat(limit("TMP/AKT",SPACE),limit(webpara.userid,SPACE),limit(webpara.pid,SPACE)));
-        fsortNamn.convert(".","_");
-        fsort.deleteFile();
-        fsort.open("OUTPUT");
-        fsort.close();
-        fsort.open("I-O");
-    }
-
-    private void stangRaderaFsort() {
-        fsort.close();
-        fsort.deleteFile();
-    }
-
--- a/server.src/prg/gem/K67khal.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(K67khal.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K67khal.this);
-    private lib.bas.Std std=new lib.bas.Std(K67khal.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K67khal.this);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(K67khal.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(K67khal.this, pa);
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(K67khal.this, pa);
-    private lib.pro.Fatepost profate=new lib.pro.Fatepost(K67khal.this, pa);
-    private lib.pro.Budwpost probudw=new lib.pro.Budwpost(K67khal.this, pa);
-    private lib.pro.Fradpost profrad=new lib.pro.Fradpost(K67khal.this, pa);
-    private lib.pro.Forepost profore=new lib.pro.Forepost(K67khal.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field krabBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field tmpDatum = new Field("9(8)");
-    private Field startdat = new Field("9(8)");
-    private Field slutdat = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");






-    private Field opened = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field sumAmount = new Field("S9(9)V99");
-    private Field tmpStyle = new Field("X(20)");
-    private Field betaBel = new Field("S9(10)V99");
-    private Field betaDatum = new Field("9(8)");
-    private Field tmpLager = new Field("S9(9)");
-    private Field tmpLager2 = new Field("S9(9)");
-    private Field filnamn = new Field("X(20)");
-    private Field fil = new Field("X(50)");
-    private Field sumLon = new Field("S9(9)V99");
--- a/server.src/prg/gem/Kexpakt.java
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Kexpakt.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Kexpakt.this);
-    private lib.kun.Kundpost kunkund=new lib.kun.Kundpost(Kexpakt.this, pa);
-    private lib.lev.Betapost levbeta=new lib.lev.Betapost(Kexpakt.this, pa);
-    private lib.bok.Budgpost bokbudg=new lib.bok.Budgpost(Kexpakt.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Kexpakt.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Kexpakt.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Kexpakt.this);
-    private lib.med.Datab da=new lib.med.Datab(Kexpakt.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field uppdKto = new Field("X(6)");
-    private Field uppdKst = new Field("X(6)");
-    private Field p6 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selTyp = new Field("X");
-    private Field selBudg = new Field("XX");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field tmpFaknr = new Field("ZZZZZZZZZ9");
-    private void skrivKun41Old() {
-        lib.pro.Faktpost.fd pro_fakt=profakt.get();
-        call("prg.bas.strut", radrubrik, "%0", "KUN4.1");
-        //  Antal gjorda fakturor, PRO 
-        oppnaFsort();
-        pro_fakt.post.init();
-        call("prg.pro.p4i", pa.paraArea, proDa.fakt, proDa.startEg, pro_fakt.post);
-        if (pa.ok()) {
-            call("prg.pro.p4i", pa.paraArea, proDa.fakt, proDa.readnext, pro_fakt.post);
-        }
-        while (pa.ok()) {
-            if (pro_fakt.regdat.compareTo(selDatfr)>=0 && pro_fakt.regdat.compareTo(selDatti)<=0) {
-                fsortAnva.set(pro_fakt.anvid);
-                addfsort();
-            }
-            call("prg.pro.p4i", pa.paraArea, proDa.fakt, proDa.readnext, pro_fakt.post);
-        }
-        skrivRad();
-        stangRaderaFsort();
-    }
-
-    private void skrivKun42Old() {
-        lib.kun.Faktpost.fd kun_fakt=kunfakt.get();
-        lib.med.Faktpost.fd med_fakt=p8921.medfakt.get();
-        lib.bok.Hbokpost.fd hbok=bokhbok.get();
-        call("prg.bas.strut", radrubrik, "%0", "3.2) Antal gjorda fakturor, MED");
-        oppnaFsort();
-        kun_fakt.f9602OpenInput();
-        med_fakt.post.init();
-        p8921.medFaktStartEg();
-        if (pa.ok()) {
-            p8921.medFaktReadnext();
-        }
-        while (pa.ok()) //  TODO Lagra REGDAT och ANVA på FAKT och använd om satt. Ev på KUN/FAKT. 
-        {
-            kun_fakt.slrecord.init();
-            kun_fakt.slsrnr.set(med_fakt.kund);
-            tmpFaknr.set(med_fakt.faknr);
-            c_justify(tmpFaknr, "L");
-            kun_fakt.slinr.set(tmpFaknr);
-            kun_fakt.slftyp.set("MF");
-            kun_fakt.f9602Read();
-            tmpDatum.set(kun_fakt.slbdate);
-            hittabfar();
-            hbok.verrecord.init();
-            if (!(pa.bfar.equals(0))) {
-                hbok.f9810OpenInput();
-                hbok.verptyp.set(kun_fakt.slptyp);
-                hbok.ververnr.set(kun_fakt.slvnr);
-                hbok.verlopnr.set(1);
-                hbok.f9810Read();
-                hbok.f9810Close();
-            }
-            if (hbok.verregdat.compareTo(selDatfr)>=0 && hbok.verregdat.compareTo(selDatti)<=0) {
-                fsortAnva.set(hbok.verreganv);
-                addfsort();
-            }
-            p8921.medFaktReadnext();
-        }
-        kun_fakt.f9602Close();
-        skrivRad();
-        stangRaderaFsort();
-    }
-
-    private void skrivKun42Old2() {
-        lib.med.Ologpost.fd olog=p8921.medolog.get();
-        call("prg.bas.strut", radrubrik, "%0", "KUN3.2");
-        //  Antal gjorda fakturor, MED
-        oppnaFsort();
-        olog.post.init();
-        p8921.medOlogStartEg();
-        if (pa.ok()) {
-            p8921.medOlogReadnext();
-        }
-        while (pa.ok()) {
-            if (olog.typ.equals("FA")) {
-                if (olog.datum.compareTo(selDatfr)>=0 && olog.datum.compareTo(selDatti)<=0) {
-                    fsortAnva.set(olog.anva);
-                    addfsort();
-                }
-            }
-            p8921.medOlogReadnext();
-        }
-        skrivRad();
-        stangRaderaFsort();
-    }
-
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/gem/Skapamop.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Skapamop.this);
-    private lib.bas.Vahupost basvahu=new lib.bas.Vahupost(Skapamop.this);
-    private lib.bas.Varapost basvara=new lib.bas.Varapost(Skapamop.this);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Skapamop.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(Skapamop.this, pa);
-    private lib.bok.Rktopost bokrkto=new lib.bok.Rktopost(Skapamop.this, pa);
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(Skapamop.this, pa);
-    private lib.bok.Dipapost bokdipa=new lib.bok.Dipapost(Skapamop.this, pa);
-    private lib.bok.Budgpost bokbudg=new lib.bok.Budgpost(Skapamop.this, pa);
-    private lib.kun.Faktpost kunfakt=new lib.kun.Faktpost(Skapamop.this, pa);
-    private lib.kun.Fakbpost kunfakb=new lib.kun.Fakbpost(Skapamop.this, pa);
-    private lib.kun.Kundpost kunkund=new lib.kun.Kundpost(Skapamop.this, pa);
-    private lib.lev.Ankfpost levankf=new lib.lev.Ankfpost(Skapamop.this, pa);
-    private lib.lev.Ankrpost levankr=new lib.lev.Ankrpost(Skapamop.this, pa);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(Skapamop.this, pa);
-    private lib.med.P8calc p8calc=new lib.med.P8calc(Skapamop.this);
-    private lib.bas.Std std=new lib.bas.Std(Skapamop.this);
-    private lib.med.Datab da=new lib.med.Datab(Skapamop.this);
-    private lib.pro.Forepost profore=new lib.pro.Forepost(Skapamop.this, pa);
-    private Field bkstvftg = new Field("X(4)");
--- a/server.src/prg/gem/Skrvmedd.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Skrvmedd.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Skrvmedd.this);
-    private lib.bas.Std std=new lib.bas.Std(Skrvmedd.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Skrvmedd.this);
-    private Field n = new Field("S9(11)");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field s5 = new Field("9999");
-    private Field tmp = new Field("X(300)");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp4 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmp30 = new Field("X(30000)");
-    private Field p1 = new Field("X(100)");
-    private Field p2 = new Field("X(100)");
-    private Field p3 = new Field("X(100)");
-    private Field p4 = new Field("X(100)");
-    private Field p5 = new Field("X(100)");
-    private Field selTyp = new Field("X(20)");
-    private Field selFrdat = new Field("9(8)");
-    private Field selTidat = new Field("9(8)");
-    private Field post = new Field("X(1000)");
--- a/server.src/prg/gem/Skrvmedd2.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Skrvmedd2.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Skrvmedd2.this);
-    private lib.gem.Arenpost gemaren=new lib.gem.Arenpost(Skrvmedd2.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Skrvmedd2.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Skrvmedd2.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Skrvmedd2.this, webpara, pa);
-    private Field n = new Field("S9(11)");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field s5 = new Field("9999");
-    private Field tmp = new Field("X(300)");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp4 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmp30 = new Field("X(30000)");
-    private Field p1 = new Field("X(100)");
-    private Field p2 = new Field("X(100)");
-    private Field p3 = new Field("X(100)");
-    private Field p4 = new Field("X(100)");
-    private Field p5 = new Field("X(100)");
-    private Field selTyp = new Field("X(20)");
-    private Field selFrdat = new Field("9(8)");
-    private Field selTidat = new Field("9(8)");
-    private Field i = new Field("9(9)");
-    private Field post = new Field("X(1000)");
-    private Field flagga1 = new Field("X");
-    private Field hittat = new Field("X");
--- a/server.src/prg/gem/Webbsyn.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webbsyn.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Webbsyn.this, webpara, pa);
-    private Field n = new Field("S9(11)");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p0 = new Field("X(50)");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(50)");
-    private Field p4 = new Field("X(50)");
-    private Field p5 = new Field("X(50)");
-    private Field flagga2 = new Field("X");
-    private Field beh = new Field("X");
-    private Field oppnad = new Field("X");
-    private Field val = new Field("X");
--- a/server.src/prg/gem/Webbsynl.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webbsynl.this);
-    private Field n = new Field("S9(11)");
-    private Field tmp = new Field("X(300)");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p0 = new Field("X(50)");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(50)");
-    private Field p4 = new Field("X(50)");
-    private Field p5 = new Field("X(50)");
-    private Field flagga2 = new Field("X");
-    private Field beh = new Field("X");
-    private Field oppnad = new Field("X");
-    private Field val = new Field("X");
--- a/server.src/prg/gem/Webfavo.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webfavo.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Webfavo.this, webpara, pa);
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field flagga1 = new Field("X");
-    private Field beh = new Field("X");
--- a/server.src/prg/gem/Webfdist.java
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Webfdist.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Webfdist.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webfdist.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webfdist.this);
-    private lib.med.Datab da=new lib.med.Datab(Webfdist.this);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Webfdist.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webfdist.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webfdist.this);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webfdist.this, pa);
-    private Field oldPost = new Field("X(10000)");
-    private Field newPost = new Field("X(10000)");



-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field forsta = new Field("X");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sum1 = new Field("S9(10)V99");
-    private Field sum2 = new Field("S9(10)V99");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field tmpMail = new Field("X(50)");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field tmpBlankett = new Field("X(8)");
-    private Field basvaluta = new Field("XXX");
-    private Field valuta = new Field("XXX");
-    private Field tmpFaxkod = new Field("X(7)");
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/gem/Webkako.java
-    private lib.bas.Std std=new lib.bas.Std(Webkako.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webkako.this);
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");
-    private Field y = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p0 = new Field("X(50)");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(50)");
-    private Field p4 = new Field("X(50)");
-    private Field p5 = new Field("X(50)");
-    private Field beh = new Field("X");
-                delade=new java.util.Vector();
--- a/server.src/prg/gem/Webkamp.java
-    private lib.med.Datab da=new lib.med.Datab(Webkamp.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Webkamp.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webkamp.this);
-    private Field i = new Field("99999");
-    private void stangRaderaFsort() {
-        fsort.close();
-        fsort.deleteFile();
-    }
-
-    private void stangRaderaFsort2() {
-        fsort2.close();
-        fsort2.deleteFile();
-    }
-
--- a/server.src/prg/gem/Webmedd.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Webmedd.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webmedd.this);
-    private lib.med.Datab da=new lib.med.Datab(Webmedd.this);
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp4 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmp30 = new Field("X(30000)");
-    private Field post = new Field("X(1000)");
--- a/server.src/prg/gem/Webmop.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Webmop.this);
-    private lib.bok.Veripost bokveri=new lib.bok.Veripost(Webmop.this, pa);
-    private lib.bok.Moklpost bokmokl=new lib.bok.Moklpost(Webmop.this, pa);
-    private lib.lev.Betapost levbeta=new lib.lev.Betapost(Webmop.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webmop.this);
-    private lib.med.Datab da=new lib.med.Datab(Webmop.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp4 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmp30 = new Field("X(30000)");
-    private Field oldPost = new Field("X(1000)");
-    private Field newPost = new Field("X(1000)");



-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field selBfdatfr = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field n = new Field("S9(11)");
-    private Field flagga1 = new Field("X");
-    private Field flagga2 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selMokl = new Field("X");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)V99");
-    private Field sum2 = new Field("S9(10)V99");
-    private Field oldFaknr = new Field("9(7)");
-    private Field paFaknr = new Field("9(7)");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field filNamn = new Field("X(50)");
-    private Field fxmlNamn = new Field("X(50)");
-    private Field fxslNamn = new Field("X(50)");
-    private Field fpdfNamn = new Field("X(50)");
-    private Field ftifNamn = new Field("X(50)");
-    private Field mall = new Field("X(8)");
-    private Field tmpKurs = new Field("999999V9999");
-    private Field tmpKursAntal = new Field("999999");
-    private Field lstBelv4 = new Field("---------9,9999");
-    private Field visakod = new Field("XXXX");
-    private Field betbel = new Field("S9(9)V99");
-    private Field betdat = new Field("9(8)");
-    private Field aktiv = new Field("X");
-    private Field oldLnr = new Field("9(6)");
-    private Field tmp6n = new Field("9(6)");
-    private Field tmpLnr = new Field("9(6)");
-    private Field tmpFilnamn = new Field("X(100)");
-    private Field tmpFilnamn2 = new Field("X(100)");
-    private void skapaOppnaFsort() {
-        fsortNamn.set(concat(limit("TMP/S1",SPACE),limit(webpara.userid,SPACE),limit(webpara.pid,SPACE)));
-        fsortNamn.convert(".","_");
-        fsort.deleteFile();
-        fsort.open("OUTPUT");
-        fsort.close();
-        fsort.open("I-O");
-    }
-
-    private void stangRaderaFsort() {
-        fsort.close();
-        fsort.deleteFile();
-    }
-
--- a/server.src/prg/gem/Webmopr.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Webmopr.this);
-    private lib.bok.Veripost bokveri=new lib.bok.Veripost(Webmopr.this, pa);
-    private lib.bok.Moklpost bokmokl=new lib.bok.Moklpost(Webmopr.this, pa);
-    private lib.lev.Betapost levbeta=new lib.lev.Betapost(Webmopr.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webmopr.this);
-    private lib.med.Datab da=new lib.med.Datab(Webmopr.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp4 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmp30 = new Field("X(30000)");
-    private Field oldPost = new Field("X(1000)");
-    private Field newPost = new Field("X(1000)");



-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field selBfdatfr = new Field("9(8)");
-    private Field selEndfakttyp = new Field("XX");
-    private Field selEndejklara = new Field("X");
-    private Field selEndutanper = new Field("X");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field n = new Field("S9(11)");
-    private Field flagga2 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selMokl = new Field("X");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)V99");
-    private Field sum2 = new Field("S9(10)V99");
-    private Field oldFaknr = new Field("9(7)");
-    private Field paFaknr = new Field("9(7)");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field filNamn = new Field("X(50)");
-    private Field fxmlNamn = new Field("X(50)");
-    private Field fxslNamn = new Field("X(50)");
-    private Field fpdfNamn = new Field("X(50)");
-    private Field ftifNamn = new Field("X(50)");
-    private Field mall = new Field("X(8)");
-    private Field tmpKurs = new Field("999999V9999");
-    private Field tmpKursAntal = new Field("999999");
-    private Field lstBelv4 = new Field("---------9,9999");
-    private Field visakod = new Field("XXXX");
-    private Field betbel = new Field("S9(9)V99");
-    private Field betdat = new Field("9(8)");
-    private Field aktiv = new Field("X");
-    private Field oldLnr = new Field("9(6)");
-    private Field tmp6n = new Field("9(6)");
-    private Field tmpLnr = new Field("9(6)");
-    private Field tmpFilnamn = new Field("X(100)");
-    private Field tmpFilnamn2 = new Field("X(100)");
-    private Field frinfdat = new Field("9(8)");
-    private Field toinfdat = new Field("9(8)");
-    private Field faktnr = new Field("9(7)");
-    private void skapaOppnaFsort() {
-        fsortNamn.set(concat(limit("TMP/S1",SPACE),limit(webpara.userid,SPACE),limit(webpara.pid,SPACE)));
-        fsortNamn.convert(".","_");
-        fsort.deleteFile();
-        fsort.open("OUTPUT");
-        fsort.close();
-        fsort.open("I-O");
-    }
-
-    private void stangRaderaFsort() {
-        fsort.close();
-        fsort.deleteFile();
-    }
-
--- a/server.src/prg/gem/Webreg.java
-        if (true) {
-            return;
-        }
-        tmp.set("GEM.REG.");
-        tmp.ref(9).set(p1);
-        tmp80.set(p3);
-        call("prg.bas.regstat", tmp, "<", tmp80);
-        tmp.set("GEM.REG.");
-        tmp.ref(9).set(p1);
-        tmp80.set(p3);
-        call("prg.bas.regstat", tmp, "*", tmp80);
--- a/server.src/prg/gem/Websok.java
-    private lib.lev.Fakapost levfaka=new lib.lev.Fakapost(Websok.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Websok.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Websok.this);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Websok.this);
-    private lib.med.Datab da=new lib.med.Datab(Websok.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field dispHel = new Field("S9(9)");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field tmpDatum = new Field("9(8)");
-    private Field startdat = new Field("9(8)");
-    private Field slutdat = new Field("9(8)");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");






-    private Field opened = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selAntvbak = new Field("999");
-    private Field selAntvfram = new Field("999");
-    private Field selKat = new Field("X(1000)");
-    private Field selExkkat = new Field("X(1000)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field testKod = new Field("X(100)");
-    private Field selKod = new Field("X(100)");
-    private Field sumAmount = new Field("S9(9)V99");
-    private Field tmpStyle = new Field("X(20)");
-    private Field rott = new Field("X");
-    private Field nuvecka = new Field("99");
-    private Field xmlFilnamn = new Field("X(50)");
-    private Field xlsFilnamn = new Field("X(50)");
-    private void old() {
-        lib.lev.Levepost.fd leve=levleve.get();
-        lib.lev.Ankfpost.fd ankf=levankf.get();
-        lib.lev.Fakapost.fd faka=levfaka.get();
-        lib.lev.Faktpost.fd lev_fakt=levfakt.get();
-        leve.f9701OpenInput();
-        ankf.openInput();
-        ankf.key.init();
-        ankf.start();
-        if (ankf.eof.equals("N")) {
-            ankf.readnext();
-        }
-        while (ankf.fs1.equals("0")) {
-            if (ankf.klar.equals(SPACE)) {
-                leve.nr.set(ankf.levnr);
-                leve.f9701Read();
-                sel.set(selKat);
-                testKod.set(leve.cat1);
-                testa();
-                if (testOk.equals("N")) {
-                    testKod.set(leve.cat2);
-                    testa();
-                    if (testOk.equals("N")) {
-                        testKod.set(leve.cat3);
-                        testa();
-                    }
-                }
-                if (testOk.equals("J") && selExkkat.compareTo(SPACE)>0) {
-                    sel.set(selExkkat);
-                    testKod.set(leve.cat1);
-                    testa();
-                    if (testOk.equals("N")) {
-                        testKod.set(leve.cat2);
-                        testa();
-                        if (testOk.equals("N")) {
-                            testKod.set(leve.cat3);
-                            testa();
-                        }
-                    }
-                    if (testOk.equals("J")) {
-                        testOk.set("N");
-                    }
-                    else {
-                        testOk.set("J");
-                    }
-                }
-                if (testOk.equals("J")) {
-                    skrivAnk();
-                }
-            }
-            ankf.readnext();
-        }
-        ankf.close();
-        faka.f9711OpenInput();
-        faka.anid.init();
-        faka.f9711Start();
-        if (faka.f9711Eof.equals("N")) {
-            faka.f9711Readnext();
-        }
-        while (faka.f9711Fs1.equals("0")) {
-            leve.nr.set(faka.annr);
-            leve.f9701Read();
-            sel.set(selKat);
-            testKod.set(leve.cat1);
-            testa();
-            if (testOk.equals("N")) {
-                testKod.set(leve.cat2);
-                testa();
-                if (testOk.equals("N")) {
-                    testKod.set(leve.cat3);
-                    testa();
-                }
-            }
-            if (testOk.equals("J") && selExkkat.compareTo(SPACE)>0) {
-                sel.set(selExkkat);
-                testKod.set(leve.cat1);
-                testa();
-                if (testOk.equals("N")) {
-                    testKod.set(leve.cat2);
-                    testa();
-                    if (testOk.equals("N")) {
-                        testKod.set(leve.cat3);
-                        testa();
-                    }
-                }
-                if (testOk.equals("J")) {
-                    testOk.set("N");
-                }
-                else {
-                    testOk.set("J");
-                }
-            }
-            if (testOk.equals("J")) {
-                skrivFaka();
-            }
-            faka.f9711Readnext();
-        }
-        faka.f9711Close();
-        lev_fakt.f9702OpenInput();
-        lev_fakt.llrecord.init();
-        lev_fakt.f9702Start();
-        if (lev_fakt.f9702Eof.equals("N")) {
-            lev_fakt.f9702Readnext();
-        }
-        while (lev_fakt.f9702Fs1.equals("0")) {
-            leve.nr.set(lev_fakt.llsrnr);
-            leve.f9701Read();
-            sel.set(selKat);
-            testKod.set(leve.cat1);
-            testa();
-            if (testOk.equals("N")) {
-                testKod.set(leve.cat2);
-                testa();
-                if (testOk.equals("N")) {
-                    testKod.set(leve.cat3);
-                    testa();
-                }
-            }
-            if (testOk.equals("J") && selExkkat.compareTo(SPACE)>0) {
-                sel.set(selExkkat);
-                testKod.set(leve.cat1);
-                testa();
-                if (testOk.equals("N")) {
-                    testKod.set(leve.cat2);
-                    testa();
-                    if (testOk.equals("N")) {
-                        testKod.set(leve.cat3);
-                        testa();
-                    }
-                }
-                if (testOk.equals("J")) {
-                    testOk.set("N");
-                }
-                else {
-                    testOk.set("J");
-                }
-            }
-            if (testOk.equals("J")) {
-                skrivFakt();
-            }
-            lev_fakt.f9702Readnext();
-        }
-        lev_fakt.f9702Close();
-        fsortPost.init();
-        fsort.start(">=", "fsort_key");
-        if (fsortFs.equals("00")) {
-            fsort.readNext();
-        }
-        while (fsortFs.equals("00")) {
-            hittat.set("N");
-            if (fsortLeve.equals(HIGH_VALUE)) {
-                hittat.set("J");
-            }
-            if (!(hittat.equals("J"))) {
-                fsortTyp.set(1);
-                //  Tidigare 
-                fsortAr.set(0);
-                fsortVecka.set(0);
-                fsortData.init();
-                fsort.read();
-                if (!(fsortAmount.equals(0))) {
-                    hittat.set("J");
-                }
-                //  Fr o m STARTDAT, t o m SLUTDAT 
-                tmpDatum.set(startdat);
-                while (!(tmpDatum.compareTo(slutdat)>0 || hittat.equals("J"))) {
-                    call("prg.bas.stddat", "W", tmpDatum, tmp6n);
-                    fsortAr.set(tmp6n.ref(1,4));
-                    fsortVecka.set(tmp6n.ref(5,2));
-                    fsortData.init();
-                    fsort.read();
-                    if (!(fsortAmount.equals(0))) {
-                        hittat.set("J");
-                    }
-                    tmp6n.set(7);
-                    call("prg.bas.stddat", "A", tmpDatum, tmp6n, tmpDatum);
-                }
-                //  Senare 
-                fsortAr.set(HIGH_VALUE);
-                fsortVecka.set(HIGH_VALUE);
-                fsortData.init();
-                fsort.read();
-                if (!(fsortAmount.equals(0))) {
-                    hittat.set("J");
-                }
-            }
-            if (hittat.equals("J")) {
-                sumAmount.set(0);
-                fsortTyp.set(1);
-                rott.set("N");
-                call(webpara.xmlut, "<tr>");
-                if (fsortLeve.equals(HIGH_VALUE)) {
-                    call(webpara.xmlut, "<td class='v'>%m</td>", "Tot");
-                }
-                else {
-                    leve.record.init();
-                    leve.nr.set(fsortLeve);
-                    leve.f9701Read();
-                    call(webpara.xmlut, "<td class='v'>%x</td>", leve.name);
-                }
-                fsortAr.set(0);
-                fsortVecka.set(0);
-                fsortData.init();
-                fsort.read();
-                skrivBelopp();
-                sumAmount.increment(fsortAmount);
-                tmpDatum.set(startdat);
-                while (!(tmpDatum.compareTo(slutdat)>0)) {
-                    call("prg.bas.stddat", "W", tmpDatum, tmp6n);
-                    fsortAr.set(tmp6n.ref(1,4));
-                    fsortVecka.set(tmp6n.ref(5,2));
-                    fsortData.init();
-                    fsort.read();
-                    skrivBelopp();
-                    sumAmount.increment(fsortAmount);
-                    tmp6n.set(7);
-                    call("prg.bas.stddat", "A", tmpDatum, tmp6n, tmpDatum);
-                }
-                fsortAr.set(HIGH_VALUE);
-                fsortVecka.set(HIGH_VALUE);
-                fsortData.init();
-                fsort.read();
-                skrivBelopp();
-                sumAmount.increment(fsortAmount);
-                fsortAmount.set(sumAmount);
-                skrivBelopp();
-                call(webpara.xmlut, "</tr>");
-            }
-            fsortTyp.set(HIGH_VALUE);
-            fsortAr.set(HIGH_VALUE);
-            fsortVecka.set(HIGH_VALUE);
-            fsort.start(">=", "fsort_key");
-            if (fsortFs.equals("00")) {
-                fsort.readNext();
-            }
-        }
-        leve.f9701Close();
-        fsort.close();
-        fsort.deleteFile();
-    }
-
-    private void skrivRubriker() {
-        call(webpara.xmlut, "<tr>");
-        call(webpara.xmlut, "<td class='vrub'>%m</td>", "Lev");
-        call(webpara.xmlut, "<td class='hrub'>%m</td>", "Tie");
-        tmpDatum.set(startdat);
-        while (!(tmpDatum.compareTo(slutdat)>0)) {
-            call("prg.bas.stddat", "V", tmpDatum, tmp6n);
-            call(webpara.xmlut, "<td class='hrub'>%m%h</td>", "v", tmp6n);
-            tmp6n.set(7);
-            call("prg.bas.stddat", "A", tmpDatum, tmp6n, tmpDatum);
-        }
-        call(webpara.xmlut, "<td class='hrub'>%m</td>", "See");
-        call(webpara.xmlut, "<td class='hrub'>%m</td>", "Sum");
-        call(webpara.xmlut, "</tr>");
-    }
-
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void skrivAnk() {
-        lib.lev.Ankfpost.fd ankf=levankf.get();
-        fsortPost.init();
-        fsortLeve.set(ankf.levnr);
-        tmpDatum.set(ankf.ffdat);
-        if (tmpDatum.compareTo(startdat)<0) {
-            fsortAr.set(0);
-            fsortVecka.set(0);
-        }
-        else if (tmpDatum.compareTo(slutdat)>0) {
-            fsortAr.set(HIGH_VALUE);
-            fsortVecka.set(HIGH_VALUE);
-        }
-        else {
-            call("prg.bas.stddat", "W", tmpDatum, tmp6n);
-            fsortAr.set(tmp6n.ref(1,4));
-            fsortVecka.set(tmp6n.ref(5,2));
-        }
-        fsortTyp.set(1);
-        fsort.read();
-        if (fsortFs.equals("00")) {
-            fsortAmount.increment(ankf.sbelopp);
-            fsortPost.rewrite();
-        }
-        else {
-            fsortAmount.set(ankf.sbelopp);
-            fsortPost.write();
-        }
-        fsortTyp.set(1);
-        fsortLeve.set(HIGH_VALUE);
-        fsort.read();
-        if (fsortFs.equals("00")) {
-            fsortAmount.increment(ankf.sbelopp);
-            fsortPost.rewrite();
-        }
-        else {
-            fsortAmount.set(ankf.sbelopp);
-            fsortPost.write();
-        }
-    }
-
-    private void skrivFaka() {
-        lib.lev.Fakapost.fd faka=levfaka.get();
-        fsortPost.init();
-        fsortLeve.set(faka.annr);
-        tmpDatum.set(faka.anddate);
-        if (tmpDatum.compareTo(startdat)<0) {
-            fsortAr.set(0);
-            fsortVecka.set(0);
-        }
-        else if (tmpDatum.compareTo(slutdat)>0) {
-            fsortAr.set(HIGH_VALUE);
-            fsortVecka.set(HIGH_VALUE);
-        }
-        else {
-            call("prg.bas.stddat", "W", tmpDatum, tmp6n);
-            fsortAr.set(tmp6n.ref(1,4));
-            fsortVecka.set(tmp6n.ref(5,2));
-        }
-        fsortTyp.set(1);
-        fsort.read();
-        if (fsortFs.equals("00")) {
-            fsortAmount.increment(faka.ansbelopp);
-            fsortPost.rewrite();
-        }
-        else {
-            fsortAmount.set(faka.ansbelopp);
-            fsortPost.write();
-        }
-        fsortTyp.set(1);
-        fsortLeve.set(HIGH_VALUE);
-        fsort.read();
-        if (fsortFs.equals("00")) {
-            fsortAmount.increment(faka.ansbelopp);
-            fsortPost.rewrite();
-        }
-        else {
-            fsortAmount.set(faka.ansbelopp);
-            fsortPost.write();
-        }
-    }
-
-    private void skrivFakt() {
-        lib.lev.Faktpost.fd lev_fakt=levfakt.get();
-        fsortPost.init();
-        fsortLeve.set(lev_fakt.llsrnr);
-        tmpDatum.set(lev_fakt.llddate);
-        if (tmpDatum.compareTo(startdat)<0) {
-            fsortAr.set(0);
-            fsortVecka.set(0);
-        }
-        else if (tmpDatum.compareTo(slutdat)>0) {
-            fsortAr.set(HIGH_VALUE);
-            fsortVecka.set(HIGH_VALUE);
-        }
-        else {
-            call("prg.bas.stddat", "W", tmpDatum, tmp6n);
-            fsortAr.set(tmp6n.ref(1,4));
-            fsortVecka.set(tmp6n.ref(5,2));
-        }
-        fsortTyp.set(1);
-        fsort.read();
-        if (fsortFs.equals("00")) {
-            fsortAmount.increment(lev_fakt.llsbelopp);
-            fsortAmount.decrement(lev_fakt.llpamount);
-            fsortPost.rewrite();
-        }
-        else {
-            fsortAmount.set(lev_fakt.llsbelopp);
-            fsortAmount.decrement(lev_fakt.llpamount);
-            fsortPost.write();
-        }
-        fsortTyp.set(1);
-        fsortLeve.set(HIGH_VALUE);
-        fsort.read();
-        if (fsortFs.equals("00")) {
-            fsortAmount.increment(lev_fakt.llsbelopp);
-            fsortAmount.decrement(lev_fakt.llpamount);
-            fsortPost.rewrite();
-        }
-        else {
-            fsortAmount.set(lev_fakt.llsbelopp);
-            fsortAmount.decrement(lev_fakt.llpamount);
-            fsortPost.write();
-        }
-    }
-
-    private void skrivBelopp() {
-        if (fsortVecka.equals(nuvecka)) {
-            tmpStyle.set("hnuv");
-        }
-        else {
-            tmpStyle.set("h");
-        }
-        if (rott.equals("J")) {
-            call(webpara.xmlut, "<td align='right' class='%0' color='red'>(%H)</td>", tmpStyle, fsortAmount);
-        }
-        else {
-            call(webpara.xmlut, "<td align='right' class='%0'>%H</td>", tmpStyle, fsortAmount);
-        }
-    }
-
--- a/server.src/prg/gem/Webwidg.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Webwidg.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webwidg.this);
-    private lib.med.Datab da=new lib.med.Datab(Webwidg.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Webwidg.this, webpara, pa);
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp4 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field poster = new Field("99999");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
--- a/server.src/prg/gem/Xio.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Xio.this);
-    private lib.bas.Std std=new lib.bas.Std(Xio.this);
-    private Field numArgs = new Field("S9(11)");
-    private Field pid = new Field("X(10)");
-    private Field dbconn = new Field("X(100)");
--- a/server.src/prg/in2/Konv.java
-    private lib.bas.Std std=new lib.bas.Std(Konv.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Konv.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Konv.this);
-    private void o9302OpenInput() {
-        invinvt.get().f9302.open("INPUT");
-        if (!(invinvt.get().f9302Fs.equals("00")) && !(invinvt.get().f9302Fs.equals("35"))) {
-            fel.set("J");
-        }
-    }
-
-    private void o9303OpenIO() {
-        invinde.get().f9303.open("I-O");
-        if (!(invinde.get().f9303Fs.equals("00"))) {
-            fel.set("J");
-        }
-    }
-
-    private void o9304OpenIO() {
-        invmeto.get().f9304.open("I-O");
-        if (!(invmeto.get().f9304Fs.equals("00"))) {
-            fel.set("J");
-        }
-    }
-
--- a/server.src/prg/in2/P7avskr.java
-    private lib.bas.Beho beho=new lib.bas.Beho(P7avskr.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P7avskr.this);
--- a/server.src/prg/in2/P7init.java
-    private lib.bas.Std std=new lib.bas.Std(P7init.this);
--- a/server.src/prg/in2/W732.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W732.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W732.this);
-    private Field scFunk = new Field("9");
-    private Field acontrol = new Field("9(3)");
-    private Field exportfilnamn = new Field("X(50)");
--- a/server.src/prg/in2/W734.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W734.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W734.this);
-    private Field scFunk = new Field("9");
-    private Field exportfilnamn = new Field("X(50)");
--- a/server.src/prg/in2/W760.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W760.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W760.this);
-    private Field scFunk = new Field("9");
-    private Field x = new Field("S9(9)");
-    private Field exportfilnamn = new Field("X(50)");
--- a/server.src/prg/in2/W761.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W761.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W761.this);
-    private Field scFunk = new Field("9");
-    private Field validOk = new Field("X");
--- a/server.src/prg/in2/W762.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W762.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W762.this);
-    private Field linesAPage = new Field("999", 42);
-    private Field windowHandle = new Field("X(10)");
-    private void validera() {
-        validOk.set("N");
-        inve.inv.set(scInv);
-        inve.read();
-        if (inve.eof.equals("J")) {
-            call("prg.bas.visa", pa.paraArea, "F007");
-            std.crtpos.set(new Constant("0435"));
-            return;
-        }
-        if (!(inve.avyttrTyp.equals(SPACE))) {
-            call("prg.bas.visa", pa.paraArea, "F006");
-            std.crtpos.set(new Constant("0435"));
-            return;
-        }
-        if (inve.avyttrTyp.equals("N")) {
-            call("prg.bas.visa", pa.paraArea, "F009");
-            std.crtpos.set(new Constant("0435"));
-            return;
-        }
-        scVisa.init();
-        scNamn.set(inve.namn);
-        avsk.key.init();
-        avsk.ityp.set(scItyp);
-        avsk.nr.set(scNr);
-        avsk.unr.set(scUnr);
-        avsk.start();
-        if (avsk.eof.equals("N")) {
-            avsk.readnext();
-        }
-        while (!(avsk.eof.equals("J") || !(avsk.ityp.equals(scItyp)) || !(avsk.nr.equals(scNr)) || !(avsk.unr.equals(scUnr)))) {
-            if (avsk.per.compareTo(scAvskrTom)>0) {
-                scAvskrTom.set(avsk.per);
-            }
-            scAvskrBelopp.increment(avsk.belopp);
-            avsk.readnext();
-        }
-        if (scAvskrTom.equals(ZERO)) {
-            scAvskrFrom.set(ZERO);
-            scAvskrTom.set(ZERO);
-            scAvskrAntal.set(ZERO);
-        }
-        else {
-            if (scAvskrTom.compareTo(inve.avskrFrom)>0) {
-                scAvskrFrom.set(inve.avskrFrom);
-                scAvskrAntal.set(scAvskrTomAa.multiply(12).add(scAvskrTomMm).subtract(scAvskrFromAa.multiply(12).add(scAvskrFromMm)).add(1), ROUND_HALF_UP);
-            }
-            else {
-                scAvskrFrom.set(ZERO);
-                scAvskrTom.set(ZERO);
-                scAvskrAntal.set(ZERO);
-            }
-        }
-        scAnskPris.set(inve.anskPris);
-        scRest.set(scAnskPris.subtract(scAvskrBelopp), ROUND_HALF_UP);
-        validOk.set("J");
-    }
-
--- a/server.src/prg/in2/W770.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(W770.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W770.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W770.this);
-    private Field scFunk = new Field("9");
-    private Field validOk = new Field("X");
-    private void tempStartprev() {
-        tempEof.set("N");
-        temp.start("NOT>", "temp_key");
-        if (temp.invalidKey()) {
-            tempEof.set("J");
-        }
-    }
-
-    private void tempReadprev() {
-        tempEof.set("N");
-        temp.readPrevious();
-        if (temp.atEnd()) {
-            tempEof.set("J");
-        }
-        if (tempFs.equals("9D")) {
-            temp.start("<", "temp_key");
-            c_sleep("1");
-            tempReadprev();
-            return;
-        }
-    }
-
--- a/server.src/prg/in2/W79930.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W79930.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W79930.this);
-    private Field scFunk = new Field("9");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
--- a/server.src/prg/in2/Webreg.java
-        if (true) {
-            return;
-        }
-        tmp.set("KUN.REG.");
-        tmp.ref(9).set(p1);
-        tmp80.set(p3);
-        call("prg.bas.regstat", tmp, "<", tmp80);
-        tmp.set("INV.REG.");
-        tmp.ref(9).set(p1);
-        tmp80.set(p3);
-        call("prg.bas.regstat", tmp, "*", tmp80);
--- a/server.src/prg/in2/Xcara01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xcara01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xcara01.this);
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
--- a/server.src/prg/in2/Xgrod01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xgrod01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xgrod01.this);
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
--- a/server.src/prg/inv/P7init.java
-    private lib.bas.Std std=new lib.bas.Std(P7init.this);
--- a/server.src/prg/ktk/Ftgsimp.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Ftgsimp.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Ftgsimp.this);
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/ktk/Konv.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Konv.this);
-    private Field kurs = new Field("999999V9999");
-    private Field kursAntal = new Field("999999");
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field tmpStatus = new Field("X(50)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpTidn = new Field("X(4)");
-    private Field tmpKund = new Field("X(4)");
-    private Field tmpBelopp = new Field("S9(9)V99");
-    private Field tmpBeloppD = new Field("--------9.99");
-    private Field tmpKomm = new Field("X(70)");
-    private Field antalOkD = new Field("---B---B--9");
-    private Field antalOkSt = new Field("S9(9)");
-    private Field antalFelD = new Field("---B---B--9");
-    private Field antalFelSt = new Field("S9(9)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
-    private void utfilWrite() {
-        utfilLine.write();
-    }
-
--- a/server.src/prg/ktk/P0init.java
-    private Field tmpSprak = new Field("XX");
--- a/server.src/prg/ktk/Totimp.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Totimp.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Totimp.this);
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field katPek = new Field("S9(9)");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/ktk/Webmm.java
-    private lib.ktk.Katepost ktkkate=new lib.ktk.Katepost(Webmm.this, pa);
-    private lib.ktk.Kattpost ktkkatt=new lib.ktk.Kattpost(Webmm.this, pa);
-    private lib.ktk.Landpost ktkland=new lib.ktk.Landpost(Webmm.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webmm.this);
-    private Field tmp80 = new Field("X(80)");
-    private Field sel1 = new Field("X(50)");
-    private Field sel2 = new Field("X(50)");
-    private Field sel3 = new Field("X(50)");
-    private Field sel4 = new Field("X(50)");
-    private Field f1 = new Field("X");
-    private Field f2 = new Field("X");
-    private Field f3 = new Field("X");
-    private Field tmpPost = new Field("X(5000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");
-    private Field i = new Field("999");
-    private Field j = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field behorig = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field beh = new Field("X");
-    private Field selMedi = new Field("9(6)");
--- a/server.src/prg/ktk/Webreg.java
-        if (true) {
-            return;
-        }
-        tmp.set("KTK.REG.");
-        tmp.ref(9).set(p1);
-        tmp80.set(p3);
-        call("prg.bas.regstat", tmp, "<", tmp80);
-        tmp.set("KTK.REG.");
-        tmp.ref(9).set(p1);
-        tmp80.set(p3);
-        call("prg.bas.regstat", tmp, "*", tmp80);
--- a/server.src/prg/ktk/Websynk.java
-    private lib.ktk.Perspost ktkpers=new lib.ktk.Perspost(Websynk.this, pa);
-    private lib.ktk.Anstpost ktkanst=new lib.ktk.Anstpost(Websynk.this, pa);
-    private lib.ktk.Kontpost ktkkont=new lib.ktk.Kontpost(Websynk.this, pa);
-    private lib.ktk.Katepost ktkkate=new lib.ktk.Katepost(Websynk.this, pa);
-    private lib.ktk.Kattpost ktkkatt=new lib.ktk.Kattpost(Websynk.this, pa);
-    private lib.gem.Pgempost gempgem=new lib.gem.Pgempost(Websynk.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Websynk.this);
-    private Field tmp = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field sel1 = new Field("X(50)");
-    private Field sel2 = new Field("X(50)");
-    private Field sel3 = new Field("X(50)");
-    private Field sel4 = new Field("X(50)");
-    private Field sel5 = new Field("X(50)");
-    private Field f1 = new Field("X");
-    private Field f2 = new Field("X");
-    private Field f3 = new Field("X");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(5000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");
-    private Field i = new Field("999");
-    private Field j = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(100)");
-    private Field p4 = new Field("X(100)");
-    private Field p5 = new Field("X(50)");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field behorig = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field beh2 = new Field("X");
-    private Field selMedi = new Field("9(6)");
--- a/server.src/prg/kun/Apikund.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Apikund.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Apikund.this);
--- a/server.src/prg/kun/Expxfakt.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Expxfakt.this);
--- a/server.src/prg/kun/Expxfakt2.java
-    private lib.med.Datab da=new lib.med.Datab(Expxfakt2.this);
--- a/server.src/prg/kun/K029obet.java
-    private lib.bas.Std std=new lib.bas.Std(K029obet.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K029obet.this);
-    private lib.med.Datab da=new lib.med.Datab(K029obet.this);
-    private lib.med.Kundpost medkund=new lib.med.Kundpost(K029obet.this, pa);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K029obet.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K029obet.this);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(K029obet.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");
-    private Field krabBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field tmpDatum = new Field("9(8)");
-    private Field startdat = new Field("9(8)");
-    private Field slutdat = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");






-    private Field opened = new Field("X");
-    private Field antal1 = new Field("99999");
-    private Field tmpStyle = new Field("X(20)");
-    private Field betaBel = new Field("S9(10)V99");
-    private Field betaDatum = new Field("9(8)");
-    private Field overkund = new Field("X(4)");
-    private void visa() {
-        lib.kun.Kundpost.fd kun_kund=kunkund.get();
-        lib.kun.Faktpost.fd kun_fakt=kunfakt.get();
-        lib.kun.Fakbpost.fd fakb=kunfakb.get();
-        kun_kund.f9601OpenInput();
-        kun_fakt.f9602OpenInput();
-        fakb.openInput();
-        call(webpara.webut, "<html>");
-        call(webpara.webut, "<head>");
-        call(webpara.webut, "<title>%m</title>", "Faa");
-        //     CALL WEBUT USING "<style type='text/css'>" 
-        //     CALL WEBUT USING "body äfont-family:helvetica;font-size:11ptå" 
-        //     CALL WEBUT USING "table.b äborder-width:1pt;border-style:solidå" 
-        //     CALL WEBUT USING "table.b th äborder-width:1pt;border-style:solidå"                      
-        //     CALL WEBUT USING "table.b td äborder-width:1pt;border-style:solidå"                      
-        //     CALL WEBUT USING "</style>" 
-        call(webpara.webut, "</head>");
-        call(webpara.webut, "<body style='font-family:helvetica;font-size:11pt'>");
-        kun_fakt.slrecord.init();
-        kun_fakt.slid.set(p2);
-        kun_fakt.f9602Read();
-        if (kun_fakt.f9602Fs1.equals("0")) {
-            skrivFub();
-            skrivKont();
-            skrivBet();
-        }
-        call(webpara.webut, "</body>");
-        call(webpara.webut, "</html>");
-    }
-
-    private void skrivFub() {
-        lib.kun.Kundpost.fd kun_kund=kunkund.get();
-        lib.kun.Faktpost.fd kun_fakt=kunfakt.get();
-        lib.kun.Fakbpost.fd fakb=kunfakb.get();
-        kun_kund.curecord.init();
-        kun_kund.cunr.set(kun_fakt.slsrnr);
-        kun_kund.f9601Read();
-        call(webpara.webut, "<table>");
-        call(webpara.webut, "<caption align=left><i>%m</i></caption>", "Fur");
-        call(webpara.webut, "<tr><td><b>%m</b></td><td>%s</td></tr>", "Lev", kun_kund.cuname);
-        unstring(kun_fakt.slsrnr,new Object[]{"-"},kundnr);
-        call(webpara.webut, "<tr><td><b>%m</b></td><td>%0</td></tr>", "LNr", kundnr);
-        call(webpara.webut, "<tr><td><b>%m</b></td><td>%0</td></tr>", "Fnr", kun_fakt.slinr);
-        //     CALL WEBUT USING "<tr><td><b>%m</b></td><td>%0</td></tr>" "Anr" SLANKNR 
-        call(webpara.webut, "<tr><td><b>%m</b></td><td>%s-%0</td></tr>", "517", kun_fakt.slptyp, kun_fakt.slvnr);
-        call(webpara.webut, "<tr><td><b>%m</b></td><td>%D</td></tr>", "FaD", kun_fakt.slidate);
-        call(webpara.webut, "<tr><td><b>%m</b></td><td>%N</td></tr>", "Fbe", kun_fakt.sluamount);
-        call("prg.bas.stdval", "D", kun_fakt.sluvaluta, null, null, null, null, null, visaValuta);
-        call(webpara.webut, "<tr><td><b>%m</b></td><td>%s</td></tr>", "Vaa", visaValuta);
-        call(webpara.webut, "<tr><td><b>%m %a</b></td><td>%N</td></tr>", "Fbe", "BVa", kun_fakt.sliamount);
-        call(webpara.webut, "<tr><td><b>%m</b></td><td>%D</td></tr>", "Ffd", kun_fakt.slddate);
-        //     CALL WEBUT USING "<tr><td><b>%m 2</b></td><td>%D</td></tr>" "Ffd" SLDDATE2 
-        call(webpara.webut, "<tr><td><b>%m</b></td><td>%D</td></tr>", "BfD", kun_fakt.slbdate);
-        call(webpara.webut, "<tr><td><b>%m</b></td><td>%D</td></tr>", "Bdt", kun_fakt.slpdate);
-        call(webpara.webut, "<tr><td><b>%m %a</b></td><td>", "Btt", "517");
-        flagga1.set("N");
-        fakb.post.init();
-        fakb.srnr.set(kun_fakt.slsrnr);
-        fakb.inr.set(kun_fakt.slinr);
-        fakb.ftyp.set(kun_fakt.slftyp);
-        fakb.start();
-        if (fakb.fs1.equals("0")) {
-            fakb.readnext();
-        }
-        while ((fakb.fs1.equals("0") && fakb.srnr.equals(kun_fakt.slsrnr) && fakb.inr.equals(kun_fakt.slinr) && fakb.ftyp.equals(kun_fakt.slftyp))) {
-            if (flagga1.equals("J")) {
-                call(webpara.webut, ", %S-%0\\", fakb.ptyp, fakb.vernr);
-            }
-            else {
-                call(webpara.webut, "%S-%0\\", fakb.ptyp, fakb.vernr);
-            }
-            flagga1.set("J");
-            fakb.readnext();
-        }
-        call(webpara.webut, "</td></tr>");
-        call(webpara.webut, "<tr><td><b>%m</b></td><td>%S</td></tr>", "198", kun_fakt.slkomm1);
-        call(webpara.webut, "</table>");
-    }
-
-    private void skrivBet() {
-        lib.kun.Fakbpost.fd fakb=kunfakb.get();
-        lib.kun.Faktpost.fd kun_fakt=kunfakt.get();
-        call(webpara.webut, "<br>");
-        call(webpara.webut, "<table class='b'>");
-        call(webpara.webut, "<caption align=left><i>%m</i></caption>", "Bar");
-        call(webpara.webut, "<tr><th>%m</th><th>%m</th><th>%m</th><th>%m</th></tr>", "BfD", "517", "Bel", "Ube");
-        fakb.post.init();
-        fakb.srnr.set(kun_fakt.slsrnr);
-        fakb.inr.set(kun_fakt.slinr);
-        fakb.ftyp.set(kun_fakt.slftyp);
-        fakb.start();
-        if (fakb.fs1.equals("0")) {
-            fakb.readnext();
-        }
-        while ((fakb.fs1.equals("0") && fakb.srnr.equals(kun_fakt.slsrnr) && fakb.inr.equals(kun_fakt.slinr) && fakb.ftyp.equals(kun_fakt.slftyp))) {
-            call(webpara.webut, "<tr><td>%D</td><td>%S-%0</td><td align=right>%N</td><td align=right>%N</td></tr>", fakb.date, fakb.ptyp, fakb.vernr, fakb.amount, fakb.uamount);
-            fakb.readnext();
-        }
-        call(webpara.webut, "</table>");
-    }
-
-    private void skrivKont() {
-        lib.bas.Ftgspost.fd ftgs=basftgs.get();
-        lib.bok.Hbokpost.fd hbok=bokhbok.get();
-        lib.kun.Faktpost.fd kun_fakt=kunfakt.get();
-        ftgs.f9904OpenInput();
-        ftgs.fokod.set(webpara.kamftg);
-        ftgs.f9904Read();
-        call(webpara.webut, "<br>");
-        call(webpara.webut, "<table class='b'>");
-        call(webpara.webut, "<caption align=left><i>%m</i></caption>", "Kog");
-        call(webpara.webut, "<tr><th>%m</th><th>%m</th><th>%m</th><th>%m</th><th>%m</th><th>%m</th><th>%m</th><th>%m</th><th>%m</th></tr>", "Aar", "Nr", "BfD", "Kto", "KSt", "KBr", "Bel", "Txt", "Ifo");
-        pa.bfar.set(ftgs.fomaxar);
-        while (!(pa.bfar.compareTo(ftgs.fominar)<0)) {
-            hbok.f9810OpenInput();
-            hbok.verrecord.init();
-            hbok.verptyp.set(kun_fakt.slptyp);
-            hbok.ververnr.set(kun_fakt.slvnr);
-            hbok.f9810Start();
-            if (hbok.f9810Fs1.equals("0")) {
-                hbok.f9810Readnext();
-            }
-            while ((hbok.f9810Fs1.equals("0") && hbok.verptyp.equals(kun_fakt.slptyp) && hbok.ververnr.equals(kun_fakt.slvnr))) {
-                call(webpara.webut, "<tr><td>%0</td><td align=right>%b</td><td>%D</td><td>%0</td><td>%s</td><td>%s</td><td align=right>%N</td><td>%s</td><td>%s</td></tr>", pa.bfar, hbok.verlopnr, hbok.verbokdag, hbok.verkto, hbok.verkst, hbok.verkbr, hbok.verbelopp, hbok.vertext, hbok.verinfo);
-                hbok.f9810Readnext();
-            }
-            hbok.f9810Close();
-            pa.bfar.decrement(1);
-        }
-        call(webpara.webut, "</table>");
-    }
-
--- a/server.src/prg/kun/K354fjrn.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K354fjrn.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K354fjrn.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K354fjrn.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K354fjrn.this);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(K354fjrn.this);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(K354fjrn.this, pa);
-    private lib.gem.Pgempost gempgem=new lib.gem.Pgempost(K354fjrn.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(K354fjrn.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(K354fjrn.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K354fjrn.this);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(K354fjrn.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K354fjrn.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K354fjrn.this);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(K354fjrn.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp80 = new Field("X(80)");
-    private Field oldPost = new Field("X(1000)");
-    private Field newPost = new Field("X(1000)");



-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selKund = new Field("X(1000)");
-    private Field selProj = new Field("X(1000)");
-    private Field selTypmed = new Field("X");
-    private Field selEnde = new Field("X");
-    private Field selEndejs = new Field("X");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sum2 = new Field("S9(10)");
-    private Field oldFaknr = new Field("9(7)");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field fskrivcEfaNamn = new Field("X(50)");
-    private Field fskrivcFpNamn = new Field("X(50)");
-    private Field fskrivcIcdnNamn = new Field("X(50)");
-    private Field fskrivcIconNamn = new Field("X(50)");
-    private Field exitStatus = new Field("999");
-    private Field valuta = new Field("XXX");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/kun/K43201.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K43201.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K43201.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K43201.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K43201.this);
-    private lib.med.Datab da=new lib.med.Datab(K43201.this);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(K43201.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field akoder = new Field("X(200)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel = new Field("S9(10)");
-    private Field tmpHel2 = new Field("S9(10)");
-    private Field tmpHel3 = new Field("S9(10)");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field tmpKey = new Field("X(1000)");
-    private Field oldKod = new Field("XXX");
-    private Field ejutskr = new Field("X");
-    private Field sumIfak = new Field("S9(9)");
-    private Field sumIfaka = new Field("S9(9)");
-    private Field sumMarkup = new Field("S9(9)");
-    private Field sumA8 = new Field("S9(9)");
-    private Field sumI12 = new Field("S9(9)");
-    private Field sumFinal = new Field("S9(9)");
-    private Field grossHel = new Field("S9(9)");
-    private Field avsnitt = new Field("X");
-    private void skrivSumrad() {
-        call(webpara.xmlut, "<Row>");
-        call(webpara.xmlut, "<Cell ss:StyleID='rub'><Data ss:Type='String'>%m</Data></Cell>", "Sum");
-        call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-        call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-        call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-        call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-        if (webpara.ksdKundkod.equals("OMDH")) {
-            call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-            call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-            if (selSpec.equals("J")) {
-                call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-            }
-        }
-        if (selSpec.equals("J")) {
-            call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-            call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-            call(webpara.xmlut, "<Cell ss:StyleID='dat'><Data ss:Type='DateTime'>%0</Data></Cell>", " ");
-            call(webpara.xmlut, "<Cell ss:StyleID='dat'><Data ss:Type='DateTime'>%0</Data></Cell>", " ");
-            call(webpara.xmlut, "<Cell ss:StyleID='dat'><Data ss:Type='DateTime'>%0</Data></Cell>", " ");
-            call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='Number'>%0</Data></Cell>", " ");
-            call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='Number'>%0</Data></Cell>", " ");
-            if (!(sumUtlValuta[1].equals("*"))) {
-                call(webpara.xmlut, "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>", sumUtlRestbel[1]);
-                call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", sumUtlValuta[1]);
-            }
-            else {
-                call(webpara.xmlut, "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%0</Data></Cell>", " ");
-                call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%0</Data></Cell>", " ");
-            }
-        }
-        call(webpara.xmlut, "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>", sumRestbel[1][0]);
-        call(webpara.xmlut, "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>", sumRestbel[1][1]);
-        call(webpara.xmlut, "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>", sumRestbel[1][2]);
-        call(webpara.xmlut, "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>", sumRestbel[1][3]);
-        call(webpara.xmlut, "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>", sumRestbel[1][4]);
-        call(webpara.xmlut, "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>", sumRestbel[1][5]);
-        call(webpara.xmlut, "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>", sumRestbel[1][6]);
-        call(webpara.xmlut, "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>", sumRestbel[1][7]);
-        if (selSpec.equals("J")) {
-            tmpBelopp.set(sumRestbel[1][8].add(sumRestbel[1][9]), ROUND_HALF_UP);
-            call(webpara.xmlut, "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>", tmpBelopp);
-        }
-        else {
-            call(webpara.xmlut, "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>", sumRestbel[1][8]);
-            call(webpara.xmlut, "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>", sumRestbel[1][9]);
-        }
-        call(webpara.xmlut, "</Row>");
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/kun/K43301.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K43301.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K43301.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K43301.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K43301.this);
-    private lib.med.Datab da=new lib.med.Datab(K43301.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field akoder = new Field("X(200)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel = new Field("S9(10)");
-    private Field tmpHel2 = new Field("S9(10)");
-    private Field tmpHel3 = new Field("S9(10)");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selFtg = new Field("XXXX");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field tmpKey = new Field("X(1000)");
-    private Field oldKod = new Field("XXX");
-    private Field ejutskr = new Field("X");
-    private Field sumIfak = new Field("S9(9)");
-    private Field sumIfaka = new Field("S9(9)");
-    private Field sumMarkup = new Field("S9(9)");
-    private Field sumA8 = new Field("S9(9)");
-    private Field sumI12 = new Field("S9(9)");
-    private Field sumFinal = new Field("S9(9)");
-    private Field grossHel = new Field("S9(9)");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/kun/K446fakt.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K446fakt.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K446fakt.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K446fakt.this);
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(K446fakt.this, pa);
-    private lib.bok.Botrpost bokbotr=new lib.bok.Botrpost(K446fakt.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(K446fakt.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(K446fakt.this, pa);
-    private lib.gem.Pgempost gempgem=new lib.gem.Pgempost(K446fakt.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(K446fakt.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K446fakt.this);
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field akoder = new Field("X(200)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpHel = new Field("S9(10)");
-    private Field tmpHel2 = new Field("S9(10)");
-    private Field tmpHel3 = new Field("S9(10)");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum1m = new Field("S9(10)");
-    private Field sum2m = new Field("S9(10)");
-    private Field aconto = new Field("S9(10)");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field bfdat = new Field("9(8)");
-    private Field bfper = new Field("99");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antalposter = new Field("99999");
-    private Field tmpKey = new Field("X(1000)");
-    private Field tmpFilnamn = new Field("X(100)");
-    private Field tmpFilnamn2 = new Field("X(100)");
-    private Field expnr = new Field("99999");
-    private Field oldKod = new Field("XXX");
-    private Field sumIfak = new Field("S9(9)");
-    private Field sumIfaka = new Field("S9(9)");
-    private Field sumMarkup = new Field("S9(9)");
-    private Field sumA8 = new Field("S9(9)");
-    private Field sumI12 = new Field("S9(9)");
-    private Field sumFinal = new Field("S9(9)");
-    private Field postrubrik = new Field("X(200)");
-    private Field caleTim = new Field("S9(9)V99");
-    private Field sumTim = new Field("S9(9)V99");
-    private Field locid = new Field("X(200)");
-    private Field oldSort = new Field("X(10)");
-    private Field inforubrik = new Field("X(20)");
-    private Field sprakBak = new Field("XX");
-    private Field fel = new Field("X");
-    private Field sakn7 = new Field("X");
-    private Field skrivitprojrub = new Field("X");
-    private Field skrivitflik = new Field("X");
-    private Field oldLand = new Field("XX");
-    private Field fakBel = new Field("S9(10)V99");
-    private Field fakBelu = new Field("S9(10)V99");
-    private Field betaBel = new Field("S9(10)V99");
-    private Field betaDatum = new Field("9(8)");
-    private Field krabBel = new Field("S9(9)V99");
-    private Field fsortMoms = new Field("S9(9)V99");
-    private Field fakBet = new Field("S9(10)V99");
-    private Field overkund = new Field("X(4)");
-    private Field fakBetu = new Field("S9(10)V99");
-    private Field parKrabAvr = new Field("X");
-    private Field tmpKrabMoms = new Field("S9(9)V99");
-    private Field tmpKrabExklMoms = new Field("S9(9)V99");
-    private Field tmpKrabMomsSum = new Field("S9(9)V99");
-    private Field tmpKrabExklMomsSum = new Field("S9(9)V99");
-    private Field x = new Field("9(9)");
-    private void skrivSumrad() {
-        call(webpara.xmlut, "<Row>");
-        call(webpara.xmlut, "<Cell ss:StyleID='rub'><Data ss:Type='String'>%m</Data></Cell>", "Sum");
-        call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-        call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-        call(webpara.xmlut, "<Cell ss:StyleID='dat'><Data ss:Type='DateTime'>%0</Data></Cell>", " ");
-        call(webpara.xmlut, "<Cell ss:StyleID='dat'><Data ss:Type='DateTime'>%0</Data></Cell>", " ");
-        call(webpara.xmlut, "<Cell ss:StyleID='dat'><Data ss:Type='DateTime'>%0</Data></Cell>", " ");
-        call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='Number'>%0</Data></Cell>", " ");
-        //     CALL XMLUT USING "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>" SUM-RESTBEL(2 1) 
-        //     CALL XMLUT USING "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>" SUM-RESTBEL(2 2) 
-        //     CALL XMLUT USING "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>" SUM-RESTBEL(2 3) 
-        //     CALL XMLUT USING "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>" SUM-RESTBEL(2 4) 
-        //     CALL XMLUT USING "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>" SUM-RESTBEL(2 5) 
-        //     CALL XMLUT USING "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>" SUM-RESTBEL(2 6) 
-        //     CALL XMLUT USING "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>" SUM-RESTBEL(2 7) 
-        //     CALL XMLUT USING "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>" SUM-RESTBEL(2 8) 
-        //     CALL XMLUT USING "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>" SUM-RESTBEL(2 9) 
-        //     CALL XMLUT USING "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>" SUM-RESTBEL(2 10) 
-        call(webpara.xmlut, "</Row>");
-    }
-
-    private void skrivTotrad() {
-        call(webpara.xmlut, "<Row>");
-        call(webpara.xmlut, "<Cell ss:StyleID='rub'><Data ss:Type='String'>%m</Data></Cell>", "Tot");
-        call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-        call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-        call(webpara.xmlut, "<Cell ss:StyleID='dat'><Data ss:Type='DateTime'>%0</Data></Cell>", " ");
-        call(webpara.xmlut, "<Cell ss:StyleID='dat'><Data ss:Type='DateTime'>%0</Data></Cell>", " ");
-        call(webpara.xmlut, "<Cell ss:StyleID='dat'><Data ss:Type='DateTime'>%0</Data></Cell>", " ");
-        call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='Number'>%0</Data></Cell>", " ");
-        //     CALL XMLUT USING "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>" SUM-RESTBEL(1 1) 
-        //     CALL XMLUT USING "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>" SUM-RESTBEL(1 2) 
-        //     CALL XMLUT USING "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>" SUM-RESTBEL(1 3) 
-        //     CALL XMLUT USING "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>" SUM-RESTBEL(1 4) 
-        //     CALL XMLUT USING "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>" SUM-RESTBEL(1 5) 
-        //     CALL XMLUT USING "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>" SUM-RESTBEL(1 6) 
-        //     CALL XMLUT USING "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>" SUM-RESTBEL(1 7) 
-        //     CALL XMLUT USING "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>" SUM-RESTBEL(1 8) 
-        //     CALL XMLUT USING "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>" SUM-RESTBEL(1 9) 
-        //     CALL XMLUT USING "<Cell ss:StyleID='bel'><Data ss:Type='Number'>%B</Data></Cell>" SUM-RESTBEL(1 10) 
-        call(webpara.xmlut, "</Row>");
-    }
-
-    private void laskunfakt() {
-        lib.kun.Faktpost.fd kun_fakt=kunfakt.get();
-        lib.med.Faktpost.fd med_fakt=p8921.medfakt.get();
-        lib.kun.Fakbpost.fd fakb=kunfakb.get();
-        kun_fakt.slrecord.init();
-        x.set(1);
-        while (!(!(med_fakt.faknr.ref(x,1).equals("0")))) {
-            x.increment(1);
-        }
-        kun_fakt.slinr.set(med_fakt.faknr.ref(x));
-        kun_fakt.slftyp.set(fore.faktFtyp);
-        if (webpara.moduler.ref(2,1).equals("J")) {
-            kun_fakt.f9602Read2();
-            if (!((kun_fakt.f9602Fs1.equals("0") && kun_fakt.slinr.equals(med_fakt.faknr.ref(x))))) {
-                kun_fakt.sldata.init();
-            }
-        }
-        if (!((kun_fakt.sluvaluta.equalsEither(SPACE, basvaluta)))) {
-            fakBel.set(kun_fakt.sliamount);
-            if (kun_fakt.sluvaluta.equalsEither(SPACE, basvaluta)) {
-                fakBelu.set(kun_fakt.sliamount);
-            }
-            else {
-                fakBelu.set(kun_fakt.sluamount);
-            }
-            fakBet.set(0);
-            fakBetu.set(0);
-            fakb.post.init();
-            fakb.key.ref(1,22).set(kun_fakt.slid);
-            fakb.start();
-            if (fakb.fs1.equals("0")) {
-                fakb.readnext();
-            }
-            while ((fakb.fs1.equals("0") && fakb.key.ref(1,22).equals(kun_fakt.slid))) {
-                fakBet.increment(fakb.amount);
-                if (kun_fakt.sluvaluta.equalsEither(SPACE, basvaluta)) {
-                    fakBetu.increment(fakb.amount);
-                }
-                else {
-                    fakBetu.increment(fakb.uamount);
-                }
-                fakb.readnext();
-            }
-        }
-        else {
-            fakBel.set(kun_fakt.sliamount);
-            fakBelu.set(kun_fakt.sliamount);
-            fakBet.set(kun_fakt.slpamount);
-            fakBetu.set(kun_fakt.slpamount);
-        }
-    }
-
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
-    private void cbrnParam() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        para.f9800OpenInput();
-        para.f9800P.set(10);
-        para.f9800Read();
-        if (para.f9800Eof.equals("N") && !(para.bookparam.equals(SPACE))) {
-            pa.centralKont.set(para.bookparam);
-        }
-        else {
-            pa.centralKont.set(pa.bkstvftg);
-        }
-        para.f9800Close();
-    }
-
-    private void hittabfar() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        pa.bfar.set(ftgs.fominar);
-        while (!(pa.bfar.compareTo(ftgs.fomaxar)>0)) {
-            para.f9800OpenInput();
-            para.f9800P.set(1);
-            para.f9800Read();
-            para.f9800Close();
-            para.f9801OpenInput();
-            para.f9801Read();
-            para.f9801Close();
-            i.set(1);
-            for (int _t=para.bookparamNum.getInt(); _t>0; _t--) //           IF NOT BOOKPER-SPARR(I) = "J" 
-            {
-                if (bfdat.compareTo(para.bookperMin[i.getInt()-1])>=0 && bfdat.compareTo(para.bookperMax[i.getInt()-1])<=0) {
-                    return;
-                }
-                //           END-IF 
-                i.increment(1);
-            }
-            pa.bfar.increment(1);
-        }
-        pa.bfar.set(ZERO);
-    }
-
-    private void hittabfper() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        para.f9800P.set(1);
-        para.f9800Read();
-        para.f9801Read();
-        bfper.set(1);
-        for (int _t=para.bookparamNum.getInt(); _t>0; _t--) {
-            if (bfdat.compareTo(para.bookperMin[bfper.getInt()-1])>=0 && bfdat.compareTo(para.bookperMax[bfper.getInt()-1])<=0) {
-                return;
-            }
-            bfper.increment(1);
-        }
-        bfper.set(0);
-    }
-
-    private void stangRaderaFsort() {
-        fsort.close();
-        fsort.deleteFile();
-    }
-
--- a/server.src/prg/kun/K51901.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K51901.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K51901.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K51901.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K51901.this);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(K51901.this, pa);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(K51901.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K51901.this);
-    private lib.med.Datab da=new lib.med.Datab(K51901.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field akoder = new Field("X(200)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpHel2 = new Field("S9(10)");
-    private Field tmpHel3 = new Field("S9(10)");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selFtg = new Field("XXXX");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field antal1 = new Field("99999");
-    private Field tmpKey = new Field("X(1000)");
-    private Field oldKod = new Field("XXX");
-    private Field ejutskr = new Field("X");
-    private Field pernr = new Field("999999");
-    private Field antdag = new Field("S999999");
-    private Field restkol = new Field("999999");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/kun/K51902.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K51902.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K51902.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K51902.this);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(K51902.this, pa);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(K51902.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K51902.this);
-    private lib.med.Datab da=new lib.med.Datab(K51902.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field fmomsEof = new Field("X", "N");
-    private Field sel = new Field("X(1000)");
-    private Field selFtg = new Field("XXXX");
--- a/server.src/prg/kun/K519avsf.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K519avsf.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K519avsf.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K519avsf.this);
-    private lib.bok.Dipapost bokdipa=new lib.bok.Dipapost(K519avsf.this, pa);
-    private lib.kun.Kundpost kunkund=new lib.kun.Kundpost(K519avsf.this, pa);
-    private lib.kun.Faktpost kunfakt=new lib.kun.Faktpost(K519avsf.this, pa);
-    private lib.kun.Fakbpost kunfakb=new lib.kun.Fakbpost(K519avsf.this, pa);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(K519avsf.this, pa);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(K519avsf.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K519avsf.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field fsort2Eof = new Field("X", "N");
-    private Field fordKund = new Field("X(8)");
-    private Field fordAvd = new Field("X(4)");
-    private Field fordProc = new Field("999V9999");
-    private Field fordInfavg = new Field("S9(9)");
-    private Field fordRef = new Field("X(50)");
-    private Field fordAnt = new Field("S9(9)");
-    private Field tmpHel = new Field("S9(10)");
-    private Field sel = new Field("X(1000)");
-    private Field selFtg = new Field("XXXX");
--- a/server.src/prg/kun/K519avsm.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(K519avsm.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(K519avsm.this);
-    private lib.med.Datab da=new lib.med.Datab(K519avsm.this);
-    private Field fsortEof = new Field("X", "N");
--- a/server.src/prg/kun/K519avsp.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(K519avsp.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(K519avsp.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K519avsp.this);
-    private Field fsortEof = new Field("X", "N");
--- a/server.src/prg/kun/K519orec.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K519orec.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K519orec.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K519orec.this);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(K519orec.this, pa);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(K519orec.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K519orec.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field fsort2Eof = new Field("X", "N");
-    private Field saldo = new Field("S9(9)V99");
-    private Field beft = new Field("S9(9)V99");
-    private Field kreditfors = new Field("S9(9)");
-    private Field kundkat = new Field("XX");
-    private Field fordKund = new Field("X(8)");
-    private Field fordAvd = new Field("X(4)");
-    private Field fordProc = new Field("999V9999");
-    private Field fordInfavg = new Field("S9(9)");
-    private Field fordRef = new Field("X(50)");
-    private Field fordAnt = new Field("S9(9)");
-    private Field tmpHel = new Field("S9(10)");
-    private Field sel = new Field("X(1000)");
-    private Field selFtg = new Field("XXXX");
--- a/server.src/prg/kun/K519orem.java
-    private lib.bas.Std std=new lib.bas.Std(K519orem.this);
-    private lib.med.Datab da=new lib.med.Datab(K519orem.this);
-    private Field fsortEof = new Field("X", "N");
--- a/server.src/prg/kun/K519orep.java
-    private lib.bas.Std std=new lib.bas.Std(K519orep.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K519orep.this);
-    private Field fsortEof = new Field("X", "N");
--- a/server.src/prg/kun/K520utha.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K520utha.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K520utha.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K520utha.this);
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(K520utha.this, pa);
-    private lib.bok.Botrpost bokbotr=new lib.bok.Botrpost(K520utha.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(K520utha.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(K520utha.this, pa);
-    private lib.gem.Pgempost gempgem=new lib.gem.Pgempost(K520utha.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K520utha.this);
-    private lib.med.Datab da=new lib.med.Datab(K520utha.this);
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field akoder = new Field("X(200)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel = new Field("S9(10)");
-    private Field tmpHel2 = new Field("S9(10)");
-    private Field tmpHel3 = new Field("S9(10)");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum1m = new Field("S9(10)");
-    private Field sum2m = new Field("S9(10)");
-    private Field aconto = new Field("S9(10)");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field bfdat = new Field("9(8)");
-    private Field bfper = new Field("99");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pkundBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selKund = new Field("XXXX");
-    private Field selMast = new Field("XXXX9999");
-    private Field selProj = new Field("XXXX9999");
-    private Field selPled = new Field("XXXX");
-    private Field selIkod = new Field("999");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antalposter = new Field("99999");
-    private Field tmpKey = new Field("X(1000)");
-    private Field tmpFilnamn = new Field("X(100)");
-    private Field tmpFilnamn2 = new Field("X(100)");
-    private Field expnr = new Field("99999");
-    private Field oldKod = new Field("XXX");
-    private Field sumIfak = new Field("S9(9)");
-    private Field sumIfaka = new Field("S9(9)");
-    private Field sumMarkup = new Field("S9(9)");
-    private Field sumA8 = new Field("S9(9)");
-    private Field sumI12 = new Field("S9(9)");
-    private Field sumFinal = new Field("S9(9)");
-    private Field postrubrik = new Field("X(200)");
-    private Field caleTim = new Field("S9(9)V99");
-    private Field sumTim = new Field("S9(9)V99");
-    private Field locid = new Field("X(200)");
-    private Field oldSort = new Field("X(10)");
-    private Field inforubrik = new Field("X(20)");
-    private Field sprakBak = new Field("XX");
-    private Field fel = new Field("X");
-    private Field sakn7 = new Field("X");
-    private Field skrivitprojrub = new Field("X");
-    private void skrivRadrub() {
-        call(webpara.xmlut, "<Row>");
-        call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-        //     CALL XMLUT USING "<Cell ss:StyleID='rub'><Data ss:Type='String'>%x %x</Data></Cell>" "SUMMA Master" OLD-MAST 
-        call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-        call(webpara.xmlut, "<Cell ss:StyleID='helsum'><Data ss:Type='Number'>%b</Data></Cell>", sum1m);
-        call(webpara.xmlut, "<Cell ss:StyleID='helsum'><Data ss:Type='Number'>%b</Data></Cell>", sum2m);
-        tmpHel.set(sum2m.subtract(sum1m));
-        call(webpara.xmlut, "<Cell ss:StyleID='helsum'><Data ss:Type='Number'>%b</Data></Cell>", tmpHel);
-        call(webpara.xmlut, "</Row>");
-    }
-
-    private void skrivProjrub() {
-        call(webpara.xmlut, "<Row/>");
-        call(webpara.xmlut, "<Row>");
-        call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-        //     CALL XMLUT USING "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>" P-PROJID-G 
-        call(webpara.xmlut, "</Row>");
-    }
-
-    private void skrivProjslut() {
-        call(webpara.xmlut, "<Row>");
-        call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-        //     CALL XMLUT USING "<Cell ss:StyleID='rub'><Data ss:Type='String'>%x %x</Data></Cell>" "Summa" P-PROJID-G 
-        call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-        call(webpara.xmlut, "<Cell ss:StyleID='helsum'><Data ss:Type='Number'>%b</Data></Cell>", sum1);
-        call(webpara.xmlut, "<Cell ss:StyleID='helsum'><Data ss:Type='Number'>%b</Data></Cell>", sum2);
-        tmpHel.set(sum2.subtract(sum1));
-        call(webpara.xmlut, "<Cell ss:StyleID='helsum'><Data ss:Type='Number'>%b</Data></Cell>", tmpHel);
-        call(webpara.xmlut, "</Row>");
-    }
-
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
-    private void cbrnParam() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        para.f9800OpenInput();
-        para.f9800P.set(10);
-        para.f9800Read();
-        if (para.f9800Eof.equals("N") && !(para.bookparam.equals(SPACE))) {
-            pa.centralKont.set(para.bookparam);
-        }
-        else {
-            pa.centralKont.set(pa.bkstvftg);
-        }
-        para.f9800Close();
-    }
-
-    private void hittabfar() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        pa.bfar.set(ftgs.fominar);
-        while (!(pa.bfar.compareTo(ftgs.fomaxar)>0)) {
-            para.f9800OpenInput();
-            para.f9800P.set(1);
-            para.f9800Read();
-            para.f9800Close();
-            para.f9801OpenInput();
-            para.f9801Read();
-            para.f9801Close();
-            i.set(1);
-            for (int _t=para.bookparamNum.getInt(); _t>0; _t--) //           IF NOT BOOKPER-SPARR(I) = "J" 
-            {
-                if (bfdat.compareTo(para.bookperMin[i.getInt()-1])>=0 && bfdat.compareTo(para.bookperMax[i.getInt()-1])<=0) {
-                    return;
-                }
-                //           END-IF 
-                i.increment(1);
-            }
-            pa.bfar.increment(1);
-        }
-        pa.bfar.set(ZERO);
-    }
-
-    private void hittabfper() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        para.f9800P.set(1);
-        para.f9800Read();
-        para.f9801Read();
-        bfper.set(1);
-        for (int _t=para.bookparamNum.getInt(); _t>0; _t--) {
-            if (bfdat.compareTo(para.bookperMin[bfper.getInt()-1])>=0 && bfdat.compareTo(para.bookperMax[bfper.getInt()-1])<=0) {
-                return;
-            }
-            bfper.increment(1);
-        }
-        bfper.set(0);
-    }
-
-    private void stangRaderaFsort() {
-        fsort.close();
-        call("prg.bas.stddel", fsortNamn, "T");
-    }
-
--- a/server.src/prg/kun/K840cir.java
-    private Field p6 = new Field("X");
-    private void stangRaderaFsort() {
-        fsort.close();
-        fsort.deleteFile();
-    }
-
--- a/server.src/prg/kun/Obetlist.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Obetlist.this);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Obetlist.this, pa);
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(Obetlist.this, pa);
-    private lib.kun.Fakbpost kunfakb=new lib.kun.Fakbpost(Obetlist.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Obetlist.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Obetlist.this);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Obetlist.this, pa);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Obetlist.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Obetlist.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Obetlist.this);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(Obetlist.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp = new Field("X(300)");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
--- a/server.src/prg/kun/P262rb.java
-    private lib.bas.Std std=new lib.bas.Std(P262rb.this);
--- a/server.src/prg/kun/P27001.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P27001.this, pa);
--- a/server.src/prg/kun/P2deltst.java
-    private lib.bas.Beho beho=new lib.bas.Beho(P2deltst.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P2deltst.this);
-    private Field x = new Field("S9(9)");
--- a/server.src/prg/kun/P2init.java
-    private lib.bas.Std std=new lib.bas.Std(P2init.this);
--- a/server.src/prg/kun/P2init2.java
-    private lib.bas.Std std=new lib.bas.Std(P2init2.this);
--- a/server.src/prg/kun/P2init3.java
-    private lib.bas.Std std=new lib.bas.Std(P2init3.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P2init3.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P2init3.this);
-    private Field pgm = new Field("X(11)", "02INIT3");
--- a/server.src/prg/kun/P2kunmed.java
-    private lib.bas.Std std=new lib.bas.Std(P2kunmed.this);
--- a/server.src/prg/kun/P2kunpro.java
-    private lib.bas.Std std=new lib.bas.Std(P2kunpro.this);
-    private void closeDown() {
-        kund.f9601Close();
-    }
-
--- a/server.src/prg/kun/P2pamis.java
-
-    private lib.pro.Datab da=new lib.pro.Datab(P2pamis.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(P2pamis.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P2pamis.this);
-    private Field tmpFilnamn = new Field("X(50)");
--- a/server.src/prg/kun/P2rxml.java
-    private lib.kun.Parapost kunpara=new lib.kun.Parapost(P2rxml.this, pa);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(P2rxml.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P2rxml.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P2rxml.this);
-    private Field tmp1 = new Field("X(300)");
-    private Field frFaktnr = new Field("9(8)");
-    private Field tiFaktnr = new Field("9(8)");
-    private Field datum = new Field("X(10)");
-    private Field xslFilnamn = new Field("X(50)");
-    private Field pdfNamn = new Field("X(50)");
-    private Field pdfFilnamn = new Field("X(50)");
-    private Field tmpFaktnr = new Field("X(8)");
-    private void atergang() {
-        throw exit;
-    }
-
--- a/server.src/prg/kun/P2uppd.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P2uppd.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(P2uppd.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P2uppd.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P2uppd.this);
-    private Field pgm = new Field("X(11)", "02UPPD");
--- a/server.src/prg/kun/W230.java
-    private lib.kun.Parapost kunpara=new lib.kun.Parapost(W230.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W230.this);
-    private Field pxxOldBfDat = new Field("9(8)", ZERO);
-    private Field pxxFaktnr = new Field("X(25)");
-    private Field oldData = new Field("X(1000)");
-    private Field bxxOldBfDat = new Field("9(8)");
-    private Field tmpControl = new Field("9(3)");
-    private Field tmpNum2 = new Field("S999999999V99");
-    private Field x = new Field("S9(9)");
-    private Field tmpWindow = new Field("X(10)");
-    private Field pxxCaller = new Field("X", "K");
-    private Field exportfilnamn = new Field("X(50)");
-    private void sokFakt() {
-        std.crtpos.set(ZERO);
-        if (!(scFtyp.equals(SPACE))) {
-            sokFaktFtyp();
-        }
-        else {
-            sokFaktNoFtyp();
-        }
-    }
-
-    private void sokFaktFtyp() {
-        fakt.slinr.set(scFaktnr);
-        fakt.slftyp.set(scFtyp);
-        fakt.f9602Read2();
-        if (fakt.f9602Eof.equals("N")) {
-            scKundnr.set(fakt.slsrnr);
-            //         PERFORM COLOR-INM-CLOSED 
-        }
-        else {
-            call(webpara.webut, "%c:fokus:FTYP", 4);
-            call("prg.bas.visa", pa.paraArea, "F006");
-        }
-    }
-
-    private void sokFaktNoFtyp() {
-        fakt.slinr.set(scFaktnr);
-        fakt.slftyp.set(SPACE);
-        fakt.f9602Start2();
-        if (fakt.f9602Eof.equals("N")) {
-            fakt.f9602Readnext2();
-        }
-        if (fakt.f9602Eof.equals("J") || !(fakt.slinr.equals(scFaktnr))) {
-            call(webpara.webut, "%c:fokus:FTYP", 4);
-            call("prg.bas.visa", pa.paraArea, "F006");
-        }
-        else {
-            scKundnr.set(fakt.slsrnr);
-            scFaktnr.set(fakt.slinr);
-            scFtyp.set(fakt.slftyp);
-            fakt.f9602Readnext2();
-            if ((fakt.f9602Eof.equals("J") || !(fakt.slinr.equals(scFaktnr))) && 
-                    (scFtyp.equals("KA"))) {
-                call(webpara.webut, "%c:fokus:FTYP", 4);
-                call("prg.bas.visa", pa.paraArea, "F006");
-            }
-            else {
-                if (fakt.f9602Eof.equals("J") || !(fakt.slinr.equals(scFaktnr))) //                 PERFORM COLOR-INM-CLOSED 
-                    //                 DISPLAY SCR-HEAD 
-                {
-                }
-                else {
-                    call("prg.kun.p23002", pa.paraArea, "BEF", scFaktnr, scFtyp);
-                    cancel("prg.kun.p23002");
-                }
-            }
-        }
-    }
-
-    private void getFtyp() {
-        std.crtpos.set(ZERO);
-        fakt.slinr.set(scFaktnr);
-        fakt.slftyp.set(SPACE);
-        fakt.f9602Start2();
-        if (fakt.f9602Eof.equals("N")) {
-            fakt.f9602Readnext2();
-        }
-        if (fakt.f9602Eof.equals("J") || !(fakt.slinr.equals(scFaktnr))) {
-            scFtyp.set("KF");
-        }
-        //         PERFORM COLOR-INM-CLOSED 
-        //         DISPLAY SCR-HEAD 
-        else {
-            scFtyp.set(fakt.slftyp);
-            fakt.f9602Readnext2();
-            if ((fakt.f9602Eof.equals("J") || !(fakt.slinr.equals(scFaktnr))) && 
-                    (scFtyp.equalsEither("KA", "KF"))) {
-                scFtyp.set("KF");
-            }
-            //             PERFORM COLOR-INM-CLOSED 
-            //             DISPLAY SCR-HEAD 
-            else {
-                if (fakt.f9602Eof.equals("J") || !(fakt.slinr.equals(scFaktnr))) {
-                    call("prg.kun.p23002", pa.paraArea, "NY ", scFaktnr, scFtyp);
-                    cancel("prg.kun.p23002");
-                    std.crtpos.set(new Constant("0523"));
-                }
-                else {
-                    fakt.slinr.set(scFaktnr);
-                    fakt.slftyp.set("KF");
-                    fakt.f9602Read2();
-                    if (fakt.f9602Eof.equals("N")) {
-                        call("prg.kun.p23002", pa.paraArea, "BEF", scFaktnr, scFtyp);
-                        cancel("prg.kun.p23002");
-                        std.crtpos.set(new Constant("0523"));
-                    }
-                    else {
-                        call("prg.kun.p23002", pa.paraArea, "NY ", scFaktnr, scFtyp);
-                        cancel("prg.kun.p23002");
-                        std.crtpos.set(new Constant("0523"));
-                    }
-                }
-            }
-        }
-    }
-
-    private void andring() {
-        pxxAconto.set("N");
-        pxxNy.set("N");
-        //     CALL "PRG/BAS/VISA" USING PARA-AREA "B008" 
-        scData.init();
-        scUamount.set(fakt.sluamount);
-        fdUamount.set(fakt.sluamount);
-        scUvaluta.set(fakt.sluvaluta);
-        fdUvaluta.set(fakt.sluvaluta);
-        scUkurs.set(fakt.slukurs);
-        fdUkurs.set(fakt.slukurs);
-        scBelopp.set(fakt.sliamount);
-        fdBelopp.set(fakt.sliamount);
-        scIdate.set(fakt.slidate);
-        fdIdate.set(fakt.slidate);
-        scDdate.set(fakt.slddate);
-        scProled.set(fakt.slproled);
-        scProid.set(fakt.slproid);
-        scKto.set(fakt.slkto);
-        scKst.set(fakt.slkst);
-        scKbr.set(fakt.slkbr);
-        scRanta.set(fakt.slranta);
-        if (scRanta.equals("J")) {
-            scRanta.set(std.stdJa);
-        }
-        if (scRanta.equals("N")) {
-            scRanta.set(std.stdNej);
-        }
-        scRemind.set(fakt.slremind);
-        if (scRemind.equals("J")) {
-            scRemind.set(std.stdJa);
-        }
-        if (scRemind.equals("N")) {
-            scRemind.set(std.stdNej);
-        }
-        scNore.set(fakt.slnore);
-        scSenkrav.set(fakt.slsenkrav);
-        scKomm1.set(fakt.slkomm1);
-        scKomm2.set(fakt.slkomm2);
-        scKomm3.set(fakt.slkomm3);
-        scKomm4.set(fakt.slkomm4);
-        scVisa.init();
-        scSlbdate.set(fakt.slbdate);
-        scSlptyp.set(fakt.slptyp);
-        scSlvnr.set(fakt.slvnr);
-        scSlfors.set(fakt.slfors);
-        scSlpamount.set(ZERO.subtract(fakt.slpamount), ROUND_HALF_UP);
-        scSlpdate.set(fakt.slpdate);
-        scSlftyp.set(fakt.slftyp);
-        scRest.set(fakt.sliamount.subtract(fakt.slpamount), ROUND_HALF_UP);
-        //     PERFORM COLOR-BAKGRUND 
-        //     CALL "PRG/BAS/STDDATK" USING SC-SLIDATE(3:) 
-        //     CALL "PRG/BAS/STDDATK" USING SC-SLBDATE(3:) 
-        //     CALL "PRG/BAS/STDDATK" USING SC-SLPDATE(3:) 
-        //     DISPLAY SCR-VISA 
-        //     CALL "PRG/BAS/STDDATK" USING SC-SLIDATE(3:) 
-        //     CALL "PRG/BAS/STDDATK" USING SC-SLBDATE(3:) 
-        //     CALL "PRG/BAS/STDDATK" USING SC-SLPDATE(3:) 
-        scBfDat.set(fakt.slbdate);
-        call(webpara.webut, "%c|BDATE", 7);
-        //     CALL "PRG/BAS/VISA" USING PARA-AREA "F017". 
-    }
-
-    private void aconto() {
-        pxxAconto.set("J");
-        pxxNy.set("J");
-        call("prg.bas.visa", pa.paraArea, "B007");
-        scData.init();
-        scUvaluta.set(kund.cuuvaluta);
-        if (!(scUvaluta.equals(SPACE))) {
-            call("prg.bas.stdval", "K", scUvaluta, "K", tmpKurs, tmpKursAntal);
-            if (returnCode.equals(0)) {
-                scUkurs.set(tmpKurs.divide(tmpKursAntal), ROUND_HALF_UP);
-            }
-        }
-        scProled.set(fakt.slproled);
-        scProid.set(fakt.slproid);
-        scKto.set(fakt.slkto);
-        scKst.set(fakt.slkst);
-        scKbr.set(fakt.slkbr);
-        scRanta.set(fakt.slranta);
-        if (scRanta.equals("J")) {
-            scRanta.set(std.stdJa);
-        }
-        if (scRanta.equals("N")) {
-            scRanta.set(std.stdNej);
-        }
-        scRemind.set(fakt.slremind);
-        if (scRemind.equals("J")) {
-            scRemind.set(std.stdJa);
-        }
-        if (scRemind.equals("N")) {
-            scRemind.set(std.stdNej);
-        }
-        scNore.set(fakt.slnore);
-        scSenkrav.set(fakt.slsenkrav);
-        scVisa.init();
-        call("prg.bas.visa", pa.paraArea, "H001", std.stdText);
-        scAcontotext.set(std.stdText);
-        scAcontobel.set(fakt.slpamount);
-        scSlpamount.set(ZERO.subtract(fakt.slpamount), ROUND_HALF_UP);
-        scSlidate.set(fakt.slidate);
-        //     PERFORM COLOR-BAKGRUND 
-        call("prg.bas.stddatk", scSlidate.ref(3));
-        call("prg.bas.stddatk", scSlbdate.ref(3));
-        call("prg.bas.stddatk", scSlpdate.ref(3));
-        //     DISPLAY SCR-VISA 
-        call("prg.bas.stddatk", scSlidate.ref(3));
-        call("prg.bas.stddatk", scSlbdate.ref(3));
-        call("prg.bas.stddatk", scSlpdate.ref(3));
-        call("prg.bas.visa", pa.paraArea, "F015");
-    }
-    // *********************************************************** 
-    // *********************************************************** 
-    // *********************************************************** 
-
-    private void lasFaktData() {
-        if (!(scUamount.equals(ZERO)) || !(scUvaluta.equals(SPACE)) || !(scUkurs.equals(ZERO))) {
-            std.crtpos.set(new Constant("0723"));
-        }
-        else {
-            std.crtpos.set(new Constant("0923"));
-        }
-    }
-
-    private void lasDataUamount() {
-        if (!(scUamount.equals(fdUamount))) {
-            if (!(scUamount.equals(ZERO)) && !(scUkurs.equals(ZERO))) {
-                scBelopp.set(scUamount.multiply(scUkurs), ROUND_HALF_UP);
-            }
-            else {
-                scBelopp.set(scUamount);
-            }
-            if (scUamount.compareTo(0)<=0 || kund.curanta.equals(ZERO)) {
-                scRanta.set(std.stdNej);
-            }
-            else {
-                scRanta.set(std.stdJa);
-            }
-            fdUamount.set(scUamount);
-            fdUvaluta.set(scUvaluta);
-            fdUkurs.set(scUkurs);
-            fdBelopp.set(scBelopp);
-        }
-    }
-
-    private void lasDataUkurs() {
-        if (!(scUkurs.equals(fdUkurs))) {
-            if (!(scUamount.equals(ZERO)) && !(scUkurs.equals(ZERO))) {
-                scBelopp.set(scUamount.multiply(scUkurs), ROUND_HALF_UP);
-            }
-            else {
-                scBelopp.set(scUamount);
-            }
-            fdUamount.set(scUamount);
-            fdUvaluta.set(scUvaluta);
-            fdUkurs.set(scUkurs);
-            fdBelopp.set(scBelopp);
-        }
-    }
-
-    private void lasDataBelopp() {
-        if (!(scBelopp.equals(fdBelopp))) {
-            if (scBelopp.compareTo(0)<=0 || kund.curanta.equals(ZERO)) {
-                scRanta.set(std.stdNej);
-            }
-            else {
-                scRanta.set(std.stdJa);
-            }
-            fdUamount.set(scUamount);
-            fdUvaluta.set(scUvaluta);
-            fdUkurs.set(scUkurs);
-            fdBelopp.set(scBelopp);
-        }
-    }
-
-    private void initKontering() {
-        std.stdPgm.set(pgm);
-        call("prg.bas.visa", pa.paraArea, "B002");
-        //     PERFORM COLOR-MEDDELANDE 
-        if (pxxNy.equals("N")) {
-            scBfDat.set(fakt.slbdate);
-            //         PERFORM COLOR-MEDDELANDE 
-        }
-        else {
-            scBfDat.set(pxxOldBfDat);
-            if (!(scBfDat.equals(ZERO))) {
-                pxxOldBfDat.set(scBfDat);
-            }
-        }
-    }
-
-    private void getbfper() {
-        while (!(x.compareTo(pa.periodantal)>0 || (para.bookperMin[x.getInt()-1].compareTo(scBfDat)<=0 && para.bookperMax[x.getInt()-1].compareTo(scBfDat)>=0))) {
-            x.increment(1);
-        }
-        if (x.compareTo(pa.periodantal)>0) {
-            call("prg.bas.visa", pa.paraArea, "F011");
-            scBfDat.set(bxxOldBfDat);
-        }
-        if ((para.bookperSparr[x.getInt()-1].equals("J")) || 
-                (para.bookperSparr[x.getInt()-1].isNumeric() && para.bookperSparr[x.getInt()-1].compareTo(pa.behoniva.ref(1,1))>0)) {
-            call("prg.bas.visa", pa.paraArea, "F014");
-            scBfDat.set(bxxOldBfDat);
-        }
-    }
-
--- a/server.src/prg/kun/W26101.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W26101.this);
-    private Field scFunk = new Field("9");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
-    private void countSelect() {
-        antalSelect.set(0);
-        krav.srnr.set(SPACE);
-        krav.inr.set(SPACE);
-        krav.ftyp.set(SPACE);
-        krav.f9612Start();
-        if (krav.f9612Eof.equals("J")) {
-            countSelectSlut();
-            return;
-        }
-    }
-
-    private void countSelectLoop() {
-        krav.f9612Readnext();
-        if (krav.f9612Eof.equals("J")) {
-            countSelectSlut();
-            return;
-        }
-        if (krav.status.equals("S")) {
-            antalSelect.increment(1);
-        }
-        countSelectLoop();
-        return;
-    }
-
-    private void countSelectSlut() {
-        antalSelectSc.set(antalSelect);
-    }
-
--- a/server.src/prg/kun/W26102.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W26102.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W26102.this);
-    private Field antalSelect = new Field("9999");
-    private Field antalSelectSc = new Field("ZZZ9");
-    private Field scRad = new Field("X(32)");
-    private Field scSidrad = new Field("99");
-    private Field scPekare = new Field("99");
-    private Field scPek= new Field("9(9)");
-    private Field scSidpekare = new Field("999");
-    private Field scSidpek= new Field("9(9)");
-    private Field ret = new Field("9");
-    private Field oldKrkey = new Field("X(26)");
-    private Field oldEof = new Field("X");
-    private Field inteck = new Field("X");
-    private Field inteckKey = new Field("999");
-    private Field tmpX = new Field("X");
-    private Field tmp2n = new Field("99");
-    private Field tmp2nD = new Field("Z9");
-    private Field tmpRestD = new Field("ZZZBZZZBZZ9.99-");
-    private Field endaktiva = new Field("X");
-    private void aaaNext() {
-        krav.f9612Readnext();
-        if (krav.f9612Eof.equals("N")) {
-            if (scPekare.equals(1)) {
-                scSidpek.set(scSidpekare);
-                scSidid[scSidpek.getInt()-1].set(krav.key);
-            }
-        }
-        if (krav.f9612Eof.equals("N")) {
-            scY.set(scPekare.add(6));
-            scPek.set(scPekare);
-            scKundnr[scPek.getInt()-1].set(krav.srnr);
-            scFaktnr[scPek.getInt()-1].set(krav.inr);
-            scFtyp[scPek.getInt()-1].set(krav.ftyp);
-            //         PERFORM COLOR-BAKGRUND 
-            scX.set(1);
-            if (krav.status.equals("S")) {
-                scStatus[scPek.getInt()-1].set("*");
-            }
-            else {
-                scStatus[scPek.getInt()-1].set(SPACE);
-            }
-            scX.set(3);
-            scX.set(14);
-            kund.cunr.set(krav.srnr);
-            kund.f9601Read();
-            if (!(kund.cuinternben.equals(SPACE))) {
-            }
-            else {
-            }
-            scX.set(35);
-            fakt.slsrnr.set(krav.srnr);
-            fakt.slinr.set(krav.inr);
-            fakt.slftyp.set(krav.ftyp);
-            fakt.f9602Read();
-            if (fakt.f9602Eof.equals("N")) {
-                scX.set(46);
-                call("prg.bas.stddatk", fakt.slidate.ref(3));
-                call("prg.bas.stddatk", fakt.slddate.ref(3));
-                scX.set(53);
-                call("prg.bas.stddatk", fakt.slidate.ref(3));
-                call("prg.bas.stddatk", fakt.slddate.ref(3));
-                if (!(fakt.sluvaluta.equals(SPACE))) {
-                    scX.set(60);
-                    tmpRest.set(fakt.sluamount);
-                    fakb.key.init();
-                    fakb.srnr.set(fakt.slsrnr);
-                    fakb.inr.set(fakt.slinr);
-                    fakb.ftyp.set(fakt.slftyp);
-                    fakb.start();
-                    if (fakb.eof.equals("N")) {
-                        fakb.readnext();
-                    }
-                    while (!(fakb.eof.equals("J") || !(fakb.srnr.equals(fakt.slsrnr)) || !(fakb.inr.equals(fakt.slinr)) || !(fakb.ftyp.equals(fakt.slftyp)))) {
-                        tmpRest.decrement(fakb.uamount);
-                        fakb.readnext();
-                    }
-                }
-                else {
-                    scX.set(60);
-                    tmpRest.set(fakt.sliamount.subtract(fakt.slpamount), ROUND_HALF_UP);
-                }
-                scX.set(64);
-                tmpRestD.set(tmpRest);
-                scX.set(79);
-                tmp2nD.set(fakt.slnore);
-            }
-            else {
-                scX.set(50);
-                //             PERFORM COLOR-MEDDELANDE 
-                call("prg.bas.visa", pa.paraArea, "H001", std.stdText);
-            }
-            scPekare.increment(1);
-        }
-    }
-
-    private void aaaBlank() {
-        scY.set(scPekare.add(6));
-        scPek.set(scPekare);
-        scTab[scPek.getInt()-1].set(SPACE);
-        //     PERFORM COLOR-BAKGRUND 
-        scX.set(1);
-        scX.set(41);
-        scPekare.increment(1);
-    }
-    // ******************************************************* 
-
-    private void countSelect() {
-        antalSelect.set(0);
-        krav.srnr.set(SPACE);
-        krav.inr.set(SPACE);
-        krav.ftyp.set(SPACE);
-        krav.f9612Start();
-        if (krav.f9612Eof.equals("J")) {
-            countSelectSlut();
-            return;
-        }
-    }
-
-    private void countSelectLoop() {
-        krav.f9612Readnext();
-        if (krav.f9612Eof.equals("J")) {
-            countSelectSlut();
-            return;
-        }
-        if (krav.status.equals("S")) {
-            antalSelect.increment(1);
-        }
-        countSelectLoop();
-        return;
-    }
-
-    private void countSelectSlut() {
-        antalSelectSc.set(antalSelect);
-        //     PERFORM COLOR-MEDDELANDE 
-    }
-
--- a/server.src/prg/kun/W26103.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W26103.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W26103.this);
-    private Field scFunk = new Field("9");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
-    private void countSelect() {
-        antalSelect.set(0);
-        krav.srnr.set(SPACE);
-        krav.inr.set(SPACE);
-        krav.ftyp.set(SPACE);
-        krav.f9612Start();
-        if (krav.f9612Eof.equals("J")) {
-            countSelectSlut();
-            return;
-        }
-    }
-
-    private void countSelectLoop() {
-        krav.f9612Readnext();
-        if (krav.f9612Eof.equals("J")) {
-            countSelectSlut();
-            return;
-        }
-        if (krav.status.equals("S")) {
-            antalSelect.increment(1);
-        }
-        countSelectLoop();
-        return;
-    }
-
-    private void countSelectSlut() {
-        antalSelectSc.set(antalSelect);
-        std.colorMeddelande();
-    }
-
--- a/server.src/prg/kun/W26105.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W26105.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W26105.this);
-    private Field antalSelect = new Field("9999");
-    private Field antalSelectSc = new Field("ZZZ9");
-    private Field tmpBetBelopp = new Field("S9(9)V99");
-    private Field tmp64x = new Field("X(64)");
-    private Field tmp78x = new Field("X(78)");
-    private Field validOk = new Field("X");
-    private void countSelect() {
-        antalSelect.set(0);
-        krav.srnr.set(SPACE);
-        krav.inr.set(SPACE);
-        krav.ftyp.set(SPACE);
-        krav.f9612Start();
-        if (krav.f9612Eof.equals("J")) {
-            countSelectSlut();
-            return;
-        }
-    }
-
-    private void countSelectLoop() {
-        krav.f9612Readnext();
-        if (krav.f9612Eof.equals("J")) {
-            countSelectSlut();
-            return;
-        }
-        if (krav.status.equals("S")) {
-            antalSelect.increment(1);
-        }
-        countSelectLoop();
-        return;
-    }
-
-    private void countSelectSlut() {
-        antalSelectSc.set(antalSelect);
-    }
-
--- a/server.src/prg/kun/W26201.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W26201.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field scFunk = new Field("9");
-    private Field antalSelectSc = new Field("ZZZ9");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
-    private void countSelect() {
-        antalSelect.set(0);
-        sele.kundnr.set(SPACE);
-        sele.inr.set(SPACE);
-        sele.ftyp.set(SPACE);
-        sele.ptyp.set(SPACE);
-        sele.vernr.set(ZERO);
-        sele.f9609Start();
-        if (sele.f9609Eof.equals("N")) {
-            sele.f9609Readnext();
-        }
-        while (!(sele.f9609Eof.equals("J"))) {
-            if (sele.status.equals("S")) {
-                antalSelect.increment(1);
-            }
-            sele.f9609Readnext();
-        }
-        antalSelectSc.set(antalSelect);
-        //     PERFORM COLOR-MEDDELANDE 
-    }
-
--- a/server.src/prg/kun/W26202.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W26202.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W26202.this);
-    private Field antalSelect = new Field("9999");
-    private Field antalSelectSc = new Field("ZZZ9");
-    private Field scKundnr2 = new Field("X(10)");
-    private Field scSidrad = new Field("99");
-    private Field scPekare = new Field("99");
-    private Field scPek= new Field("9(9)");
-    private Field scSidpekare = new Field("999");
-    private Field scSidpek= new Field("9(9)");
-    private Field sc3n = new Field("ZZ9");
-    private Field scNum = new Field("ZZZZZZZ9.99-");
-    private Field ret = new Field("9");
-    private Field oldSeleKey = new Field("X(27)");
-    private Field oldEof = new Field("X");
-    private Field inteck = new Field("X");
-    private Field inteckKey = new Field("999");
-    private Field windowRanta = new Field("X(10)");
-    private Field tmpRest = new Field("S9(9)V99");
--- a/server.src/prg/kun/W26203.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W26203.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W26203.this);
-    private Field scFunk = new Field("9");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
-    private void countSelect() {
-        antalSelect.set(0);
-        sele.kundnr.set(SPACE);
-        sele.inr.set(SPACE);
-        sele.ftyp.set(SPACE);
-        sele.ptyp.set(SPACE);
-        sele.vernr.set(ZERO);
-        sele.f9609Start();
-        if (sele.f9609Eof.equals("N")) {
-            sele.f9609Readnext();
-        }
-        while (!(sele.f9609Eof.equals("J"))) {
-            if (sele.status.equals("S")) {
-                antalSelect.increment(1);
-            }
-            sele.f9609Readnext();
-        }
-        antalSelectSc.set(antalSelect);
-        std.colorMeddelande();
-    }
-
--- a/server.src/prg/kun/W26205.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W26205.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W26205.this);
-    private lib.med.Datab da=new lib.med.Datab(W26205.this);
-    private Field antalSelect = new Field("9999");
-    private Field antalSelectSc = new Field("ZZZ9");
-    private Field x = new Field("S9(9)");
-    private Field validOk = new Field("X");
-    private void lasSelect() { //död kod?
-        std.crtpos.set(new Constant("0524"));
-    }
-
-    private void lasSelectLoop() { //död kod?
-        call("prg.bas.stddatk", scFadat.ref(3));
-        call("prg.bas.stddatk", scBfdat.ref(3));
-    }
-
-    private void lasSelectLoop2() { //död kod?
-        //     PERFORM COLOR-INM-OPEN 
-        //     DISPLAY SCR-SC-SELECT. 
-        //     ACCEPT SCR-SC-SELECT, 
-        //      ON EXCEPTION PERFORM STD-FUNK, 
-        //      IF STD-FUNK-NR = 0 GO TO LAS-SELECT-LOOP2 END-IF, 
-        //      NOT ON EXCEPTION MOVE 0 TO STD-FUNK-NR.
-        toupper.toupper.set(scProv);
-        toupper.toupp();
-        scProv.set(toupper.toupper);
-        toupper.toupper.set(bskrivare);
-        toupper.toupp();
-        bskrivare.set(toupper.toupper);
-        toupper.toupper.set(lskrivare);
-        toupper.toupp();
-        lskrivare.set(toupper.toupper);
-        //     PERFORM COLOR-INM-CLOSED 
-        //     DISPLAY SCR-SC-SELECT. 
-        call("prg.bas.stddatk", scFadat.ref(3));
-        call("prg.bas.stddatk", scBfdat.ref(3));
-        call("prg.bas.std1920", scFadat);
-        call("prg.bas.std1920", scBfdat);
-        //     PERFORM STD-BLANKA-MEDD. 
-        if (std.stdFunkNr.equals(27)) {
-            lasSelectSlut();
-            return;
-        }
-        if (std.stdFunkNr.equals(1)) {
-            if (std.crtposY.equals(10)) {
-                call("prg.bas.961201", pa.paraArea, bskrivare, "KUNRANT ");
-                cancel("prg.bas.961201");
-                std.crtpos.set(1024);
-            }
-            if (std.crtposY.equals(11)) {
-                call("prg.bas.961201", pa.paraArea, lskrivare, "KUNRANT ");
-                cancel("prg.bas.961201");
-                std.crtpos.set(1124);
-            }
-            lasSelectLoop();
-            return;
-        }
-        if (!(scProv.equals(std.stdJa)) && !(scProv.equals(std.stdNej))) {
-            call("prg.bas.visa", pa.paraArea, "F003");
-            std.crtpos.set(new Constant("0524"));
-            lasSelectLoop();
-            return;
-        }
-        call("prg.bas.stddat", "K", scFadat);
-        if (!(returnCode.equals(ZERO))) {
-            call("prg.bas.visa", pa.paraArea, "F008");
-            std.crtpos.set(new Constant("0724"));
-            lasSelectLoop();
-            return;
-        }
-        x.set(1);
-        while (!((x.compareTo(pa.periodantal)>0) || 
-                    (scBfdat.compareTo(bok_para.bookperMin[x.getInt()-1])>=0 && scBfdat.compareTo(bok_para.bookperMax[x.getInt()-1])<=0))) {
-            x.increment(1);
-        }
-        if (x.compareTo(pa.periodantal)>0) {
-            call("prg.bas.visa", pa.paraArea, "F008");
-            std.crtpos.set(new Constant("0824"));
-            lasSelectLoop();
-            return;
-        }
-        if ((bok_para.bookperSparr[x.getInt()-1].equals("J")) || 
-                (bok_para.bookperSparr[x.getInt()-1].isNumeric() && bok_para.bookperSparr[x.getInt()-1].compareTo(pa.behoniva.ref(1,1))>0)) {
-            call("prg.bas.visa", pa.paraArea, "F009");
-            std.crtpos.set(new Constant("0824"));
-            lasSelectLoop();
-            return;
-        }
-        if (pxxUtskriftsmall.equals(SPACE)) {
-            if (bskrivare.equals(SPACE)) {
-                call("prg.bas.visa", pa.paraArea, "F006");
-                std.crtpos.set(1024);
-                lasSelectLoop();
-                return;
-            }
-            skri.kod.set(bskrivare);
-            skri.f9902Read();
-            if (skri.f9902Eof.equals("J")) {
-                call("prg.bas.visa", pa.paraArea, "F007");
-                std.crtpos.set(1024);
-                lasSelectLoop();
-                return;
-            }
-            if (lskrivare.equals(SPACE)) {
-                call("prg.bas.visa", pa.paraArea, "F006");
-                std.crtpos.set(1124);
-                lasSelectLoop();
-                return;
-            }
-            skri.kod.set(lskrivare);
-            skri.f9902Read();
-            if (skri.f9902Eof.equals("J")) {
-                call("prg.bas.visa", pa.paraArea, "F007");
-                std.crtpos.set(1124);
-                lasSelectLoop();
-                return;
-            }
-        }
-    }
-
-    private void lasSelectSlut() {
-    }
-    // ************************************************************** 
-    // ************************************************************** 
-    // ************************************************************** 
-
-    private void countSelect() {
-        antalSelect.set(0);
-        sele.kundnr.set(SPACE);
-        sele.inr.set(SPACE);
-        sele.ftyp.set(SPACE);
-        sele.ptyp.set(SPACE);
-        sele.vernr.set(ZERO);
-        sele.f9609Start();
-        if (sele.f9609Eof.equals("N")) {
-            sele.f9609Readnext();
-        }
-        while (!(sele.f9609Eof.equals("J"))) {
-            if (sele.status.equals("S")) {
-                antalSelect.increment(1);
-            }
-            sele.f9609Readnext();
-        }
-        antalSelectSc.set(antalSelect);
-        //     PERFORM COLOR-MEDDELANDE 
-    }
-
--- a/server.src/prg/kun/W26206.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W26206.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W26206.this);
-    private Field antalSelect = new Field("9999");
-    private Field antalSelectSc = new Field("ZZZ9");
-    private Field scKundnr2 = new Field("X(10)");
-    private Field scSidrad = new Field("99");
-    private Field scPekare = new Field("99");
-    private Field scPek= new Field("9(9)");
-    private Field scSidpekare = new Field("999");
-    private Field scSidpek= new Field("9(9)");
-    private Field sc3n = new Field("ZZ9");
-    private Field scNum = new Field("ZZZZZZZ9.99-");
-    private Field ret = new Field("9");
-    private Field oldSeleKey = new Field("X(27)");
-    private Field oldEof = new Field("X");
-    private Field inteck = new Field("X");
-    private Field inteckKey = new Field("999");
-    private Field windowRanta = new Field("X(10)");
-    private Field tmpRest = new Field("S9(9)V99");
-    private Field aktiv = new Field("X");
-    private void closeDown() {
-        kund.f9601Close();
-        fakt.f9602Close();
-        rant.f9608Close();
-        sele.f9609Close();
-        para.f9605OpenIO();
-        para.f9605P.set(114);
-        para.f9605ReadKl();
-        para.kunparamTxt.set("N");
-        para.f9605Write();
-        para.f9605Commit();
-        para.f9605Close();
-    }
-
--- a/server.src/prg/kun/W26208.java
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(W26208.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(W26208.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W26208.this);
-    private lib.med.Datab da=new lib.med.Datab(W26208.this);
-    private Field scKund = new Field("X(10)");
-    private Field scFtyp = new Field("XX");
-    private Field scFunk = new Field("9");
-    private Field windowHandle = new Field("X(10)");
--- a/server.src/prg/kun/W270.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W270.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W270.this);
-    private Field scFunk = new Field("9");
-    private void natt() {
-        natt.typ.set("U");
-        natt.lopnr.set(1);
-        natt.f9907Read();
-        while (!(natt.f9907Eof.equals("J"))) 
-            nattLoop();
-        natt.bolag.set(pa.bkstvftg);
-        natt.bfar.set(pa.bfar);
-        natt.anvid.set(pa.anvid);
-        natt.bdate.set(std.stdToday);
-        call("prg.bas.tztid", natt.btime);
-        natt.program.set("PRG/KUN/027001");
-        natt.program2.set("Kundsaldo");
-        paMaxDatum.set(scMaxDatum);
-        paMinKunnr.set(scMinKunnr);
-        paMaxKunnr.set(scMaxKunnr);
-        paMinKunkod.set(scMinKunkod);
-        paMaxKunkod.set(scMaxKunkod);
-        paLesort.set(scLesort);
-        paFakttyp.set(scFakttyp);
-        paMinKto.set(scMinKto);
-        paMaxKto.set(scMaxKto);
-        paMinKst.set(scMinKst);
-        paMaxKst.set(scMaxKst);
-        paMinKbr.set(scMinKbr);
-        paMaxKbr.set(scMaxKbr);
-        paMinKat.set(scMinKat);
-        paMaxKat.set(scMaxKat);
-        if (scSkriKomm.equals(std.stdJa)) {
-            scSkriKomm.set("J");
-        }
-        if (scSkriKomm.equals(std.stdNej)) {
-            scSkriKomm.set("N");
-        }
-        paSkriKomm.set(scSkriKomm);
-        if (scSkriKomm.equals("J")) {
-            scSkriKomm.set(std.stdJa);
-        }
-        if (scSkriKomm.equals("N")) {
-            scSkriKomm.set(std.stdNej);
-        }
-        if (scBetalda.equals(std.stdJa)) {
-            scBetalda.set("J");
-        }
-        if (scBetalda.equals(std.stdNej)) {
-            scBetalda.set("N");
-        }
-        paBetalda.set(scBetalda);
-        if (scBetalda.equals("J")) {
-            scBetalda.set(std.stdJa);
-        }
-        if (scBetalda.equals("N")) {
-            scBetalda.set(std.stdNej);
-        }
-        paMinDatum.set(scMinDatum);
-        if (scAlder.equals(std.stdJa)) {
-            scAlder.set("J");
-        }
-        if (scAlder.equals(std.stdNej)) {
-            scAlder.set("N");
-        }
-        paAlder.set(scAlder);
-        if (scAlder.equals("J")) {
-            scAlder.set(std.stdJa);
-        }
-        if (scAlder.equals("N")) {
-            scAlder.set(std.stdNej);
-        }
-        if (scEndastKredit.equals(std.stdJa)) {
-            scEndastKredit.set("J");
-        }
-        if (scEndastKredit.equals(std.stdNej)) {
-            scEndastKredit.set("N");
-        }
-        paEndastKredit.set(scEndastKredit);
-        if (scEndastKredit.equals("J")) {
-            scEndastKredit.set(std.stdJa);
-        }
-        if (scEndastKredit.equals("N")) {
-            scEndastKredit.set(std.stdNej);
-        }
-        if (scEndastKravst.equals(std.stdJa)) {
-            scEndastKravst.set("J");
-        }
-        if (scEndastKravst.equals(std.stdNej)) {
-            scEndastKravst.set("N");
-        }
-        paEndastKravst.set(scEndastKravst);
-        if (scEndastKravst.equals("J")) {
-            scEndastKravst.set(std.stdJa);
-        }
-        if (scEndastKravst.equals("N")) {
-            scEndastKravst.set(std.stdNej);
-        }
-        if (scEndastRantst.equals(std.stdJa)) {
-            scEndastRantst.set("J");
-        }
-        if (scEndastRantst.equals(std.stdNej)) {
-            scEndastRantst.set("N");
-        }
-        paEndastRantst.set(scEndastRantst);
-        if (scEndastRantst.equals("J")) {
-            scEndastRantst.set(std.stdJa);
-        }
-        if (scEndastRantst.equals("N")) {
-            scEndastRantst.set(std.stdNej);
-        }
-        if (scUtlValuta.equals(std.stdJa)) {
-            scUtlValuta.set("J");
-        }
-        if (scUtlValuta.equals(std.stdNej)) {
-            scUtlValuta.set("N");
-        }
-        paUtlValuta.set(scUtlValuta);
-        if (scUtlValuta.equals("J")) {
-            scUtlValuta.set(std.stdJa);
-        }
-        if (scUtlValuta.equals("N")) {
-            scUtlValuta.set(std.stdNej);
-        }
-        paSkrivare.set(scSkrivare);
-        paAntal.set(scAntal);
-        natt.param.set(paSelect);
-        natt.skrivare.set(scSkrivare);
-        natt.antal.set(scAntal);
-        natt.kdate.set(ZERO);
-        natt.ktime.set(ZERO);
-        natt.utskriven.set("N");
-        natt.bearbetad.set("N");
-        natt.select.set("N");
-        natt.f9907Write();
-        call("prg.bas.visa", pa.paraArea, "F017");
-    }
-
-    private void nattLoop() {
-        natt.lopnr.increment(1);
-        natt.f9907Read();
-    }
-
--- a/server.src/prg/kun/W271.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W271.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W271.this);
-    private lib.med.Datab da=new lib.med.Datab(W271.this);
-    private Field plrad = new Field("X(80)");
-    private Field export7St = new Field("S9(9)");
-    private Field export8St = new Field("S9(9)");
--- a/server.src/prg/kun/W272.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(W272.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W272.this);
-    private Field scFunk = new Field("9");
--- a/server.src/prg/kun/W273.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(W273.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W273.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W273.this);
-    private Field scFunk = new Field("9");
-    private Field scSumforfVisa = new Field("9(6)");
-    private Field tmpDat = new Field("X(10)");
-    private Field tmpX = new Field("X");
-    private Field tmp1n = new Field("9");
-    private Field tmpHel = new Field("S999999999");
-    private Field tmpNum = new Field("S999999999V99");
-    private Field tmpNum2 = new Field("S999999999V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp2n2 = new Field("99");
-    private Field tmp2n3 = new Field("99");
-    private Field tmp10x = new Field("X(10)");
-    private Field export1 = new Field("---------9.99");
-    private Field export1St = new Field("S9(9)");
-    private Field validOk = new Field("X");
-    private void betvStart() {
-        betvEof.set("N");
-        betv.start("NOT<", "betv_key");
-        if (betv.invalidKey()) {
-            betvEof.set("J");
-        }
-    }
-
-    private void betvReadnext() {
-        betvEof.set("N");
-        betv.readNext();
-        if (betv.atEnd()) {
-            betvEof.set("J");
-        }
-    }
-
--- a/server.src/prg/kun/W275.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W275.this);
-    private Field tmpKol = new Field("99");
-    private Field tmpRub = new Field("X(12)");
-    private Field tmpHel = new Field("S999999999");
-    private Field tmpHel2 = new Field("S999999999");
-    private Field tmpValue = new Field("S999999999V99");
-    private Field tmpSum = new Field("S999999999V99");
-    private Field tmpNum2 = new Field("S999999999V99");
-    private Field tmpBal = new Field("S999999999V99");
-    private Field tmpFors = new Field("S999999999V99");
-    private Field tmpAntf = new Field("S999999999");
-    private Field tmpLidate = new Field("9(8)");
-    private Field tmpTkn1 = new Field("X");
-    private Field tmpTkn2 = new Field("X");
-    private Field tmpTkn3 = new Field("X");
-    private Field tmpTkn4 = new Field("X");
-    private Field tmpTkn5 = new Field("X");
-    private Field tmpTkn6 = new Field("X");
-    private Field tmpSort1 = new Field("X(12)");
-    private Field tmpSort2 = new Field("X(12)");
-    private Field tmpSort3 = new Field("X(12)");
-    private Field tmpSort4 = new Field("X(12)");
-    private Field tmpSort5 = new Field("X(12)");
-    private Field tmpSort6 = new Field("X(12)");
-    private Field sxxTmp = new Field("9(6)");
-    private Field sxxTmp2 = new Field("9(6)");
-    private void fsortOpenExtend() {
-        fsort.open("EXTEND");
-        if (fsortFs.equals("9A")) {
-            c_sleep("1");
-            fsortOpenExtend();
-            return;
-        }
-        if (!(fsortFs1.equals("0"))) {
-            call("prg.bas.sysfel", fsortId, fsortFs);
-            cancel("prg.bas.sysfel");
-        }
-    }
-
--- a/server.src/prg/kun/W90206.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W90206.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W90206.this);
-    private Field scDel = new Field("X");
-    private Field exportfilnamn = new Field("X(50)");
--- a/server.src/prg/kun/Webblist.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webblist.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webblist.this);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webblist.this, pa);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Webblist.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Webblist.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Webblist.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Webblist.this);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(Webblist.this);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Webblist.this, pa);
-    private lib.pri.Tidnpost pritidn=new lib.pri.Tidnpost(Webblist.this);
-    private lib.pri.Tugdpost pritugd=new lib.pri.Tugdpost(Webblist.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp = new Field("X(300)");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(1000)");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");






-    private Field opened = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
--- a/server.src/prg/kun/Webfrg.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webfrg.this);
-    private lib.med.Datab da=new lib.med.Datab(Webfrg.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Webfrg.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Webfrg.this);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(Webfrg.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field krabBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field startdat = new Field("9(8)");
-    private Field slutdat = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");






-    private Field opened = new Field("X");
-    private Field antal1 = new Field("99999");
-    private Field tmpStyle = new Field("X(20)");
-    private Field betaBel = new Field("S9(10)V99");
-    private Field betaDatum = new Field("9(8)");
--- a/server.src/prg/kun/Webkrav.java
-    private lib.kun.Kstapost kunksta=new lib.kun.Kstapost(Webkrav.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Webkrav.this);
-    private lib.med.Datab da=new lib.med.Datab(Webkrav.this);
-    private lib.pro.Datab proDa=new lib.pro.Datab(Webkrav.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webkrav.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webkrav.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webkrav.this);
-    private Field pgm = new Field("X(11)", "026105");
-    private Field tmpFaknr = new Field("9(7)");
-    private Field p0 = new Field("X(50)");
-    private Field p4 = new Field("X(50)");
-    private Field p5 = new Field("X(50)");
-    private Field scFunk = new Field("9");
-    private Field sprak = new Field("99");
-    private Field antalSelect = new Field("9999");
-    private Field antalSelectSc = new Field("ZZZ9");
-    private Field lineNumber = new Field("99");
-    private Field pageNumber = new Field("999");
-    private Field pageNumberD = new Field("ZZ9");
-    private Field linesAPage = new Field("99", 42);
-    private Field uvaluta = new Field("XXX");
-    private Field kunsummaUvaluta = new Field("XXX");
-    private Field kunsumma1 = new Field("S9(9)V99");
-    private Field kunsumma2 = new Field("S9(9)V99");
-    private Field kunsumma3 = new Field("S9(9)V99");
-    private Field kunsumma4 = new Field("S9(9)V99");
-    private Field kunsummaRta = new Field("S9(9)V99");
-    private Field kunsumma = new Field("S9(9)V99");
-    private Field kunsummaRound = new Field("S9(9)");
-    private Field maxNore = new Field("XX");
-    private Field tmpHogstaKrav = new Field("XX");
-    private Field tmpRtaLen = new Field("99");
-    private Field tmpDatumAnt = new Field("S9(9)");
-    private Field tmpDatum = new Field("X(8)");
-    private Field tmpRest = new Field("S9(9)V99");
-    private Field tmpRestHel = new Field("S9(9)");
-    private Field tmpBetBelopp = new Field("S9(9)V99");
-    private Field tmp64x = new Field("X(64)");
-    private Field tmp78x = new Field("X(78)");
-    private Field tmp2n = new Field("99");
-    private Field tmp2n2 = new Field("99");
-    private Field tmp2n3 = new Field("99");
-    private Field tmpHel = new Field("S9(9)");
--- a/server.src/prg/kun/Webover.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webover.this);
-    private Field pgm = new Field("X(11)", "02OVERF1");
-    private void deinit() {
-        foverClose();
-    }
-
-    private void foverRead() {
-        foverEof.set("N");
-        fover.read();
-        if (fover.invalidKey()) {
-            foverEof.set("J");
-        }
-    }
-
-    private void foverStartprev() {
-        foverEof.set("N");
-        fover.start("NOT>", "fover_key");
-        if (fover.invalidKey()) {
-            foverEof.set("J");
-        }
-    }
-
-    private void foverReadprev() {
-        foverEof.set("N");
-        fover.readPrevious();
-        if (fover.atEnd()) {
-            foverEof.set("J");
-        }
-    }
-
-    private void foverWrite() {
-        foverPost.write();
-        if (foverPost.invalidKey()) {
-            foverPost.rewrite();
-        }
-        if (foverFs1.equalsEither("9", "3")) {
-            call("prg.bas.sysfel", foverFilnamn, foverFs);
-            cancel("prg.bas.sysfel");
-        }
-    }
-
-    private void foverDelete() {
-        fover.delete();
-    }
-
-    private void foverClose() {
-        fover.close();
-        fover.deleteFile();
-    }
-
--- a/server.src/prg/kun/Webreg.java
-        if (true) {
-            return;
-        }
-        tmp.set("KUN.REG.");
-        tmp.ref(9).set(p1);
-        tmp80.set(p3);
-        call("prg.bas.regstat", tmp, "<", tmp80);
-        tmp.set("KUN.REG.");
-        tmp.ref(9).set(p1);
-        tmp80.set(p3);
-        call("prg.bas.regstat", tmp, "*", tmp80);
--- a/server.src/prg/kun/Websald.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Websald.this, pa);
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(Websald.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Websald.this);
-    private lib.med.Datab da=new lib.med.Datab(Websald.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Websald.this);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Websald.this, pa);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Websald.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Websald.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Websald.this);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(Websald.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field krabBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field tmpDatum = new Field("9(8)");
-    private Field startdat = new Field("9(8)");
-    private Field slutdat = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");
-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");






-    private Field opened = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selPerdat = new Field("9(8)");
-    private Field selBet = new Field("X");
-    private Field antal1 = new Field("99999");
-    private Field testKod = new Field("X(100)");
-    private Field selKod = new Field("X(100)");
-    private Field sumTot = new Field("S9(10)V99");
-    private Field sumMoms = new Field("S9(10)V99");
-    private Field sumBet = new Field("S9(10)V99");
-    private Field fakBel = new Field("S9(10)V99");
-    private Field fakBet = new Field("S9(10)V99");
-    private Field tmpStyle = new Field("X(20)");
-    private Field betaBel = new Field("S9(10)V99");
-    private Field betaDatum = new Field("9(8)");
-    private Field basvaluta = new Field("XXX");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void oppnaFsort() {
-        fsortNamn.set(concat(limit("TMP/S1",SPACE),limit(webpara.userid,SPACE),limit(webpara.pid,SPACE)));
-        fsortNamn.convert(".","_");
-        fsort.deleteFile();
-        fsort.open("OUTPUT");
-        fsort.close();
-        fsort.open("I-O");
-    }
-
-    private void stangRaderaFsort() {
-        fsort.close();
-        //     CALL "PRG/BAS/STDDEL" USING FSORT-NAMN "I". 
-    }
-
--- a/server.src/prg/kun/Xcara01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xcara01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xcara01.this);
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field tmpEgetId = new Field("X(25)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
--- a/server.src/prg/kun/Xcara02.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xcara02.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xcara02.this);
--- a/server.src/prg/kun/Xcarf01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xcarf01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xcarf01.this);
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
--- a/server.src/prg/kun/Xsign01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xsign01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xsign01.this);
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
--- a/server.src/prg/kun/Xtoin01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xtoin01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xtoin01.this);
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
--- a/server.src/prg/kun/Xtoin02.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xtoin02.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xtoin02.this);
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
--- a/server.src/prg/kun/Xtros01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xtros01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xtros01.this);
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
--- a/server.src/prg/kun/Zkund545.java
-    private lib.bas.Std std=new lib.bas.Std(Zkund545.this);
-    private Field f9601Eof = new Field("X");
-    private Field x = new Field("S9(9)");
--- a/server.src/prg/lev/Bgcdfil.java
-    private lib.bas.Webut webut=new lib.bas.Webut(Bgcdfil.this, webpara, pa);
-    private Field qu = new Field("X(2000)");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(2000)");
-    private Field p4 = new Field("X(50)");
-    private Field p5 = new Field("X(50)");
-    private Field poster = new Field("99999");
-    private Field i = new Field("99999");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field flagga1 = new Field("X");
-    private Field flagga2 = new Field("X");
-    private Field flagga3 = new Field("X");
-    private Field flagga4 = new Field("X");
-    private Field flagga5 = new Field("X");
-    private Field flagga510 = new Field("X");
-    private Field flagga6 = new Field("X");
-    private Field flagga7 = new Field("X");
-    private Field flagga8 = new Field("X");
-    private Field flagga9 = new Field("X");
-    private Field flagga10 = new Field("X");
-    private Field flagga11 = new Field("X");
-    private Field flagga12 = new Field("X");
-    private Field flagga13 = new Field("X");
-    private Field flagga14 = new Field("X");
-    private Field flagga15 = new Field("X");
-    private Field endaktiva = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field post = new Field("X(1000)");
-    private Field pkey = new Field("X(100)");
-    private Field pvalue = new Field("X(900)");
-    private Field oldEdim = new Field("X(4)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field pOk = new Field("X");
-    private Field varningar = new Field("99");
-    private Field kolla = new Field("X");
-    private Field tmp6 = new Field("9(6)");
-    private Field valuta = new Field("XXX");
-    private Field lunamn = new Field("X(50)");
-    private Field tmpX = new Field("X");
-    private Field kkrok = new Field("X");
-    private Field tmpTiKod = new Field("XXX");
-    private Field tmpErs = new Field("XX");
-    private Field tmp10000 = new Field("X(10000)");
-    private Field ptr = new Field("99999");
-    private Field ediVal = new Field("X");
-    private Field postbak = new Field("X(20000)");
-    private Field pftg = new Field("XXXX");
-    private Field inVat = new Field("X(100)");
-    private Field handelse = new Field("X(20)");
-    private Field tmpRad = new Field("9(6)");
-    private Field tmpRabnr = new Field("9(6)");
-    private Field tmpRabnr2 = new Field("9(6)");
-    private Field fildata = new Field("X(30000)");
-    private Field bgcdrad0 = new Field("X(80)");
-    private Field bgcdrad2 = new Field("X(80)");
-    private Field bgcdrad26 = new Field("X(80)");
-    private Field bgcdrad4 = new Field("X(80)");
-    private Field bgcdkonto = new Field("X(34)");
-    private Field bgcdnamn = new Field("X(35)");
-    private Field bgcdvaluta = new Field("XXX");
-    private Field bgcdlev = new Field("X(10)");
-    private Field bgcdinr = new Field("X(25)");
-    private Field bgcdllid = new Field("X(8)");
-    private Field bgcdbdate = new Field("X(6)");
-    private Field bgcdbelD = new Field("X(25)");
-    private Field bgcdbel = new Field("S9(9)V99");
-    private Field bgcdsum = new Field("S9(9)V99");
-    private Field bgcdmode = new Field("X");
-    private Field bgcdpost = new Field("X(10000)");
-    private Field bgcbetdat = new Field("9(8)");
-    private Field bgcdneg = new Field("X");
-    private Field bgcdfield = new Field("X(100)");



-    private Field scSigKtrl = new Field("9");
-    private Field tmpSigX = new Field("99");
-    private Field tmpSigFak = new Field("9");
-    private Field tmpSigSum = new Field("9999");
-    private Field tmpSigPos = new Field("9999");
-    private Field tmpSigill1 = new Field("X(25)");
-    private Field tmpSigKtrl = new Field("9");
--- a/server.src/prg/lev/Carasync.java
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Carasync.this, pa);
-    private lib.lev.Ankfpost levankf=new lib.lev.Ankfpost(Carasync.this, pa);
-    private lib.lev.Ankapost levanka=new lib.lev.Ankapost(Carasync.this, pa);
-    private lib.lev.Ankrpost levankr=new lib.lev.Ankrpost(Carasync.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Carasync.this);
--- a/server.src/prg/lev/Cardsync.java
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Cardsync.this, pa);
-    private lib.lev.Ankfpost levankf=new lib.lev.Ankfpost(Cardsync.this, pa);
-    private lib.lev.Ankapost levanka=new lib.lev.Ankapost(Cardsync.this, pa);
-    private lib.lev.Ankrpost levankr=new lib.lev.Ankrpost(Cardsync.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Cardsync.this);
--- a/server.src/prg/lev/Carfsync.java
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Carfsync.this, pa);
-    private lib.lev.Ankfpost levankf=new lib.lev.Ankfpost(Carfsync.this, pa);
-    private lib.lev.Ankapost levanka=new lib.lev.Ankapost(Carfsync.this, pa);
-    private lib.lev.Ankrpost levankr=new lib.lev.Ankrpost(Carfsync.this, pa);
-    private lib.med.Forepost medfore=new lib.med.Forepost(Carfsync.this, pa);
-    private lib.med.Tidnpost medtidn=new lib.med.Tidnpost(Carfsync.this, pa);
-    private lib.med.Tillpost medtill=new lib.med.Tillpost(Carfsync.this, pa);
-    private lib.med.Ordepost medorde=new lib.med.Ordepost(Carfsync.this, pa);
-    private lib.med.Oinfpost medoinf=new lib.med.Oinfpost(Carfsync.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Carfsync.this);
-    private lib.med.Datab da=new lib.med.Datab(Carfsync.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Carfsync.this);
--- a/server.src/prg/lev/Carnsync.java
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Carnsync.this, pa);
-    private lib.lev.Ankfpost levankf=new lib.lev.Ankfpost(Carnsync.this, pa);
-    private lib.lev.Ankapost levanka=new lib.lev.Ankapost(Carnsync.this, pa);
-    private lib.lev.Ankrpost levankr=new lib.lev.Ankrpost(Carnsync.this, pa);
-    private lib.med.Forepost medfore=new lib.med.Forepost(Carnsync.this, pa);
-    private lib.med.Tidnpost medtidn=new lib.med.Tidnpost(Carnsync.this, pa);
-    private lib.med.Tillpost medtill=new lib.med.Tillpost(Carnsync.this, pa);
-    private lib.med.Ordepost medorde=new lib.med.Ordepost(Carnsync.this, pa);
-    private lib.med.Oinfpost medoinf=new lib.med.Oinfpost(Carnsync.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Carnsync.this);
-    private lib.med.Datab da=new lib.med.Datab(Carnsync.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Carnsync.this);
--- a/server.src/prg/lev/Ediin.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Ediin.this);
-    private lib.lev.Ankapost levanka=new lib.lev.Ankapost(Ediin.this, pa);
-    private lib.lev.Ankrpost levankr=new lib.lev.Ankrpost(Ediin.this, pa);
-    private lib.lev.Ankmpost levankm=new lib.lev.Ankmpost(Ediin.this, pa);
-    private lib.lev.Anktpost levankt=new lib.lev.Anktpost(Ediin.this, pa);
-    private lib.lev.Anklpost levankl=new lib.lev.Anklpost(Ediin.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Ediin.this, pa);
-    private lib.bas.Webut webut=new lib.bas.Webut(Ediin.this, webpara, pa);
-    private Field antalSpot = new Field("S9(9)");
-    private Field tmp1 = new Field("X(100)");
-    private Field tmp2 = new Field("X(100)");
-    private Field tmp3 = new Field("X(100)");
-    private Field tmp4 = new Field("X(100)");
-    private Field tmp5 = new Field("X(100)");
-    private Field tmpStatus = new Field("XX");
-    private Field qu = new Field("X(2000)");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(2000)");
-    private Field p4 = new Field("X(50)");
-    private Field p5 = new Field("X(50)");
-    private Field poster = new Field("99999");
-    private Field i = new Field("99999");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field flagga1 = new Field("X");
-    private Field flagga2 = new Field("X");
-    private Field flagga3 = new Field("X");
-    private Field flagga4 = new Field("X");
-    private Field flagga5 = new Field("X");
-    private Field flagga510 = new Field("X");
-    private Field flagga6 = new Field("X");
-    private Field flagga7 = new Field("X");
-    private Field flagga8 = new Field("X");
-    private Field flagga9 = new Field("X");
-    private Field flagga10 = new Field("X");
-    private Field flagga11 = new Field("X");
-    private Field flagga12 = new Field("X");
-    private Field flagga13 = new Field("X");
-    private Field flagga14 = new Field("X");
-    private Field flagga15 = new Field("X");
-    private Field antalAnvisn = new Field("9");
-    private Field endaktiva = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field post = new Field("X(1000)");
-    private Field pkey = new Field("X(100)");
-    private Field pvalue = new Field("X(900)");
-    private Field oldEdim = new Field("X(4)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field pOk = new Field("X");
-    private Field varningar = new Field("99");
-    private Field kolla = new Field("X");
-    private Field modul = new Field("XXX");
-    private Field mdx = new Field("9");
-    private Field mdy = new Field("9V9");
-    private Field nyttPlannr = new Field("9(6)");
-    private Field nyttOrdernr = new Field("9(6)");
-    private Field tmpOrdernr = new Field("9(6)");
-    private Field tmp6 = new Field("9(6)");
-    private Field valuta = new Field("XXX");
-    private Field lunamn = new Field("X(50)");
-    private Field tmpX = new Field("X");
-    private Field kkrok = new Field("X");
-    private Field tmpTiKod = new Field("XXX");
-    private Field tmpErs = new Field("XX");
-    private Field tmp10000 = new Field("X(10000)");
-    private Field ptr = new Field("99999");
-    private Field ediVal = new Field("X");
-    private Field xmlFilnamn = new Field("X(100)");
-    private Field prBrutto = new Field("S9(10)");
-    private Field prNetto = new Field("S9(10)");
-    private Field postbak = new Field("X(20000)");
-    private Field handelse = new Field("X(20)");
-    private Field tmpRad = new Field("9(6)");
-    private Field tmpRabnr = new Field("9(6)");
-    private Field tmpRabnr2 = new Field("9(6)");
-    private Field bokningsnummer = new Field("X(10)");
-    private Field datumMedia = new Field("X(10)");
-    private Field ordernummer = new Field("X(10)");
-    private Field tmpExtKod = new Field("X(25)");
-    private Field messClass = new Field("X(50)");
-    private Field tmpEdirKey = new Field("X(100)");
-    private Field tmpEdirRaDat = new Field("9(8)");
-    private Field lopnr = new Field("9(6)");
-    private Field spotnummer = new Field("X(50)");
-    private Field tvstation = new Field("X(50)");
-    private Field produktionskod = new Field("X(50)");
-    private Field lastEdirLnr = new Field("9(6)");
-    private Field totNetNet = new Field("S9(9)");
-    private Field netNet = new Field("S9(9)");
-    private Field netNet2 = new Field("S9(9)");
-    private Field rabBelopp = new Field("S9(9)");
-    private Field provBelopp = new Field("S9(9)");
-    private Field roundEdihRaNetnet = new Field("S9(9)");
-    private Field orderLock = new Field("X");
-    private Field koppladOrdernr = new Field("9(6)");
-    private Field koppladFakturerad = new Field("X");
-    private Field rbs = new Field("X(10)");
-    private Field planHittaDefOrdernrTmp = new Field("9(6)");
--- a/server.src/prg/lev/Ediin003.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Ediin003.this);
-    private lib.bas.Ediepost basedie=new lib.bas.Ediepost(Ediin003.this);
-    private lib.lev.Ankmpost levankm=new lib.lev.Ankmpost(Ediin003.this, pa);
-    private lib.lev.Anktpost levankt=new lib.lev.Anktpost(Ediin003.this, pa);
-    private lib.lev.Anklpost levankl=new lib.lev.Anklpost(Ediin003.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Ediin003.this, pa);
-    private lib.bas.Webut webut=new lib.bas.Webut(Ediin003.this, webpara, pa);
-    private Field antalSpot = new Field("S9(9)");
-    private Field tmp1 = new Field("X(100)");
-    private Field tmp2 = new Field("X(100)");
-    private Field tmp3 = new Field("X(100)");
-    private Field tmp4 = new Field("X(100)");
-    private Field tmpFilnamn = new Field("X(100)");
-    private Field tmpStatus = new Field("XX");
-    private Field qu = new Field("X(2000)");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(2000)");
-    private Field p4 = new Field("X(50)");
-    private Field p5 = new Field("X(50)");
-    private Field poster = new Field("99999");
-    private Field i = new Field("99999");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field tmpKurs = new Field("999999V9999");
-    private Field tmpKursAntal = new Field("999999");
-    private Field flagga1 = new Field("X");
-    private Field flagga2 = new Field("X");
-    private Field flagga3 = new Field("X");
-    private Field flagga4 = new Field("X");
-    private Field flagga5 = new Field("X");
-    private Field flagga510 = new Field("X");
-    private Field flagga6 = new Field("X");
-    private Field flagga7 = new Field("X");
-    private Field flagga8 = new Field("X");
-    private Field flagga9 = new Field("X");
-    private Field flagga10 = new Field("X");
-    private Field flagga11 = new Field("X");
-    private Field flagga12 = new Field("X");
-    private Field flagga13 = new Field("X");
-    private Field flagga14 = new Field("X");
-    private Field flagga15 = new Field("X");
-    private Field antalAnvisn = new Field("9");
-    private Field endaktiva = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field pkey = new Field("X(100)");
-    private Field pvalue = new Field("X(900)");
-    private Field oldEdim = new Field("X(4)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field pOk = new Field("X");
-    private Field varningar = new Field("99");
-    private Field kolla = new Field("X");
-    private Field modul = new Field("XXX");
-    private Field mdx = new Field("9");
-    private Field mdy = new Field("9V9");
-    private Field nyttPlannr = new Field("9(6)");
-    private Field nyttOrdernr = new Field("9(6)");
-    private Field tmpOrdernr = new Field("9(6)");
-    private Field tmp6 = new Field("9(6)");
-    private Field valuta = new Field("XXX");
-    private Field lunamn = new Field("X(50)");
-    private Field kkrok = new Field("X");
-    private Field tmpTiKod = new Field("XXX");
-    private Field tmpErs = new Field("XX");
-    private Field tmp10000 = new Field("X(10000)");
-    private Field ediVal = new Field("X");
-    private Field xmlFilnamn = new Field("X(100)");
-    private Field prBrutto = new Field("S9(10)");
-    private Field prNetto = new Field("S9(10)");
-    private Field postbak = new Field("X(20000)");
-    private Field origfil = new Field("X(100)");
-    private Field media = new Field("XXXX");
-    private Field handelse = new Field("X(20)");
-    private Field tmpRad = new Field("9(6)");
--- a/server.src/prg/lev/Ediines.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Ediines.this);
-    private lib.bas.Ediepost basedie=new lib.bas.Ediepost(Ediines.this);
-    private lib.lev.Anktpost levankt=new lib.lev.Anktpost(Ediines.this, pa);
-    private lib.lev.Anklpost levankl=new lib.lev.Anklpost(Ediines.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Ediines.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Ediines.this, pa);
-    private lib.bas.Webut webut=new lib.bas.Webut(Ediines.this, webpara, pa);
-    private Field antalSpot = new Field("S9(9)");
-    private Field tmp1 = new Field("X(100)");
-    private Field tmp2 = new Field("X(100)");
-    private Field tmp3 = new Field("X(100)");
-    private Field tmp4 = new Field("X(100)");
-    private Field tmpFilnamn = new Field("X(100)");
-    private Field tmpStatus = new Field("XX");
-    private Field qu = new Field("X(2000)");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(2000)");
-    private Field p4 = new Field("X(50)");
-    private Field p5 = new Field("X(50)");
-    private Field poster = new Field("99999");
-    private Field x = new Field("99999");
-    private Field flagga1 = new Field("X");
-    private Field flagga2 = new Field("X");
-    private Field flagga3 = new Field("X");
-    private Field flagga4 = new Field("X");
-    private Field flagga5 = new Field("X");
-    private Field flagga510 = new Field("X");
-    private Field flagga6 = new Field("X");
-    private Field flagga7 = new Field("X");
-    private Field flagga8 = new Field("X");
-    private Field flagga9 = new Field("X");
-    private Field flagga10 = new Field("X");
-    private Field flagga11 = new Field("X");
-    private Field flagga12 = new Field("X");
-    private Field flagga13 = new Field("X");
-    private Field flagga14 = new Field("X");
-    private Field flagga15 = new Field("X");
-    private Field antalAnvisn = new Field("9");
-    private Field endaktiva = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field pkey = new Field("X(100)");
-    private Field pvalue = new Field("X(900)");
-    private Field oldEdim = new Field("X(4)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field pOk = new Field("X");
-    private Field varningar = new Field("99");
-    private Field kolla = new Field("X");
-    private Field tmp6 = new Field("9(6)");
-    private Field valuta = new Field("XXX");
-    private Field lunamn = new Field("X(50)");
-    private Field kkrok = new Field("X");
-    private Field tmpTiKod = new Field("XXX");
-    private Field tmpErs = new Field("XX");
-    private Field tmp10000 = new Field("X(10000)");
-    private Field ptr = new Field("99999");
-    private Field ediVal = new Field("X");
-    private Field xmlFilnamn = new Field("X(100)");
-    private Field prBrutto = new Field("S9(10)");
-    private Field prNetto = new Field("S9(10)");
-    private Field postbak = new Field("X(20000)");
-    private Field origfil = new Field("X(100)");
-    private Field media = new Field("XXXX");
-    private Field levVat = new Field("X(100)");
-    private Field handelse = new Field("X(20)");
-    private Field tmpRad = new Field("9(6)");
-    private Field bokfel = new Field("S9(10)");
-    private Field bokfeltext = new Field("X(80)");
--- a/server.src/prg/lev/Ediinm.java
-    private lib.lev.Anktpost levankt=new lib.lev.Anktpost(Ediinm.this, pa);
-    private lib.lev.Anklpost levankl=new lib.lev.Anklpost(Ediinm.this, pa);
-    private lib.dfa.Fhuvpost dfafhuv=new lib.dfa.Fhuvpost(Ediinm.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Ediinm.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Ediinm.this, pa);
-    private lib.bas.Webut webut=new lib.bas.Webut(Ediinm.this, webpara, pa);
-    private Field antalSpot = new Field("S9(9)");
-    private Field tmpStatus = new Field("XX");
-    private Field qu = new Field("X(2000)");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(2000)");
-    private Field p4 = new Field("X(50)");
-    private Field p5 = new Field("X(50)");
-    private Field poster = new Field("99999");
-    private Field j = new Field("99999");
-    private Field antalAnvisn = new Field("9");
-    private Field endaktiva = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field post = new Field("X(1000)");
-    private Field pkey = new Field("X(100)");
-    private Field pvalue = new Field("X(900)");
-    private Field oldEdim = new Field("X(4)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field pOk = new Field("X");
-    private Field varningar = new Field("99");
-    private Field kolla = new Field("X");
-    private Field mdx = new Field("9");
-    private Field mdy = new Field("9V9");
-    private Field nyttPlannr = new Field("9(6)");
-    private Field nyttOrdernr = new Field("9(6)");
-    private Field tmpOrdernr = new Field("9(6)");
-    private Field tmp6n = new Field("9(6)");
-    private Field lunamn = new Field("X(50)");
-    private Field tmpX = new Field("X");
-    private Field kkrok = new Field("X");
-    private Field tmpTiKod = new Field("XXX");
-    private Field tmpErs = new Field("XX");
-    private Field tmp10000 = new Field("X(10000)");
-    private Field ptr = new Field("99999");
-    private Field ediVal = new Field("X");
-    private Field prBrutto = new Field("S9(10)");
-    private Field prNetto = new Field("S9(10)");
-    private Field postbak = new Field("X(20000)");
-    private Field media = new Field("XXXX");
-    private Field handelse = new Field("X(20)");
-    private Field tmpRad = new Field("9(6)");
-    private Field tmpRabnr = new Field("9(6)");
-    private Field tmpRabnr2 = new Field("9(6)");
-    private Field bokningsnummer = new Field("X(10)");
-    private Field datumMedia = new Field("X(10)");
-    private Field ordernummer = new Field("X(10)");
-    private Field tmpExtKod = new Field("X(25)");
-    private Field messClass = new Field("X(50)");
-    private Field tmpEdirKey = new Field("X(100)");
-    private Field tmpEdirRaDat = new Field("9(8)");
-    private Field lopnr = new Field("9(6)");
-    private Field spotnummer = new Field("X(50)");
-    private Field tvstation = new Field("X(50)");
-    private Field produktionskod = new Field("X(50)");
-    private Field lastEdirLnr = new Field("9(6)");
-    private Field totNetNet = new Field("S9(9)");
-    private Field netNet = new Field("S9(9)");
-    private Field netNet2 = new Field("S9(9)");
-    private Field rabBelopp = new Field("S9(9)");
-    private Field provBelopp = new Field("S9(9)");
-    private Field roundEdihRaNetnet = new Field("S9(9)");
-    private Field orderLock = new Field("X");
-    private Field koppladOrdernr = new Field("9(6)");
-    private Field koppladFakturerad = new Field("X");
-    private Field rbs = new Field("X(10)");
-    private Field planHittaDefOrdernrTmp = new Field("9(6)");
-    private Field impValuta = new Field("XXX");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field tmpVatnr = new Field("X(50)");
-    private Field tmpKtonr = new Field("X(50)");
-    private Field tmpKtonr2 = new Field("X(50)");
-    private Field tmpKtonr3 = new Field("X(50)");
-    private void konteraprojekt() {
-        lib.pro.Projpost.fd proj=proproj.get();
-        ankr.post.init();
-        ankr.perfr.ref(1).set(SPACE);
-        ankr.perti.ref(1).set(SPACE);
-        ankr.anknr.set(ankf.anknr);
-        ankr.lnr.set(1);
-        ankr.typ.set("P");
-        ankr.projid.set(proj.projidG);
-        ankr.inpris.set(ankf.sbelopp.subtract(ankf.smoms));
-        ankr.inprisUtl.set(ankf.belopp.subtract(ankf.moms));
-        //  KOD, -> PAL?     
-        ankr.utpris.set(ankr.inpris.multiply(ONE.add(ankr.pal.divide(100))), ROUND_HALF_UP);
-        ankr.write();
-    }
-
-    private void skickamottstatusSkafUppd() {
-        lib.med.Skafpost.fd skaf=p8921.medskaf.get();
-        call("prg.bas.strut", xmlFilnamn, "%S_%S_%0-%S_%0%0.xml", infilTillId, infilFranId, "MED", skaf.anknr, webpara.today, webpara.now);
-        call("prg.bas.strut", tmp, "TMP/%0", xmlFilnamn);
-        call("prg.bas.xmlut", "%O", tmp);
-        call("prg.bas.xmlut", "<?xml version=%q encoding=%q?>", "1.0", std.stdTeckentabell);
-        call("prg.bas.xmlut", "<marathonstatus xmlns=%q>", "http://www.kase.se/marathonxml/communication/status");
-        call("prg.bas.xmlut", "<time>%0%0<>", webpara.today, webpara.now);
-        call("prg.bas.xmlut", "<type>%0<>", "invoice_scanning");
-        call("prg.bas.xmlut", "<status>%0<>", "UPDATED");
-        call("prg.bas.xmlut", "<reference>");
-        call("prg.bas.xmlut", "<param name=%q value=%q/>", "received_file", infilnamn);
-        call("prg.bas.xmlut", "<param name=%q value=%q/>", "interpret_id", skaf.tolkid);
-        call("prg.bas.xmlut", "<param name=%q value=%q/>", "unix_epoch", skaf.tolktid);
-        call("prg.bas.xmlut", "<param name=%q value=%q/>", "serial_number", skaf.anknr);
-        call("prg.bas.xmlut", "<param name=%q value=%q/>", "invoice_no", skaf.faktnr);
-        call("prg.bas.xmlut", "<param name=%q value=%q/>", "import_status", skaf.felkod);
-        call("prg.bas.xmlut", "</reference>");
-        call("prg.bas.xmlut", "</marathonstatus>");
-        call("prg.bas.xmlut", "%C");
-        call("prg.bas.cllut", "mv TMP/%0 DTA/M-EDI/MARA/UT/%0", xmlFilnamn, xmlFilnamn);
-    }
-
--- a/server.src/prg/lev/Ediins.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Ediins.this);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Ediins.this);
-    private lib.lev.Ankmpost levankm=new lib.lev.Ankmpost(Ediins.this, pa);
-    private lib.lev.Anktpost levankt=new lib.lev.Anktpost(Ediins.this, pa);
-    private lib.lev.Anklpost levankl=new lib.lev.Anklpost(Ediins.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Ediins.this);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Ediins.this, pa);
-    private lib.bas.Webut webut=new lib.bas.Webut(Ediins.this, webpara, pa);
-    private Field antalSpot = new Field("S9(9)");
-    private Field tmp1 = new Field("X(100)");
-    private Field tmp2 = new Field("X(100)");
-    private Field tmp3 = new Field("X(100)");
-    private Field tmp4 = new Field("X(100)");
-    private Field tmpStatus = new Field("XX");
-    private Field qu = new Field("X(2000)");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(2000)");
-    private Field p4 = new Field("X(50)");
-    private Field p5 = new Field("X(50)");
-    private Field poster = new Field("99999");
-    private Field i = new Field("99999");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field flagga1 = new Field("X");
-    private Field flagga2 = new Field("X");
-    private Field flagga3 = new Field("X");
-    private Field flagga4 = new Field("X");
-    private Field flagga5 = new Field("X");
-    private Field flagga510 = new Field("X");
-    private Field flagga6 = new Field("X");
-    private Field flagga7 = new Field("X");
-    private Field flagga8 = new Field("X");
-    private Field flagga9 = new Field("X");
-    private Field flagga10 = new Field("X");
-    private Field flagga11 = new Field("X");
-    private Field flagga12 = new Field("X");
-    private Field flagga13 = new Field("X");
-    private Field flagga14 = new Field("X");
-    private Field flagga15 = new Field("X");
-    private Field antalAnvisn = new Field("9");
-    private Field endaktiva = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field pkey = new Field("X(100)");
-    private Field pvalue = new Field("X(900)");
-    private Field oldEdim = new Field("X(4)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field pOk = new Field("X");
-    private Field varningar = new Field("99");
-    private Field kolla = new Field("X");
-    private Field modul = new Field("XXX");
-    private Field mdx = new Field("9");
-    private Field mdy = new Field("9V9");
-    private Field nyttPlannr = new Field("9(6)");
-    private Field nyttOrdernr = new Field("9(6)");
-    private Field tmpOrdernr = new Field("9(6)");
-    private Field tmp6 = new Field("9(6)");
-    private Field valuta = new Field("XXX");
-    private Field lunamn = new Field("X(50)");
-    private Field kkrok = new Field("X");
-    private Field tmpTiKod = new Field("XXX");
-    private Field tmpErs = new Field("XX");
-    private Field tmp10000 = new Field("X(10000)");
-    private Field ediVal = new Field("X");
-    private Field xmlFilnamn = new Field("X(100)");
-    private Field prBrutto = new Field("S9(10)");
-    private Field prNetto = new Field("S9(10)");
-    private Field postbak = new Field("X(20000)");
-    private Field origfil = new Field("X(100)");
-    private Field media = new Field("XXXX");
-    private Field levVat = new Field("X(100)");
-    private Field handelse = new Field("X(20)");
-    private Field tmpRad = new Field("9(6)");
-    private Field tmpRabnr = new Field("9(6)");
-    private Field tmpRabnr2 = new Field("9(6)");
-    private Field bokningsnummer = new Field("X(10)");
-    private Field datumMedia = new Field("X(10)");
-    private Field ordernummer = new Field("X(10)");
-    private Field tmpExtKod = new Field("X(25)");
-    private Field messClass = new Field("X(50)");
-    private Field tmpEdirKey = new Field("X(100)");
-    private Field tmpEdirRaDat = new Field("9(8)");
-    private Field lopnr = new Field("9(6)");
-    private Field spotnummer = new Field("X(50)");
-    private Field tvstation = new Field("X(50)");
-    private Field produktionskod = new Field("X(50)");
-    private Field lastEdirLnr = new Field("9(6)");
-    private Field totNetNet = new Field("S9(9)");
-    private Field netNet = new Field("S9(9)");
-    private Field netNet2 = new Field("S9(9)");
-    private Field rabBelopp = new Field("S9(9)");
-    private Field provBelopp = new Field("S9(9)");
-    private Field roundEdihRaNetnet = new Field("S9(9)");
-    private Field orderLock = new Field("X");
-    private Field koppladOrdernr = new Field("9(6)");
-    private Field koppladFakturerad = new Field("X");
-    private Field rbs = new Field("X(10)");
-    private Field planHittaDefOrdernrTmp = new Field("9(6)");
--- a/server.src/prg/lev/Expxleve.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Expxleve.this);
--- a/server.src/prg/lev/Fixaankf.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Fixaankf.this);
--- a/server.src/prg/lev/Fixafakt.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Fixafakt.this);
--- a/server.src/prg/lev/Fixalev2.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Fixalev2.this);
--- a/server.src/prg/lev/Getoksta.java
-    private lib.lev.Ankrpost levankr=new lib.lev.Ankrpost(Getoksta.this, pa);
-    private lib.lev.Ankmpost levankm=new lib.lev.Ankmpost(Getoksta.this, pa);
-    private lib.lev.Anktpost levankt=new lib.lev.Anktpost(Getoksta.this, pa);
-    private lib.lev.Anklpost levankl=new lib.lev.Anklpost(Getoksta.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(Getoksta.this, pa);
-    private lib.bok.Dipapost bokdipa=new lib.bok.Dipapost(Getoksta.this, pa);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Getoksta.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Getoksta.this);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Getoksta.this, pa);
-    private lib.bok.Moklpost bokmokl=new lib.bok.Moklpost(Getoksta.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Getoksta.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Getoksta.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Getoksta.this);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Getoksta.this, pa);
-    private lib.pro.Ofhupost proofhu=new lib.pro.Ofhupost(Getoksta.this, pa);
-    private lib.pro.Ofrapost proofra=new lib.pro.Ofrapost(Getoksta.this, pa);
-    private lib.pro.Ofprpost proofpr=new lib.pro.Ofprpost(Getoksta.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Getoksta.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Getoksta.this);
-    private lib.pro.Pma1post propma1=new lib.pro.Pma1post(Getoksta.this, pa);
-    private lib.pro.Budwpost probudw=new lib.pro.Budwpost(Getoksta.this, pa);
-    private lib.pro.Budapost probuda=new lib.pro.Budapost(Getoksta.this, pa);
-    private lib.pro.Budipost probudi=new lib.pro.Budipost(Getoksta.this, pa);
-    private lib.pro.Budopost probudo=new lib.pro.Budopost(Getoksta.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Getoksta.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Getoksta.this, pa);
-    private lib.pro.Rekv rekv=new lib.pro.Rekv(Getoksta.this);
-    private lib.lev.Ankfpost bakLevankf=new lib.lev.Ankfpost(Getoksta.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field prest = new Field("X(300)");
-    private Field tmp1 = new Field("X(100)");
-    private Field tmp2 = new Field("X(100)");
-    private Field tmp3 = new Field("X(100)");
-    private Field tmp4 = new Field("X(100)");
-    private Field attkvar = new Field("X(100)");
-    private Field post = new Field("X(1000)");
-    private Field tmpAtt = new Field("X(100)");
-    private Field tmpVatnr = new Field("X(50)");
-    private Field tmpKtonr = new Field("X(50)");
-    private Field tmpPost = new Field("X(10000)");
-    private Field frame = new Field("XXXX");



-    private Field tmpBel = new Field("X(50)");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(50)");



-    private Field accBel = new Field("9(9)");
-    private Field accDat = new Field("9(8)");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999");
-    private Field scan26 = new Field("Z(5)9");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field pptr = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpKurs = new Field("999999V9999");
-    private Field tmpKursAntal = new Field("999999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field tmpHel = new Field("S9(9)");
-    private Field oldBelopp = new Field("S9(10)V99");
-    private Field oldMoms = new Field("S9(10)V99");
-    private Field oldValuta = new Field("XXX");
-    private Field oldSbelopp = new Field("S9(10)V99");
-    private Field oldSmoms = new Field("S9(10)V99");
-    private Field oldFaktdat = new Field("9(8)");
-    private Field prgm = new Field("X(20)");
-    private Field exitStatus = new Field("99");
-    private Field ulNamn = new Field("X(50)");
-    private Field visakod = new Field("XXXX");
-    private Field lstNum = new Field("ZZ9");
-    private Field kollOk = new Field("X");
-    private Field sumMomsgrundMoms = new Field("S9(9)V99");
-    private Field sumMomsgrundBel = new Field("S9(9)V99");
-    private Field fmokl = new Field("X");
-    private Field kmokl = new Field("X");
-    private Field fchks = new Field("X");
-    private Field tmpFaktnr = new Field("X(40)");
-    private Field tmpFaktnr2 = new Field("X(40)");
-    private Field x = new Field("99999");
-    private Field tmpAnkmIndex= new Field("9(9)");
-    private Field ediLevat = new Field("X(25)");
-    private Field inkktoTyp = new Field("X");
-    private Field inkktoE = new Field("X(6)");
-    private Field inkktoG = new Field("X(6)");
-    private Field inkktoI = new Field("X(6)");
-    private Field inkktoJ = new Field("X(6)");
-    private Field inkkto9 = new Field("X(6)");
-    private Field inkktoPar = new Field("X(6)");
-    private Field inkKto = new Field("X(6)");
-    private Field jct = new Field("X");
-    private Field jcthel = new Field("X", "J");
-    private Field apk = new Field("X");
-    private Field aus = new Field("X");
-    private Field inkdec = new Field("X");
-    private Field endegna = new Field("X");
-    private Field sprak = new Field("XX");
-    private Field xmlFilnamn = new Field("X(100)");
-    private Field tmpFilnamn = new Field("X(100)");
-    private Field sel = new Field("X(1000)");
-    private Field selKod = new Field("X(100)");
-    private Field testKod = new Field("X(100)");
-    private Field testOk = new Field("X");
--- a/server.src/prg/lev/Grodsync.java
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Grodsync.this, pa);
-    private lib.lev.Ankfpost levankf=new lib.lev.Ankfpost(Grodsync.this, pa);
-    private lib.lev.Ankapost levanka=new lib.lev.Ankapost(Grodsync.this, pa);
-    private lib.lev.Ankrpost levankr=new lib.lev.Ankrpost(Grodsync.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Grodsync.this);
--- a/server.src/prg/lev/Grousync.java
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Grousync.this, pa);
-    private lib.lev.Ankfpost levankf=new lib.lev.Ankfpost(Grousync.this, pa);
-    private lib.lev.Ankapost levanka=new lib.lev.Ankapost(Grousync.this, pa);
-    private lib.lev.Ankrpost levankr=new lib.lev.Ankrpost(Grousync.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Grousync.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Grousync.this);
--- a/server.src/prg/lev/Impfakt.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Impfakt.this);
-    private lib.med.Datab da=new lib.med.Datab(Impfakt.this);
-    private lib.med.Stddata stddata=new lib.med.Stddata(Impfakt.this);
--- a/server.src/prg/lev/Iumdsync.java
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Iumdsync.this, pa);
-    private lib.lev.Ankfpost levankf=new lib.lev.Ankfpost(Iumdsync.this, pa);
-    private lib.lev.Ankapost levanka=new lib.lev.Ankapost(Iumdsync.this, pa);
-    private lib.lev.Ankrpost levankr=new lib.lev.Ankrpost(Iumdsync.this, pa);
-    private lib.med.Forepost medfore=new lib.med.Forepost(Iumdsync.this, pa);
-    private lib.med.Tidnpost medtidn=new lib.med.Tidnpost(Iumdsync.this, pa);
-    private lib.med.Tillpost medtill=new lib.med.Tillpost(Iumdsync.this, pa);
-    private lib.med.Ordepost medorde=new lib.med.Ordepost(Iumdsync.this, pa);
-    private lib.med.Oinfpost medoinf=new lib.med.Oinfpost(Iumdsync.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Iumdsync.this);
-    private lib.med.Datab da=new lib.med.Datab(Iumdsync.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Iumdsync.this);
--- a/server.src/prg/lev/K120levk.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K120levk.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K120levk.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K120levk.this);
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(K120levk.this, pa);
-    private lib.bok.Botrpost bokbotr=new lib.bok.Botrpost(K120levk.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(K120levk.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(K120levk.this, pa);
-    private lib.gem.Pgempost gempgem=new lib.gem.Pgempost(K120levk.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K120levk.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K120levk.this);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(K120levk.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field fsort2Eof = new Field("X", "N");
-    private void stangRaderaFsort() {
-        fsort.close();
-        //     CALL "PRG/BAS/STDDEL" USING FSORT-FILNAMN "T" 
-        fsort2.close();
-        fsort2.deleteFile();
-    }
-
--- a/server.src/prg/lev/K520utha.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K520utha.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K520utha.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K520utha.this);
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(K520utha.this, pa);
-    private lib.bok.Botrpost bokbotr=new lib.bok.Botrpost(K520utha.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(K520utha.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(K520utha.this, pa);
-    private lib.gem.Pgempost gempgem=new lib.gem.Pgempost(K520utha.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K520utha.this);
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field akoder = new Field("X(200)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel = new Field("S9(10)");
-    private Field tmpHel2 = new Field("S9(10)");
-    private Field tmpHel3 = new Field("S9(10)");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum1m = new Field("S9(10)");
-    private Field sum2m = new Field("S9(10)");
-    private Field aconto = new Field("S9(10)");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field bfdat = new Field("9(8)");
-    private Field bfper = new Field("99");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selKund = new Field("XXXX");
-    private Field selMast = new Field("XXXX9999");
-    private Field selProj = new Field("XXXX9999");
-    private Field selPled = new Field("XXXX");
-    private Field selIkod = new Field("999");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antalposter = new Field("99999");
-    private Field tmpKey = new Field("X(1000)");
-    private Field tmpFilnamn = new Field("X(100)");
-    private Field tmpFilnamn2 = new Field("X(100)");
-    private Field expnr = new Field("99999");
-    private Field oldKod = new Field("XXX");
-    private Field sumIfak = new Field("S9(9)");
-    private Field sumIfaka = new Field("S9(9)");
-    private Field sumMarkup = new Field("S9(9)");
-    private Field sumA8 = new Field("S9(9)");
-    private Field sumI12 = new Field("S9(9)");
-    private Field sumFinal = new Field("S9(9)");
-    private Field postrubrik = new Field("X(200)");
-    private Field caleTim = new Field("S9(9)V99");
-    private Field sumTim = new Field("S9(9)V99");
-    private Field locid = new Field("X(200)");
-    private Field oldSort = new Field("X(10)");
-    private Field inforubrik = new Field("X(20)");
-    private Field sprakBak = new Field("XX");
-    private Field fel = new Field("X");
-    private Field sakn7 = new Field("X");
-    private Field skrivitprojrub = new Field("X");
-    private void skrivRadrub() {
-        call(webpara.xmlut, "<Row>");
-        call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-        //     CALL XMLUT USING "<Cell ss:StyleID='rub'><Data ss:Type='String'>%x %x</Data></Cell>" "SUMMA Master" OLD-MAST 
-        call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-        call(webpara.xmlut, "<Cell ss:StyleID='helsum'><Data ss:Type='Number'>%b</Data></Cell>", sum1m);
-        call(webpara.xmlut, "<Cell ss:StyleID='helsum'><Data ss:Type='Number'>%b</Data></Cell>", sum2m);
-        tmpHel.set(sum2m.subtract(sum1m));
-        call(webpara.xmlut, "<Cell ss:StyleID='helsum'><Data ss:Type='Number'>%b</Data></Cell>", tmpHel);
-        call(webpara.xmlut, "</Row>");
-    }
-
-    private void skrivProjrub() {
-        call(webpara.xmlut, "<Row/>");
-        call(webpara.xmlut, "<Row>");
-        call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-        //     CALL XMLUT USING "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>" P-PROJID-G 
-        call(webpara.xmlut, "</Row>");
-    }
-
-    private void skrivProjslut() {
-        call(webpara.xmlut, "<Row>");
-        call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-        //     CALL XMLUT USING "<Cell ss:StyleID='rub'><Data ss:Type='String'>%x %x</Data></Cell>" "Summa" P-PROJID-G 
-        call(webpara.xmlut, "<Cell ss:StyleID='cell'><Data ss:Type='String'>%x</Data></Cell>", " ");
-        call(webpara.xmlut, "<Cell ss:StyleID='helsum'><Data ss:Type='Number'>%b</Data></Cell>", sum1);
-        call(webpara.xmlut, "<Cell ss:StyleID='helsum'><Data ss:Type='Number'>%b</Data></Cell>", sum2);
-        tmpHel.set(sum2.subtract(sum1));
-        call(webpara.xmlut, "<Cell ss:StyleID='helsum'><Data ss:Type='Number'>%b</Data></Cell>", tmpHel);
-        call(webpara.xmlut, "</Row>");
-    }
-
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
-    private void cbrnParam() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        para.f9800OpenInput();
-        para.f9800P.set(10);
-        para.f9800Read();
-        if (para.f9800Eof.equals("N") && !(para.bookparam.equals(SPACE))) {
-            pa.centralKont.set(para.bookparam);
-        }
-        else {
-            pa.centralKont.set(pa.bkstvftg);
-        }
-        para.f9800Close();
-    }
-
-    private void hittabfar() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        pa.bfar.set(ftgs.fominar);
-        while (!(pa.bfar.compareTo(ftgs.fomaxar)>0)) {
-            para.f9800OpenInput();
-            para.f9800P.set(1);
-            para.f9800Read();
-            para.f9800Close();
-            para.f9801OpenInput();
-            para.f9801Read();
-            para.f9801Close();
-            i.set(1);
-            for (int _t=para.bookparamNum.getInt(); _t>0; _t--) //           IF NOT BOOKPER-SPARR(I) = "J" 
-            {
-                if (bfdat.compareTo(para.bookperMin[i.getInt()-1])>=0 && bfdat.compareTo(para.bookperMax[i.getInt()-1])<=0) {
-                    return;
-                }
-                //           END-IF 
-                i.increment(1);
-            }
-            pa.bfar.increment(1);
-        }
-        pa.bfar.set(ZERO);
-    }
-
-    private void hittabfper() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        para.f9800P.set(1);
-        para.f9800Read();
-        para.f9801Read();
-        bfper.set(1);
-        for (int _t=para.bookparamNum.getInt(); _t>0; _t--) {
-            if (bfdat.compareTo(para.bookperMin[bfper.getInt()-1])>=0 && bfdat.compareTo(para.bookperMax[bfper.getInt()-1])<=0) {
-                return;
-            }
-            bfper.increment(1);
-        }
-        bfper.set(0);
-    }
-
-    private void stangRaderaFsort() {
-        fsort.close();
-        call("prg.bas.stddel", fsortNamn, "T");
-    }
-
--- a/server.src/prg/lev/K599fakt.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K599fakt.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K599fakt.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K599fakt.this);
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(K599fakt.this, pa);
-    private lib.bok.Botrpost bokbotr=new lib.bok.Botrpost(K599fakt.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(K599fakt.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(K599fakt.this, pa);
-    private lib.gem.Pgempost gempgem=new lib.gem.Pgempost(K599fakt.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(K599fakt.this);
-    private lib.bas.Std std=new lib.bas.Std(K599fakt.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K599fakt.this);
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field akoder = new Field("X(200)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpHel = new Field("S9(10)");
-    private Field tmpHel2 = new Field("S9(10)");
-    private Field tmpHel3 = new Field("S9(10)");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum1m = new Field("S9(10)");
-    private Field sum2m = new Field("S9(10)");
-    private Field aconto = new Field("S9(10)");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field bfdat = new Field("9(8)");
-    private Field bfper = new Field("99");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antalposter = new Field("99999");
-    private Field tmpKey = new Field("X(1000)");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field xmlFilnamn = new Field("X(100)");
-    private Field xlsFilnamn = new Field("X(100)");
-    private Field tmpFilnamn = new Field("X(100)");
-    private Field tmpFilnamn2 = new Field("X(100)");
-    private Field expnr = new Field("99999");
-    private Field oldKod = new Field("XXX");
-    private Field sumIfak = new Field("S9(9)");
-    private Field sumIfaka = new Field("S9(9)");
-    private Field sumMarkup = new Field("S9(9)");
-    private Field sumA8 = new Field("S9(9)");
-    private Field sumI12 = new Field("S9(9)");
-    private Field sumFinal = new Field("S9(9)");
-    private Field postrubrik = new Field("X(200)");
-    private Field caleTim = new Field("S9(9)V99");
-    private Field sumTim = new Field("S9(9)V99");
-    private Field locid = new Field("X(200)");
-    private Field oldSort = new Field("X(10)");
-    private Field inforubrik = new Field("X(20)");
-    private Field sprakBak = new Field("XX");
-    private Field fel = new Field("X");
-    private Field sakn7 = new Field("X");
-    private Field skrivitprojrub = new Field("X");
-    private Field skrivitflik = new Field("X");
-    private Field oldLand = new Field("XX");
-    private Field fsortMoms = new Field("S9(9)V99");
-    private Field overkund = new Field("X(4)");
-    private Field parKrabAvr = new Field("X");
-    private Field tmpKrabMoms = new Field("S9(9)V99");
-    private Field tmpKrabExklMoms = new Field("S9(9)V99");
-    private Field tmpKrabMomsSum = new Field("S9(9)V99");
-    private Field tmpKrabExklMomsSum = new Field("S9(9)V99");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
-    private void cbrnParam() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        para.f9800OpenInput();
-        para.f9800P.set(10);
-        para.f9800Read();
-        if (para.f9800Eof.equals("N") && !(para.bookparam.equals(SPACE))) {
-            pa.centralKont.set(para.bookparam);
-        }
-        else {
-            pa.centralKont.set(pa.bkstvftg);
-        }
-        para.f9800Close();
-    }
-
-    private void hittabfar() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        pa.bfar.set(ftgs.fominar);
-        while (!(pa.bfar.compareTo(ftgs.fomaxar)>0)) {
-            para.f9800OpenInput();
-            para.f9800P.set(1);
-            para.f9800Read();
-            para.f9800Close();
-            para.f9801OpenInput();
-            para.f9801Read();
-            para.f9801Close();
-            i.set(1);
-            for (int _t=para.bookparamNum.getInt(); _t>0; _t--) //           IF NOT BOOKPER-SPARR(I) = "J" 
-            {
-                if (bfdat.compareTo(para.bookperMin[i.getInt()-1])>=0 && bfdat.compareTo(para.bookperMax[i.getInt()-1])<=0) {
-                    return;
-                }
-                //           END-IF 
-                i.increment(1);
-            }
-            pa.bfar.increment(1);
-        }
-        pa.bfar.set(ZERO);
-    }
-
-    private void hittabfper() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        para.f9800P.set(1);
-        para.f9800Read();
-        para.f9801Read();
-        bfper.set(1);
-        for (int _t=para.bookparamNum.getInt(); _t>0; _t--) {
-            if (bfdat.compareTo(para.bookperMin[bfper.getInt()-1])>=0 && bfdat.compareTo(para.bookperMax[bfper.getInt()-1])<=0) {
-                return;
-            }
-            bfper.increment(1);
-        }
-        bfper.set(0);
-    }
-
-    private void stangRaderaFsort() {
-        fsort.close();
-        fsort.deleteFile();
-    }
-
--- a/server.src/prg/lev/K896rap1.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K896rap1.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K896rap1.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K896rap1.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K896rap1.this);
-    private Field p6 = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field sel = new Field("X(1000)");
-    private Field selDatfr = new Field("9(8)");
-    private Field selDatti = new Field("9(8)");
-    private Field selGrp = new Field("X(1000)");
-    private Field selOver = new Field("X(1000)");
-    private Field selType = new Field("X");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field num = new Field("S9(9)V99");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/lev/Omdrsync.java
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Omdrsync.this, pa);
-    private lib.lev.Ankfpost levankf=new lib.lev.Ankfpost(Omdrsync.this, pa);
-    private lib.lev.Ankapost levanka=new lib.lev.Ankapost(Omdrsync.this, pa);
-    private lib.lev.Ankrpost levankr=new lib.lev.Ankrpost(Omdrsync.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Omdrsync.this);
--- a/server.src/prg/lev/P36004.java
-    private lib.bas.Beho beho=new lib.bas.Beho(P36004.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P36004.this);
-    private Field pxxAntalSelect = new Field("9999");
-    private Field tmp4nD = new Field("ZZZ9");
-    private void loop() {
-        getId();
-        getIdSlut();
-        if (scId.equals(ZERO) || std.stdFunkNr.equals(27)) {
-            closeDown1();
-            closeDown2();
-            atergang();
-            return;
-        }
-        getSelect();
-        getSelectSlut();
-        if (std.stdFunkNr.equals(27)) {
-            loop();
-            return;
-        }
-    }
-
-    private void loop2() {
-        call("prg.bas.stdfunk", pa.paraArea, "I", scFunk, "H009", "01<2>#");
-        if (scFunk.equals(0)) {
-            loop();
-            return;
-        }
-        if (scFunk.equals(1)) {
-            starta();
-            closeDown1();
-            closeDown2();
-            atergang();
-            return;
-        }
-        if (scFunk.equals(2)) {
-            getSelect();
-            getSelectSlut();
-            if (std.stdFunkNr.equals(27)) {
-                loop();
-                return;
-            }
-            loop2();
-            return;
-        }
-    }
-
-    private void closeDown1() {
-        lib.lev.Parapost.fd para=levpara.get();
-        para.f9705OpenIO();
-        para.f9705P.set(114);
-        para.f9705ReadKl();
-        para.levparamTxt.set("N");
-        para.f9705Write();
-        para.f9705Commit();
-        para.f9705Close();
-    }
-
-    private void getId() {
-        std.crtpos.set(new Constant("0532"));
-    }
-
-    private void getIdLoop() {
-        lib.bas.Ftgspost.fd ftgs=basftgs.get();
-        std.colorInmOpen();
-        /*scrScId*/
-        /*scrScId{
-          std.stdFunk();
-          if (std.stdFunkNr.equalsEither(0, 1)) {
-          getIdLoop();
-          return;
-          }
-          }
-          {
-          std.stdFunkNr.set(0);
-          }
-         */
-        std.colorInmClosed();
-        /*scrScId*/
-        std.stdBlankaMedd();
-        if (scId.equals(ZERO) || std.stdFunkNr.equals(27)) {
-            getIdSlut();
-            return;
-        }
-        beta.id.set(scId);
-        beta.lopnr.set(ZERO);
-        beta.betmot.set(SPACE);
-        beta.ptyp.set(SPACE);
-        beta.vernr.set(ZERO);
-        beta.f9708Read();
-        if (beta.f9708Eof.equals("J")) {
-            call("prg.bas.visa", pa.paraArea, "F004");
-            getIdLoop();
-            return;
-        }
-        if (!(beta.tomedia.equals("N"))) {
-            call("prg.bas.visa", pa.paraArea, "F005");
-            getIdLoop();
-            return;
-        }
-        pxxBetvag.set(beta.fdat);
-        std.colorBakgrund();
-        if (pxxBetvag.equals(1)) {
-            if (!((ftgs.foland.equalsEither("US", "AU")))) {
-                call("prg.bas.visa", pa.paraArea, "B002");
-            }
-            else {
-                call("prg.bas.visa", pa.paraArea, "B006");
-            }
-        }
-        if (pxxBetvag.equals(2)) {
-            call("prg.bas.visa", pa.paraArea, "B003");
-        }
-        if (pxxBetvag.equals(3)) {
-            call("prg.bas.visa", pa.paraArea, "B004");
-        }
-        if (pxxBetvag.equals(4)) {
-            call("prg.bas.visa", pa.paraArea, "B005");
-        }
-        pxxAntalSelect.set(0);
-        beta.id.set(scId);
-        beta.lopnr.set(1);
-        beta.betmot.set(SPACE);
-        beta.ptyp.set(SPACE);
-        beta.vernr.set(ZERO);
-        beta.f9708Start();
-        if (beta.f9708Eof.equals("N")) {
-            beta.f9708Readnext();
-        }
-        while (!(beta.f9708Eof.equals("J") || !(beta.id.equals(scId)) || beta.lopnr.compareTo(500)>=0)) 
-            getIdRakna();
-        tmp4nD.set(pxxAntalSelect);
-    }
-
-    private void getIdSlut() {
-    }
-
-    private void getIdRakna() {
-        if (beta.status.equals("S")) {
-            pxxAntalSelect.increment(1);
-        }
-        beta.f9708Readnext();
-    }
-
-    private void getSelect() {
-        std.crtpos.set(new Constant("0832"));
-    }
-
-    private void getSelectLoop() {
-        std.colorInmOpen();
-        /*scrScSelect*/
-        /*scrScSelect{
-          std.stdFunk();
-          if (std.stdFunkNr.equals(0)) {
-          getSelectLoop();
-          return;
-          }
-          }
-          {
-          std.stdFunkNr.set(0);
-          }
-         */
-        toupper.toupper.set(scInklBortm);
-        toupper.toupp();
-        scInklBortm.set(toupper.toupper);
-        toupper.toupper.set(scSkrivare);
-        toupper.toupp();
-        scSkrivare.set(toupper.toupper);
-        std.colorInmClosed();
-        /*scrScSelect*/
-        std.stdBlankaMedd();
-        if (std.stdFunkNr.equals(1)) {
-            if (std.crtposY.equals(11)) {
-                call("prg.bas.961201", pa.paraArea, scSkrivare);
-                cancel("prg.bas.961201");
-                std.crtpos.set(1032);
-            }
-            getSelectLoop();
-            return;
-        }
-        if (std.stdFunkNr.equals(27)) {
-            getSelectSlut();
-            return;
-        }
-        if (!(scInklBortm.equals(std.stdJa)) && !(scInklBortm.equals(std.stdNej))) {
-            call("prg.bas.visa", pa.paraArea, "F008");
-            std.crtpos.set(new Constant("0832"));
-            getSelectLoop();
-            return;
-        }
-        if (!(scSort.equals("1")) && !(scSort.equals("2")) && !(scSort.equals("3")) && !(scSort.equals("4"))) {
-            call("prg.bas.visa", pa.paraArea, "F011");
-            std.crtpos.set(new Constant("0932"));
-            getSelectLoop();
-            return;
-        }
-        if (scSkrivare.equals(SPACE)) {
-            call("prg.bas.visa", pa.paraArea, "F007");
-            std.crtpos.set(1132);
-            getSelectLoop();
-            return;
-        }
-        skri.kod.set(scSkrivare);
-        skri.f9902Read();
-        if (skri.f9902Eof.equals("J")) {
-            call("prg.bas.visa", pa.paraArea, "F004");
-            std.crtpos.set(1132);
-            getSelectLoop();
-            return;
-        }
-    }
-
-    private void getSelectSlut() {
-    }
-    // ************************************************************** 
-
-    private void fsort2Read() {
-        fsort2Eof.set("N");
-        fsort2.read();
-        if (fsort2.invalidKey()) {
-            fsort2Eof.set("J");
-        }
-        if (fsort2Fs.equals("9D")) {
-            c_sleep("1");
-            fsort2Read();
-            return;
-        }
-    }
-
--- a/server.src/prg/lev/P36007gb.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P36007gb.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P36007gb.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P36007gb.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(P36007gb.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(P36007gb.this);
-    private lib.med.Datab da=new lib.med.Datab(P36007gb.this);
-    private Field pxxTidDatum = new Field("9(8)");
-    private Field pxxTypVarning = new Field("X");
-    private Field pxxMinDag = new Field("9(6)");
-    private Field xmlFilnamn = new Field("X(50)");
-    private Field datum = new Field("X(10)");
-    private Field bgcdRubrik = new Field("X(50)");
-    private Field skapaInlPost = new Field("X");
-    private Field bgcFilnamnDisk = new Field("X(50)", "BGCDATA.IN");
-    private Field pgcFilnamnDisk = new Field("X(50)", "PGCDATA.IN");
-    private Field tmpAntalNeg = new Field("9999");
-    private Field tmpBetsatt = new Field("XX");
-    private Field tmpSigX = new Field("99");
-    private Field tmpSigFak = new Field("9");
-    private Field tmpSigSum = new Field("9999");
-    private Field tmpSigPos = new Field("9999");
-    private Field tmpSigKtrl = new Field("9");
-    private Field levtransport = new Field("X");
-    private Field levantalFakt = new Field("9(6)");
-    private Field levsumma = new Field("S999999999V99");
-    private Field levvaluta = new Field("XXXX");
-    private Field levsumutl = new Field("S999999999V99");
-    private Field levsummaSatt = new Field("S999999999V99");
-    private Field totsumma = new Field("S999999999V99");
-    private Field totsummaBg = new Field("S999999999V99");
-    private Field totsummaBu = new Field("S999999999V99");
-    private Field totsummaPg = new Field("S999999999V99");
-    private Field totsummaPu = new Field("S999999999V99");
-    private Field totsummaUt = new Field("S999999999V99");
-    private Field totsummaKu = new Field("S999999999V99");
-    private Field totsummaKr = new Field("S999999999V99");
-    private Field tmp4nD = new Field("ZZZ9");
-    private Field tmp9 = new Field("9");
-    private Field tmpX = new Field("X");
-    private Field tmp2x = new Field("XX");
-    private Field tmp6n = new Field("9(6)");
-    private Field tmp = new Field("X(200)");
-    private Field windowHandle = new Field("X(10)");
-    private void loop() {
-        getId();
-        getIdSlut();
-        if (scId.equals(ZERO) || std.stdFunkNr.equals(27)) {
-            closeDown();
-            atergang();
-            return;
-        }
-        getSelect();
-        getSelectSlut();
-        if (std.stdFunkNr.equals(27)) {
-            loop();
-            return;
-        }
-    }
-
-    private void loop2() {
-        call("prg.bas.stdfunk", pa.paraArea, "I", scFunk, "H016", "01<2>#");
-        if (scFunk.equals(0)) {
-            loop();
-            return;
-        }
-        if (scFunk.equals(1)) {
-            starta();
-            if ((pxxBetvag.equals(1) && !(pxxMediaBgc.equals("1"))) || 
-                    (pxxBetvag.equals(2) && !(pxxMediaPgc.equals("1"))) || 
-                    (!(pxxBetvag.equals(1)) && !(pxxBetvag.equals(2)))) {
-                closeDown();
-                atergang();
-                return;
-            }
-        }
-        if (scFunk.equals(2)) {
-            getSelect();
-            getSelectSlut();
-            if (std.stdFunkNr.equals(27)) {
-                loop();
-                return;
-            }
-        }
-        loop2();
-        return;
-    }
-
-    private void closeDown() {
-        if (pa.delsystem.ref(8,1).equals("J")) {
-            cancel("prg.med.p8levkto");
-            cancel("prg.med.p8levutl");
-        }
-        leve.f9701Close();
-        fakt.f9702Close();
-        beta.f9708Close();
-        ksta.f9714Close();
-        skri.f9902Close();
-        syst.f9906Close();
-        kont.f9803aClose();
-        para.f9705P.set(114);
-        para.f9705ReadKl();
-        para.levparamTxt.set("N");
-        para.f9705Write();
-        para.f9705Commit();
-        para.f9705Close();
-    }
-
-    private void getId() {
-        std.crtpos.set(new Constant("0532"));
-    }
-
-    private void getIdLoop() {
-        std.colorInmOpen();
-        /*scrScId*/
-        /*scrScId{
-          std.stdFunk();
-          if (std.stdFunkNr.equalsEither(0, 1)) {
-          getIdLoop();
-          return;
-          }
-          }
-          {
-          std.stdFunkNr.set(0);
-          }
-         */
-        std.colorInmClosed();
-        /*scrScId*/
-        std.stdBlankaMedd();
-        if (scId.equals(ZERO) || std.stdFunkNr.equals(27)) {
-            getIdSlut();
-            return;
-        }
-        beta.id.set(scId);
-        beta.lopnr.set(ZERO);
-        beta.betmot.set(SPACE);
-        beta.ptyp.set(SPACE);
-        beta.vernr.set(ZERO);
-        beta.f9708Read();
-        if (beta.f9708Eof.equals("J")) {
-            call("prg.bas.visa", pa.paraArea, "F004");
-            std.crtpos.set(new Constant("0532"));
-            getIdLoop();
-            return;
-        }
-        if (beta.tomedia.equals("S")) {
-            call("prg.bas.visa", pa.paraArea, "F005");
-            std.crtpos.set(new Constant("0532"));
-            getIdLoop();
-            return;
-        }
-        if (beta.tomedia.equals("J")) {
-            call("prg.bas.visainm", pa.paraArea, "I002", std.stdText);
-            if (!(std.stdText.equals(std.stdJa))) {
-                std.crtpos.set(new Constant("0532"));
-                getIdLoop();
-                return;
-            }
-        }
-        pxxTomedia.set(beta.tomedia);
-        pxxBetvag.set(beta.fdat);
-        if (pxxBetvag.equals(1)) {
-            call("prg.bas.visa", pa.paraArea, "B004");
-        }
-        if (pxxBetvag.equals(4)) {
-            call("prg.bas.visa", pa.paraArea, "B007");
-        }
-        if (pxxBetvag.equals(1) && pxxBgcAttest.equals("J") && beta.attest.equals(SPACE)) {
-            call("prg.bas.visa", pa.paraArea, "F017");
-            std.crtpos.set(new Constant("0532"));
-            getIdLoop();
-            return;
-        }
-        if (pxxBetvag.equals(4) && pxxManAttest.equals("J") && beta.attest.equals(SPACE)) {
-            call("prg.bas.visa", pa.paraArea, "F017");
-            std.crtpos.set(new Constant("0532"));
-            getIdLoop();
-            return;
-        }
-        pxxAntalSelect.set(ZERO);
-        pxxBeloppSelect.set(ZERO);
-        beta.id.set(scId);
-        beta.lopnr.set(1);
-        beta.betmot.set(SPACE);
-        beta.ptyp.set(SPACE);
-        beta.vernr.set(ZERO);
-        beta.f9708Start();
-        if (beta.f9708Eof.equals("N")) {
-            beta.f9708Readnext();
-        }
-        while (!(beta.f9708Eof.equals("J") || !(beta.id.equals(scId)) || beta.lopnr.compareTo(500)>=0)) {
-            if (beta.status.equals("S")) {
-                call("prg.lev.p3svart", pa.paraArea, "L", beta.srnr);
-                if (returnCode.equals(1)) {
-                    std.stdText2.set(beta.srnr);
-                    leve.nr.set(beta.srnr);
-                    leve.f9701Read();
-                    std.stdText3.set(leve.name);
-                    call("prg.bas.visainm", pa.paraArea, "I015", std.stdText, std.stdText2, std.stdText3);
-                    if (!(std.stdText.equals(std.stdJa))) {
-                        std.crtpos.set(new Constant("0532"));
-                        getIdLoop();
-                        return;
-                    }
-                }
-                pxxAntalSelect.increment(1);
-                pxxBeloppSelect.increment(beta.betbel);
-            }
-            beta.f9708Readnext();
-        }
-        tmp4nD.set(pxxAntalSelect);
-        std.colorBakgrund();
-    }
-
-    private void getIdSlut() {
-    }
-
-    private void getSelect() {
-        std.crtpos.set(new Constant("0932"));
-    }
-
-    private void getSelectLoop() {
-        std.colorInmOpen();
-        /*scrScSelect*/
-        /*scrScSelect{
-          std.stdFunk();
-          if (std.stdFunkNr.equals(0)) {
-          getSelectLoop();
-          return;
-          }
-          }
-          {
-          std.stdFunkNr.set(0);
-          }
-         */
-        toupper.toupper.set(scSkrivare);
-        toupper.toupp();
-        scSkrivare.set(toupper.toupper);
-        std.colorInmClosed();
-        /*scrScSelect*/
-        std.stdBlankaMedd();
-        if (std.stdFunkNr.equals(1)) {
-            if (std.crtposY.equals(9)) {
-                call("prg.bas.961201", pa.paraArea, scSkrivare);
-                cancel("prg.bas.961201");
-                std.crtpos.set(new Constant("0932"));
-            }
-            getSelectLoop();
-            return;
-        }
-        if (std.stdFunkNr.equals(27)) {
-            getSelectSlut();
-            return;
-        }
-        if (scSkrivare.equals(SPACE)) {
-            call("prg.bas.visa", pa.paraArea, "F007");
-            std.crtpos.set(new Constant("0932"));
-            getSelectLoop();
-            return;
-        }
-        skri.kod.set(scSkrivare);
-        skri.f9902Read();
-        if (skri.f9902Eof.equals("J")) {
-            call("prg.bas.visa", pa.paraArea, "F004");
-            std.crtpos.set(new Constant("0932"));
-            getSelectLoop();
-            return;
-        }
-    }
-
-    private void getSelectSlut() {
-    }
-    // ************************************************************** 
-
--- a/server.src/prg/lev/P360sp.java
-    private lib.lev.Parapost levpara=new lib.lev.Parapost(P360sp.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(P360sp.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P360sp.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P360sp.this);
-    private Field pgm = new Field("X(11)", "0360SP");
-    private Field tmpBetmot = new Field("X(10)");
--- a/server.src/prg/lev/P37001.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P37001.this, pa);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(P37001.this);
-    private lib.med.Datab da=new lib.med.Datab(P37001.this);
-    private Field oldFsort4 = new Field("X(10)");
-    private Field listaExist = new Field("X");
-    private void screenUppdTot() {
-    }
-
-    private void calcBetbel() {
-        fakt.f9702aReadnext();
-        if (fakt.f9702aEof.equals("N") && fakt.lbptyp.equals(fakt.llptyp) && fakt.lbvernr.equals(fakt.llvernr)) {
-            if (fakt.lbtdate.compareTo(paMaxDatum)<=0) {
-                zxxBet.increment(fakt.lbtamount);
-            }
-        }
-    }
-
--- a/server.src/prg/lev/P3bgbu.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3bgbu.this, pa);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(P3bgbu.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3bgbu.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3bgbu.this);
-    private Field pgm = new Field("X(11)", "03BGBU");
--- a/server.src/prg/lev/P3cionl.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3cionl.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3cionl.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3cionl.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(P3cionl.this);
-    private Field fsortLastInFile = new Field("X");
-    private Field pgm = new Field("X(11)", "03CIONL");
-    private Field tmpTodayD = new Field("X(25)");
-    private Field tmpBic = new Field("X(100)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
--- a/server.src/prg/lev/P3deltst.java
-    private lib.bas.Beho beho=new lib.bas.Beho(P3deltst.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3deltst.this);
-    private Field x = new Field("S9(9)");
--- a/server.src/prg/lev/P3dkin.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3dkin.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3dkin.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3dkin.this);
-    private Field pgm = new Field("X(11)", "03DKIN");
-    private Field tmpEuro = new Field("X");
-    private Field tmpBetdat = new Field("9(8)");
-    private Field tmpMotSum = new Field("S9(9)V99");
-    private Field tmpKey = new Field("X(100)");
-    private Field tmpKreditFinns = new Field("X");






-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
--- a/server.src/prg/lev/P3dkin2.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3dkin2.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3dkin2.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3dkin2.this);
-    private Field pgm = new Field("X(11)", "03DKIN");
-    private Field komm = new Field("X(35)");
-    private Field kommAntal = new Field("S9(9)");
-    private Field kommLen = new Field("S9(9)");
-    private Field inrLen = new Field("S9(9)");
-    private Field tmpDbAntalTot = new Field("S9(9)");
-    private Field tmpDbAntalNyaKredit = new Field("S9(9)");
-    private Field tmpEuro = new Field("X");
-    private Field tmpBetdat = new Field("9(8)");
-    private Field tmpMotSum = new Field("S9(9)V99");
-    private Field tmpKey = new Field("X(100)");
-    private Field tmpKreditFinns = new Field("X");






-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field tabfilKrab = new Field("----,---,--9.99");
-    private Field tabfilKrabSt = new Field("99");
--- a/server.src/prg/lev/P3dkinse.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3dkinse.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3dkinse.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3dkinse.this);
-    private Field pgm = new Field("X(11)", "03DKIN");
-    private Field tmpEuro = new Field("X");
-    private Field tmpBetdat = new Field("9(8)");
-    private Field tmpMotSum = new Field("S9(9)V99");
-    private Field tmpKreditFinns = new Field("X");






-    private Field tabfilHel = new Field("S9(9)");
-    private Field tabfilHelD = new Field("-(9)9");
-    private Field tabfilHelSt = new Field("99");
-    private Field tabfilBel = new Field("-(8)9.99");
-    private Field tabfilBelSt = new Field("99");
--- a/server.src/prg/lev/P3dkut.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3dkut.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3dkut.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3dkut.this);
-    private Field pgm = new Field("X(11)", "03DKIN");
-    private Field bettyp = new Field("XX");
-    private Field refnr = new Field("X(50)");
-    private Field betkomm1 = new Field("X(50)");
-    private Field betkomm2 = new Field("X(50)");
-    private Field tmpBetdat = new Field("9(8)");
-    private Field tmpMotSum = new Field("S9(9)V99");
-    private Field tmpKey = new Field("X(100)");
-    private Field tmpKreditFinns = new Field("X");






-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
--- a/server.src/prg/lev/P3dkut2.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3dkut2.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3dkut2.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3dkut2.this);
-    private Field pgm = new Field("X(11)", "03DKIN");
-    private Field antalFakturorPerPost = new Field("S9(9)", 4);
-    private Field bettyp = new Field("XX");
-    private Field refnr = new Field("X(50)");
-    private Field betkomm1 = new Field("X(50)");
-    private Field betkomm2 = new Field("X(50)");
-    private Field tmpDbAntalTot = new Field("S9(9)");
-    private Field tmpDbAntalNyaKredit = new Field("S9(9)");
-    private Field tmpBetdat = new Field("9(8)");
-    private Field tmpMotSum = new Field("S9(9)V99");
-    private Field tmpKey = new Field("X(100)");
-    private Field tmpKreditFinns = new Field("X");






-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field tabfilInr = new Field("X(100)");
-    private Field tabfilUFbel = new Field("----,---,--9.99");
-    private Field tabfilUFbelSt = new Field("99");
--- a/server.src/prg/lev/P3eein.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3eein.this, pa);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(P3eein.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3eein.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3eein.this);
-    private Field pgm = new Field("X(11)", "03EEIN");
-    private Field tmpBetmot = new Field("X(10)");
-    private Field tmpBetsatt = new Field("XX");
-    private Field tmpBetdat = new Field("9(8)");
-    private Field tmpSumma = new Field("S9(9)V99");
-    private Field tmpFaktantal = new Field("S9(9)");
-    private Field tmpBel = new Field("S9(11)V99");
-    private Field tmpUBel = new Field("S9(9)V99");
-    private Field tmpNr = new Field("X(10)");
-    private Field tmpBgnr = new Field("9(10)");
-    private Field tmpFak = new Field("9");
-    private Field tmp9 = new Field("9");
-    private Field tmpSum = new Field("9(4)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
--- a/server.src/prg/lev/P3fiin.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3fiin.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3fiin.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3fiin.this);
-    private Field pgm = new Field("X(11)", "03FIIN");
--- a/server.src/prg/lev/P3fiin2.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3fiin2.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3fiin2.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3fiin2.this);
-    private Field pgm = new Field("X(11)", "03FIIN2");
--- a/server.src/prg/lev/P3fisepa.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3fisepa.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3fisepa.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3fisepa.this);
-    private Field pgm = new Field("X(11)", "03FISEPA");
-    private Field pxxKstAvs = new Field("X");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
--- a/server.src/prg/lev/P3init.java
-    private lib.bas.Std std=new lib.bas.Std(P3init.this);
--- a/server.src/prg/lev/P3init2.java
-    private lib.bas.Std std=new lib.bas.Std(P3init2.this);
--- a/server.src/prg/lev/P3init3.java
-    private lib.bas.Std std=new lib.bas.Std(P3init3.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3init3.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3init3.this);
-    private Field pgm = new Field("X(11)", "03INIT3");
--- a/server.src/prg/lev/P3kale.java
-    private lib.bas.Beho beho=new lib.bas.Beho(P3kale.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3kale.this);
-    private Field frDatum = new Field("9(8)");
--- a/server.src/prg/lev/P3noin.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3noin.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3noin.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3noin.this);
-    private Field pgm = new Field("X(11)", "03NOIN");
-    private Field fsortEof = new Field("X");
-    private void fsortOpenIO() {
-        std.xlTyp.set("S1");
-        std.xlPort.set(pa.port);
-        fsortNamn.set(std.xlnamn);
-        fsort.deleteFile();
-        fsort.open("I-O");
-    }
-
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-        if (fsortFs.equals("9D")) {
-            c_sleep("1");
-            fsortRead();
-            return;
-        }
-    }
-
-    private void fsortStart() {
-        fsortEof.set("N");
-        fsort.start("NOT<", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortReadnext() {
-        fsortEof.set("N");
-        fsort.readNext();
-        if (fsort.atEnd()) {
-            fsortEof.set("J");
-        }
-        if (fsortFs.equals("9D")) {
-            fsort.start(">", "fsort_key");
-            c_sleep("1");
-            fsortReadnext();
-            return;
-        }
-    }
-
-    private void fsortWrite() {
-        fsortPost.write();
-        if (fsortPost.invalidKey()) {
-            fsortPost.rewrite();
-        }
-        if (fsortFs.equals("9D")) {
-            c_sleep("1");
-            fsortWrite();
-            return;
-        }
-        if (fsortFs1.equalsEither("9", "3")) {
-            call("prg.bas.sysfel", fsortNamn, fsortFs);
-            cancel("prg.bas.sysfel");
-        }
-    }
-
-    private void fsortClose() {
-        fsort.close();
-        fsort.deleteFile();
-    }
-
--- a/server.src/prg/lev/P3noin2.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3noin2.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3noin2.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3noin2.this);
-    private Field pgm = new Field("X(11)", "03NOIN");
-    private Field fsortEof = new Field("X");
-    private void fsortOpenIO() {
-        std.xlTyp.set("S1");
-        std.xlPort.set(pa.port);
-        fsortNamn.set(std.xlnamn);
-        fsort.deleteFile();
-        fsort.open("I-O");
-    }
-
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-        if (fsortFs.equals("9D")) {
-            c_sleep("1");
-            fsortRead();
-            return;
-        }
-    }
-
-    private void fsortStart() {
-        fsortEof.set("N");
-        fsort.start("NOT<", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortReadnext() {
-        fsortEof.set("N");
-        fsort.readNext();
-        if (fsort.atEnd()) {
-            fsortEof.set("J");
-        }
-        if (fsortFs.equals("9D")) {
-            fsort.start(">", "fsort_key");
-            c_sleep("1");
-            fsortReadnext();
-            return;
-        }
-    }
-
-    private void fsortWrite() {
-        fsortPost.write();
-        if (fsortPost.invalidKey()) {
-            fsortPost.rewrite();
-        }
-        if (fsortFs.equals("9D")) {
-            c_sleep("1");
-            fsortWrite();
-            return;
-        }
-        if (fsortFs1.equals("9") || fsortFs1.equals("3")) {
-            call("prg.bas.sysfel", fsortNamn, fsortFs);
-            cancel("prg.bas.sysfel");
-        }
-    }
-
-    private void fsortClose() {
-        fsort.close();
-        fsort.deleteFile();
-    }
-
--- a/server.src/prg/lev/P3noinut.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3noinut.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3noinut.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3noinut.this);
-    private Field pgm = new Field("X(11)", "03NOINUT");
-    private Field tmpBestatus = new Field("X");
--- a/server.src/prg/lev/P3pgin.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3pgin.this, pa);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(P3pgin.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3pgin.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3pgin.this);
-    private Field pgm = new Field("X(11)", "03PGIN");
--- a/server.src/prg/lev/P3pgut.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3pgut.this, pa);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(P3pgut.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3pgut.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3pgut.this);
-    private Field pgm = new Field("X(11)", "03PGUT");
--- a/server.src/prg/lev/P3sepa3.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3sepa3.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3sepa3.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3sepa3.this);
-    private Field pgm = new Field("X(11)", "03SEPA3");
-    private Field y = new Field("S9(9)");
-    private void fsort2Read() {
-        fsort2Eof.set("N");
-        fsort2.read();
-        if (fsort2.invalidKey()) {
-            fsort2Eof.set("J");
-        }
-        if (fsort2Fs.equals("9D")) {
-            c_sleep("1");
-            fsort2Read();
-            return;
-        }
-    }
-
--- a/server.src/prg/lev/P3sepa3dkcb.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3sepa3dkcb.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3sepa3dkcb.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3sepa3dkcb.this);
-    private Field pgm = new Field("X(11)", "03SEPA3");
-    private Field cdttrftxinfAntal = new Field("S9(9)");
-    private Field cdttrftxinfBel = new Field("S9(9)V99");
-    private Field cdttrftxinfBelD = new Field("--------9.99");
-    private Field cdttrftxinfBankrefPek = new Field("S9(9)");
-    private void fsort2Read() {
-        fsort2Eof.set("N");
-        fsort2.read();
-        if (fsort2.invalidKey()) {
-            fsort2Eof.set("J");
-        }
-        if (fsort2Fs.equals("9D")) {
-            c_sleep("1");
-            fsort2Read();
-            return;
-        }
-    }
-
--- a/server.src/prg/lev/P3sepa3dkspdd.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3sepa3dkspdd.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3sepa3dkspdd.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3sepa3dkspdd.this);
-    private Field pgm = new Field("X(11)", "03SEPA3");
-    private Field cdttrftxinfBel = new Field("S9(9)V99");
-    private Field cdttrftxinfBelD = new Field("--------9.99");
-    private Field cdttrftxinfBankrefPek = new Field("S9(9)");
-    private void fsort2Read() {
-        fsort2Eof.set("N");
-        fsort2.read();
-        if (fsort2.invalidKey()) {
-            fsort2Eof.set("J");
-        }
-        if (fsort2Fs.equals("9D")) {
-            c_sleep("1");
-            fsort2Read();
-            return;
-        }
-    }
-
--- a/server.src/prg/lev/P3sepa3esbi.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3sepa3esbi.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3sepa3esbi.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3sepa3esbi.this);
-    private Field pgm = new Field("X(11)", "03SEPA3");
-    private Field cdttrftxinfBelD = new Field("--------9.99");
-    private Field cdttrftxinfBankrefPek = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private void fsort2Read() {
-        fsort2Eof.set("N");
-        fsort2.read();
-        if (fsort2.invalidKey()) {
-            fsort2Eof.set("J");
-        }
-        if (fsort2Fs.equals("9D")) {
-            c_sleep("1");
-            fsort2Read();
-            return;
-        }
-    }
-
--- a/server.src/prg/lev/P3sepa3essa.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3sepa3essa.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3sepa3essa.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3sepa3essa.this);
-    private Field pgm = new Field("X(11)", "03SEPA3");
-    private Field cdttrftxinfBelD = new Field("--------9.99");
-    private Field cdttrftxinfBankrefPek = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private void fsort2Read() {
-        fsort2Eof.set("N");
-        fsort2.read();
-        if (fsort2.invalidKey()) {
-            fsort2Eof.set("J");
-        }
-        if (fsort2Fs.equals("9D")) {
-            c_sleep("1");
-            fsort2Read();
-            return;
-        }
-    }
-
--- a/server.src/prg/lev/P3sepa3fidb.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3sepa3fidb.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3sepa3fidb.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3sepa3fidb.this);
-    private Field pgm = new Field("X(11)", "03SEPA3");
-    private Field cdttrftxinfAntal = new Field("S9(9)");
-    private Field refnr = new Field("X(100)");
-    private void fsort2Read() {
-        fsort2Eof.set("N");
-        fsort2.read();
-        if (fsort2.invalidKey()) {
-            fsort2Eof.set("J");
-        }
-        if (fsort2Fs.equals("9D")) {
-            c_sleep("1");
-            fsort2Read();
-            return;
-        }
-    }
-
--- a/server.src/prg/lev/P3sepa3fino.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3sepa3fino.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3sepa3fino.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3sepa3fino.this);
-    private Field pgm = new Field("X(11)", "03SEPA3");
-    private Field refnr = new Field("X(100)");
-    private Field tmpTodayD = new Field("X(25)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private void fsort2Read() {
-        fsort2Eof.set("N");
-        fsort2.read();
-        if (fsort2.invalidKey()) {
-            fsort2Eof.set("J");
-        }
-        if (fsort2Fs.equals("9D")) {
-            c_sleep("1");
-            fsort2Read();
-            return;
-        }
-    }
-
--- a/server.src/prg/lev/P3sepa3nono.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3sepa3nono.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3sepa3nono.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3sepa3nono.this);
-    private Field pgm = new Field("X(11)", "03SEPA3");
-    private Field refnr = new Field("X(100)");
-    private Field tmpTodayD = new Field("X(25)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private void fsort2Read() {
-        fsort2Eof.set("N");
-        fsort2.read();
-        if (fsort2.invalidKey()) {
-            fsort2Eof.set("J");
-        }
-        if (fsort2Fs.equals("9D")) {
-            c_sleep("1");
-            fsort2Read();
-            return;
-        }
-    }
-
--- a/server.src/prg/lev/P3sepa3secb.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3sepa3secb.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3sepa3secb.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3sepa3secb.this);
-    private Field pgm = new Field("X(11)", "03SEPA3");
-    private Field cdttrftxinfAntal = new Field("S9(9)");
-    private Field cdttrftxinfBel = new Field("S9(9)V99");
-    private Field cdttrftxinfBelD = new Field("--------9.99");
-    private Field cdttrftxinfBankrefPek = new Field("S9(9)");
-    private Field refnr = new Field("X(100)");
-    private Field tmpTodayD = new Field("X(25)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private void fsort2Read() {
-        fsort2Eof.set("N");
-        fsort2.read();
-        if (fsort2.invalidKey()) {
-            fsort2Eof.set("J");
-        }
-        if (fsort2Fs.equals("9D")) {
-            c_sleep("1");
-            fsort2Read();
-            return;
-        }
-    }
-
--- a/server.src/prg/lev/P3sepa3sedb2.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3sepa3sedb2.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3sepa3sedb2.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3sepa3sedb2.this);
-    private Field pgm = new Field("X(11)", "03SEPA3");
-    private Field cdttrftxinfAntal = new Field("S9(9)");
-    private Field refnr = new Field("X(100)");
-    private void fsort2Read() {
-        fsort2Eof.set("N");
-        fsort2.read();
-        if (fsort2.invalidKey()) {
-            fsort2Eof.set("J");
-        }
-        if (fsort2Fs.equals("9D")) {
-            c_sleep("1");
-            fsort2Read();
-            return;
-        }
-    }
-
--- a/server.src/prg/lev/P3sepa3sehb.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3sepa3sehb.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3sepa3sehb.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3sepa3sehb.this);
-    private Field pgm = new Field("X(11)", "03SEPA3");
-    private Field cdttrftxinfAntal = new Field("S9(9)");
-    private Field refnr = new Field("X(100)");
-    private void fsort2Read() {
-        fsort2Eof.set("N");
-        fsort2.read();
-        if (fsort2.invalidKey()) {
-            fsort2Eof.set("J");
-        }
-        if (fsort2Fs.equals("9D")) {
-            c_sleep("1");
-            fsort2Read();
-            return;
-        }
-    }
-
--- a/server.src/prg/lev/P3sepa3seno.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3sepa3seno.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3sepa3seno.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3sepa3seno.this);
-    private Field pgm = new Field("X(11)", "03SEPA3");
-    private Field refnr = new Field("X(100)");
-    private Field tmpTodayD = new Field("X(25)");
-    private Field y = new Field("S9(9)");
-    private void fsort2Read() {
-        fsort2Eof.set("N");
-        fsort2.read();
-        if (fsort2.invalidKey()) {
-            fsort2Eof.set("J");
-        }
-        if (fsort2Fs.equals("9D")) {
-            c_sleep("1");
-            fsort2Read();
-            return;
-        }
-    }
-
--- a/server.src/prg/lev/P3start.java
-    private lib.bas.Std std=new lib.bas.Std(P3start.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3start.this);
-    private Field pgm = new Field("X(12)", "03START");
--- a/server.src/prg/lev/P3svart.java
-    private lib.bas.Std std=new lib.bas.Std(P3svart.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3svart.this);
-    private Field pgm = new Field("X(11)", "03SVART");
--- a/server.src/prg/lev/P3uppd.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3uppd.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(P3uppd.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3uppd.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3uppd.this);
-    private Field pgm = new Field("X(11)", "03UPPD");
--- a/server.src/prg/lev/P3utfs.java
-    private lib.lev.Kalepost levkale=new lib.lev.Kalepost(P3utfs.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(P3utfs.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3utfs.this, pa);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(P3utfs.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(P3utfs.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(P3utfs.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3utfs.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3utfs.this);
-    private Field pgm = new Field("X(11)", "03UTFS");
--- a/server.src/prg/lev/P3uthb.java
-    private lib.lev.Kalepost levkale=new lib.lev.Kalepost(P3uthb.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(P3uthb.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3uthb.this, pa);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(P3uthb.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(P3uthb.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(P3uthb.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3uthb.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3uthb.this);
-    private Field pgm = new Field("X(11)", "03UTHB");
--- a/server.src/prg/lev/P3uthb2.java
-    private lib.lev.Kalepost levkale=new lib.lev.Kalepost(P3uthb2.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(P3uthb2.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3uthb2.this, pa);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(P3uthb2.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(P3uthb2.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(P3uthb2.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3uthb2.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3uthb2.this);
-    private Field pgm = new Field("X(11)", "03UTHB7");
--- a/server.src/prg/lev/P3uthb3.java
-    private lib.lev.Kalepost levkale=new lib.lev.Kalepost(P3uthb3.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(P3uthb3.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3uthb3.this, pa);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(P3uthb3.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(P3uthb3.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(P3uthb3.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3uthb3.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3uthb3.this);
-    private Field pgm = new Field("X(11)", "03UTHB3");
--- a/server.src/prg/lev/P3utnb.java
-    private lib.lev.Kalepost levkale=new lib.lev.Kalepost(P3utnb.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(P3utnb.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3utnb.this, pa);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(P3utnb.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(P3utnb.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(P3utnb.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3utnb.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3utnb.this);
-    private Field pgm = new Field("X(11)", "03UTNB2");
--- a/server.src/prg/lev/P3utnb2.java
-    private lib.lev.Kalepost levkale=new lib.lev.Kalepost(P3utnb2.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(P3utnb2.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3utnb2.this, pa);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(P3utnb2.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(P3utnb2.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(P3utnb2.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3utnb2.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3utnb2.this);
-    private Field pgm = new Field("X(11)", "03UTNB2");
--- a/server.src/prg/lev/P3utnb3.java
-    private lib.lev.Kalepost levkale=new lib.lev.Kalepost(P3utnb3.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(P3utnb3.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3utnb3.this, pa);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(P3utnb3.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(P3utnb3.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(P3utnb3.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3utnb3.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3utnb3.this);
-    private Field pgm = new Field("X(11)", "03UTNB3");
--- a/server.src/prg/lev/P3utoeb.java
-    private lib.lev.Kalepost levkale=new lib.lev.Kalepost(P3utoeb.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(P3utoeb.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3utoeb.this, pa);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(P3utoeb.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(P3utoeb.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(P3utoeb.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3utoeb.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3utoeb.this);
-    private Field pgm = new Field("X(11)", "03UTOEB");
--- a/server.src/prg/lev/P3utse.java
-    private lib.lev.Kalepost levkale=new lib.lev.Kalepost(P3utse.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(P3utse.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(P3utse.this, pa);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(P3utse.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(P3utse.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(P3utse.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P3utse.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P3utse.this);
-    private Field pgm = new Field("X(11)", "03UTSE");
--- a/server.src/prg/lev/Readpara.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Readpara.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Readpara.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Readpara.this);
--- a/server.src/prg/lev/Redsync.java
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Redsync.this, pa);
-    private lib.lev.Ankfpost levankf=new lib.lev.Ankfpost(Redsync.this, pa);
-    private lib.lev.Ankapost levanka=new lib.lev.Ankapost(Redsync.this, pa);
-    private lib.lev.Ankrpost levankr=new lib.lev.Ankrpost(Redsync.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Redsync.this);
--- a/server.src/prg/lev/Sonaws.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Sonaws.this);
-    private Field xmlTecken = new Field("X(100)");
-    private Field behormedaOk = new Field("X");
-    private Field medaPek = new Field("S9(9)");
-    private Field xmlLanguage = new Field("X(100)");
-    private Field visakod = new Field("XXX");
-    private Field tmpSprak = new Field("XX");
-    private Field antalInlogg = new Field("S9(9)");
-    private Field sessionid = new Field("9(15)");
-    private Field tid = new Field("9(8)");
-    private Field datum = new Field("9(8)");
-    private Field datum2 = new Field("9(8)");
-    private Field datumD = new Field("X(10)");
-    private Field veckodag = new Field("9(6)");
--- a/server.src/prg/lev/Toinsync.java
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Toinsync.this, pa);
-    private lib.lev.Ankfpost levankf=new lib.lev.Ankfpost(Toinsync.this, pa);
-    private lib.lev.Ankapost levanka=new lib.lev.Ankapost(Toinsync.this, pa);
-    private lib.lev.Ankrpost levankr=new lib.lev.Ankrpost(Toinsync.this, pa);
-    private lib.med.Forepost medfore=new lib.med.Forepost(Toinsync.this, pa);
-    private lib.med.Tidnpost medtidn=new lib.med.Tidnpost(Toinsync.this, pa);
-    private lib.med.Tillpost medtill=new lib.med.Tillpost(Toinsync.this, pa);
-    private lib.med.Ordepost medorde=new lib.med.Ordepost(Toinsync.this, pa);
-    private lib.med.Oinfpost medoinf=new lib.med.Oinfpost(Toinsync.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Toinsync.this);
-    private lib.med.Datab da=new lib.med.Datab(Toinsync.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Toinsync.this);
--- a/server.src/prg/lev/W31014.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W31014.this);
-    private Field scFunk = new Field("9");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
--- a/server.src/prg/lev/W31014b.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W31014b.this);
-    private Field scFunk = new Field("9");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
--- a/server.src/prg/lev/W332.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W332.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W332.this);
-    private Field pxxKst = new Field("X(6)");
-    private Field pxxPlanFinns = new Field("X");
-    private Field pxxVarningKrab = new Field("X");
-    private Field pxxVarningKrab2 = new Field("X");
-    private Field pxxLevunikafaktnr = new Field("X");
-    private Field oldBelopp = new Field("S99999999V99");
-    private Field oldValuta = new Field("XXX");
-    private Field scBfDat2 = new Field("9(8)", ZERO);
-    private Field scBetkomm1Len = new Field("S9(9)", 40);
-    private Field scBetkomm2Len = new Field("S9(9)", 40);
-    private Field tmpWindow = new Field("X(10)");
-    private Field tmpVarningSentIdate = new Field("9(8)");
-    private Field tmpVarningTidigtIdate = new Field("9(8)");
-    private Field tmpVarningSentDdate = new Field("9(8)");
-    private Field tmpVarningTidigtDdate = new Field("9(8)");
-    private Field tmpHel = new Field("S999999999");
-    private Field pxxBlanka = new Field("X", "N");
-    private Field windowHandle = new Field("X(10)");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
-    private Field varnkod = new Field("X(20)");
-    private Field varncook = new Field("X(25)");
-    private Field varnok = new Field("X");
-    private void getCentral() {
-        pa.centralRapp.set(pa.bkstvftg);
-        pa.centralKont.set(pa.bkstvftg);
-        bok_para.f9800OpenInput();
-        if (bok_para.f9800Fs1.equals("0")) {
-            getCentralBok();
-        }
-        bok_para.f9800Close();
-        pa.centralBfri.set(pa.bkstvftg);
-        lev_para.f9705OpenInput();
-        if (lev_para.f9705Fs1.equals("0")) {
-            getCentralLev();
-        }
-        lev_para.f9705Close();
-    }
-
-    private void getCentralBok() {
-        bok_para.f9800P.set(9);
-        bok_para.f9800Read();
-        if (bok_para.f9800Eof.equals("N") && !(bok_para.bookparam.equals(SPACE))) {
-            pa.centralRapp.set(bok_para.bookparam);
-        }
-        bok_para.f9800P.set(10);
-        bok_para.f9800Read();
-        if (bok_para.f9800Eof.equals("N") && !(bok_para.bookparam.equals(SPACE))) {
-            pa.centralKont.set(bok_para.bookparam);
-        }
-    }
-
-    private void getCentralLev() {
-        lev_para.f9705P.set(12);
-        lev_para.f9705Read();
-        if (lev_para.f9705Eof.equals("N") && !(lev_para.levparamTxt.equals(SPACE))) {
-            pa.centralBfri.set(lev_para.levparamTxt);
-        }
-    }
-
-    private void lasFaktData() {
-        if (pxxUtlBank.equals("PG") && leve.betsatt.equals("UT")) {
-            scBetkomm1Len.set(33);
-            scBetkomm2Len.set(33);
-        }
-        else {
-            scBetkomm1Len.set(40);
-            scBetkomm2Len.set(40);
-        }
-        tmpVarningSentIdate.set(ZERO);
-        tmpVarningTidigtIdate.set(ZERO);
-        tmpVarningSentDdate.set(ZERO);
-        tmpVarningTidigtDdate.set(ZERO);
-        pxxVarningKrab.set("N");
-        pxxVarningKrab2.set("N");
-        oldBelopp.set(scBelopp);
-        oldValuta.set(scValuta);
-        std.crtpos.set("0520");
-    }
-
-    private void lasFaktDataLoop() {
-    }
-
-    private void lasFaktDataLoop2() {
-        toupper.toupper.set(scValuta);
-        toupper.toupp();
-        scValuta.set(toupper.toupper);
-        toupper.toupper.set(scKto);
-        toupper.toupp();
-        scKto.set(toupper.toupper);
-        toupper.toupper.set(scKst);
-        toupper.toupp();
-        scKst.set(toupper.toupper);
-        toupper.toupper.set(scKbr);
-        toupper.toupp();
-        scKbr.set(toupper.toupper);
-        toupper.toupper.set(scBetsparr);
-        toupper.toupp();
-        scBetsparr.set(toupper.toupper);
-        leve.pref.set(scPref);
-        //     IF SC-KRAB2 = ZERO 
-        //         MOVE ZERO TO SC-DDATE2 
-        //     END-IF 
-        if (!(scBelopp.equals(oldBelopp)) || !(scValuta.equals(oldValuta))) {
-            if (scValuta.equals(pxxStdVal)) {
-                scSbelopp.set(scBelopp);
-            }
-            else {
-                call("prg.bas.stdval", "K", scValuta, "L", tmpKurs, tmpKursAntal);
-                tmpHel.set(scBelopp.multiply(tmpKurs).divide(tmpKursAntal), ROUND_HALF_UP);
-                scSbelopp.set(tmpHel);
-            }
-            oldBelopp.set(scBelopp);
-            oldValuta.set(scValuta);
-        }
-        leve.nr.set(scLevenr);
-        leve.f9701Read();
-        if (leve.f9701Eof.equals("J")) {
-            call("prg.bas.visa", pa.paraArea, "F003");
-            std.crtpos.set("0520");
-            lasFaktDataLoop();
-            return;
-        }
-        //     IF SC-VALUTA NOT = Pxx-STD-VAL AND SC-MOMS NOT = ZERO 
-        //         CALL "PRG/BAS/VISA" USING PARA-AREA "F007" 
-        //         MOVE 0820 TO CRTPOS 
-        //         GO TO LAS-FAKT-DATA-LOOP 
-        //     END-IF 
-        acceptFrom(" FROM  ENVIRONMENT ","LEVUNIKAFAKTNR",pxxLevunikafaktnr);
-        if (pxxLevunikafaktnr.equals("J")) {
-            fakt.llinr.set(scFaktnr);
-            fakt.llsrnr.set(scLevenr);
-            fakt.f9702Start4();
-            if (fakt.f9702Eof.equals("N")) {
-                fakt.f9702Readnext4();
-            }
-            while (!(fakt.f9702Eof.equals("J") || !(fakt.llinr.equals(scFaktnr)) || !(fakt.llsrnr.equals(scLevenr)))) {
-                if (!(fakt.llptyp.equals(scPtyp)) || !(fakt.llvernr.equals(scVernr))) {
-                    fakt.llptyp.set(scPtyp);
-                    fakt.llvernr.set(scVernr);
-                    fakt.f9702Read();
-                    call("prg.bas.visa", pa.paraArea, "F049");
-                    std.crtpos.set("0620");
-                    lasFaktDataLoop();
-                    return;
-                }
-                fakt.f9702Readnext4();
-            }
-            fakt.llptyp.set(scPtyp);
-            fakt.llvernr.set(scVernr);
-            fakt.f9702Read();
-        }
-        if (pxxStdVal.equals("DKK")) {
-            if (scFaktnr.ref(2,1).equals(":") || scFaktnr.ref(3,1).equals(":")) //  Ref.nr i fakturanumret 
-            {
-                if (!(scFaktnr.ref(1,2).equals("4:")) && !(scFaktnr.ref(1,3).equals("01:")) && !(scFaktnr.ref(1,3).equals("04:")) && !(scFaktnr.ref(1,3).equals("15:")) && !(scFaktnr.ref(1,3).equals("41:")) && !(scFaktnr.ref(1,3).equals("71:")) && !(scFaktnr.ref(1,3).equals("73:")) && !(scFaktnr.ref(1,3).equals("75:"))) {
-                    call("prg.bas.visa", pa.paraArea, "F040");
-                    std.crtpos.set("0620");
-                    lasFaktDataLoop();
-                    return;
-                }
-                if (((scFaktnr.ref(1,2).equals("4:")) && 
-                            (!scFaktnr.ref(3,19).isNumeric() || !(scFaktnr.ref(22).equals(SPACE)))) || 
-                        ((scFaktnr.ref(1,3).equals("04:")) && 
-                         (!scFaktnr.ref(4,16).isNumeric() || !(scFaktnr.ref(20).equals(SPACE)))) || 
-                        ((scFaktnr.ref(1,3).equals("15:")) && 
-                         (!scFaktnr.ref(4,16).isNumeric() || !(scFaktnr.ref(20).equals(SPACE)))) || 
-                        ((scFaktnr.ref(1,3).equals("41:")) && 
-                         (!scFaktnr.ref(4,10).isNumeric() || !(scFaktnr.ref(14).equals(SPACE)))) || 
-                        ((scFaktnr.ref(1,3).equals("71:")) && 
-                         (!scFaktnr.ref(4,15).isNumeric() || !(scFaktnr.ref(19).equals(SPACE)))) || 
-                        ((scFaktnr.ref(1,3).equals("75:")) && 
-                         (!scFaktnr.ref(4,16).isNumeric() || !(scFaktnr.ref(20).equals(SPACE))))) {
-                    call("prg.bas.visa", pa.paraArea, "F043");
-                    std.crtpos.set("0620");
-                    lasFaktDataLoop();
-                    return;
-                }
-                if ((!(leve.bg.ref(1,2).equals("IK"))) || 
-                        (!leve.bg.ref(3,7).isNumeric()) || 
-                        (!leve.bg.ref(10,1).isNumeric() && !(leve.bg.ref(10,1).equals(SPACE))) || 
-                        (!(leve.bg.ref(11).equals(SPACE))) || 
-                        (!(leve.pg.equals(SPACE))) || 
-                        (!(leve.betsatt.equals("BG")))) {
-                    call("prg.bas.visa", pa.paraArea, "F042");
-                    std.crtpos.set("0620");
-                    lasFaktDataLoop();
-                    return;
-                }
-            }
-            //         ELSE 
-            //             IF LEBETSATT = "BG" AND LEBG(1:2) = "IK" 
-            //                 CALL "PRG/BAS/VISA" USING PARA-AREA "F044" 
-            //                 MOVE 0620 TO CRTPOS 
-            //                 GO TO LAS-FAKT-DATA-LOOP 
-            //             END-IF 
-        }
-        if (scIdate.equals(ZERO)) {
-            call("prg.bas.visa", pa.paraArea, "F006");
-            std.crtpos.set("0920");
-            lasFaktDataLoop();
-            return;
-        }
-        call("prg.bas.stddat", "K", scIdate);
-        if (!(returnCode.equals(ZERO))) {
-            call("prg.bas.visa", pa.paraArea, "F002");
-            std.crtpos.set("0920");
-            lasFaktDataLoop();
-            return;
-        }
-        if (scIdate.compareTo(std.stdToday)>0 && !(tmpVarningSentIdate.equals(scIdate))) {
-            tmpVarningSentIdate.set(scIdate);
-            call("prg.bas.visa", pa.paraArea, "F028");
-            std.crtpos.set("0920");
-            lasFaktDataLoop();
-            return;
-        }
-        std.stdDate.set(std.stdToday);
-        std.stdMan.decrement(1);
-        if (std.stdMan.equals(ZERO)) {
-            std.stdMan.set(12);
-            std.stdAr.decrement(1);
-        }
-        if (scIdate.compareTo(std.stdDate)<0 && !(tmpVarningTidigtIdate.equals(scIdate))) {
-            tmpVarningTidigtIdate.set(scIdate);
-            call("prg.bas.visa", pa.paraArea, "F030");
-            std.crtpos.set("0920");
-            lasFaktDataLoop();
-            return;
-        }
-        if (scValuta.equals(SPACE)) {
-            call("prg.bas.visa", pa.paraArea, "F006");
-            std.crtpos.set(1020);
-            lasFaktDataLoop();
-            return;
-        }
-        call("prg.bas.stdval", "K", scValuta, "L", tmpKurs, tmpKursAntal);
-        if (returnCode.equals(1)) {
-            call("prg.bas.visa", pa.paraArea, "F003");
-            std.crtpos.set(1020);
-            lasFaktDataLoop();
-            return;
-        }
-        if (!(scValuta.equals(pxxStdVal))) {
-            call("prg.bas.visa", pa.paraArea, "H001", std.stdText);
-            scKurs1.set(std.stdText);
-            tmpKurs2.set(tmpKurs.divide(tmpKursAntal), ROUND_HALF_UP);
-            scKurs2R.set(tmpKurs2);
-        }
-        else {
-            scKurs1.set(SPACE);
-            scKurs2.set(SPACE);
-        }
-        if ((scBelopp.compareTo(0)<0 && scSbelopp.compareTo(0)>0) || 
-                (scBelopp.compareTo(0)>0 && scSbelopp.compareTo(0)<0)) {
-            call("prg.bas.visa", pa.paraArea, "F026");
-            std.crtpos.set(1620);
-            lasFaktDataLoop();
-            return;
-        }
-        if (scValuta.equals(pxxStdVal) && !(scSbelopp.equals(scBelopp))) {
-            call("prg.bas.visa", pa.paraArea, "F026");
-            std.crtpos.set(1620);
-            lasFaktDataLoop();
-            return;
-        }
-        if (scValuta.equals(pxxStdVal)) {
-            scBkurs1.set(SPACE);
-            scBkurs2.set(SPACE);
-        }
-        else {
-            tmpKurs2.set(scSbelopp.divide(scBelopp).multiply(tmpKursAntal));
-            if (tmpKurs2.subtract(tmpKurs).divide(tmpKurs).compareTo(new Constant("0.05"))>0 || tmpKurs2.subtract(tmpKurs).divide(tmpKurs).compareTo(new Constant("-0.05"))<0) {
-                call("prg.bas.visa", pa.paraArea, "H002", std.stdText);
-                scBkurs1.set(std.stdText);
-                tmpKurs2.set(tmpKurs2.divide(tmpKursAntal), ROUND_HALF_UP);
-                scBkurs2R.set(tmpKurs2);
-            }
-            else {
-                scBkurs1.set(SPACE);
-                scBkurs2.set(SPACE);
-            }
-        }
-        if (scDdate.equals(ZERO)) {
-            call("prg.bas.visa", pa.paraArea, "F006");
-            std.crtpos.set(1120);
-            lasFaktDataLoop();
-            return;
-        }
-        if (!(scDdate.equals(ZERO))) {
-            call("prg.bas.stddat", "K", scDdate);
-            if (!(returnCode.equals(ZERO))) {
-                call("prg.bas.visa", pa.paraArea, "F002");
-                std.crtpos.set(1120);
-                lasFaktDataLoop();
-                return;
-            }
-        }
-        std.stdDate.set(std.stdToday);
-        std.stdMan.increment(2);
-        if (std.stdMan.compareTo(12)>0) {
-            std.stdMan.decrement(12);
-            std.stdAr.increment(1);
-        }
-        if (scDdate.compareTo(std.stdDate)>0 && !(tmpVarningSentDdate.equals(scDdate))) {
-            tmpVarningSentDdate.set(scDdate);
-            call("prg.bas.visa", pa.paraArea, "F029");
-            std.crtpos.set(1120);
-            lasFaktDataLoop();
-            return;
-        }
-        if (scDdate.compareTo(scIdate)<0 && !(tmpVarningTidigtDdate.equals(scDdate))) {
-            tmpVarningTidigtDdate.set(scDdate);
-            call("prg.bas.visa", pa.paraArea, "F031");
-            std.crtpos.set(1120);
-            lasFaktDataLoop();
-            return;
-        }
-        if (pxxKrabkto.equals(SPACE) && !(scKrab.equals(ZERO))) {
-            call("prg.bas.visa", pa.paraArea, "F037");
-            std.crtpos.set(1127);
-            lasFaktDataLoop();
-            return;
-        }
-        if (pxxVarningKrab.equals("N") && scKrab.compareTo(1)>0) {
-            pxxVarningKrab.set("J");
-            call("prg.bas.visa", pa.paraArea, "F034");
-            std.crtpos.set(1127);
-            lasFaktDataLoop();
-            return;
-        }
-        if (!(scDdate2.equals(ZERO))) {
-            call("prg.bas.stddat", "K", scDdate2);
-            if (!(returnCode.equals(ZERO))) {
-                call("prg.bas.visa", pa.paraArea, "F002");
-                std.crtpos.set(1320);
-                lasFaktDataLoop();
-                return;
-            }
-            if (scDdate2.compareTo(scDdate)<=0) {
-                call("prg.bas.visa", pa.paraArea, "F032");
-                std.crtpos.set(1320);
-                lasFaktDataLoop();
-                return;
-            }
-            if (pxxKrabkto.equals(SPACE) && !(scKrab2.equals(ZERO))) {
-                call("prg.bas.visa", pa.paraArea, "F037");
-                std.crtpos.set(1327);
-                lasFaktDataLoop();
-                return;
-            }
-            if (pxxVarningKrab2.equals("N") && scKrab2.compareTo(1)>0) {
-                pxxVarningKrab2.set("J");
-                call("prg.bas.visa", pa.paraArea, "F034");
-                std.crtpos.set(1327);
-                lasFaktDataLoop();
-                return;
-            }
-            if (scKrab2.compareTo(scKrab)>=0) {
-                call("prg.bas.visa", pa.paraArea, "F033");
-                std.crtpos.set(1327);
-                lasFaktDataLoop();
-                return;
-            }
-            std.stdDate.set(std.stdToday);
-            std.stdMan.increment(2);
-            if (std.stdMan.compareTo(12)>0) {
-                std.stdMan.decrement(12);
-                std.stdAr.increment(1);
-            }
-            if (scDdate2.compareTo(std.stdDate)>0) {
-                call("prg.bas.visa", pa.paraArea, "F029");
-            }
-            if (scDdate2.compareTo(scIdate)<0) {
-                call("prg.bas.visa", pa.paraArea, "F031");
-            }
-        }
-        if (pxxStdVal.equals("DKK")) {
-            if (scFaktnr.ref(2,1).equals(":") || scFaktnr.ref(3,1).equals(":")) //  Ref.nr i fakturanumret 
-            {
-                if ((!(scBetkomm1.equals(SPACE)) || !(scBetkomm2.equals(SPACE))) && 
-                        (!scFaktnr.ref(1,3).equalsEither("01:", "41:", "73:", "75:"))) {
-                    call("prg.bas.visa", pa.paraArea, "F041");
-                    std.crtpos.set(1420);
-                    lasFaktDataLoop();
-                    return;
-                }
-                if (!(scBetkomm1.ref(36).equals(SPACE)) || !(scBetkomm2.ref(36).equals(SPACE))) {
-                    call("prg.bas.visa", pa.paraArea, "F045");
-                    std.crtpos.set(1420);
-                    lasFaktDataLoop();
-                    return;
-                }
-            }
-            else {
-                if (scBetkomm1.ref(2,1).equals(":") || scBetkomm1.ref(3,1).equals(":")) //  Ref.nr i bet.komm 
-                {
-                    if (!(scBetkomm1.ref(1,2).equals("4:")) && !(scBetkomm1.ref(1,3).equals("01:")) && !(scBetkomm1.ref(1,3).equals("04:")) && !(scBetkomm1.ref(1,3).equals("15:")) && !(scBetkomm1.ref(1,3).equals("41:")) && !(scBetkomm1.ref(1,3).equals("71:")) && !(scBetkomm1.ref(1,3).equals("73:")) && !(scBetkomm1.ref(1,3).equals("75:"))) {
-                        call("prg.bas.visa", pa.paraArea, "F040");
-                        std.crtpos.set(1420);
-                        lasFaktDataLoop();
-                        return;
-                    }
-                    if (((scBetkomm1.ref(1,2).equals("4:")) && 
-                                (!scBetkomm1.ref(3,19).isNumeric() || !(scBetkomm1.ref(22).equals(SPACE)))) || 
-                            ((scBetkomm1.ref(1,3).equals("04:")) && 
-                             (!scBetkomm1.ref(4,16).isNumeric() || !(scBetkomm1.ref(20).equals(SPACE)))) || 
-                            ((scBetkomm1.ref(1,3).equals("15:")) && 
-                             (!scBetkomm1.ref(4,16).isNumeric() || !(scBetkomm1.ref(20).equals(SPACE)))) || 
-                            ((scBetkomm1.ref(1,3).equals("41:")) && 
-                             (!scBetkomm1.ref(4,10).isNumeric() || !(scBetkomm1.ref(14).equals(SPACE)))) || 
-                            ((scBetkomm1.ref(1,3).equals("71:")) && 
-                             (!scBetkomm1.ref(4,15).isNumeric() || !(scBetkomm1.ref(19).equals(SPACE)))) || 
-                            ((scBetkomm1.ref(1,3).equals("75:")) && 
-                             (!scBetkomm1.ref(4,16).isNumeric() || !(scBetkomm1.ref(20).equals(SPACE))))) {
-                        call("prg.bas.visa", pa.paraArea, "F043");
-                        std.crtpos.set(1420);
-                        lasFaktDataLoop();
-                        return;
-                    }
-                    if ((!(leve.bg.ref(1,2).equals("IK"))) || 
-                            (!leve.bg.ref(3,7).isNumeric()) || 
-                            (!leve.bg.ref(10,1).isNumeric() && !(leve.bg.ref(10,1).equals(SPACE))) || 
-                            (!(leve.bg.ref(11).equals(SPACE))) || 
-                            (!(leve.pg.equals(SPACE))) || 
-                            (!(leve.betsatt.equals("BG")))) {
-                        call("prg.bas.visa", pa.paraArea, "F042");
-                        std.crtpos.set(1420);
-                        lasFaktDataLoop();
-                        return;
-                    }
-                    if ((!(scBetkomm2.equals(SPACE))) && 
-                            (!scBetkomm1.ref(1,3).equalsEither("01:", "41:", "73:", "75:"))) {
-                        call("prg.bas.visa", pa.paraArea, "F041");
-                        std.crtpos.set(1420);
-                        lasFaktDataLoop();
-                        return;
-                    }
-                    if (!(scBetkomm2.ref(36).equals(SPACE))) {
-                        call("prg.bas.visa", pa.paraArea, "F045");
-                        std.crtpos.set(1420);
-                        lasFaktDataLoop();
-                        return;
-                    }
-                }
-                else {
-                    if (leve.betsatt.equals("BG") && leve.bg.ref(1,2).equals("IK")) {
-                        call("prg.bas.visa", pa.paraArea, "F046");
-                        std.crtpos.set(1420);
-                        lasFaktDataLoop();
-                        return;
-                    }
-                }
-            }
-        }
-        if (scKto.equals(SPACE)) {
-            call("prg.bas.visa", pa.paraArea, "F006");
-            std.crtpos.set(2020);
-            lasFaktDataLoop();
-            return;
-        }
-        kont.cbrnType.set("A");
-        kont.cbrnId1.set(scKto);
-        kont.f9803aRead();
-        if (kont.f9803aEof.equals("J")) {
-            call("prg.bas.visa", pa.paraArea, "F003");
-            std.crtpos.set(2020);
-            lasFaktDataLoop();
-            return;
-        }
-        if (kont.cbrnSparr.equals("J")) {
-            call("prg.bas.visa", pa.paraArea, "F008");
-            std.crtpos.set(2020);
-            lasFaktDataLoop();
-            return;
-        }
-        if ((kont.cbrnKst.equalsEither("J", "B")) && 
-                (scKst.equals(SPACE))) {
-            call("prg.bas.visa", pa.paraArea, "F006");
-            std.crtpos.set(1220);
-            lasFaktDataLoop();
-            return;
-        }
-        if (kont.cbrnKbr.equals("J") && scKbr.equals(SPACE)) {
-            call("prg.bas.visa", pa.paraArea, "F006");
-            std.crtpos.set(1227);
-            lasFaktDataLoop();
-            return;
-        }
-        if (!(scKst.equals(SPACE))) {
-            kont.cbrnType.set("E");
-            kont.cbrnId1.set(scKst);
-            kont.f9803aRead();
-            if (kont.f9803aEof.equals("J")) {
-                call("prg.bas.visa", pa.paraArea, "F003");
-                std.crtpos.set(1220);
-                lasFaktDataLoop();
-                return;
-            }
-            if (kont.cbrnSparr.equals("J")) {
-                call("prg.bas.visa", pa.paraArea, "F008");
-                std.crtpos.set(1220);
-                lasFaktDataLoop();
-                return;
-            }
-        }
-        if (!(scKbr.equals(SPACE))) {
-            kont.cbrnType.set("I");
-            kont.cbrnId1.set(scKbr);
-            kont.f9803aRead();
-            if (kont.f9803aEof.equals("J")) {
-                call("prg.bas.visa", pa.paraArea, "F003");
-                std.crtpos.set(1227);
-                lasFaktDataLoop();
-                return;
-            }
-            if (kont.cbrnSparr.equals("J")) {
-                call("prg.bas.visa", pa.paraArea, "F008");
-                std.crtpos.set(1227);
-                lasFaktDataLoop();
-                return;
-            }
-        }
-        if (!scBetsparr.equalsEither(std.stdJa, std.stdNej, "B")) {
-            call("prg.bas.visa", pa.paraArea, "F010");
-            std.crtpos.set(1922);
-            lasFaktDataLoop();
-            return;
-        }
-    }
-
-    private void lasFaktDataSlut() {
-    }
-    // *********************************************************** 
-    // *********************************************************** 
-    // *********************************************************** 
-
-    private void visavarn() {
-        varncook.set(concat("VARN_",varnkod));
-        varnok.set(SPACE);
-        call("prg.bas.webcook", varncook, varnok);
-        if (!(varnok.equals("J"))) {
-            call("prg.bas.webut", "VARNING:%8%S:%0", std.stdText, std.stdText2, varnkod);
-        }
-    }
-
-    private void visafraga() {
-        varncook.set(concat("VARN_",varnkod));
-        varnok.set(SPACE);
-        call("prg.bas.webcook", varncook, varnok);
-        if (varnok.equals(SPACE)) {
-            call("prg.bas.webut", "FRAGA:%8%S:%0", std.stdText, std.stdText2, varnkod);
-            atergang();
-            return;
-        }
-    }
-
--- a/server.src/prg/lev/W36001.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(W36001.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W36001.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(W36001.this);
-    private lib.med.Datab da=new lib.med.Datab(W36001.this);
-    private Field pxxTomedia = new Field("X");
-    private Field scKvitt = new Field("X");
-    private Field scFunk = new Field("9");
-    private Field tmp9 = new Field("9");
-    private Field tmpX = new Field("X");
-    private Field tmp6n = new Field("9(6)");
-    private Field tmp4nD = new Field("ZZZ9");
-    private Field tmpNumD = new Field("ZZZZZZZZ9.99-");
-    private Field tmp30x = new Field("X(30)");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
--- a/server.src/prg/lev/W36002.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(W36002.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W36002.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W36002.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(W36002.this);
-    private lib.med.Datab da=new lib.med.Datab(W36002.this);
-    private Field scFunk = new Field("9");
-    private Field tmp9 = new Field("9");
-    private Field tmpX = new Field("X");
-    private Field tmp6n = new Field("9(6)");
-    private Field exportfilnamn = new Field("X(50)");
--- a/server.src/prg/lev/W36003.java
-    private lib.lev.Lcerpost levlcer=new lib.lev.Lcerpost(W36003.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(W36003.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W36003.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W36003.this);
-    private Field pxxAttKey1 = new Field("ZZ9");
-    private Field pxxAttKey2 = new Field("X(10)");
-    private Field pxxAttKey3 = new Field("XX");
-    private Field pxxAttKey4 = new Field("9(6)");
-    private Field certifikatSaknas = new Field("X");
-    private Field inteck = new Field("X");
-    private Field inteckKey = new Field("999");
-    private Field fel = new Field("X");
-    private Field tmp9 = new Field("9");
-    private Field tmp3nD = new Field("ZZ9");
-    private Field tmp4nD = new Field("ZZZ9");
-    private Field tmpX = new Field("X");
-    private Field tmp2x = new Field("XX");
-    private Field tmp6n = new Field("9(6)");
-    private Field tmp30x = new Field("X(30)");
-    private Field tmp1n = new Field("9");
-    private Field tmpNum2 = new Field("S999999999V99");
-    private Field tmpNumD = new Field("ZZZZZZZZ9.99-");
-    private Field tmp2n = new Field("99");
-    private Field tmp2n2 = new Field("99");
-    private Field tmp2n3 = new Field("99");
-    private Field tmp80x = new Field("X(80)");
--- a/server.src/prg/lev/W36004.java
-    private lib.lev.Parapost levpara=new lib.lev.Parapost(W36004.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W36004.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W36004.this);
-    private Field pxxAntalSelect = new Field("9999");
-    private Field pxxSort = new Field("X");
-    private Field scFunk = new Field("9");
-    private Field tmp4nD = new Field("ZZZ9");
-    private Field validOk = new Field("X");
-    private Field varnkod = new Field("X(20)");
-    private Field varncook = new Field("X(25)");
-    private Field varnok = new Field("X");
-    private void getIdRakna() {
-        if (beta.status.equals("S")) {
-            pxxAntalSelect.increment(1);
-        }
-        beta.f9708Readnext();
-    }
-    // ************************************************************** 
-
-    private void fsort2Read() {
-        fsort2Eof.set("N");
-        fsort2.read();
-        if (fsort2.invalidKey()) {
-            fsort2Eof.set("J");
-        }
-        if (fsort2Fs.equals("9D")) {
-            c_sleep("1");
-            fsort2Read();
-            return;
-        }
-    }
-
--- a/server.src/prg/lev/W36007.java
-    private Field bgcrad = bgcfil.extend("X(80)");
-    private Field pgcrad = pgcfil.extend("X(100)");
-    private Field printerline = lineprinter.extend("X(200)");
-
-    private lib.lev.Blogpost levblog=new lib.lev.Blogpost(W36007.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(W36007.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W36007.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W36007.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(W36007.this);
-    private lib.med.Datab da=new lib.med.Datab(W36007.this);
-    private Field pxxTypVarning = new Field("X");
-    private Field pxxTomedia = new Field("X");
-    private Field pxxAntalSelect = new Field("9(6)");
-    private Field pxxBeloppSelect = new Field("S9(9)V99");
-    private Field pxxListaExist = new Field("X");
-    private Field pxxTyp = new Field("XX");
-    private Field bgcdRubrik = new Field("X(50)");
-    private Field scFunk = new Field("9");



-    private Field startaFel = new Field("9");
-    private Field startaVarning = new Field("9");
-    private Field startaDebet = new Field("S999999999V99");
-    private Field startaKredit = new Field("S999999999V99");
-    private Field startaKreditMax = new Field("S999999999V99");
-    private Field skapaInlPost = new Field("X");
-    private Field bgcFilnamnDisk = new Field("X(50)", "BGCDATA.IN");
-    private Field pgcFilnamnDisk = new Field("X(50)", "PGCDATA.IN");
-    private Field tmpAntalNeg = new Field("9999");
-    private Field tmpBetsatt = new Field("XX");
-    private Field tmpSigX = new Field("99");
-    private Field tmpSigFak = new Field("9");
-    private Field tmpSigSum = new Field("9999");
-    private Field tmpSigPos = new Field("9999");
-    private Field tmpSigKtrl = new Field("9");
-    private Field manOldBetmot = new Field("X(10)");
-    private Field lineNumber = new Field("99");
-    private Field pageNumber = new Field("999", 1);
-    private Field linesAPage = new Field("99", 42);
-    private Field levtransport = new Field("X");
-    private Field levantalFakt = new Field("9(6)");
-    private Field levsumma = new Field("S999999999V99");
-    private Field levvaluta = new Field("XXXX");
-    private Field levsumutl = new Field("S999999999V99");
-    private Field levsummaSatt = new Field("S999999999V99");
-    private Field totsumma = new Field("S999999999V99");
-    private Field totsummaBg = new Field("S999999999V99");
-    private Field totsummaBu = new Field("S999999999V99");
-    private Field totsummaPg = new Field("S999999999V99");
-    private Field totsummaPu = new Field("S999999999V99");
-    private Field totsummaUt = new Field("S999999999V99");
-    private Field totsummaKu = new Field("S999999999V99");
-    private Field totsummaKr = new Field("S999999999V99");
-    private Field tmp4nD = new Field("ZZZ9");
-    private Field tmp9 = new Field("9");
-    private Field tmpX = new Field("X");
-    private Field tmp2x = new Field("XX");
-    private Field tmpHel = new Field("S999999999");
-    private Field tmpNum = new Field("S999999999V99");
-    private Field tmp6n = new Field("9(6)");
-    private Field felnr = new Field("X(4)");
-    private Field windowHandle = new Field("X(10)");
-    private Field returnKod = new Field("9(9)");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
-    private Field varnkod = new Field("X(20)");
-    private Field varncook = new Field("X(25)");
-    private Field varnok = new Field("X");
-    private void visavarn() {
-        varncook.set(concat("VARN_",varnkod));
-        varnok.set(SPACE);
-        call("prg.bas.webcook", varncook, varnok);
-        if (!(varnok.equals("J"))) {
-            call("prg.bas.webut", "VARNING:%S:%0", std.stdText, varnkod);
-        }
-    }
-
-    private void utskrift() {
-        call("prg.bas.strut", exportfilnamn, "W36007.%0", scId);
-        call("prg.bas.cllut", "lst2pdf %0 TMP/%0.pdf", skri.filnamn, exportfilnamn);
-        //     CALL "PRG/BAS/WEBUT" USING "%cPRG/BAS/WEBPDF+%u+w36007.pdf" 4 EXPORTFILNAMN. 
-        try { java.nio.file.Files.createDirectories(java.nio.file.Path.of("DTA", pa.bkstvftg.getStringValue(), "DOK/BETA")); } catch (java.io.IOException ioexc) { ioexc.printStackTrace(); }
-        call("prg.bas.cllut", "cp TMP/%0.pdf DTA/%S/DOK/BETA/%b.pdf", exportfilnamn, pa.bkstvftg, scId);
-    }
-
--- a/server.src/prg/lev/W36007d.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(W36007d.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W36007d.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W36007d.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(W36007d.this);
-    private lib.med.Datab da=new lib.med.Datab(W36007d.this);
-    private Field scRepet = new Field("X");
-    private Field scFlytta = new Field("X");
-    private Field scKvitt = new Field("X");



-    private Field windowHandle = new Field("X(10)");
-    private Field tmp9 = new Field("9");
-    private Field tmpX = new Field("X");
-    private Field tmp2n = new Field("99");
-    private Field tmp2n2 = new Field("99");
-    private Field tmp6n = new Field("9(6)");
-    private Field returnKod = new Field("9(9)");
-    private void gcUppdateraBetafil() {
-    }
-    // ********************************************************** 
-    // ********************************************************** 
-    // ********************************************************** 
-
--- a/server.src/prg/lev/W36007e.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(W36007e.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W36007e.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W36007e.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(W36007e.this);
-    private lib.med.Datab da=new lib.med.Datab(W36007e.this);
-    private Field scRepet = new Field("X");
-    private Field scFlytta = new Field("X");
-    private Field scKvitt = new Field("X");



-    private Field windowHandle = new Field("X(10)");
-    private Field tmp9 = new Field("9");
-    private Field tmpX = new Field("X");
-    private Field tmp2n = new Field("99");
-    private Field tmp2n2 = new Field("99");
-    private Field tmp6n = new Field("9(6)");
-    private Field returnKod = new Field("9(9)");
-    private void gcUppdateraBetafil() {
-    }
-    // ********************************************************** 
-    // ********************************************************** 
-    // ********************************************************** 
-
--- a/server.src/prg/lev/W36007f.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(W36007f.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W36007f.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W36007f.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(W36007f.this);
-    private lib.med.Datab da=new lib.med.Datab(W36007f.this);



-    private Field gcSummasek = new Field("S9999999999V99");
-    private Field bgcFilnamnDisk = new Field("X(50)", "BGCDATA.IN");
-    private Field pgcFilnamnDisk = new Field("X(50)", "PGCDATA.IN");
-    private Field tmpSigX = new Field("99");
-    private Field tmpSigFak = new Field("9");
-    private Field tmpSigSum = new Field("9999");
-    private Field tmpSigPos = new Field("9999");
-    private Field tmpSigKtrl = new Field("9");
-    private Field tmp9 = new Field("9");
-    private Field tmpX = new Field("X");
-    private Field tmp6n = new Field("9(6)");
-    private Field windowHandle = new Field("X(10)");
-    private Field returnKod = new Field("9(9)");
-    private void lasSigill() {
-        if (pxxBetvag.equals(1)) {
-            para.f9705P.set(40);
-        }
-        else {
-            para.f9705P.set(44);
-        }
-        para.f9705Read();
-        scSigill1.ref(1,10).set(para.levparamTxt);
-        if (pxxBetvag.equals(1)) {
-            para.f9705P.set(41);
-        }
-        else {
-            para.f9705P.set(45);
-        }
-        para.f9705Read();
-        scSigill1.ref(11,10).set(para.levparamTxt);
-        if (pxxBetvag.equals(1)) {
-            para.f9705P.set(42);
-        }
-        else {
-            para.f9705P.set(46);
-        }
-        para.f9705Read();
-        scSigill1.ref(21,5).set(para.levparamTxt);
-        if (pxxBetvag.equals(1)) {
-            para.f9705P.set(43);
-        }
-        else {
-            para.f9705P.set(47);
-        }
-        para.f9705Read();
-        tmpSigKtrl.ref(1).set(para.levparamTxt);
-        call("prg.bas.visainm", pa.paraArea, "I012", std.stdText);
-        scSigill2.set(std.stdText);
-        if (!(scSigill2.equals(SPACE))) {
-            if (!scSigill2.isNumeric()) {
-                call("prg.bas.visa", pa.paraArea, "F023");
-                lasSigill();
-                return;
-            }
-            if (tmpSigKtrl.ref(1).isNumeric()) {
-                tmpSigFak.set(2);
-                tmpSigPos.set(1);
-                tmpSigSum.set(ZERO);
-                for (int _t=35; _t>0; _t--) {
-                    tmp9.ref(1).set(scSigill.ref(tmpSigPos,1));
-                    if (tmp9.multiply(tmpSigFak).compareTo(9)>0) {
-                        tmpSigSum.set(tmpSigSum.add(1).add(tmp9.multiply(tmpSigFak).subtract(10)));
-                    }
-                    else {
-                        tmpSigSum.set(tmpSigSum.add(tmp9.multiply(tmpSigFak)));
-                    }
-                    if (tmpSigFak.equals(2)) {
-                        tmpSigFak.set(1);
-                    }
-                    else {
-                        tmpSigFak.set(2);
-                    }
-                    tmpSigPos.increment(1);
-                }
-                if (tmpSigSum.ref(4,1).equals("0")) {
-                    tmpSigX.set(10);
-                }
-                else {
-                    tmpSigX.ref(1,1).set("0");
-                    tmpSigX.ref(2,1).set(tmpSigSum.ref(4,1));
-                }
-                if (!(tmpSigKtrl.add(tmpSigX).equals(10))) {
-                    call("prg.bas.visa", pa.paraArea, "F024");
-                    lasSigill();
-                    return;
-                }
-            }
-        }
-    }
-
-    private void kollaDisk() {
-        call("prg.bas.visa", pa.paraArea, "I014", std.stdText);
-        varnkod.set("I014");
-        visavarn();
-        if (!(varnok.equals("J"))) {
-            startaFel.set(4);
-        }
-    }
-
--- a/server.src/prg/lev/W36007gb.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(W36007gb.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W36007gb.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W36007gb.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(W36007gb.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(W36007gb.this);
-    private lib.med.Datab da=new lib.med.Datab(W36007gb.this);
-    private Field pxxTidDatum = new Field("9(8)");
-    private Field pxxTypVarning = new Field("X");
-    private Field pxxMinDag = new Field("9(6)");
-    private Field xmlFilnamn = new Field("X(50)");
-    private Field datum = new Field("X(10)");
-    private Field scFunk = new Field("9");
-    private Field skapaInlPost = new Field("X");
-    private Field bgcFilnamnDisk = new Field("X(50)", "BGCDATA.IN");
-    private Field pgcFilnamnDisk = new Field("X(50)", "PGCDATA.IN");
-    private Field tmpAntalNeg = new Field("9999");
-    private Field tmpBetsatt = new Field("XX");
-    private Field tmpSigX = new Field("99");
-    private Field tmpSigFak = new Field("9");
-    private Field tmpSigSum = new Field("9999");
-    private Field tmpSigPos = new Field("9999");
-    private Field tmpSigKtrl = new Field("9");
-    private Field levtransport = new Field("X");
-    private Field levantalFakt = new Field("9(6)");
-    private Field levsumma = new Field("S999999999V99");
-    private Field levvaluta = new Field("XXXX");
-    private Field levsumutl = new Field("S999999999V99");
-    private Field levsummaSatt = new Field("S999999999V99");
-    private Field totsumma = new Field("S999999999V99");
-    private Field totsummaBg = new Field("S999999999V99");
-    private Field totsummaBu = new Field("S999999999V99");
-    private Field totsummaPg = new Field("S999999999V99");
-    private Field totsummaPu = new Field("S999999999V99");
-    private Field totsummaUt = new Field("S999999999V99");
-    private Field totsummaKu = new Field("S999999999V99");
-    private Field totsummaKr = new Field("S999999999V99");
-    private Field tmp9 = new Field("9");
-    private Field tmpX = new Field("X");
-    private Field tmp2x = new Field("XX");
-    private Field tmp6n = new Field("9(6)");
-    private Field tmp = new Field("X(200)");
-    private Field windowHandle = new Field("X(10)");
-    private Field exportfilnamn = new Field("X(50)");
--- a/server.src/prg/lev/W36007n.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(W36007n.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W36007n.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W36007n.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(W36007n.this);
-    private lib.med.Datab da=new lib.med.Datab(W36007n.this);
-    private Field bgcFilnamnDisk = new Field("X(50)", "BGCDATA.IN");
-    private Field tmp4nD = new Field("ZZZ9");
-    private Field tmp9 = new Field("9");
-    private Field tmpX = new Field("X");
-    private Field tmp6n = new Field("9(6)");
-    private Field old21Betmot = new Field("X(10)");
-    private Field old21Betsatt = new Field("XX");
-    private Field old21Betdat = new Field("9(8)");
-    private Field windowHandle = new Field("X(10)");
-    private Field returnKod = new Field("9(9)");
--- a/server.src/prg/lev/W36007o.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(W36007o.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W36007o.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W36007o.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(W36007o.this);
-    private lib.med.Datab da=new lib.med.Datab(W36007o.this);



-    private Field skapaInlPost = new Field("X");
-    private Field bgcFilnamnDisk = new Field("X(50)", "BGCDATA.IN");
-    private Field pgcFilnamnDisk = new Field("X(50)", "PGCDATA.IN");
-    private Field tmpSigX = new Field("99");
-    private Field tmpSigFak = new Field("9");
-    private Field tmpSigSum = new Field("9999");
-    private Field tmpSigPos = new Field("9999");
-    private Field tmpSigKtrl = new Field("9");
-    private Field pageNumber = new Field("999", 1);
-    private Field linesAPage = new Field("99", 42);
-    private Field levvaluta = new Field("XXXX");
-    private Field levsumutl = new Field("S999999999V99");
-    private Field tmp9 = new Field("9");
-    private Field tmpX = new Field("X");
-    private Field tmp6n = new Field("9(6)");
-    private Field windowHandle = new Field("X(10)");
-    private Field returnKod = new Field("9(9)");
-    private void lasSigill() {
-        if (pxxBetvag.equals(1)) {
-            para.f9705P.set(40);
-        }
-        else {
-            para.f9705P.set(44);
-        }
-        para.f9705Read();
-        scSigill1.ref(1,10).set(para.levparamTxt);
-        if (pxxBetvag.equals(1)) {
-            para.f9705P.set(41);
-        }
-        else {
-            para.f9705P.set(45);
-        }
-        para.f9705Read();
-        scSigill1.ref(11,10).set(para.levparamTxt);
-        if (pxxBetvag.equals(1)) {
-            para.f9705P.set(42);
-        }
-        else {
-            para.f9705P.set(46);
-        }
-        para.f9705Read();
-        scSigill1.ref(21,5).set(para.levparamTxt);
-        if (pxxBetvag.equals(1)) {
-            para.f9705P.set(43);
-        }
-        else {
-            para.f9705P.set(47);
-        }
-        para.f9705Read();
-        tmpSigKtrl.ref(1).set(para.levparamTxt);
-        call("prg.bas.visainm", pa.paraArea, "I012", std.stdText);
-        scSigill2.set(std.stdText);
-        if (!(scSigill2.equals(SPACE))) {
-            if (!scSigill2.isNumeric()) {
-                call("prg.bas.visa", pa.paraArea, "F023");
-                lasSigill();
-                return;
-            }
-            if (tmpSigKtrl.ref(1).isNumeric()) {
-                tmpSigFak.set(2);
-                tmpSigPos.set(1);
-                tmpSigSum.set(ZERO);
-                for (int _t=35; _t>0; _t--) {
-                    tmp9.ref(1).set(scSigill.ref(tmpSigPos,1));
-                    if (tmp9.multiply(tmpSigFak).compareTo(9)>0) {
-                        tmpSigSum.set(tmpSigSum.add(1).add(tmp9.multiply(tmpSigFak).subtract(10)));
-                    }
-                    else {
-                        tmpSigSum.set(tmpSigSum.add(tmp9.multiply(tmpSigFak)));
-                    }
-                    if (tmpSigFak.equals(2)) {
-                        tmpSigFak.set(1);
-                    }
-                    else {
-                        tmpSigFak.set(2);
-                    }
-                    tmpSigPos.increment(1);
-                }
-                if (tmpSigSum.ref(4,1).equals("0")) {
-                    tmpSigX.set(10);
-                }
-                else {
-                    tmpSigX.ref(1,1).set("0");
-                    tmpSigX.ref(2,1).set(tmpSigSum.ref(4,1));
-                }
-                if (!(tmpSigKtrl.add(tmpSigX).equals(10))) {
-                    call("prg.bas.visa", pa.paraArea, "F024");
-                    lasSigill();
-                    return;
-                }
-            }
-        }
-    }
-
-    private void kollaDisk() {
-        call("prg.bas.visainm", pa.paraArea, "I014", std.stdText);
-        if (!(std.stdText.equals(std.stdJa))) {
-            startaFel.set(4);
-        }
-    }
-
-    private void utlMan() {
-        call("prg.bas.visa", pa.paraArea, "F028");
-        call("prg.bas.visa", pa.paraArea, "H003", std.stdText);
-        head1R1.set(std.stdText);
-        call("prg.bas.visa", pa.paraArea, "H004", std.stdText);
-        head2R1.set(std.stdText);
-        call("prg.bas.visa", pa.paraArea, "H005", std.stdText);
-        head3R1.set(std.stdText);
-        call("prg.bas.visa", pa.paraArea, "H006", std.stdText);
-        head4R1.set(std.stdText);
-        call("prg.bas.visa", pa.paraArea, "H007", std.stdText);
-        head5R1.set(std.stdText);
-        call("prg.bas.visa", pa.paraArea, "H008", std.stdText);
-        head6R1.set(std.stdText);
-        call("prg.bas.visa", pa.paraArea, "H017", std.stdText);
-        head7R1.set(std.stdText);
-        call("prg.bas.visa", pa.paraArea, "H018", std.stdText);
-        head8R1.set(std.stdText);
-        levantalFakt.set(ZERO);
-        levsumma.set(ZERO);
-        levvaluta.set(SPACE);
-        levsumutl.set(ZERO);
-        levsummaSatt.set(ZERO);
-        totsumma.set(ZERO);
-        totsummaBg.set(ZERO);
-        totsummaPg.set(ZERO);
-        totsummaBu.set(ZERO);
-        totsummaPu.set(ZERO);
-        totsummaUt.set(ZERO);
-        totsummaKu.set(ZERO);
-        totsummaKr.set(ZERO);
-        pageNumber.set(0);
-        pxxListaExist.set("N");
-        openDev();
-        beta.id5.set(scId);
-        beta.betsatt5.set(" !");
-        beta.betdat5.set(ZERO);
-        beta.betmot5.set(SPACE);
-        beta.ptyp5.set(SPACE);
-        beta.vernr5.set(ZERO);
-        beta.lopnr5.set(ZERO);
-        beta.f9708Start5();
-        if (beta.f9708Eof.equals("N")) {
-            beta.f9708Readnext5();
-            while (!(beta.f9708Eof.equals("J") || !(beta.id5.equals(scId)) || (beta.status.equals("S") && beta.lopnr.compareTo(500)<0))) 
-                beta.f9708Readnext5();
-        }
-        if (beta.f9708Eof.equals("N") && beta.id5.equals(scId)) {
-            newPage();
-        }
-        while (!(beta.f9708Eof.equals("J") || !(beta.id5.equals(scId)))) 
-            utlManLoop();
-        if ((!(totsummaBg.equals(ZERO))) || 
-                (!(totsummaBu.equals(ZERO))) || 
-                (!(totsummaPg.equals(ZERO))) || 
-                (!(totsummaPu.equals(ZERO))) || 
-                (!(totsummaUt.equals(ZERO))) || 
-                (!(totsummaKu.equals(ZERO))) || 
-                (!(totsummaKr.equals(ZERO)))) {
-            utlManSkrivListsumma();
-        }
-        if (scProvutsk.equals(std.stdNej)) {
-            beta.id5.set(scId);
-            beta.betmot5.set("         !");
-            beta.betsatt5.set(SPACE);
-            beta.betdat5.set(ZERO);
-            beta.ptyp5.set(SPACE);
-            beta.vernr5.set(ZERO);
-            beta.lopnr5.set(ZERO);
-            beta.f9708Start5();
-            if (beta.f9708Eof.equals("N")) {
-                beta.f9708Readnext5();
-            }
-        }
-        if (scProvutsk.equals(std.stdNej)) {
-            call("prg.bas.strut", bgcdRubrik, "MAN %b", scId);
-            call("prg.lev.bgcdfil", pa.paraArea, bgcFilnamn, pxxAntalSelect, pxxBeloppSelect, bgcdRubrik, "MA");
-            while (!(beta.f9708Eof.equals("J") || !(beta.id.equals(scId)))) 
-                utlManUppdateraBetafil();
-        }
-        closeDev();
-        std.stdBlankaMedd();
-    }
-
-    private void utlManUppdateraBetafil() {
-        if (!(beta.status.equals("S"))) {
-            beta.f9708Delete();
-        }
-        else {
-            if (!(beta.betsatt.equals("XX"))) {
-                beta.tomedia.set("J");
-                beta.f9708Write();
-                skapaBlog();
-            }
-        }
-        beta.f9708Readnext5();
-    }
-
-    private void utlManLoop() {
-        if (!(beta.betmot.equals(manOldBetmot))) {
-            newPage();
-        }
-        if (beta.lopnr.compareTo(500)<0) {
-            pxxListaExist.set("J");
-            utlManSkrivFakt();
-        }
-        tmp10x.set(beta.betmot);
-        tmp2x.set(beta.betsatt);
-        beta.f9708Readnext5();
-        while (!(beta.f9708Eof.equals("J") || !(beta.id5.equals(scId)) || (beta.status.equals("S") && beta.lopnr.compareTo(500)<0))) 
-            beta.f9708Readnext5();
-        if ((beta.f9708Eof.equals("J") || !(beta.id5.equals(scId)) || !(beta.betmot.equals(tmp10x))) && 
-                (!(levantalFakt.equals(ZERO)))) {
-            utlManSkrivLevsumma();
-        }
-    }
-
-    private void utlManSkrivFakt() {
-        fakt.llptyp.set(beta.ptyp);
-        fakt.llvernr.set(beta.vernr);
-        fakt.f9702Read();
-        lstrad1.set(SPACE);
-        lst1Levenr.set(beta.srnr);
-        lst1Refnr.set(fakt.llinr);
-        lst1Ptyp.set(beta.ptyp);
-        lst1Vernr.set(beta.vernr);
-        lst1Fdat.set(beta.fdat.ref(3));
-        call("prg.bas.stddatk", lst1Fdat.ref(1,6));
-        if (beta.betdat.equals(new Constant("99999999"))) {
-            lst1Betdat.ref(1).set(SPACE);
-        }
-        else {
-            lst1Betdat.set(beta.betdat.ref(3));
-            call("prg.bas.stddatk", lst1Betdat.ref(1,6));
-        }
-        if (beta.betsatt.equals("XX")) {
-            lst1Betsatt.set("  ");
-        }
-        else {
-            lst1Betsatt.set(beta.betsatt);
-        }
-        if (fakt.llvaluta.equals(pxxStdVal)) {
-            lst1Valuta.set(SPACE);
-            lst1BelUtl.set(ZERO);
-            levvaluta.set("!!!!");
-        }
-        else {
-            lst1Valuta.set(fakt.llvaluta);
-            lst1BelUtl.set(fakt.llibelopp);
-            levsumutl.increment(fakt.llibelopp);
-            if (levvaluta.equals(SPACE)) {
-                levvaluta.set(fakt.llvaluta);
-            }
-            else {
-                if (!(levvaluta.equals(fakt.llvaluta))) {
-                    levvaluta.set("!!!!");
-                }
-            }
-        }
-        lst1BelSek.set(beta.betbel);
-        tmpNum.set(beta.betbel);
-        levantalFakt.increment(1);
-        levsumma.increment(tmpNum);
-        levsummaSatt.increment(tmpNum);
-        totsumma.increment(tmpNum);
-        switch (beta.betsatt.getStringValue()) {
-            case "BG":
-                totsummaBg.increment(tmpNum);
-                break;
-            case "PG":
-                totsummaPg.increment(tmpNum);
-                break;
-            case "BU":
-                totsummaBu.increment(tmpNum);
-                break;
-            case "PU":
-                totsummaPu.increment(tmpNum);
-                break;
-            case "UT":
-                totsummaUt.increment(tmpNum);
-                break;
-            case "KU":
-                totsummaKu.increment(tmpNum);
-                break;
-            case "XX":
-                totsummaKr.increment(tmpNum);
-                break;
-        }
-        printerline.set(lstrad1);
-        printerline.printAfter(1);
-        pageTest();
-    }
-
-    private void utlManSkrivLevsumma() {
-        printerline.set(SPACE);
-        printerline.printAfter(1);
-        pageTest();
-        lstrad2.set(SPACE);
-        call("prg.bas.visa", pa.paraArea, "H010", std.stdText);
-        lst2Text.set(std.stdText);
-        lst2Betsatt.set(SPACE);
-        lst2Summa.set(levsumma);
-        if (!(levvaluta.equals("!!!!"))) {
-            lst2SumVal.set(levvaluta);
-            lst2SumUtl.set(levsumutl);
-        }
-        printerline.set(lstrad2);
-        printerline.printAfter(1);
-        pageTest();
-        printerline.set(SPACE);
-        printerline.printAfter(1);
-        pageTest();
-        levvaluta.set(SPACE);
-        levsumutl.set(ZERO);
-        levantalFakt.set(ZERO);
-        levsumma.set(ZERO);
-    }
-
-    private void utlManSkrivListsumma() {
-        pageNumber.increment(1);
-        std.stdText.set(scId.ref(1));
-        call("prg.bas.visa", pa.paraArea, "H002", std.stdText);
-        std.stdSel.set(std.stdText);
-        lineNumber.set(1);
-        if (pxxBetvag.equals(3)) {
-            call("prg.bas.listhuv", pa.paraArea, "U001", 108, pageNumber, lineNumber, std.stdSel, printerline);
-        }
-        if (pxxBetvag.equals(4)) {
-            call("prg.bas.listhuv", pa.paraArea, "U002", 108, pageNumber, lineNumber, std.stdSel, printerline);
-        }
-        while (!(printerline.equals("EOF"))) {
-            if (lineNumber.equals(1)) {
-                if (pageNumber.equals(1)) {
-                    if (skri.ff.equals("J")) {
-                        printerline.printAfter(0,new String(new char[]{0x0c}));
-                        printerline.printAfter(0);
-                    }
-                    else {
-                        printerline.printAfter(0);
-                    }
-                }
-                else {
-                    printerline.printAfter(0,new String(new char[]{0x0c}));
-                    printerline.printAfter(0);
-                }
-            }
-            else {
-                printerline.printAfter(1);
-            }
-            lineNumber.increment(1);
-            if (pxxBetvag.equals(3)) {
-                call("prg.bas.listhuv", pa.paraArea, "U001", 108, pageNumber, lineNumber, std.stdSel, printerline);
-            }
-            if (pxxBetvag.equals(4)) {
-                call("prg.bas.listhuv", pa.paraArea, "U002", 108, pageNumber, lineNumber, std.stdSel, printerline);
-            }
-        }
-        lineNumber.decrement(1);
-        cancel("prg.bas.listhuv");
-        if (!(totsummaBg.equals(ZERO))) {
-            lstrad2.set(SPACE);
-            call("prg.bas.visa", pa.paraArea, "H011", std.stdText);
-            lst2Text.set(std.stdText);
-            lst2Betsatt.set("BG");
-            lst2Summa.set(totsummaBg);
-            printerline.set(lstrad2);
-            printerline.printAfter(1);
-            pageTest();
-        }
-        if (!(totsummaPg.equals(ZERO))) {
-            lstrad2.set(SPACE);
-            call("prg.bas.visa", pa.paraArea, "H011", std.stdText);
-            lst2Text.set(std.stdText);
-            lst2Betsatt.set("PG");
-            lst2Summa.set(totsummaPg);
-            printerline.set(lstrad2);
-            printerline.printAfter(1);
-            pageTest();
-        }
-        if (!(totsummaBu.equals(ZERO))) {
-            lstrad2.set(SPACE);
-            call("prg.bas.visa", pa.paraArea, "H011", std.stdText);
-            lst2Text.set(std.stdText);
-            lst2Betsatt.set("BU");
-            lst2Summa.set(totsummaBu);
-            printerline.set(lstrad2);
-            printerline.printAfter(1);
-            pageTest();
-        }
-        if (!(totsummaPu.equals(ZERO))) {
-            lstrad2.set(SPACE);
-            call("prg.bas.visa", pa.paraArea, "H011", std.stdText);
-            lst2Text.set(std.stdText);
-            lst2Betsatt.set("PU");
-            lst2Summa.set(totsummaPu);
-            printerline.set(lstrad2);
-            printerline.printAfter(1);
-            pageTest();
-        }
-        if (!(totsummaUt.equals(ZERO))) {
-            lstrad2.set(SPACE);
-            call("prg.bas.visa", pa.paraArea, "H011", std.stdText);
-            lst2Text.set(std.stdText);
-            lst2Betsatt.set("UT");
-            lst2Summa.set(totsummaUt);
-            printerline.set(lstrad2);
-            printerline.printAfter(1);
-            pageTest();
-        }
-        if (!(totsummaKu.equals(ZERO))) {
-            lstrad2.set(SPACE);
-            call("prg.bas.visa", pa.paraArea, "H011", std.stdText);
-            lst2Text.set(std.stdText);
-            lst2Betsatt.set("KU");
-            lst2Summa.set(totsummaKu);
-            printerline.set(lstrad2);
-            printerline.printAfter(1);
-            pageTest();
-        }
-        if (!(totsummaKr.equals(ZERO))) {
-            lstrad2.set(SPACE);
-            call("prg.bas.visa", pa.paraArea, "H012", std.stdText);
-            lst2Text.set(std.stdText);
-            lst2Betsatt.set(SPACE);
-            lst2Summa.set(totsummaKr);
-            printerline.set(lstrad2);
-            printerline.printAfter(1);
-            pageTest();
-        }
-        printerline.set(SPACE);
-        printerline.printAfter(1);
-        pageTest();
-        lstrad2.set(SPACE);
-        call("prg.bas.visa", pa.paraArea, "H013", std.stdText);
-        lst2Text.set(std.stdText);
-        lst2Betsatt.set(SPACE);
-        lst2Summa.set(totsumma);
-        printerline.set(lstrad2);
-        printerline.printAfter(1);
-        pageTest();
-        printerline.set(SPACE);
-        printerline.printAfter(1);
-        pageTest();
-    }
-
-    private void pageTest() {
-        lineNumber.increment(1);
-        if (lineNumber.compareTo(linesAPage)>0) {
-            newPage();
-        }
-    }
-
-    private void newPage() {
-        lineNumber.set(0);
-        manOldBetmot.set(beta.betmot);
-        pageNumber.increment(1);
-        std.stdText.set(scId.ref(1));
-        call("prg.bas.visa", pa.paraArea, "H002", std.stdText);
-        std.stdSel.set(std.stdText);
-        lineNumber.set(1);
-        if (pxxBetvag.equals(3)) {
-            call("prg.bas.listhuv", pa.paraArea, "U001", 108, pageNumber, lineNumber, std.stdSel, printerline);
-        }
-        if (pxxBetvag.equals(4)) {
-            call("prg.bas.listhuv", pa.paraArea, "U002", 108, pageNumber, lineNumber, std.stdSel, printerline);
-        }
-        while (!(printerline.equals("EOF"))) {
-            if (lineNumber.equals(1)) {
-                if (pageNumber.equals(1)) {
-                    if (skri.ff.equals("J")) {
-                        printerline.printAfter(0,new String(new char[]{0x0c}));
-                        printerline.printAfter(0);
-                    }
-                    else {
-                        printerline.printAfter(0);
-                    }
-                }
-                else {
-                    printerline.printAfter(0,new String(new char[]{0x0c}));
-                    printerline.printAfter(0);
-                }
-            }
-            else {
-                printerline.printAfter(1);
-            }
-            lineNumber.increment(1);
-            if (pxxBetvag.equals(3)) {
-                call("prg.bas.listhuv", pa.paraArea, "U001", 108, pageNumber, lineNumber, std.stdSel, printerline);
-            }
-            if (pxxBetvag.equals(4)) {
-                call("prg.bas.listhuv", pa.paraArea, "U002", 108, pageNumber, lineNumber, std.stdSel, printerline);
-            }
-        }
-        lineNumber.decrement(1);
-        cancel("prg.bas.listhuv");
-        head1Betmot.set(beta.betmot);
-        leve.nr.set(beta.betmot);
-        leve.f9701Read();
-        head1Name.set(leve.name);
-        head1Adr1.set(leve.adr1);
-        head1Adr2.set(leve.adr2);
-        head1Adr3.set(leve.adr3);
-        head1Adr4.set(leve.adr4);
-        head1Ctry.set(leve.ctry);
-        head1BgRub.set("BG");
-        head1Bg.set(leve.bg);
-        head1PgRub.set("PG");
-        head1Pg.set(leve.pg);
-        head1Chkkto.set(leve.chkkto);
-        head1Bankkontor.set(leve.bankkontor);
-        head1Bankadress.set(leve.bankadress);
-        head1Landkod.set(leve.landkod);
-        head1Riksbank.set(leve.riksbank);
-        printerline.set(headrad1);
-        printerline.printAfter(1);
-        lineNumber.increment(1);
-        printerline.set(headrad2);
-        printerline.printAfter(1);
-        lineNumber.increment(1);
-        printerline.set(headrad3);
-        printerline.printAfter(1);
-        lineNumber.increment(1);
-        printerline.set(headrad4);
-        printerline.printAfter(1);
-        lineNumber.increment(1);
-        printerline.set(headrad5);
-        printerline.printAfter(1);
-        lineNumber.increment(1);
-        printerline.set(headrad6);
-        printerline.printAfter(1);
-        lineNumber.increment(1);
-        printerline.set(headrad7);
-        printerline.printAfter(1);
-        lineNumber.increment(1);
-        printerline.set(headrad8);
-        printerline.printAfter(1);
-        lineNumber.increment(1);
-        printerline.set(SPACE);
-        printerline.printAfter(1);
-        lineNumber.increment(1);
-        call("prg.bas.visa", pa.paraArea, "H014", std.stdText);
-        printerline.set(std.stdText);
-        call("prg.bas.visa", pa.paraArea, "H015", std.stdText);
-        printerline.ref(38).set(std.stdText);
-        printerline.printAfter(1);
-        lineNumber.increment(1);
-        printerline.set(SPACE);
-        printerline.printAfter(1);
-        lineNumber.increment(1);
-    }
-    // ********************************************************** 
-    // ********************************************************** 
-    // ********************************************************** 
-
--- a/server.src/prg/lev/W36007s.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(W36007s.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W36007s.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W36007s.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(W36007s.this);
-    private lib.med.Datab da=new lib.med.Datab(W36007s.this);



-    private Field bgcFilnamnDisk = new Field("X(50)", "BGCDATA.IN");
-    private Field pgcFilnamnDisk = new Field("X(50)", "PGCDATA.IN");
-    private Field tmpSigX = new Field("99");
-    private Field tmpSigFak = new Field("9");
-    private Field tmpSigSum = new Field("9999");
-    private Field tmpSigPos = new Field("9999");
-    private Field tmpSigKtrl = new Field("9");
-    private Field tmp9 = new Field("9");
-    private Field tmpX = new Field("X");
-    private Field tmp6n = new Field("9(6)");
-    private Field windowHandle = new Field("X(10)");
-    private Field returnKod = new Field("9(9)");
-    private void lasSigill() {
-        if (pxxBetvag.equals(1)) {
-            para.f9705P.set(40);
-        }
-        else {
-            para.f9705P.set(44);
-        }
-        para.f9705Read();
-        scSigill1.ref(1,10).set(para.levparamTxt);
-        if (pxxBetvag.equals(1)) {
-            para.f9705P.set(41);
-        }
-        else {
-            para.f9705P.set(45);
-        }
-        para.f9705Read();
-        scSigill1.ref(11,10).set(para.levparamTxt);
-        if (pxxBetvag.equals(1)) {
-            para.f9705P.set(42);
-        }
-        else {
-            para.f9705P.set(46);
-        }
-        para.f9705Read();
-        scSigill1.ref(21,5).set(para.levparamTxt);
-        if (pxxBetvag.equals(1)) {
-            para.f9705P.set(43);
-        }
-        else {
-            para.f9705P.set(47);
-        }
-        para.f9705Read();
-        tmpSigKtrl.ref(1).set(para.levparamTxt);
-        call("prg.bas.visainm", pa.paraArea, "I012", std.stdText);
-        scSigill2.set(std.stdText);
-        if (!(scSigill2.equals(SPACE))) {
-            if (!scSigill2.isNumeric()) {
-                call("prg.bas.visa", pa.paraArea, "F023");
-                lasSigill();
-                return;
-            }
-            if (tmpSigKtrl.ref(1).isNumeric()) {
-                tmpSigFak.set(2);
-                tmpSigPos.set(1);
-                tmpSigSum.set(ZERO);
-                for (int _t=35; _t>0; _t--) {
-                    tmp9.ref(1).set(scSigill.ref(tmpSigPos,1));
-                    if (tmp9.multiply(tmpSigFak).compareTo(9)>0) {
-                        tmpSigSum.set(tmpSigSum.add(1).add(tmp9.multiply(tmpSigFak).subtract(10)));
-                    }
-                    else {
-                        tmpSigSum.set(tmpSigSum.add(tmp9.multiply(tmpSigFak)));
-                    }
-                    if (tmpSigFak.equals(2)) {
-                        tmpSigFak.set(1);
-                    }
-                    else {
-                        tmpSigFak.set(2);
-                    }
-                    tmpSigPos.increment(1);
-                }
-                if (tmpSigSum.ref(4,1).equals("0")) {
-                    tmpSigX.set(10);
-                }
-                else {
-                    tmpSigX.ref(1,1).set("0");
-                    tmpSigX.ref(2,1).set(tmpSigSum.ref(4,1));
-                }
-                if (!(tmpSigKtrl.add(tmpSigX).equals(10))) {
-                    call("prg.bas.visa", pa.paraArea, "F024");
-                    lasSigill();
-                    return;
-                }
-            }
-        }
-    }
-
-    private void kollaDisk() {
-        call("prg.bas.visainm", pa.paraArea, "I014", std.stdText);
-        if (!(std.stdText.equals(std.stdJa))) {
-            startaFel.set(4);
-        }
-    }
-
--- a/server.src/prg/lev/W36007us.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(W36007us.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W36007us.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W36007us.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(W36007us.this);
-    private lib.med.Datab da=new lib.med.Datab(W36007us.this);
-    private Field pxxTidDatum = new Field("9(8)");
-    private Field pxxTypVarning = new Field("X");
-    private Field pxxMinDag = new Field("9(6)");
-    private Field datum = new Field("X(10)");
-    private Field scFunk = new Field("9");
-    private Field skapaInlPost = new Field("X");
-    private Field bgcFilnamnDisk = new Field("X(50)", "BGCDATA.IN");
-    private Field pgcFilnamnDisk = new Field("X(50)", "PGCDATA.IN");
-    private Field tmpAntalNeg = new Field("9999");
-    private Field tmpBetsatt = new Field("XX");
-    private Field tmpSigX = new Field("99");
-    private Field tmpSigFak = new Field("9");
-    private Field tmpSigSum = new Field("9999");
-    private Field tmpSigPos = new Field("9999");
-    private Field tmpSigKtrl = new Field("9");
-    private Field levtransport = new Field("X");
-    private Field levantalFakt = new Field("9(6)");
-    private Field levvaluta = new Field("XXXX");
-    private Field levsumutl = new Field("S999999999V99");
-    private Field levsummaSatt = new Field("S999999999V99");
-    private Field totsumma = new Field("S999999999V99");
-    private Field totsummaBg = new Field("S999999999V99");
-    private Field totsummaBu = new Field("S999999999V99");
-    private Field totsummaPg = new Field("S999999999V99");
-    private Field totsummaPu = new Field("S999999999V99");
-    private Field totsummaUt = new Field("S999999999V99");
-    private Field totsummaKu = new Field("S999999999V99");
-    private Field totsummaKr = new Field("S999999999V99");
-    private Field tmp9 = new Field("9");
-    private Field tmpX = new Field("X");
-    private Field tmp2x = new Field("XX");
-    private Field tmp6n = new Field("9(6)");
-    private Field windowHandle = new Field("X(10)");
-    private Field exportfilnamn = new Field("X(50)");
--- a/server.src/prg/lev/W36008.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(W36008.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W36008.this);
-    private Field scFunk = new Field("9");
-    private Field numdata = new Field("S9(8)V99");
-    private Field tmp4nD = new Field("ZZZ9");
--- a/server.src/prg/lev/W370.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W370.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W370.this);
-    private void natt() {
-        natt.typ.set("U");
-        natt.lopnr.set(1);
-        natt.f9907Read();
-        while (!(natt.f9907Eof.equals("J"))) 
-            nattLoop();
-        natt.bolag.set(pa.bkstvftg);
-        natt.bfar.set(pa.bfar);
-        natt.anvid.set(pa.anvid);
-        natt.bdate.set(std.stdToday);
-        call("prg.bas.tztid", natt.btime);
-        natt.program.set("PRG/LEV/037001");
-        natt.program2.set("Levsaldo");
-        paMaxDatum.set(scMaxDatum);
-        paMinLevnr.set(scMinLevnr);
-        paMaxLevnr.set(scMaxLevnr);
-        paMinLevkod.set(scMinLevkod);
-        paMaxLevkod.set(scMaxLevkod);
-        paLesort.set(scLesort);
-        paFakttyp.set(scFakttyp);
-        paMinKto.set(scMinKto);
-        paMaxKto.set(scMaxKto);
-        paMinKst.set(scMinKst);
-        paMaxKst.set(scMaxKst);
-        paMinKbr.set(scMinKbr);
-        paMaxKbr.set(scMaxKbr);
-        paMinKat.set(scMinKat);
-        paMaxKat.set(scMaxKat);
-        if (scDetaljer.equals(std.stdJa)) {
-            scDetaljer.set("J");
-        }
-        if (scDetaljer.equals(std.stdNej)) {
-            scDetaljer.set("N");
-        }
-        paDetaljer.set(scDetaljer);
-        if (scDetaljer.equals("J")) {
-            scDetaljer.set(std.stdJa);
-        }
-        if (scDetaljer.equals("N")) {
-            scDetaljer.set(std.stdNej);
-        }
-        if (scBetalda.equals(std.stdJa)) {
-            scBetalda.set("J");
-        }
-        if (scBetalda.equals(std.stdNej)) {
-            scBetalda.set("N");
-        }
-        paBetalda.set(scBetalda);
-        if (scBetalda.equals("J")) {
-            scBetalda.set(std.stdJa);
-        }
-        if (scBetalda.equals("N")) {
-            scBetalda.set(std.stdNej);
-        }
-        paMinDatum.set(scMinDatum);
-        if (scAlder.equals(std.stdJa)) {
-            scAlder.set("J");
-        }
-        if (scAlder.equals(std.stdNej)) {
-            scAlder.set("N");
-        }
-        paAlder.set(scAlder);
-        if (scAlder.equals("J")) {
-            scAlder.set(std.stdJa);
-        }
-        if (scAlder.equals("N")) {
-            scAlder.set(std.stdNej);
-        }
-        if (scNegRest.equals(std.stdJa)) {
-            scNegRest.set("J");
-        }
-        if (scNegRest.equals(std.stdNej)) {
-            scNegRest.set("N");
-        }
-        paNegRest.set(scNegRest);
-        if (scNegRest.equals("J")) {
-            scNegRest.set(std.stdJa);
-        }
-        if (scNegRest.equals("N")) {
-            scNegRest.set(std.stdNej);
-        }
-        if (scEndastBetst.equals(std.stdJa)) {
-            scEndastBetst.set("J");
-        }
-        if (scEndastBetst.equals(std.stdNej)) {
-            scEndastBetst.set("N");
-        }
-        paEndastBetst.set(scEndastBetst);
-        if (scEndastBetst.equals("J")) {
-            scEndastBetst.set(std.stdJa);
-        }
-        if (scEndastBetst.equals("N")) {
-            scEndastBetst.set(std.stdNej);
-        }
-        if (scUtlValuta.equals(std.stdJa)) {
-            scUtlValuta.set("J");
-        }
-        if (scUtlValuta.equals(std.stdNej)) {
-            scUtlValuta.set("N");
-        }
-        paUtlValuta.set(scUtlValuta);
-        if (scUtlValuta.equals("J")) {
-            scUtlValuta.set(std.stdJa);
-        }
-        if (scUtlValuta.equals("N")) {
-            scUtlValuta.set(std.stdNej);
-        }
-        paSkrivare.set(scSkrivare);
-        paAntal.set(scAntal);
-        natt.param.set(paSelect);
-        natt.skrivare.set(scSkrivare);
-        natt.antal.set(scAntal);
-        natt.kdate.set(ZERO);
-        natt.ktime.set(ZERO);
-        natt.utskriven.set("N");
-        natt.bearbetad.set("N");
-        natt.select.set("N");
-        natt.f9907Write();
-        std.colorMeddelande();
-        call("prg.bas.visa", pa.paraArea, "F017");
-    }
-
-    private void nattLoop() {
-        natt.lopnr.increment(1);
-        natt.f9907Read();
-    }
-
--- a/server.src/prg/lev/W371.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W371.this);
-    private Field export7St = new Field("S9(9)");
-    private Field export8St = new Field("S9(9)");
-    private Field fel = new Field("X");
-    private void fakutBetloop() {
-    }
-
--- a/server.src/prg/lev/W372.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(W372.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W372.this);
-    private Field scFunk = new Field("9");
--- a/server.src/prg/lev/W373.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(W373.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(W373.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W373.this);
-    private Field scFunk = new Field("9");
-    private Field getBetdagDagnr = new Field("999");
-    private Field getBetdagAnt = new Field("9(6)");
-    private Field getBetdagFri = new Field("X");
-    private Field getBetdagAr = new Field("9");
-    private Field fel = new Field("X");
-    private Field tmpHel = new Field("S9(9)");
-    private Field validOk = new Field("X");
--- a/server.src/prg/lev/W375.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W375.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W375.this);
-    private Field tmpKol = new Field("99");
-    private Field tmpRub = new Field("X(12)");
-    private Field tmpValue = new Field("S999999999V99");
-    private Field tmpSum = new Field("S999999999V99");
-    private Field sxxTmp = new Field("999999");
-    private Field fel = new Field("X");
-    private void fsortOpenExtend() {
-        fsort.open("EXTEND");
-        if (fsortFs.equals("9A")) {
-            c_sleep("1");
-            fsortOpenExtend();
-            return;
-        }
-        if (!(fsortFs1.equals("0"))) {
-            call("prg.bas.sysfel", fsortId, fsortFs);
-            cancel("prg.bas.sysfel");
-        }
-    }
-
--- a/server.src/prg/lev/Webab.java
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(Webab.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webab.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webab.this, pa);
-    private lib.pro.Ofhupost proofhu=new lib.pro.Ofhupost(Webab.this, pa);
-    private lib.pro.Ofrapost proofra=new lib.pro.Ofrapost(Webab.this, pa);
-    private lib.pro.Ofprpost proofpr=new lib.pro.Ofprpost(Webab.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webab.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webab.this);
-    private lib.pro.Pma1post propma1=new lib.pro.Pma1post(Webab.this, pa);
-    private lib.pro.Budwpost probudw=new lib.pro.Budwpost(Webab.this, pa);
-    private lib.pro.Budapost probuda=new lib.pro.Budapost(Webab.this, pa);
-    private lib.pro.Budipost probudi=new lib.pro.Budipost(Webab.this, pa);
-    private lib.pro.Budopost probudo=new lib.pro.Budopost(Webab.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webab.this, pa);
-    private Field wspaEof = new Field("X", "N");
-    private Field fsortEof = new Field("X", "N");
-    private Field konttip = new Field("X(5000)");



-    private Field tmpBel = new Field("X(50)");

-    private Field ltbetv = new Field("XXX");
-    private Field y = new Field("99999");



-    private Field accBel = new Field("9(9)");
-    private Field accDat = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999");
-    private Field scan26 = new Field("Z(5)9");
-    private Field lstBel = new Field("----B---B--9");
-    private Field lstKod = new Field("999999");
-    private Field wsOmv = new Field("X");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field sel = new Field("X(10)");
-    private Field sor = new Field("X(10)");
-    private Field tmpa = new Field("S9(10)");
-    private Field tmpb = new Field("S9(10)");
-    private Field tmpc = new Field("S9(10)");
-    private Field tmpd = new Field("S9(10)");
-    private Field diff = new Field("S9(10)");
-    private Field lstNum = new Field("ZZ9");
-    private void getNr() {
-        lib.pro.Budwpost.fd budw=probudw.get();
-        budw.nr.set(HIGH_VALUE);
-        pa.recid.set(da.budw);
-        pa.action.set(da.startEm);
-        prorecarea.recArea.set(budw.post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.ok()) {
-            pa.action.set(da.readback);
-            prorecarea.recArea.set(budw.post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            budw.post.set(prorecarea.recArea);
-        }
-        if (pa.ok()) {
-            budw.nr.increment(1);
-        }
-        else {
-            budw.nr.set(1);
-        }
-    }
-
--- a/server.src/prg/lev/Webabu.java
-    private lib.lev.Ankapost levanka=new lib.lev.Ankapost(Webabu.this, pa);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webabu.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmpBelopp = new Field("S9(9)V99");
-    private Field maxInklopnr = new Field("999");
-    private Field dat1Antal = new Field("9(6)");
--- a/server.src/prg/lev/Webar.java
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webar.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webar.this, pa);
-    private lib.pro.Ofhupost proofhu=new lib.pro.Ofhupost(Webar.this, pa);
-    private lib.pro.Ofrapost proofra=new lib.pro.Ofrapost(Webar.this, pa);
-    private lib.pro.Ofprpost proofpr=new lib.pro.Ofprpost(Webar.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webar.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webar.this);
-    private lib.pro.Pma1post propma1=new lib.pro.Pma1post(Webar.this, pa);
-    private lib.pro.Budwpost probudw=new lib.pro.Budwpost(Webar.this, pa);
-    private lib.pro.Budapost probuda=new lib.pro.Budapost(Webar.this, pa);
-    private lib.pro.Budipost probudi=new lib.pro.Budipost(Webar.this, pa);
-    private lib.pro.Budopost probudo=new lib.pro.Budopost(Webar.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webar.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp1 = new Field("X(100)");
-    private Field attkvar = new Field("X(100)");
-    private Field tmpKtonr = new Field("X(50)");
-    private Field tmpPost = new Field("X(10000)");
-    private Field tmpBel = new Field("X(50)");
-    private Field y = new Field("99999");
-    private Field poster = new Field("99999");



-    private Field accBel = new Field("9(9)");
-    private Field accDat = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
--- a/server.src/prg/lev/Webark.java
-    private lib.lev.Ankfpost levankf=new lib.lev.Ankfpost(Webark.this, pa);
-    private lib.lev.Ankapost levanka=new lib.lev.Ankapost(Webark.this, pa);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(Webark.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(Webark.this, pa);
-    private lib.bas.Vahupost basvahu=new lib.bas.Vahupost(Webark.this);
-    private lib.lev.Parapost levpara=new lib.lev.Parapost(Webark.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Webark.this, pa);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Webark.this);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Webark.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webark.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Webark.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Webark.this);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webark.this, pa);
-    private lib.pro.Ofhupost proofhu=new lib.pro.Ofhupost(Webark.this, pa);
-    private lib.pro.Ofrapost proofra=new lib.pro.Ofrapost(Webark.this, pa);
-    private lib.pro.Ofprpost proofpr=new lib.pro.Ofprpost(Webark.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webark.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webark.this);
-    private lib.pro.Pma1post propma1=new lib.pro.Pma1post(Webark.this, pa);
-    private lib.pro.Budwpost probudw=new lib.pro.Budwpost(Webark.this, pa);
-    private lib.pro.Budapost probuda=new lib.pro.Budapost(Webark.this, pa);
-    private lib.pro.Budipost probudi=new lib.pro.Budipost(Webark.this, pa);
-    private lib.pro.Budopost probudo=new lib.pro.Budopost(Webark.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webark.this, pa);
-    private Field tmp2 = new Field("X(100)");
-    private Field tmp3 = new Field("X(100)");
-    private Field attkvar = new Field("X(100)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field tmpAtt = new Field("X(100)");



-    private Field tmpBel = new Field("X(50)");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");



-    private Field accBel = new Field("9(9)");
-    private Field accDat = new Field("9(8)");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999");
-    private Field scan26 = new Field("Z(5)9");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field wsOmv = new Field("X");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field attestorok = new Field("X");
-    private Field attestorkvar = new Field("X");
-    private Field andraattestorerkvar = new Field("X");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field sel = new Field("X(10)");
-    private Field tmpKomm = new Field("X(100)");
-    private Field tmpJ = new Field("X");
-    private Field tmpKurs = new Field("999999V9999");
-    private Field tmpKursAntal = new Field("999999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field attmaila = new Field("X(1000)");
-    private Field oldBelopp = new Field("S9(10)V99");
-    private Field oldMoms = new Field("S9(10)V99");
-    private Field oldValuta = new Field("XXX");
-    private Field oldSbelopp = new Field("S9(10)V99");
-    private Field oldSmoms = new Field("S9(10)V99");
-    private Field exitStatus = new Field("99");
-    private Field ulNamn = new Field("X(50)");
-    private void skrivLevparam() {
-        lib.lev.Levepost.fd leve=levleve.get();
-        leve.f9701OpenInput();
-        leve.record.init();
-        leve.nr.set(p1);
-        leve.f9701Read();
-        call(webpara.webut, "%S %c", leve.valuta, 9);
-        call(webpara.webut, "%S %c", leve.kst, 9);
-        call(webpara.webut, "%S %c", leve.kbr, 9);
-        call(webpara.webut, "%0%c", leve.betdagtyp, 9);
-        call(webpara.webut, "%0%c", leve.betdag, 9);
-        call(webpara.webut, "%0%c", leve.kkto, 9);
-        leve.f9701Close();
-    }
-    //     MOVE FTG TO PA-BKSTVFTG. 
-    // SAETT-LEVFTG. 
-    //     INITIALIZE            M-MEDARID-G 
-    //     MOVE MEDARB TO M-MEDARID 
-    //     MOVE DA-MEDA       TO PA-RECID 
-    //     MOVE DA-READ   TO PA-ACTION 
-    //     MOVE MEDA-POST     TO REC-AREA 
-    //     CALL "PRG/PRO/04921" USING PARA-AREA REC-AREA 
-    //     MOVE REC-AREA      TO MEDA-POST 
-    //     IF PA-OK 
-    //        INITIALIZE            D-KEY 
-    //        MOVE "U"           TO D-TYPKK 
-    //        MOVE M-GRPTHT TO D-GRUPP 
-    //        MOVE DA-DEFK       TO PA-RECID 
-    //        MOVE DA-READ   TO PA-ACTION 
-    //        MOVE DEFK-POST     TO REC-AREA 
-    //        CALL "PRG/PRO/04921" USING PARA-AREA REC-AREA 
-    //        MOVE REC-AREA      TO DEFK-POST 
-    //        IF PA-OK AND D-KAMFTG > SPACE 
-    //           MOVE D-KAMFTG TO PA-BKSTVFTG 
-    //        END-IF 
-    //     END-IF. 
-
-    private void skrivBasvalutabelopp() {
-        lib.lev.Ankfpost.fd ankf=levankf.get();
-        ankf.post.init();
-        acceptFrom("CONSOLE",post);
-        unstring(post,new Object[]{"\t"},ankf.anknr,ankf.levnr,ankf.levnamn2,ankf.faktnr,ankf.faktdat,ankf.ffdat,tmpX1,tmpX2,ankf.valuta,tmpAtt,ankf.kst,ankf.kbr,ankf.bfdat);
-        tmpX.convert(".",",");
-        ankf.belopp.setWithConversion(tmpX1);
-        ankf.moms.setWithConversion(tmpX2);
-        call("prg.bas.stdval", "K", ankf.valuta, "L", tmpKurs, tmpKursAntal);
-        ankf.sbelopp.set(ankf.belopp.multiply(tmpKurs).divide(tmpKursAntal), ROUND_HALF_UP);
-        ankf.smoms.set(ankf.moms.multiply(tmpKurs).divide(tmpKursAntal), ROUND_HALF_UP);
-        call(webpara.webut, "%B%c", ankf.sbelopp, 9);
-        call(webpara.webut, "%B%c", ankf.smoms, 9);
-    }
-
-    private void skrivValuta() {
-        lib.bas.Vahupost.fd vahu=basvahu.get();
-        poster.set(0);
-        vahu.openIO();
-        vahu.key.init();
-        vahu.start();
-        if (vahu.eof.equals("N")) {
-            vahu.readnext();
-        }
-        while (!(vahu.eof.equals("J"))) {
-            if (p1.equalsEither(SPACE, vahu.kod)) //             IF VAHU-NAME = SPACE MOVE VAHU-KOD TO VAHU-NAME END-IF 
-            {
-                call(webpara.websort, "%8 %S%c%8%c", vahu.kod, vahu.name, 9, vahu.kod, 9);
-                poster.increment(1);
-            }
-            vahu.readnext();
-        }
-        call(webpara.webut, "%b", poster);
-        call(webpara.websort);
-    }
-
-    private void skrivFrameset() {
-        call(webpara.webut, "<HTML>");
-        call(webpara.webut, "<HEAD>");
-        call(webpara.webut, "<TITLE>");
-        call(webpara.webut, "MARATHON PL - ATTEST");
-        call(webpara.webut, "</TITLE>");
-        call(webpara.webut, "</HEAD>");
-        call(webpara.webut, "<FRAMESET ROWS=50,* border=0>");
-        call(webpara.webut, "   <FRAME SRC='%0?PRG/LEV/WEBAR+%0' NAME=u scrolling=no>", path, "U");
-        call(webpara.webut, "   <FRAME SRC='%0?PRG/LEV/WEBAR+%0' NAME=h marginwidth=0 marginheight=0 style='margin:0' scrolling=no>", path, "H");
-        call(webpara.webut, "</FRAMESET>");
-    }
-
-    private void skrivHframe() {
-        call(webpara.webut, "<html><head>");
-        call(webpara.webut, "</head>");
-        if (webpara.msie.equals("J") && webpara.mac.equals("J") && p2.equals(SPACE)) {
-            call(webpara.webut, "</head><body></body>");
-            call(webpara.webut, "<script>");
-            call(webpara.webut, "location=location+'+%0+'+document.body.clientWidth+'+'+document.body.clientHeight", p1);
-            call(webpara.webut, "</script>");
-        }
-        call(webpara.webut, "<body>");
-        call(webpara.webut, "<applet MAYSCRIPT");
-        tmp80.set(SPACE);
-        acceptFrom(" FROM  ENVIRONMENT ","EXTERNALIP",tmp80);
-        if (tmp80.compareTo(SPACE)>0) {
-            acceptFrom(" FROM  ENVIRONMENT ","HTTPS",tmp);
-            if (tmp.ref(1,2).equals("on")) {
-                call(webpara.webut, "    codebase=%chttps://%0/java%c", 34, tmp80, 34);
-            }
-            else {
-                call(webpara.webut, "    codebase=%chttp://%0/java%c", 34, tmp80, 34);
-            }
-        }
-        else {
-            call(webpara.webut, "    codebase=/java");
-        }
-        call(webpara.webut, "    code=ar.ar");
-        call(webpara.webut, "    archive=ar.jar");
-        call(webpara.webut, "    name=ar");
-        if (webpara.msie.equals("J") && webpara.mac.equals("J")) {
-            call(webpara.webut, "    width=%0", p2);
-            call(webpara.webut, "    height=%0>", p3);
-        }
-        else {
-            call(webpara.webut, "    width=100%");
-            call(webpara.webut, "    height=100%>");
-        }
-        //     CALL WEBUT USING "    <param name=modul value='ou'>" 
-        call(webpara.webut, "    <param name=session value='%0'>", webpara.sessionId);
-        call(webpara.webut, "    <param name=medarb value='%8'>", webpara.medarb);
-        call(webpara.webut, "    <param name=userid value='%0'>", webpara.userid);
-        call(webpara.webut, "    <param name=pass value=''>");
-        call(webpara.webut, "    <param name=logg value='%0'>", webpara.loggr);
-        call(webpara.webut, "    <param name=ftg value='%0'>", webpara.kamftg);
-        //     CALL WEBUT USING "    <param name=anknr value='%0'>" P1 
-        if (std.operatingSystem.ref(1,3).equals("WIN")) {
-            call(webpara.webut, "    <param name=cgirun value='/cgi-bin/run.bat'>");
-        }
-        call(webpara.webut, "<br><span style='color:red'> %m </span><br><br>", "NJB");
-        call(webpara.webut, "</applet>");
-        call(webpara.webut, "</BODY></HTML>");
-    }
-
-    private void skrivUframe() {
-        call(webpara.webut, "<html><head>");
-        call(webpara.webut, webpara.stil);
-        call(webpara.webut, "</head>");
-        call(webpara.webut, "<body class=upp>");
-        call("prg.pro.webhist", "0ar");
-    }
-
-    private void skrivLista() {
-        lib.lev.Ankfpost.fd ankf=levankf.get();
-        lib.lev.Levepost.fd leve=levleve.get();
-        poster.set(0);
-        ankf.post.init();
-        ankf.key.set(HIGH_VALUE);
-        ankf.klar.set(SPACE);
-        ankf.openInput();
-        leve.f9701OpenInput();
-        ankf.startprevK2();
-        if (ankf.eof.equals("N")) {
-            ankf.readprevK2();
-        }
-        while (ankf.eof.equals("N")) {
-            leve.record.init();
-            leve.nr.set(ankf.levnr);
-            leve.f9701Read();
-            tmp.set(SPACE);
-            tmp.ref(10).set(leve.name);
-            tmp.ref(40).set(ankf.faktnr);
-            tmp.ref(66).set(ankf.faktdat.ref(1,4));
-            tmp.ref(70).set("-");
-            tmp.ref(71).set(ankf.faktdat.ref(5,2));
-            tmp.ref(73).set("-");
-            tmp.ref(74).set(ankf.faktdat.ref(7,2));
-            lstBel.set(ankf.belopp);
-            tmp.ref(77).set(lstBel);
-            if (poster.compareTo(15)<0 || ankf.regdat.equals(webpara.today)) {
-                call(webpara.websort, "%0 %0%c%8%c", ankf.anknr, tmp.ref(10,100), 9, ankf.key, 9);
-                poster.increment(1);
-            }
-            ankf.readprevK2();
-        }
-        ankf.close();
-        leve.f9701Close();
-        call(webpara.webut, "%b", poster);
-        call(webpara.websort);
-    }
-
-    private void pattkvar() {
-        lib.lev.Ankapost.fd anka=levanka.get();
-        lib.lev.Ankfpost.fd ankf=levankf.get();
-        attkvar.set(SPACE);
-        attestorok.set("N");
-        attestorkvar.set("N");
-        andraattestorerkvar.set("N");
-        anka.post.init();
-        anka.anknr.set(ankf.anknr);
-        anka.openInput();
-        if (anka.fs.equals("00")) {
-            anka.start();
-        }
-        else {
-            anka.eof.set("J");
-        }
-        if (anka.eof.equals("N")) {
-            anka.readnext();
-        }
-        while (!(anka.eof.equals("J") || !(anka.anknr.equals(ankf.anknr)))) {
-            if (anka.attestor.equals(webpara.userid)) {
-                attestorok.set("J");
-            }
-            if (anka.attesterat.equals(SPACE)) {
-                if (anka.attestor.equals(webpara.userid)) {
-                    attestorkvar.set("J");
-                }
-                else {
-                    andraattestorerkvar.set("J");
-                }
-                attkvar.set(concat(limit(attkvar,SPACE),",",limit(anka.attestor,SPACE)));
-            }
-            anka.readnext();
-        }
-        anka.close();
-    }
-
-    private void skrivAnk() {
-        lib.lev.Ankfpost.fd ankf=levankf.get();
-        lib.lev.Levepost.fd leve=levleve.get();
-        lib.lev.Ankapost.fd anka=levanka.get();
-        ankf.post.init();
-        ankf.openInput();
-        if (p1.equals(SPACE)) {
-            ankf.key.set(HIGH_VALUE);
-            ankf.startprevK2();
-            ankf.readprevK2();
-            ankf.data.init();
-            ankf.anknr.increment(1);
-            call(webpara.webut, "%0%c\\", ankf.anknr, 9);
-            call(webpara.webut, "%0 %c\\", ankf.levnr, 9);
-            call(webpara.webut, "%S %c\\", ankf.levnamn2, 9);
-            call(webpara.webut, "%S %c%0%c%0%c\\", ankf.faktnr, 9, ankf.faktdat.ref(3), 9, ankf.ffdat.ref(3), 9);
-            call(webpara.webut, "%B%c%B%c%8%c\\", ankf.belopp, 9, ankf.moms, 9, ankf.valuta, 9);
-            ankf.close();
-            return;
-        }
-        ankf.key.set(p1);
-        ankf.read();
-        ankf.close();
-        if (ankf.klar.equals("J")) {
-            call(webpara.webut, "FEL: %s", "Bokförd");
-            return;
-        }
-        if (ankf.klar.equals("R")) {
-            call(webpara.webut, "FEL: %s", "Raderad");
-            return;
-        }
-        leve.f9701OpenInput();
-        leve.record.init();
-        leve.nr.set(ankf.levnr);
-        leve.f9701Read();
-        leve.f9701Close();
-        call("prg.bas.webreg", "VALU", ankf.valuta, ulNamn);
-        call(webpara.webut, "%8%0%c\\", ankf.klar, ankf.anknr, 9);
-        call(webpara.webut, "%0%c%8%c\\", ankf.levnr, 1, leve.name, 9);
-        call(webpara.webut, "%S %c\\", ankf.levnamn2, 9);
-        call(webpara.webut, "%S %c%0%c%0%c\\", ankf.faktnr, 9, ankf.faktdat.ref(3), 9, ankf.ffdat.ref(3), 9);
-        call(webpara.webut, "%B%c%B%c%8%c%8%c\\", ankf.belopp, 9, ankf.moms, 9, ankf.valuta, 1, ulNamn, 9);
-        anka.post.init();
-        anka.anknr.set(ankf.anknr);
-        anka.openInput();
-        if (anka.fs.equals("00")) {
-            anka.start();
-        }
-        else {
-            anka.eof.set("J");
-        }
-        if (anka.eof.equals("N")) {
-            anka.readnext();
-        }
-        forsta.set("J");
-        while (!(anka.eof.equals("J") || !(anka.anknr.equals(ankf.anknr)))) {
-            if (!(forsta.equals("J"))) {
-                call(webpara.webut, ",\\");
-            }
-            call(webpara.webut, "%S\\", anka.attestor);
-            forsta.set("N");
-            anka.readnext();
-        }
-        call(webpara.webut, " %c%8%c%8%c%0%c", 9, ankf.kst, 9, ankf.kbr, 9, ankf.bfdat.ref(3), 9);
-        skrivAnkr();
-    }
-
-    private void skrivAnkr() {
-    }
-
-    private void skrivRadera() {
-        lib.lev.Ankfpost.fd ankf=levankf.get();
-        ankf.openIO();
-        //     PERFORM ANKR-OPEN-I-O 
-        //     PERFORM ANKA-OPEN-I-O 
-        ankf.post.init();
-        ankf.key.set(p1);
-        ankf.read();
-        if (ankf.klar.equals("J")) {
-            call(webpara.webut, "FEL: %s", "Bokförd");
-            return;
-        }
-        if (ankf.klar.equals("R")) {
-            call(webpara.webut, "FEL: %s", "Raderad");
-            return;
-        }
-        if (ankf.lasAnva.equals(SPACE)) {
-            call(webpara.webut, "FEL: %m", "Ult");
-            return;
-        }
-        if (!(ankf.lasAnva.equals(webpara.userid))) {
-            call(webpara.webut, "FEL: %m (%S)", "Fup", ankf.lasAnva);
-            return;
-        }
-        if (ankf.oppnad.equals("J") && !(p2.equals("J"))) {
-            call(webpara.webut, "FEL: %m", "Apa");
-            return;
-        }
-        ankf.klar.set("R");
-        ankf.lasAnva.set(SPACE);
-        ankf.lasTid.set(SPACE);
-        ankf.lasDat.set(SPACE);
-        ankf.write();
-        //     PERFORM ANKF-DELETE 
-        //     PERFORM RADERAAR 
-        display("UPONSYSOUT","OK","\t","\n");
-    }
-
-    private void raderaankr() {
-        lib.lev.Ankfpost.fd ankf=levankf.get();
-        lib.lev.Ankrpost.fd ankr=levankr.get();
-        ankr.anknr.set(ankf.anknr);
-        ankr.eof.set("N");
-        while (!(ankr.eof.equals("J") || !(ankr.anknr.equals(ankf.anknr)))) {
-            ankr.post.init();
-            ankr.key.set(ankf.anknr);
-            ankr.start();
-            if (ankr.eof.equals("N")) {
-                ankr.readnext();
-            }
-            if (ankr.eof.equals("N") && ankr.anknr.equals(ankf.anknr)) {
-                ankr.delete();
-            }
-            else {
-                ankr.eof.set("J");
-            }
-        }
-    }
-
-    private void raderaanka() {
-        lib.lev.Ankapost.fd anka=levanka.get();
-        lib.lev.Ankfpost.fd ankf=levankf.get();
-        anka.eof.set("N");
-        anka.post.init();
-        anka.key.set(ankf.anknr);
-        anka.start();
-        if (anka.eof.equals("N")) {
-            anka.readnext();
-        }
-        while (!(anka.eof.equals("J") || !(anka.anknr.equals(ankf.anknr)))) {
-            z.set(0);
-            z.increment(anka.attestor.countBefore(SPACE));
-            tmp.set(anka.attestor);
-            y.set(0);
-            y.increment(tmpAtt.count(tmp.ref(1,z.add(1))));
-            tmp.ref(z.add(1)).set(",");
-            y.increment(tmpAtt.count(tmp.ref(1,z.add(1))));
-            if (y.equals(0)) {
-                anka.delete();
-                anka.start();
-            }
-            if (anka.eof.equals("N")) {
-                anka.readnext();
-            }
-        }
-    }
-
-    private void skrivSpara() {
-        lib.lev.Ankfpost.fd ankf=levankf.get();
-        lib.lev.Faktpost.fd fakt=levfakt.get();
-        lib.lev.Ankapost.fd anka=levanka.get();
-        lib.bas.Medapost.fd meda=basmeda.get();
-        lib.lev.Ankrpost.fd ankr=levankr.get();
-        ankf.openIO();
-        ankf.post.init();
-        acceptFrom("CONSOLE",post);
-        unstring(post,new Object[]{"\t"},ankf.anknr,ankf.levnr,ankf.levnamn2,ankf.faktnr,ankf.faktdat,ankf.ffdat,tmpX1,tmpX2,ankf.valuta,tmpAtt,ankf.kst,ankf.kbr,ankf.bfdat);
-        ankf.read();
-        oldBelopp.set(ankf.belopp);
-        oldMoms.set(ankf.moms);
-        oldValuta.set(ankf.valuta);
-        oldSbelopp.set(ankf.sbelopp);
-        oldSmoms.set(ankf.smoms);
-        if (p1.equals("J")) {
-            if (ankf.fs.equals("00") && !(ankf.klar.equals("R"))) //           CALL WEBUT USING "FEL: %s" "Ankomstnummer redan registrerat" 
-            {
-                call(webpara.webut, "FEL: %m", "240");
-                return;
-            }
-            scan26.set(ankf.anknr);
-            tmp80.set(scan26);
-            c_justify(tmp80, "L");
-            tmp.set(SPACE);
-            tmp.set(concat("testscan ",limit(webpara.kamftg,SPACE),limit("-AT-",SPACE),limit(tmp80,SPACE)));
-            exitStatus.set(getCall(std.unixSystem, tmp, "NO I-O"));
-            if (!(exitStatus.equals(0))) {
-                call(webpara.webut, "FEL: %m", "Ein");
-                return;
-            }
-        }
-        else {
-            if (ankf.klar.equals("J")) //           CALL WEBUT USING "FEL: %s" "Bokförd" 
-            {
-                call(webpara.webut, "FEL: %m", "236");
-                return;
-            }
-            if (ankf.klar.equals("R")) //           CALL WEBUT USING "FEL: %s" "Raderad" 
-            {
-                call(webpara.webut, "FEL: %m", "237");
-                return;
-            }
-            if (!(ankf.lasAnva.equals(webpara.userid))) {
-                call(webpara.webut, "FEL: %m (%S)", "238", ankf.lasAnva);
-                return;
-            }
-            if (ankf.oppnad.equals("J") && !(p2.equals("J"))) //           CALL WEBUT USING "FEL: %S" "Får ej ändras - attest påbörjad." 
-            {
-                call(webpara.webut, "FEL: %m", "239");
-                return;
-            }
-        }
-        //     IF P1 = "J" AND NOT P3 = "J" 
-        if (!(p3.equals("J"))) {
-            fakt.f9702OpenIO();
-            tmpDatum1.set(ZERO);
-            fakt.llinr.set(ankf.faktnr);
-            fakt.llsrnr.set(ankf.levnr);
-            fakt.f9702Start4();
-            if (fakt.f9702Eof.equals("N")) {
-                fakt.f9702Readnext4();
-            }
-            while (!(fakt.f9702Eof.equals("J") || !(fakt.llinr.equals(ankf.faktnr)) || !(fakt.llsrnr.equals(ankf.levnr)))) {
-                if (fakt.llidate.compareTo(tmpDatum1)>0 && !(fakt.llanknr.equals(ankf.anknr))) {
-                    tmpDatum1.set(fakt.llidate);
-                }
-                fakt.f9702Readnext4();
-            }
-            if (tmpDatum1.compareTo(ZERO)>0) {
-                call(webpara.webut, "VARNING:FNRFIN%D%c", tmpDatum1, 9);
-                return;
-            }
-            tmp2.set(ankf.faktnr);
-            tmp3.set(ankf.anknr);
-            ankf.post.init();
-            ankf.key.init();
-            ankf.klar.set(SPACE);
-            ankf.startK2();
-            if (ankf.eof.equals("N")) {
-                ankf.readnextK2();
-            }
-            while (!(!(ankf.eof.equals("N")) || !(ankf.klar.equals(SPACE)) || ankf.faktnr.equals(tmp2))) {
-                ankf.readnextK2();
-            }
-            if (ankf.eof.equals("N") && ankf.faktnr.equals(tmp2) && !(ankf.anknr.equals(tmp3))) {
-                call(webpara.webut, "VARNING:FNRFIN%D%c", ankf.faktdat, 9);
-                return;
-            }
-        }
-        ankf.post.init();
-        unstring(post,new Object[]{"\t"},ankf.anknr,ankf.levnr,ankf.levnamn2,ankf.faktnr,ankf.faktdat,ankf.ffdat,tmpX1,tmpX2,ankf.valuta,tmpAtt,ankf.kst,ankf.kbr,ankf.bfdat);
-        call("prg.bas.std1920", ankf.faktdat);
-        call("prg.bas.std1920", ankf.ffdat);
-        call("prg.bas.std1920", ankf.bfdat);
-        tmpX.convert(".",",");
-        ankf.belopp.setWithConversion(tmpX1);
-        ankf.moms.setWithConversion(tmpX2);
-        ankf.regdat.set(webpara.today);
-        //     PERFORM F9705-OPEN-I-O 
-        //     MOVE 110 TO F9705-P. 
-        //     PERFORM F9705-READ. 
-        //     IF F9705-EOF = "N" AND LEVPARAM-TXT = "J" 
-        //        PERFORM F9800-OPEN-I-O 
-        //        MOVE 8 TO F9800-P 
-        //        PERFORM F9800-READ 
-        //        IF F9800-EOF = "N" 
-        //           COMPUTE TMP-BELOPP = ANKF-BELOPP * (1 - 1 / (1 + BOOKPARAM-PROC / 100)) 
-        //           IF ANKF-MOMS - TMP-BELOPP > 5 OR TMP-BELOPP - ANKF-MOMS > 5 
-        //              CALL WEBUT USING "FEL: %S" "Felaktigt momsbelopp" 
-        //              EXIT PARAGRAPH 
-        //           END-IF 
-        //        END-IF 
-        //     END-IF 
-        //     IF ANKF-MOMS > 0 AND ANKF-BELOPP < 0 OR ANKF-MOMS < 0 AND ANKF-BELOPP > 0 
-        //        CALL WEBUT USING "FEL: %S" "Felaktigt momsbelopp" 
-        //        EXIT PARAGRAPH 
-        //     END-IF 
-        if (!(ankf.belopp.equals(oldBelopp)) || !(ankf.moms.equals(oldMoms)) || !(ankf.valuta.equals(oldValuta))) {
-            call("prg.bas.stdval", "K", ankf.valuta, "L", tmpKurs, tmpKursAntal);
-            ankf.sbelopp.set(ankf.belopp.multiply(tmpKurs).divide(tmpKursAntal), ROUND_HALF_UP);
-            ankf.smoms.set(ankf.moms.multiply(tmpKurs).divide(tmpKursAntal), ROUND_HALF_UP);
-        }
-        else {
-            ankf.sbelopp.set(oldSbelopp);
-            ankf.smoms.set(oldSmoms);
-        }
-        if (p2.equals("J")) {
-            ankf.lasAnva.set(webpara.userid);
-            ankf.lasTid.set(webpara.now.ref(1,4));
-            ankf.lasDat.set(webpara.today);
-        }
-        ankf.write();
-        anka.openIO();
-        raderaanka();
-        anka.post.init();
-        anka.anknr.set(ankf.anknr);
-        anka.skapad.set(webpara.today);
-        meda.f9903OpenInput();
-        ptr.set(1);
-        unstring(tmpAtt,ptr,new Object[]{",",SPACE},anka.attestor);
-        while (!(ptr.compareTo(100)>0 || anka.attestor.equals(SPACE))) {
-            meda.record.init();
-            meda.kod.set(anka.attestor);
-            meda.f9903Read();
-            if (meda.f9903Eof.equals("J")) //           CALL WEBUT USING "FEL: %S" "Felaktig attestör" 
-            {
-                call(webpara.webut, "FEL: %m", "241");
-                return;
-            }
-            anka.writenew();
-            unstring(tmpAtt,ptr,new Object[]{",",SPACE},anka.attestor);
-        }
-        anka.close();
-        tmpBelopp.set(ankf.sbelopp.subtract(ankf.smoms));
-        ankr.openIO();
-        acceptFrom("CONSOLE",post);
-        if (!(post.equals("-hoppa-"))) {
-            raderaankr();
-            ankr.post.init();
-            ankr.anknr.set(ankf.anknr);
-            ankr.typ.set("P");
-            ankr.lnr.set(0);
-            while (!(post.equals(SPACE))) {
-                unstring(post,new Object[]{"\t"},ankr.rekv,ankr.kundid,ankr.projlnr,ankr.kod,tmpX1,tmpX2,tmpX3,ankr.text);
-                tmpX.convert(".",",");
-                ankr.inpris.setWithConversion(tmpX1);
-                ankr.pal.setWithConversion(tmpX2);
-                ankr.utpris.setWithConversion(tmpX3);
-                if (!(ankr.inpris.equals(0))) {
-                    ankr.write();
-                    ankr.lnr.increment(1);
-                }
-                acceptFrom("CONSOLE",post);
-            }
-        }
-        acceptFrom("CONSOLE",post);
-        if (!(post.equals("-hoppa-"))) {
-            lnr.set(ankr.lnr);
-            ankr.post.init();
-            ankr.anknr.set(ankf.anknr);
-            ankr.typ.set("O");
-            ankr.lnr.set(lnr);
-            while (!(post.equals(SPACE))) {
-                unstring(post,new Object[]{"\t"},ankr.kto,ankr.kst,ankr.kbr,tmpX1,tmpX4,tmpX5);
-                ankr.perfr.set(SPACE);
-                ankr.perti.set(SPACE);
-                ankr.perfr.ref(3).set(tmpX4.ref(1,6));
-                ankr.perti.ref(3).set(tmpX5.ref(1,6));
-                call("prg.bas.std1920", ankr.perfr);
-                call("prg.bas.std1920", ankr.perti);
-                tmpX.convert(".",",");
-                ankr.inpris.setWithConversion(tmpX1);
-                if (!(ankr.inpris.equals(0))) {
-                    ankr.write();
-                    ankr.lnr.increment(1);
-                }
-                acceptFrom("CONSOLE",post);
-            }
-        }
-        acceptFrom("CONSOLE",post);
-        if (post.equals("-slut-")) {
-            call(webpara.webut, "OK%c%B", 9, tmpBelopp);
-        }
-        else {
-            ankf.lasAnva.set(webpara.userid);
-            ankf.lasTid.set(webpara.now.ref(1,4));
-            ankf.lasDat.set(webpara.today);
-            ankf.write();
-            call(webpara.webut, "FEL%c", 9);
-        }
-    }
-
-    private void maila() {
-        lib.bas.Medapost.fd meda=basmeda.get();
-        lib.lev.Ankfpost.fd ankf=levankf.get();
-        lib.lev.Ankapost.fd anka=levanka.get();
-        meda.f9903OpenInput();
-        meda.record.init();
-        meda.kod.set(webpara.userid);
-        meda.f9903Read();
-        tmp2.set(meda.mail);
-        acceptFrom(" FROM  ENVIRONMENT ","SMTPSERVER",tmp80);
-        attmaila.set(SPACE);
-        ankf.openIO();
-        anka.openIO();
-        ankf.post.init();
-        ankf.key.init();
-        ankf.klar.set(SPACE);
-        ankf.startK2();
-        if (ankf.eof.equals("N")) {
-            ankf.readnextK2();
-        }
-        while (!(!(ankf.eof.equals("N")) || !(ankf.klar.equals(SPACE)))) {
-            anka.post.init();
-            anka.anknr.set(ankf.anknr);
-            anka.start();
-            if (anka.eof.equals("N")) {
-                anka.readnext();
-            }
-            while (!(anka.eof.equals("J") || !(anka.anknr.equals(ankf.anknr)))) {
-                if (!(anka.mailad.equals("J")) && anka.attesterat.equals(SPACE)) {
-                    tmp.set(anka.attestor);
-                    tmp.ref(5,1).set(",");
-                    y.set(0);
-                    y.increment(attmaila.count(tmp.ref(1,5)));
-                    if (y.equals(0)) {
-                        attmaila.set(concat(limit(attmaila,"     "),tmp.ref(1,5)));
-                    }
-                    anka.mailad.set("J");
-                    anka.write();
-                }
-                anka.readnext();
-            }
-            ankf.readnextK2();
-        }
-        z.set(0);
-        anka.attestor.set(SPACE);
-        ptr.set(1);
-        unstring(attmaila,ptr,new Object[]{","},anka.attestor);
-        while (!(ptr.compareTo(1000)>0 || anka.attestor.equals(SPACE))) {
-            meda.record.init();
-            meda.kod.set(anka.attestor);
-            meda.f9903Read();
-            if (meda.attmail.equals("J") && meda.mail.compareTo(SPACE)>0) {
-                tmp3.set(SPACE);
-                i.set(1);
-                while (!(i.compareTo(48)>0 || (meda.bolF[i.getInt()-1].equalsEither("*", SPACE)))) {
-                    i.increment(1);
-                }
-                if (i.compareTo(2)>0 || meda.bolF[i.getInt()-1].equals("*")) {
-                    tmp3.set(concat("i ftg ",limit(webpara.kamftg,SPACE)));
-                }
-                tmp.set(SPACE);
-                tmp.set(concat("mmail "," ",limit(tmp80,SPACE)," ",limit(tmp2,SPACE)," ",limit(meda.mail,SPACE)," ","'Du har nya fakturor att attestera ",limit(tmp3,"  "),"' ","/dev/null >/dev/null 2>/dev/null"));
-                call(std.unixSystem, tmp);
-                z.increment(1);
-            }
-            unstring(attmaila,ptr,new Object[]{","},anka.attestor);
-        }
-        call(webpara.webut, "%h %s%c", z, "attestörer mailade", 9);
-    }
-
-    private void sparaBredder() {
-        setEnv("REQUEST_METHOD","GET");
-        acceptFrom("CONSOLE",spaValue);
-        tmp.set(SPACE);
-        tmp.set(concat("X","\u0001","AR","\u0001","INSTALLNINGAR","\u0001","KOLUMNBREDDERP","\u0001","0","\u0001"));
-        display("UPONCOMMAND-LINE",tmp,"\n");
-        call("prg.bas.webspar", spaValue);
-        acceptFrom("CONSOLE",spaValue);
-        tmp.set(SPACE);
-        tmp.set(concat("X","\u0001","AR","\u0001","INSTALLNINGAR","\u0001","KOLUMNBREDDERO","\u0001","0","\u0001"));
-        display("UPONCOMMAND-LINE",tmp,"\n");
-        call("prg.bas.webspar", spaValue);
-        display("UPONSYSOUT","OK","\n");
-    }
-
-    private void skrivBredder() {
-        spaValue.set(SPACE);
-        tmp.set(SPACE);
-        tmp.set(concat("X","\u0001","AR","\u0001","INSTALLNINGAR","\u0001","KOLUMNBREDDERP","\u0001","0","\u0001"));
-        display("UPONCOMMAND-LINE",tmp,"\n");
-        call("prg.bas.webspar", spaValue);
-        if (spaValue.equals(SPACE)) {
-            spaValue.set(concat("J139","\t","N104","\t","N157","\t","N142","\t","N71","\t","N69","\t","N67","\t","N182","\t"));
-        }
-        display("UPONSYSOUT",spaValue,"\n");
-        spaValue.set(SPACE);
-        tmp.set(SPACE);
-        tmp.set(concat("X","\u0001","AR","\u0001","INSTALLNINGAR","\u0001","KOLUMNBREDDERO","\u0001","0","\u0001"));
-        display("UPONCOMMAND-LINE",tmp,"\n");
-        call("prg.bas.webspar", spaValue);
-        if (spaValue.equals(SPACE)) {
-            spaValue.set(concat("N186","\t","N167","\t","N159","\t","N96","\t","N63","\t","N64","\t"));
-        }
-        display("UPONSYSOUT",spaValue,"\n");
-    }
-
--- a/server.src/prg/lev/Webat.java
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webat.this, pa);
-    private lib.pro.Ofhupost proofhu=new lib.pro.Ofhupost(Webat.this, pa);
-    private lib.pro.Ofrapost proofra=new lib.pro.Ofrapost(Webat.this, pa);
-    private lib.pro.Ofprpost proofpr=new lib.pro.Ofprpost(Webat.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webat.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webat.this);
-    private lib.pro.Pma1post propma1=new lib.pro.Pma1post(Webat.this, pa);
-    private lib.pro.Budwpost probudw=new lib.pro.Budwpost(Webat.this, pa);
-    private lib.pro.Budapost probuda=new lib.pro.Budapost(Webat.this, pa);
-    private lib.pro.Budipost probudi=new lib.pro.Budipost(Webat.this, pa);
-    private lib.pro.Budopost probudo=new lib.pro.Budopost(Webat.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webat.this, pa);
-    private Field fsortEof = new Field("X", "N");



-    private Field tmpBel = new Field("X(50)");
-    private Field ltbetv = new Field("XXX");



-    private Field accBel = new Field("9(9)");
-    private Field accDat = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field lnr = new Field("999");
-    private Field lstKod = new Field("999999");
-    private Field wsOmv = new Field("X");
-    private Field sel = new Field("X(10)");
-    private Field tmpHel = new Field("S9(10)");
-    private Field tmpa = new Field("S9(10)");
-    private Field tmpb = new Field("S9(10)");
-    private Field tmpc = new Field("S9(10)");
-    private Field tmpd = new Field("S9(10)");
-    private Field diff = new Field("S9(10)");
-    private Field ulNamn = new Field("X(50)");
-    private Field nyattestor = new Field("X");
-    private Field tmpStatus = new Field("X");
-    private void rad2() {
-        lib.pro.Ofprpost.fd ofpr=proofpr.get();
-        lib.pro.Ofrapost.fd ofra=proofra.get();
-        lib.pro.Projpost.fd proj=proproj.get();
-        accBel.set(0);
-        accDat.set(new Constant("99999999"));
-        ofpr.post.init();
-        ofpr.ofraKey.set(ofra.key);
-        pa.recid.set(da.ofpr);
-        pa.action.set(da.startEg);
-        prorecarea.recArea.set(ofpr.post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        ofpr.post.set(prorecarea.recArea);
-        if (pa.ok()) {
-            pa.recid.set(da.ofpr);
-            pa.action.set(da.readnext);
-            prorecarea.recArea.set(ofpr.post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            ofpr.post.set(prorecarea.recArea);
-        }
-        while (!(!(pa.ok()) || !(ofpr.ofraKey.equals(ofra.key)))) {
-            tmp.set(ofpr.key);
-            display("UPONSYSOUT",ofpr.projidG,"\t");
-            proj.projidG.set(ofpr.projidG);
-            pa.recid.set(da.proj);
-            pa.action.set(da.read);
-            prorecarea.recArea.set(proj.post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            proj.post.set(prorecarea.recArea);
-            accBel.increment(proj.fxprarv);
-            accBel.increment(proj.fxprink);
-            accBel.increment(proj.fxprmat);
-            if (proj.upplagd.compareTo(accDat)<0) {
-                accDat.set(proj.upplagd);
-            }
-            pa.recid.set(da.ofpr);
-            pa.action.set(da.readnext);
-            prorecarea.recArea.set(ofpr.post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            ofpr.post.set(prorecarea.recArea);
-        }
-        display("UPONSYSOUT","","\n");
-        display("UPONSYSOUT",accBel,"\n");
-        if (accDat.equals(new Constant("99999999"))) {
-            accDat.set(new Constant("00000000"));
-        }
-        display("UPONSYSOUT",accDat,"\n");
-    }
-
-        lib.bas.Ftgspost.fd ftgs=basftgs.get();
-        lib.lev.Ankapost.fd anka=levanka.get();
-    private void getNr() {
-        lib.pro.Budwpost.fd budw=probudw.get();
-        budw.nr.set(HIGH_VALUE);
-        pa.recid.set(da.budw);
-        pa.action.set(da.startEm);
-        prorecarea.recArea.set(budw.post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.ok()) {
-            pa.action.set(da.readback);
-            prorecarea.recArea.set(budw.post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            budw.post.set(prorecarea.recArea);
-        }
-        if (pa.ok()) {
-            budw.nr.increment(1);
-        }
-        else {
-            budw.nr.set(1);
-        }
-    }
-
--- a/server.src/prg/lev/Webblist.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webblist.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webblist.this);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webblist.this, pa);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Webblist.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Webblist.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Webblist.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Webblist.this);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(Webblist.this);
-    private lib.pri.Tidnpost pritidn=new lib.pri.Tidnpost(Webblist.this);
-    private lib.pri.Tugdpost pritugd=new lib.pri.Tugdpost(Webblist.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp = new Field("X(300)");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field dispHel = new Field("S9(9)");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(1000)");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");






-    private Field opened = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
--- a/server.src/prg/lev/Webfrgx.java
-    private lib.lev.Ankrpost levankr=new lib.lev.Ankrpost(Webfrgx.this, pa);
-    private lib.lev.Ankapost levanka=new lib.lev.Ankapost(Webfrgx.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webfrgx.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webfrgx.this);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webfrgx.this, pa);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Webfrgx.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Webfrgx.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Webfrgx.this);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(Webfrgx.this);
-    private lib.med.Datab da=new lib.med.Datab(Webfrgx.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field tmpDatum = new Field("9(8)");
-    private Field startdat = new Field("9(8)");
-    private Field slutdat = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");






-    private Field opened = new Field("X");
-    private Field antal1 = new Field("99999");
-    private Field tmpStyle = new Field("X(20)");
--- a/server.src/prg/lev/Webobet.java
-    private lib.bas.Std std=new lib.bas.Std(Webobet.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webobet.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webobet.this);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webobet.this, pa);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Webobet.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Webobet.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Webobet.this);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(Webobet.this);
-    private lib.med.Datab da=new lib.med.Datab(Webobet.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field startdat = new Field("9(8)");
-    private Field slutdat = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");






-    private Field opened = new Field("X");
-    private Field antal1 = new Field("99999");
-    private Field tmpStyle = new Field("X(20)");
--- a/server.src/prg/lev/Webprelk.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Webprelk.this);
-    private lib.pro.Forepost profore=new lib.pro.Forepost(Webprelk.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webprelk.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Webprelk.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webprelk.this, pa);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webprelk.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webprelk.this);
-    private lib.pro.Datab da=new lib.pro.Datab(Webprelk.this);
--- a/server.src/prg/lev/Webreg.java
-        if (true) {
-            return;
-        }
-        tmp.set("LEV.REG.");
-        tmp.ref(9).set(p1);
-        tmp80.set(p3);
-        call("prg.bas.regstat", tmp, "<", tmp80);
-        tmp.set("LEV.REG.");
-        tmp.ref(9).set(p1);
-        tmp80.set(p3);
-        call("prg.bas.regstat", tmp, "*", tmp80);
--- a/server.src/prg/lev/Websald.java
-    private lib.lev.Ankfpost levankf=new lib.lev.Ankfpost(Websald.this, pa);
-    private lib.lev.Fakapost levfaka=new lib.lev.Fakapost(Websald.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Websald.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Websald.this);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Websald.this, pa);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Websald.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Websald.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Websald.this);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(Websald.this);
-    private lib.pri.Tidnpost pritidn=new lib.pri.Tidnpost(Websald.this);
-    private lib.pri.Tugdpost pritugd=new lib.pri.Tugdpost(Websald.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field dispHel = new Field("S9(9)");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field startdat = new Field("9(8)");
-    private Field slutdat = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");






-    private Field opened = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field testOk = new Field("X");
-    private Field antal1 = new Field("99999");
-    private Field testKod = new Field("X(100)");
-    private Field selKod = new Field("X(100)");
-    private Field sumAmount = new Field("S9(9)V99");
-    private Field tmpStyle = new Field("X(20)");
-    private Field rott = new Field("X");
-    private Field nuvecka = new Field("99");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/lev/Webscb.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Webscb.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Webscb.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Webscb.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webscb.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webscb.this);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webscb.this, pa);
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field flagga1 = new Field("X");






-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
--- a/server.src/prg/lev/Webvand.java
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(Webvand.this, pa);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Webvand.this, pa);
-    private lib.lev.Fakapost levfaka=new lib.lev.Fakapost(Webvand.this, pa);
-    private lib.lev.Betapost levbeta=new lib.lev.Betapost(Webvand.this, pa);
-    private lib.lev.Planpost levplan=new lib.lev.Planpost(Webvand.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Webvand.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(Webvand.this, pa);
-    private lib.bok.Dbokpost bokdbok=new lib.bok.Dbokpost(Webvand.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Webvand.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webvand.this);
-    private Field tmpHel = new Field("S999999999");
-    private Field tmpNum = new Field("S999999999V99");
-    private Field tmpNum2 = new Field("S999999999V99");
-    private Field x = new Field("S9(9)");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
-    private Field varnkod = new Field("X(20)");
-    private Field varncook = new Field("X(25)");
-    private Field varnok = new Field("X");
-    private void visavarn() {
-        varncook.set(concat("VARN_",varnkod));
-        varnok.set(SPACE);
-        call("prg.bas.webcook", varncook, varnok);
-        if (!(varnok.equals("J"))) {
-            call("prg.bas.webut", "VARNING:%8%S:%0", std.stdText, std.stdText2, varnkod);
-        }
-    }
-
-    private void visafraga() {
-        varncook.set(concat("VARN_",varnkod));
-        varnok.set(SPACE);
-        call("prg.bas.webcook", varncook, varnok);
-        if (varnok.equals(SPACE)) {
-            call("prg.bas.webut", "FRAGA:%8%S:%0", std.stdText, std.stdText2, varnkod);
-            atergang();
-            return;
-        }
-    }
-
--- a/server.src/prg/lev/Xaegf01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xaegf01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xaegf01.this);
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/lev/Xappe01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xappe01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xappe01.this);
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/lev/Xbuvi01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xbuvi01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xbuvi01.this);
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/lev/Xcara01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xcara01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xcara01.this);
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field tmpEgetId = new Field("X(25)");
-    private Field fik = new Field("X(15)");
-    private Field fikPek = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
--- a/server.src/prg/lev/Xcara02.java
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(Xcara02.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Xcara02.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xcara02.this);
--- a/server.src/prg/lev/Xcarf01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xcarf01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xcarf01.this);
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
--- a/server.src/prg/lev/Xchan01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xchan01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xchan01.this);
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/lev/Xchan02.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Xchan02.this);
-    private lib.med.P8921 p8921=new lib.med.P8921(Xchan02.this, pa, medrecarea);
-    private lib.bas.Beho beho=new lib.bas.Beho(Xchan02.this);
-    private lib.med.Datab da=new lib.med.Datab(Xchan02.this);
--- a/server.src/prg/lev/Xlife01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xlife01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xlife01.this);
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/lev/Xomdr01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xomdr01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xomdr01.this);
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/lev/Xsign01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xsign01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xsign01.this);
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/lev/Xsign02.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xsign02.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xsign02.this);
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
--- a/server.src/prg/lev/Xtoin01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xtoin01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xtoin01.this);
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/lev/Xtoin02.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xtoin02.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xtoin02.this);
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
--- a/server.src/prg/lev/Xtoin03.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xtoin03.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xtoin03.this);
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
--- a/server.src/prg/lev/Xtros01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xtros01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xtros01.this);
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/lev/Xtros02.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xtros02.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xtros02.this);
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
--- a/server.src/prg/lev/Xvale01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xvale01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xvale01.this);
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/lev/Xweel01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xweel01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xweel01.this);
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/lev/Xwhyd01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xwhyd01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xwhyd01.this);
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/lev/Zankf545.java
-    private lib.bas.Std std=new lib.bas.Std(Zankf545.this);
-    private Field ankfEof = new Field("X");
-    private Field x = new Field("S9(9)");
--- a/server.src/prg/lev/Zleve545.java
-    private lib.bas.Std std=new lib.bas.Std(Zleve545.this);
-    private Field leveEof = new Field("X");
-    private Field x = new Field("S9(9)");
--- a/server.src/prg/lev/Zleve546.java
-    private lib.bas.Std std=new lib.bas.Std(Zleve546.this);
-    private Field leveEof = new Field("X");
-    private Field x = new Field("S9(9)");
--- a/server.src/prg/med/Adaxml.java
-    private lib.med.P8calc p8calc=new lib.med.P8calc(Adaxml.this);
-    private lib.med.Datab da=new lib.med.Datab(Adaxml.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp = new Field("X(300)");
-    private Field tmp1 = new Field("X(100)");
-    private Field tmp2 = new Field("X(100)");
-    private Field tmpHel = new Field("S9(10)");
-    private Field tmpBel = new Field("S9(10)V99");
-    private Field tmpDatum = new Field("9(8)");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(100)");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field xlsFilnamn = new Field("X(100)");

--- a/server.src/prg/med/Aegfsync.java
-    private lib.med.Stddata stddata=new lib.med.Stddata(Aegfsync.this);
-    private lib.med.Datab da=new lib.med.Datab(Aegfsync.this);

-    private Field stdVal = new Field("9");
-    private Field stdKey = new Field("999");
-    private Field fsortEof = new Field("X");
-    private void z04Meddela() {
-        stddata.stdVisakod.set("F");
-        stddata.stdVisakod.ref(2).set(pa.txtnr.ref(1));
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisakod);
-    }
-
-    private void z05BlankaMeddelande() {
-        call("prg.bas.visa", pa.paraArea, "F000");
-        pa.txtnr.set(ZERO);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdFunk, stddata.stdKom);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            call("prg.bas.visa", pa.paraArea, "F902");
-        }
-    }
-
-    private void z21Upshift() {
-        z21Konv.toUpper();
-    }
-
--- a/server.src/prg/med/Androrde.java
-    private lib.bas.Std std=new lib.bas.Std(Androrde.this);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Androrde.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(Androrde.this);
-    private Field tmp = new Field("X(100)");
-    private Field tmp2 = new Field("X(100)");
-    private Field tmp3 = new Field("X(100)");
-    private Field varnok = new Field("X(100)");
-    private Field qu = new Field("X(2000)");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(2000)");
-    private Field p4 = new Field("X(50)");
-    private Field p5 = new Field("X(50)");
-    private Field poster = new Field("99999");
-    private Field i = new Field("99999");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field tmpHel = new Field("S9(10)");
-    private Field tmpBel = new Field("S9(10)V99");
-    private Field flagga1 = new Field("X");
-    private Field flagga2 = new Field("X");
-    private Field flagga3 = new Field("X");
-    private Field flagga4 = new Field("X");
-    private Field flagga5 = new Field("X");
-    private Field flagga510 = new Field("X");
-    private Field flagga6 = new Field("X");
-    private Field flagga7 = new Field("X");
-    private Field flagga8 = new Field("X");
-    private Field flagga9 = new Field("X");
-    private Field flagga10 = new Field("X");
-    private Field flagga11 = new Field("X");
-    private Field flagga12 = new Field("X");
-    private Field flagga13 = new Field("X");
-    private Field flagga14 = new Field("X");
-    private Field flagga15 = new Field("X");
-    private Field antalAnvisn = new Field("9");
-    private Field endaktiva = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field post = new Field("X(1000)");
-    private Field pkey = new Field("X(100)");
-    private Field pvalue = new Field("X(900)");
-    private Field oldEdim = new Field("X(4)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field pOk = new Field("X");
-    private Field varningar = new Field("99");
-    private Field kolla = new Field("X");
-    private Field modul = new Field("XXX");
-    private Field mdx = new Field("9");
-    private Field mdy = new Field("9V9");
-    private Field nyttPlannr = new Field("9(6)");
-    private Field nyttOrdernr = new Field("9(6)");
-    private Field tmpOrdernr = new Field("9(6)");
-    private Field tmp6 = new Field("9(6)");
-    private Field valuta = new Field("XXX");
-    private Field lunamn = new Field("X(50)");
-    private Field tmpX = new Field("X");
-    private Field kkrok = new Field("X");
-    private Field tmpTiKod = new Field("XXX");
-    private Field tmpErs = new Field("XX");
-    private Field tmp10000 = new Field("X(10000)");
-    private Field tmpText = new Field("X(30000)");
-    private Field ptr = new Field("99999");
-    private Field ediVal = new Field("X");
-    private Field tmpFilnamn = new Field("X(50)");
-    private Field prelFilnamn = new Field("X(50)");
-    private Field prBrutto = new Field("S9(10)");
-    private Field prNetto = new Field("S9(10)");
-    private Field postbak = new Field("X(20000)");
-    private Field felvisa = new Field("XXX");
-    private Field oldLopnr = new Field("9(9)");
--- a/server.src/prg/med/Apibcrus.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Apibcrus.this, pa);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apibcrus.this);
--- a/server.src/prg/med/Apibgesus.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Apibgesus.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apibgesus.this);
-    private Field tagCount = new Field("X(10)");
--- a/server.src/prg/med/Apibgeuss.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apibgeuss.this);
-    private Field tmpStartDate = new Field("9(8)");
-    private Field tmpEndDate = new Field("9(8)");
--- a/server.src/prg/med/Apibgevos.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Apibgevos.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apibgevos.this);
--- a/server.src/prg/med/Apibgevos2.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Apibgevos2.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apibgevos2.this);
--- a/server.src/prg/med/Apifccor.java
-    private lib.med.Enhtpost medenht=new lib.med.Enhtpost(Apifccor.this, pa);
-    private lib.pri.Tidnpost prisPritidn=new lib.pri.Tidnpost(Apifccor.this);
-    private lib.pri.Medipost primedi=new lib.pri.Medipost(Apifccor.this);
-    private lib.pri.Sektpost prisekt=new lib.pri.Sektpost(Apifccor.this);
-    private lib.pri.Prispost pripris=new lib.pri.Prispost(Apifccor.this);
-    private lib.pri.Primpost priprim=new lib.pri.Primpost(Apifccor.this);
-    private lib.pri.Enhepost prienhe=new lib.pri.Enhepost(Apifccor.this);
-    private lib.pri.Spmapost prispma=new lib.pri.Spmapost(Apifccor.this);
-    private lib.pri.Spbepost prispbe=new lib.pri.Spbepost(Apifccor.this);
-    private lib.pri.Spb2post prispb2=new lib.pri.Spb2post(Apifccor.this);
-    private lib.pri.Momapost primoma=new lib.pri.Momapost(Apifccor.this);
-    private lib.pri.Mobepost primobe=new lib.pri.Mobepost(Apifccor.this);
-    private lib.med.Datab da=new lib.med.Datab(Apifccor.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Apifccor.this);
-    private lib.bas.Std std=new lib.bas.Std(Apifccor.this);
--- a/server.src/prg/med/Apifclcr.java
-    private lib.med.Datab da=new lib.med.Datab(Apifclcr.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Apifclcr.this);
--- a/server.src/prg/med/Apimcaor.java
-    private lib.med.Datab da=new lib.med.Datab(Apimcaor.this);
--- a/server.src/prg/med/Apimccor.java
-    private lib.med.Datab da=new lib.med.Datab(Apimccor.this);
-    private Field tmpCtcPek = new Field("S9(9)");
-    private Field tmpNetBest = new Field("S9(10)V99");
-    private Field tmpCtcBest = new Field("S9(10)V99");
--- a/server.src/prg/med/Apimchclst.java
-    private lib.med.Datab da=new lib.med.Datab(Apimchclst.this);
-    private Field orderPriceRowIdD = new Field("X(10)");
-    private Field orderPriceRowId = new Field("9(9)");
--- a/server.src/prg/med/Apimchdest.java
-    private lib.med.Datab da=new lib.med.Datab(Apimchdest.this);
--- a/server.src/prg/med/Apimchor.java
-    private lib.med.Datab da=new lib.med.Datab(Apimchor.this);
--- a/server.src/prg/med/Apimcrag.java
-    private lib.med.Datab da=new lib.med.Datab(Apimcrag.this);
--- a/server.src/prg/med/Apimcrca.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Apimcrca.this);
-    private lib.med.Datab da=new lib.med.Datab(Apimcrca.this);
--- a/server.src/prg/med/Apimcrcl.java
-    private lib.gem.Egrapost gemegra=new lib.gem.Egrapost(Apimcrcl.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(Apimcrcl.this);
--- a/server.src/prg/med/Apimcrin.java
-    private lib.med.Datab da=new lib.med.Datab(Apimcrin.this);
-    private Field tmpDate = new Field("9(8)");
--- a/server.src/prg/med/Apimcror.java
-    private lib.med.Datab da=new lib.med.Datab(Apimcror.this);
-    private Field orderEgetNr = new Field("S9(9)");
-    private Field orderCommNr = new Field("S9(9)");
-    private Field orderCommentLnr = new Field("9(6)");
-    private Field orderCommTypeTmp = new Field("X(4)");
-    private Field orderStatusUFinns = new Field("X");
-    private Field orderUpdatePlan = new Field("X");
-    private Field orderPek = new Field("S9(9)");
-    private Field tmpInsertionDate = new Field("9(8)");
-    private Field prDiscount = new Field("S9(10)V99");
-    private Field prCommission = new Field("S9(10)V99");
-    private Field prFee = new Field("S9(10)V99");
-    private Field prInsertionFee = new Field("S9(10)V99");
-    private Field prCtc = new Field("S9(10)V99");
-    private Field prAvtal = new Field("X(8)");
-    private Field adHeight = new Field("S9(9)");
--- a/server.src/prg/med/Apimcrordi.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Apimcrordi.this);
-    private lib.gem.Kamppost gemkamp=new lib.gem.Kamppost(Apimcrordi.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(Apimcrordi.this);
-    private Field orderLnr = new Field("9(6)");
-    private Field orderInfLnr = new Field("9(6)");
-    private Field orderPriceLnr = new Field("9(6)");
-    private Field orderCommentLnr = new Field("9(6)");
-    private Field orderStatusUFinns = new Field("X");
-    private Field orderUpdatePlan = new Field("X");
-    private Field orderPek = new Field("S9(9)");
-    private Field tmpInsertionDate = new Field("9(8)");
-    private Field tmpEndDate = new Field("9(8)");
-    private Field tmpNumberOfUnitsD = new Field("X(25)");
-    private Field tmpNumberOfUnits = new Field("S9(9)V99");
-    private Field tmpDate = new Field("9(8)");
-    private Field tmpClientId = new Field("X(100)");
-    private Field tmpCalculationType = new Field("X(100)");
-    private Field tmpAgreementId = new Field("X(100)");
-    private Field tmpMediaId = new Field("X(100)");
-    private Field tmpMediatypeId = new Field("X(100)");
-    private Field tmpSurchargeCodeId = new Field("X(100)");
-    private Field tmpMediasInMediaPackageD = new Field("X(100)");
-    private Field tmpMediasInMediaPackage = new Field("S9(9)");
-    private Field tmpAdWidthD = new Field("X(25)");
-    private Field tmpAdWidth = new Field("S9(10)V99");
-    private Field tmpAdHeightD = new Field("X(25)");
-    private Field tmpAdHeight = new Field("S9(10)V99");
-    private Field tmpNoInsertionFeeD = new Field("X(100)");
-    private Field tmpNoInsertionFee = new Field("X");
-    private Field tmpNoFeeD = new Field("X(100)");
-    private Field tmpNoFee = new Field("X");
-    private Field tmpNetD = new Field("X(100)");
-    private Field tmpNet = new Field("S9(10)V99");
-    private Field tmpCtcD = new Field("X(100)");
-    private Field tmpCtc = new Field("S9(10)V99");
-    private Field tmpRemainingCredit = new Field("S9(10)V99");
-    private Field tmpCtcPek = new Field("S9(9)");
-    private Field tmpNetBest = new Field("S9(10)V99");
-    private Field tmpCtcBest = new Field("S9(10)V99");
-    private Field validatePlanPlannr = new Field("9(6)");
-    private Field validatePlanSvar = new Field("99");
-    private Field validatePlanLocked = new Field("X");
-    private Field hel = new Field("S9(10)");
-    private Field num = new Field("S9(9)V99");
-    private void validatePlan() {
-        lib.med.Planpost.fd plan=p8921.medplan.get();
-        plan.post.init();
-        plan.plannr.set(validatePlanPlannr);
-        p8921.medPlanReadKl();
-        if (!(pa.ok())) {
-            validatePlanSvar.set(1);
-        }
-        else {
-            call("prg.bas.tzdat", std.stdToday);
-            if (!(plan.lockAnv.equals(SPACE)) && plan.lockDat.equals(std.stdToday)) {
-                validatePlanSvar.set(2);
-            }
-            else {
-                plan.lockAnv.set("API");
-                call("prg.bas.tzdat", plan.lockDat);
-                call("prg.bas.tztid", plan.lockTid);
-                p8921.medPlanRewrite();
-                validatePlanLocked.set("J");
-                validatePlanSvar.set(0);
-            }
-        }
-        p8921.medFileCommit();
-    }
-
-    private void validatePlanUnlock() {
-        lib.med.Planpost.fd plan=p8921.medplan.get();
-        if (validatePlanLocked.equals("J")) {
-            plan.post.init();
-            plan.plannr.set(validatePlanPlannr);
-            p8921.medPlanReadKl();
-            if (pa.ok() && plan.lockAnv.equals("API")) {
-                plan.lockAnv.set(SPACE);
-                plan.lockDat.set(ZERO);
-                plan.lockTid.set(ZERO);
-                p8921.medPlanRewrite();
-                validatePlanLocked.set("N");
-            }
-            p8921.medFileCommit();
-        }
-    }
-
--- a/server.src/prg/med/Apimcrordix.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Apimcrordix.this);
-    private lib.gem.Kamppost gemkamp=new lib.gem.Kamppost(Apimcrordix.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(Apimcrordix.this);
-    private Field tagCount = new Field("X(10)");
-    private Field orderLnr = new Field("9(6)");
-    private Field orderInfLnr = new Field("9(6)");
-    private Field orderPriceLnr = new Field("9(6)");
-    private Field orderCommentLnr = new Field("9(6)");
-    private Field orderDiscountCodeTmp = new Field("X(4)");
-    private Field orderCommTypeTmp = new Field("X(4)");
-    private Field orderStatusUFinns = new Field("X");
-    private Field orderUpdatePlan = new Field("X");
-    private Field orderPek = new Field("S9(9)");
-    private Field tmpInsertionDate = new Field("9(8)");
-    private Field tmpEndDate = new Field("9(8)");
-    private Field tmpNumberOfUnitsD = new Field("X(25)");
-    private Field tmpNumberOfUnits = new Field("S9(9)V99");
-    private Field tmpDateD = new Field("X(10)");
-    private Field tmpDate = new Field("9(8)");
-    private Field tmpBelT = new Field("X(25)");
-    private Field tmpComment = new Field("X(100)");
-    private Field tmpClientId = new Field("X(100)");
-    private Field tmpCalculationType = new Field("X(100)");
-    private Field tmpAgreementId = new Field("X(100)");
-    private Field tmpMediaId = new Field("X(100)");
-    private Field tmpMediatypeId = new Field("X(100)");
-    private Field tmpSurchargeCodeId = new Field("X(100)");
-    private Field tmpMediasInMediaPackageD = new Field("X(100)");
-    private Field tmpMediasInMediaPackage = new Field("S9(9)");
-    private Field tmpAdWidthD = new Field("X(25)");
-    private Field tmpAdWidth = new Field("S9(10)V99");
-    private Field tmpAdHeightD = new Field("X(25)");
-    private Field tmpAdHeight = new Field("S9(10)V99");
-    private Field tmpNoInsertionFeeD = new Field("X(100)");
-    private Field tmpNoInsertionFee = new Field("X");
-    private Field tmpNoFeeD = new Field("X(100)");
-    private Field tmpNoFee = new Field("X");
-    private Field tmpNetD = new Field("X(100)");
-    private Field tmpNet = new Field("S9(10)V99");
-    private Field tmpCtcD = new Field("X(100)");
-    private Field tmpCtc = new Field("S9(10)V99");
-    private Field tmpRemainingCredit = new Field("S9(10)V99");
-    private Field tmpCtcPek = new Field("S9(9)");
-    private Field tmpNetBest = new Field("S9(10)V99");
-    private Field tmpCtcBest = new Field("S9(10)V99");
-    private Field validatePlanPlannr = new Field("9(6)");
-    private Field validatePlanSvar = new Field("99");
-    private Field validatePlanLocked = new Field("X");
-    private Field hel = new Field("S9(10)");
-    private Field num = new Field("S9(9)V99");
-    private void validatePlan() {
-        lib.med.Planpost.fd plan=p8921.medplan.get();
-        plan.post.init();
-        plan.plannr.set(validatePlanPlannr);
-        p8921.medPlanReadKl();
-        if (!(pa.ok())) {
-            validatePlanSvar.set(1);
-        }
-        else {
-            call("prg.bas.tzdat", std.stdToday);
-            if (!(plan.lockAnv.equals(SPACE)) && plan.lockDat.equals(std.stdToday)) {
-                validatePlanSvar.set(2);
-            }
-            else {
-                plan.lockAnv.set("API");
-                call("prg.bas.tzdat", plan.lockDat);
-                call("prg.bas.tztid", plan.lockTid);
-                p8921.medPlanRewrite();
-                validatePlanLocked.set("J");
-                validatePlanSvar.set(0);
-            }
-        }
-        p8921.medFileCommit();
-    }
-
-    private void validatePlanUnlock() {
-        lib.med.Planpost.fd plan=p8921.medplan.get();
-        if (validatePlanLocked.equals("J")) {
-            plan.post.init();
-            plan.plannr.set(validatePlanPlannr);
-            p8921.medPlanReadKl();
-            if (pa.ok() && plan.lockAnv.equals("API")) {
-                plan.lockAnv.set(SPACE);
-                plan.lockDat.set(ZERO);
-                plan.lockTid.set(ZERO);
-                p8921.medPlanRewrite();
-                validatePlanLocked.set("N");
-            }
-            p8921.medFileCommit();
-        }
-    }
-
--- a/server.src/prg/med/Apimcrorhe.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Apimcrorhe.this);
-    private lib.gem.Kamppost gemkamp=new lib.gem.Kamppost(Apimcrorhe.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(Apimcrorhe.this);
-    private Field xmlOutput = new Field("X(5000)");
-    private Field tmpOwnFieldAntD = new Field("X(25)");
-    private Field tmpOwnFieldAnt = new Field("S9(9)");
--- a/server.src/prg/med/Apimcrpl.java
-    private lib.med.Datab da=new lib.med.Datab(Apimcrpl.this);
-    private Field tmpProjectId = new Field("X(100)");
--- a/server.src/prg/med/Apimcrpr.java
-    private lib.med.Datab da=new lib.med.Datab(Apimcrpr.this);
--- a/server.src/prg/med/Apimcrprro.java
-    private lib.med.Datab da=new lib.med.Datab(Apimcrprro.this);
--- a/server.src/prg/med/Apimdeca.java
-    private lib.med.Datab da=new lib.med.Datab(Apimdeca.this);
--- a/server.src/prg/med/Apimdein.java
-    private lib.med.Datab da=new lib.med.Datab(Apimdein.this);
--- a/server.src/prg/med/Apimdeor.java
-    private lib.med.Datab da=new lib.med.Datab(Apimdeor.this);
--- a/server.src/prg/med/Apimdepl.java
-    private lib.med.Datab da=new lib.med.Datab(Apimdepl.this);
-    private Field validatePlanPlannr = new Field("9(6)");
-    private Field validatePlanSvar = new Field("99");
-    private Field validatePlanLocked = new Field("X");
-    private Field validateOrdeOrdernr = new Field("9(6)");
-    private Field validateOrdeSvar = new Field("99");
-    private Field validateOrdeLocked = new Field("X");
-    private Field validateOrdeLockedPek = new Field("S9(9)");
-    private void validatePlan() {
-        lib.med.Planpost.fd plan=p8921.medplan.get();
-        plan.post.init();
-        plan.plannr.set(validatePlanPlannr);
-        p8921.medPlanReadKl();
-        if (!(pa.ok())) {
-            validatePlanSvar.set(1);
-        }
-        else {
-            call("prg.bas.tzdat", std.stdToday);
-            if (!(plan.lockAnv.equals(SPACE)) && plan.lockDat.equals(std.stdToday)) {
-                validatePlanSvar.set(2);
-            }
-            else {
-                plan.lockAnv.set("API");
-                call("prg.bas.tzdat", plan.lockDat);
-                call("prg.bas.tztid", plan.lockTid);
-                p8921.medPlanRewrite();
-                validatePlanLocked.set("J");
-                validatePlanSvar.set(0);
-            }
-        }
-        p8921.medFileCommit();
-    }
-
-    private void validatePlanUnlock() {
-        lib.med.Planpost.fd plan=p8921.medplan.get();
-        if (validatePlanLocked.equals("J")) {
-            plan.post.init();
-            plan.plannr.set(validatePlanPlannr);
-            p8921.medPlanReadKl();
-            if (pa.ok() && plan.lockAnv.equals("API")) {
-                plan.lockAnv.set(SPACE);
-                plan.lockDat.set(ZERO);
-                plan.lockTid.set(ZERO);
-                p8921.medPlanRewrite();
-                validatePlanLocked.set("N");
-            }
-            p8921.medFileCommit();
-        }
-    }
-
-    private void validateOrde() {
-        lib.med.Ordepost.fd orde=p8921.medorde.get();
-        orde.post.init();
-        orde.ordernr.set(validateOrdeOrdernr);
-        p8921.medOrdeReadKl();
-        if (!(pa.ok())) {
-            validateOrdeSvar.set(1);
-        }
-        else {
-            call("prg.bas.tzdat", std.stdToday);
-            if (!(orde.lockAnv.equals(SPACE)) && orde.lockDat.equals(std.stdToday)) {
-                validateOrdeSvar.set(2);
-            }
-            else {
-                orde.lockAnv.set("API");
-                call("prg.bas.tzdat", orde.lockDat);
-                call("prg.bas.tztid", orde.lockTid);
-                p8921.medOrdeRewrite();
-                for (validateOrdeLockedPek.set(1);(!((validateOrdeLockedPek.compareTo(1000)>0) || 
-                                (validateOrdeLockedOrdernr[validateOrdeLockedPek.getInt()-1].equalsEither(ZERO, validateOrdeOrdernr))));validateOrdeLockedPek.increment(1)) {
-                }
-                if (validateOrdeLockedPek.compareTo(1000)<=0) {
-                    validateOrdeLockedOrdernr[validateOrdeLockedPek.getInt()-1].set(validateOrdeOrdernr);
-                }
-                validateOrdeLocked.set("J");
-                validateOrdeSvar.set(0);
-            }
-        }
-        p8921.medFileCommit();
-    }
-
-    private void validateOrdeUnlock() {
-        lib.med.Ordepost.fd orde=p8921.medorde.get();
-        if (validateOrdeLocked.equals("J")) {
-            for (validateOrdeLockedPek.set(1);(!(validateOrdeLockedPek.compareTo(1000)>0 || validateOrdeLockedOrdernr[validateOrdeLockedPek.getInt()-1].equals(ZERO)));validateOrdeLockedPek.increment(1)) {
-                orde.post.init();
-                orde.ordernr.set(validateOrdeOrdernr);
-                p8921.medOrdeReadKl();
-                if (pa.ok() && orde.lockAnv.equals("API")) {
-                    orde.lockAnv.set(SPACE);
-                    orde.lockDat.set(ZERO);
-                    orde.lockTid.set(ZERO);
-                    p8921.medOrdeRewrite();
-                    validateOrdeLocked.set("N");
-                }
-                p8921.medFileCommit();
-            }
-        }
-    }
-
--- a/server.src/prg/med/Apimdeprro.java
-    private lib.med.Datab da=new lib.med.Datab(Apimdeprro.this);
--- a/server.src/prg/med/Apimgeagde.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgeagde.this);
--- a/server.src/prg/med/Apimgeags.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgeags.this);
--- a/server.src/prg/med/Apimgeca.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgeca.this);
--- a/server.src/prg/med/Apimgecas.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgecas.this);
--- a/server.src/prg/med/Apimgechpl.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgechpl.this);
--- a/server.src/prg/med/Apimgechres.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgechres.this);
-    private Field fsortEof = new Field("X", "N");
--- a/server.src/prg/med/Apimgeclcr.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgeclcr.this);
--- a/server.src/prg/med/Apimgecls.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgecls.this);
-    private Field tmpEgnaAntal = tmpEgnaO.extend("S9(9)");
-    private Field tmpEgnaPek = tmpEgnaO.extend("S9(9)");
-    private Field tmpEgnaPek2 = tmpEgnaO.extend("S9(9)");
--- a/server.src/prg/med/Apimgecocls.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgecocls.this);
--- a/server.src/prg/med/Apimgecomts.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgecomts.this);
--- a/server.src/prg/med/Apimgecoprs.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgecoprs.this);
--- a/server.src/prg/med/Apimgecos.java
-    private lib.gem.Kakopost gemkako=new lib.gem.Kakopost(Apimgecos.this, pa);
-    private lib.gem.Aktupost gemaktu=new lib.gem.Aktupost(Apimgecos.this, pa);
-    private lib.gem.Egrapost gemegra=new lib.gem.Egrapost(Apimgecos.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(Apimgecos.this);
--- a/server.src/prg/med/Apimgedichs.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgedichs.this);
--- a/server.src/prg/med/Apimgedicos.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgedicos.this);
--- a/server.src/prg/med/Apimgefos.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgefos.this);
--- a/server.src/prg/med/Apimgeindas.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgeindas.this);
-    private Field tmpPlacement = new Field("X(100)");
--- a/server.src/prg/med/Apimgeiv.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgeiv.this);
--- a/server.src/prg/med/Apimgeivs.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgeivs.this);
--- a/server.src/prg/med/Apimgemebrs.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgemebrs.this);
--- a/server.src/prg/med/Apimgemes.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgemes.this);
--- a/server.src/prg/med/Apimgemts.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgemts.this);
--- a/server.src/prg/med/Apimgeor.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Apimgeor.this);
-    private lib.bas.Momspost basmoms=new lib.bas.Momspost(Apimgeor.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Apimgeor.this);
-    private lib.pri.Tugdpost pritugd=new lib.pri.Tugdpost(Apimgeor.this);
-    private lib.pri.Ugfdpost priugfd=new lib.pri.Ugfdpost(Apimgeor.this);
-    private lib.pri.Prispost pripris=new lib.pri.Prispost(Apimgeor.this);
-    private lib.pri.Prippost priprip=new lib.pri.Prippost(Apimgeor.this);
-    private lib.pri.Vdagpost privdag=new lib.pri.Vdagpost(Apimgeor.this);
-    private lib.gem.Kamppost gemkamp=new lib.gem.Kamppost(Apimgeor.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(Apimgeor.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field webpurIncludeCancelledD = new Field("X(200)");
-    private Field webpurLista = new Field("X(2000)");
-    private Field tmpEgnaTmp = new Field("X(1100)");
-    private Field lista = new Field("X(2000)");
--- a/server.src/prg/med/Apimgeoren.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Apimgeoren.this);
-    private lib.bas.Momspost basmoms=new lib.bas.Momspost(Apimgeoren.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Apimgeoren.this);
-    private lib.pri.Tugdpost pritugd=new lib.pri.Tugdpost(Apimgeoren.this);
-    private lib.pri.Ugfdpost priugfd=new lib.pri.Ugfdpost(Apimgeoren.this);
-    private lib.pri.Prispost pripris=new lib.pri.Prispost(Apimgeoren.this);
-    private lib.pri.Prippost priprip=new lib.pri.Prippost(Apimgeoren.this);
-    private lib.pri.Vdagpost privdag=new lib.pri.Vdagpost(Apimgeoren.this);
-    private lib.gem.Kamppost gemkamp=new lib.gem.Kamppost(Apimgeoren.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(Apimgeoren.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field webpurIncludeCancelledD = new Field("X(200)");
-    private Field webpurLista = new Field("X(2000)");
-    private Field tmp9 = new Field("9");
-    private Field fakKapKost1 = new Field("S9(9)V99");
-    private Field lista = new Field("X(2000)");
-    private Field fkurs = new Field("999999V9999");
-    private Field fvaluta = new Field("XXX");
-    private Field fkursPaslag = new Field("999999V9999");
--- a/server.src/prg/med/Apimgeorlo.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgeorlo.this);
--- a/server.src/prg/med/Apimgeors.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgeors.this);
--- a/server.src/prg/med/Apimgepl.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Apimgepl.this);
-    private lib.bas.Momspost basmoms=new lib.bas.Momspost(Apimgepl.this);
-    private lib.pri.Tugdpost pritugd=new lib.pri.Tugdpost(Apimgepl.this);
-    private lib.pri.Ugfdpost priugfd=new lib.pri.Ugfdpost(Apimgepl.this);
-    private lib.pri.Prispost pripris=new lib.pri.Prispost(Apimgepl.this);
-    private lib.pri.Prippost priprip=new lib.pri.Prippost(Apimgepl.this);
-    private lib.pri.Vdagpost privdag=new lib.pri.Vdagpost(Apimgepl.this);
-    private lib.med.Datab da=new lib.med.Datab(Apimgepl.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field webpurLista = new Field("X(2000)");
-    private Field lista = new Field("X(2000)");
--- a/server.src/prg/med/Apimgeplen.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Apimgeplen.this);
-    private lib.bas.Momspost basmoms=new lib.bas.Momspost(Apimgeplen.this);
-    private lib.pri.Tugdpost pritugd=new lib.pri.Tugdpost(Apimgeplen.this);
-    private lib.pri.Ugfdpost priugfd=new lib.pri.Ugfdpost(Apimgeplen.this);
-    private lib.pri.Prispost pripris=new lib.pri.Prispost(Apimgeplen.this);
-    private lib.pri.Prippost priprip=new lib.pri.Prippost(Apimgeplen.this);
-    private lib.pri.Vdagpost privdag=new lib.pri.Vdagpost(Apimgeplen.this);
-    private lib.med.Datab da=new lib.med.Datab(Apimgeplen.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field webpurLista = new Field("X(2000)");
-    private Field tmp9 = new Field("9");
-    private Field fakKapKost1 = new Field("S9(9)V99");
-    private Field lista = new Field("X(2000)");
-    private Field fkurs = new Field("999999V9999");
-    private Field fvaluta = new Field("XXX");
-    private Field fkursPaslag = new Field("999999V9999");
--- a/server.src/prg/med/Apimgepms.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgepms.this);
-    private Field vdagNr = new Field("9(6)");
--- a/server.src/prg/med/Apimgepris.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgepris.this);
-    private Field tmpPlacement = new Field("X(100)");
--- a/server.src/prg/med/Apimgeprs.java
-    private lib.gem.Kakopost gemkako=new lib.gem.Kakopost(Apimgeprs.this, pa);
-    private lib.gem.Aktupost gemaktu=new lib.gem.Aktupost(Apimgeprs.this, pa);
-    private lib.gem.Egrapost gemegra=new lib.gem.Egrapost(Apimgeprs.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(Apimgeprs.this);
--- a/server.src/prg/med/Apimgesis.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgesis.this);
-    private Field tmpPlacement = new Field("X(100)");
-    private Field tmpHeight = new Field("X(100)");
--- a/server.src/prg/med/Apimgesucos.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgesucos.this);
--- a/server.src/prg/med/Apimgeuns.java
-    private lib.med.Datab da=new lib.med.Datab(Apimgeuns.this);
--- a/server.src/prg/med/Apimscpl.java
-    private lib.med.Datab da=new lib.med.Datab(Apimscpl.this);
-    private Field validatePlanPlannr = new Field("9(6)");
-    private Field validatePlanSvar = new Field("99");
-    private Field validatePlanLocked = new Field("X");
-    private Field validateOrdeOrdernr = new Field("9(6)");
-    private Field validateOrdeSvar = new Field("99");
-    private Field validateOrdeLocked = new Field("X");
-    private Field validateOrdeLockedPek = new Field("S9(9)");
-    private void validatePlan() {
-        lib.med.Planpost.fd plan=p8921.medplan.get();
-        plan.post.init();
-        plan.plannr.set(validatePlanPlannr);
-        p8921.medPlanReadKl();
-        if (!(pa.ok())) {
-            validatePlanSvar.set(1);
-        }
-        else {
-            call("prg.bas.tzdat", std.stdToday);
-            if (!(plan.lockAnv.equals(SPACE)) && plan.lockDat.equals(std.stdToday)) {
-                validatePlanSvar.set(2);
-            }
-            else {
-                plan.lockAnv.set("API");
-                call("prg.bas.tzdat", plan.lockDat);
-                call("prg.bas.tztid", plan.lockTid);
-                p8921.medPlanRewrite();
-                validatePlanLocked.set("J");
-                validatePlanSvar.set(0);
-            }
-        }
-        p8921.medFileCommit();
-    }
-
-    private void validatePlanUnlock() {
-        lib.med.Planpost.fd plan=p8921.medplan.get();
-        if (validatePlanLocked.equals("J")) {
-            plan.post.init();
-            plan.plannr.set(validatePlanPlannr);
-            p8921.medPlanReadKl();
-            if (pa.ok() && plan.lockAnv.equals("API")) {
-                plan.lockAnv.set(SPACE);
-                plan.lockDat.set(ZERO);
-                plan.lockTid.set(ZERO);
-                p8921.medPlanRewrite();
-                validatePlanLocked.set("N");
-            }
-            p8921.medFileCommit();
-        }
-    }
-
-    private void validateOrde() {
-        lib.med.Ordepost.fd orde=p8921.medorde.get();
-        orde.post.init();
-        orde.ordernr.set(validateOrdeOrdernr);
-        p8921.medOrdeReadKl();
-        if (!(pa.ok())) {
-            validateOrdeSvar.set(1);
-        }
-        else {
-            call("prg.bas.tzdat", std.stdToday);
-            if (!(orde.lockAnv.equals(SPACE)) && orde.lockDat.equals(std.stdToday)) {
-                validateOrdeSvar.set(2);
-            }
-            else {
-                orde.lockAnv.set("API");
-                call("prg.bas.tzdat", orde.lockDat);
-                call("prg.bas.tztid", orde.lockTid);
-                p8921.medOrdeRewrite();
-                for (validateOrdeLockedPek.set(1);(!((validateOrdeLockedPek.compareTo(1000)>0) || 
-                                (validateOrdeLockedOrdernr[validateOrdeLockedPek.getInt()-1].equalsEither(ZERO, validateOrdeOrdernr))));validateOrdeLockedPek.increment(1)) {
-                }
-                if (validateOrdeLockedPek.compareTo(1000)<=0) {
-                    validateOrdeLockedOrdernr[validateOrdeLockedPek.getInt()-1].set(validateOrdeOrdernr);
-                }
-                validateOrdeLocked.set("J");
-                validateOrdeSvar.set(0);
-            }
-        }
-        p8921.medFileCommit();
-    }
-
-    private void validateOrdeUnlock() {
-        lib.med.Ordepost.fd orde=p8921.medorde.get();
-        if (validateOrdeLocked.equals("J")) {
-            for (validateOrdeLockedPek.set(1);(!(validateOrdeLockedPek.compareTo(1000)>0 || validateOrdeLockedOrdernr[validateOrdeLockedPek.getInt()-1].equals(ZERO)));validateOrdeLockedPek.increment(1)) {
-                orde.post.init();
-                orde.ordernr.set(validateOrdeOrdernr);
-                p8921.medOrdeReadKl();
-                if (pa.ok() && orde.lockAnv.equals("API")) {
-                    orde.lockAnv.set(SPACE);
-                    orde.lockDat.set(ZERO);
-                    orde.lockTid.set(ZERO);
-                    p8921.medOrdeRewrite();
-                    validateOrdeLocked.set("N");
-                }
-                p8921.medFileCommit();
-            }
-        }
-    }
-
--- a/server.src/prg/med/Apimupin.java
-    private lib.med.Datab da=new lib.med.Datab(Apimupin.this);
-    private Field tmpBel = new Field("S9(10)V99");
-    private Field tmpHel = new Field("S9(10)");
-    private Field tmpBelT = new Field("X(25)");
-    private Field tmpComment = new Field("X(100)");
-    private Field tmpKurs = new Field("999999V9999");
-    private Field tmpKursAntal = new Field("999999");
-    private Field tmpDateD = new Field("X(10)");
-    private Field tmpDate = new Field("9(8)");
-    private Field tmpOinfLopnr = new Field("999");
--- a/server.src/prg/med/Apimupor.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Apimupor.this);
-    private lib.gem.Kamppost gemkamp=new lib.gem.Kamppost(Apimupor.this, pa);
-    private lib.pri.Medipost primedi=new lib.pri.Medipost(Apimupor.this);
-    private lib.med.Datab da=new lib.med.Datab(Apimupor.this);
--- a/server.src/prg/med/Apimuporhe.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Apimuporhe.this);
-    private lib.gem.Kamppost gemkamp=new lib.gem.Kamppost(Apimuporhe.this, pa);
-    private lib.pri.Medipost primedi=new lib.pri.Medipost(Apimuporhe.this);
-    private lib.med.Datab da=new lib.med.Datab(Apimuporhe.this);
--- a/server.src/prg/med/Apimupprro.java
-    private lib.med.Datab da=new lib.med.Datab(Apimupprro.this);
--- a/server.src/prg/med/Apipcrin.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apipcrin.this);
--- a/server.src/prg/med/Apipcrpr.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apipcrpr.this);
--- a/server.src/prg/med/Apipcrti.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apipcrti.this);
-    private Field tagCount = new Field("X(10)");
--- a/server.src/prg/med/Apipdeti.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apipdeti.this);
--- a/server.src/prg/med/Apipgecls.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apipgecls.this);
--- a/server.src/prg/med/Apipgecocls.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apipgecocls.this);
--- a/server.src/prg/med/Apipgeem.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apipgeem.this);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Apipgeem.this, pa);
-    private Field ejSlutford = new Field("X");
--- a/server.src/prg/med/Apipgeems.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apipgeems.this);
--- a/server.src/prg/med/Apipgefecos.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apipgefecos.this);
--- a/server.src/prg/med/Apipgein.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apipgein.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Apipgein.this, pa);
--- a/server.src/prg/med/Apipgeins.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apipgeins.this);
--- a/server.src/prg/med/Apipgeplres.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apipgeplres.this);
--- a/server.src/prg/med/Apipgepr.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apipgepr.this);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Apipgepr.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Apipgepr.this, pa);
-    private Field fsortEof = new Field("X", "N");
--- a/server.src/prg/med/Apipgeprs.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apipgeprs.this);
-    private Field proStartDate = new Field("9(8)");
-    private Field proDeadline = new Field("9(8)");
--- a/server.src/prg/med/Apipgetis.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apipgetis.this);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Apipgetis.this, pa);
--- a/server.src/prg/med/Apipgetist.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apipgetist.this);
--- a/server.src/prg/med/Apipsetist.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Apipsetist.this);
--- a/server.src/prg/med/Astatus.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Astatus.this);
-    private lib.med.Datab da=new lib.med.Datab(Astatus.this);
-    private Field datum2 = new Field("9(8)");
-    private Field datum3 = new Field("9(8)");
--- a/server.src/prg/med/Backplan.java
-    private lib.bas.Std std=new lib.bas.Std(Backplan.this);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Backplan.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(Backplan.this);
-    private Field fsortFs1 = fsortFs.extend("X");
-    private Field fsortFs2 = fsortFs.extend("X");
-    private Field i = new Field("9(5)");
--- a/server.src/prg/med/Baro.java
-    private lib.med.Datab da=new lib.med.Datab(Baro.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Baro.this);
-    private Field tabfilP1 = new Field("X(80)");
-    private Field tabfilP2 = new Field("X(80)");
-    private Field tabfilP3 = new Field("X(80)");
-    private Field tabfilP4 = new Field("X(80)");
-    private Field tabfilP5 = new Field("X(80)");
-    private Field tabfilP = new Field("X(100)");
-    private Field tabfilPPek = new Field("S9(9)");
-    private Field tabfilTmpP = new Field("X(100)");
-    private Field tabfilTmpPPek = new Field("S9(9)");
-    private void tabfilLeftP1() {
-        tabfilP.set(tabfilP1);
-        tabfilLeft();
-        tabfilP1.set(tabfilP);
-    }
-
-    private void tabfilLeftP2() {
-        tabfilP.set(tabfilP2);
-        tabfilLeft();
-        tabfilP2.set(tabfilP);
-    }
-
-    private void tabfilLeftP3() {
-        tabfilP.set(tabfilP3);
-        tabfilLeft();
-        tabfilP3.set(tabfilP);
-    }
-
-    private void tabfilLeftP4() {
-        tabfilP.set(tabfilP4);
-        tabfilLeft();
-        tabfilP4.set(tabfilP);
-    }
-
-    private void tabfilLeftP5() {
-        tabfilP.set(tabfilP5);
-        tabfilLeft();
-        tabfilP5.set(tabfilP);
-    }
-
-    private void tabfilLeft() {
-        if (!(tabfilP.equals(SPACE))) {
-            for (tabfilPek.set(1);(!((!(tabfilP.ref(tabfilPek,1).equals(SPACE)) && !(tabfilP.ref(tabfilPek,1).equals("0"))) || 
-                            (tabfilPek.compareTo(25)>0)));tabfilPek.increment(1)) {
-            }
-            tabfilTmpRad.set(tabfilP.ref(tabfilPek));
-            tabfilP.set(tabfilTmpRad);
-        }
-    }
-
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortWrite() {
-        fsortPost.write();
-        if (fsortPost.invalidKey()) {
-            fsortPost.rewrite();
-        }
-    }
-
--- a/server.src/prg/med/Baroexp.java
-    private lib.med.Datab da=new lib.med.Datab(Baroexp.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Baroexp.this);
-    private Field tabfilP1 = new Field("X(80)");
-    private Field tabfilP2 = new Field("X(80)");
-    private Field tabfilP3 = new Field("X(80)");
-    private Field tabfilP4 = new Field("X(80)");
-    private Field tabfilP5 = new Field("X(80)");
-    private Field tabfilP = new Field("X(100)");
-    private Field tabfilPPek = new Field("S9(9)");
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortWrite() {
-        fsortPost.write();
-        if (fsortPost.invalidKey()) {
-            fsortPost.rewrite();
-        }
-    }
-
--- a/server.src/prg/med/Betdiff.java
-    private lib.med.Datab da=new lib.med.Datab(Betdiff.this);
-    private lib.bas.Std std=new lib.bas.Std(Betdiff.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Betdiff.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Betdiff.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field pgm = new Field("X(11)", "BETDIFF");
-    private Field i = new Field("99999");
--- a/server.src/prg/med/Bi.java
-    private Field felfilFilnamn = new Field("X(50)");
-    private Field fmomsEof = new Field("X");    
-    private Field fusersEof = new Field("X");
-    private Field fdevicesEof = new Field("X");
-    private Field fuserlimitclientsEof = new Field("X");
-    private Field fbudgetclientsEof = new Field("X");
-    private Field fclientsEof = new Field("X");
-    private Field fclientskunEof = new Field("X");
-    private Field fclientsproEof = new Field("X");
-    private Field fclientsmedEof = new Field("X");
-    private Field fclientagreementsEof = new Field("X");
-    private Field fcollclientsEof = new Field("X");
-    private Field fcollproductsEof = new Field("X");
-    private Field fproductsEof = new Field("X");
-    private Field fagreementsEof = new Field("X");
-    private Field fagreementmediatypesEof = new Field("X");
-    private Field fasEof = new Field("X");
-    private Field fsurchagreesEof = new Field("X");
-    private Field fsurchagreemediatypesEof = new Field("X");
-    private Field fsurchagreemediasEof = new Field("X");
-    private Field fclientcatsEof = new Field("X");
-    private Field fcollcollgroupsEof = new Field("X");
-    private Field fcollgroupsEof = new Field("X");
-    private Field fgroupsEof = new Field("X");
-    private Field fgroupsmedEof = new Field("X");
-    private Field fgroupsproEof = new Field("X");
-    private Field fdigitalchannelsEof = new Field("X");
-    private Field funitsEof = new Field("X");
-    private Field fprojectsEof = new Field("X");
-    private Field fprojectfreesEof = new Field("X");
-    private Field fjobtypesEof = new Field("X");
-    private Field fprojectlabels1Eof = new Field("X");
-    private Field fprojectlabels2Eof = new Field("X");
-    private Field fcampaignsEof = new Field("X");
-    private Field frefsEof = new Field("X");
-    private Field fcollpublishersEof = new Field("X");
-    private Field fpublishersEof = new Field("X");
-    private Field fmediabrandsEof = new Field("X");
-    private Field fmedstatcodesEof = new Field("X");
-    private Field fmediasEof = new Field("X");
-    private Field flocalmediasEof = new Field("X");
-    private Field fmediaclassesEof = new Field("X");
-    private Field fcollmediatypesEof = new Field("X");
-    private Field fmediatypesEof = new Field("X");
-    private Field fsurchargecodesEof = new Field("X");
-    private Field fdiscountcodesEof = new Field("X");
-    private Field fagenciesEof = new Field("X");
-    private Field femployeesEof = new Field("X");
-    private Field fcalendarsEof = new Field("X");
-    private Field fcontractedhoursEof = new Field("X");
-    private Field fteamsEof = new Field("X");
-    private Field fstaffcatsEof = new Field("X");
-    private Field fpositionsEof = new Field("X");
-    private Field ffeecatsEof = new Field("X");
-    private Field fpurchasecatsEof = new Field("X");
-    private Field fothercatsEof = new Field("X");
-    private Field ffeecodesEof = new Field("X");
-    private Field fpurchasecodesEof = new Field("X");
-    private Field fothercodesEof = new Field("X");
-    private Field fprojectbudgetsEof = new Field("X");
-    private Field fprojectbudgetfeesEof = new Field("X");
-    private Field fpbpEof = new Field("X");
-    private Field fprojectbudgetothersEof = new Field("X");
-    private Field fsuppliersEof = new Field("X");
-    private Field fsuppliercatsEof = new Field("X");
-    private Field faccountsEof = new Field("X");
-    private Field fsumcostcentresEof = new Field("X");
-    private Field fcostcentresEof = new Field("X");
-    private Field fcostobjectsEof = new Field("X");
-    private Field freportaccounts1Eof = new Field("X");
-    private Field freportaccounts2Eof = new Field("X");
-    private Field freportaccounts3Eof = new Field("X");
-    private Field fplansEof = new Field("X");
-    private Field fordersEof = new Field("X");
-    private Field forderpackagesEof = new Field("X");
-    private Field fipEof = new Field("X");
-    private Field fallocationsEof = new Field("X");
-    private Field finsertionsEof = new Field("X");
-    private Field fpricerowsEof = new Field("X");
-    private Field fpreinvoicesEof = new Field("X");
-    private Field fcinvoicesEof = new Field("X");
-    private Field fcinvoicerowsEof = new Field("X");
-    private Field faaEof = new Field("X");
-    private Field fminvoicesEof = new Field("X");
-    private Field fmirEof = new Field("X");
-    private Field fsdEof = new Field("X");
-    private Field freconciliationsEof = new Field("X");
-    private Field fmunbookedinvoicesEof = new Field("X");
-    private Field ftimereportrowsEof = new Field("X");
-    private Field ftimereports2Eof = new Field("X");
-    private Field ftimereportrows2Eof = new Field("X");
-    private Field ffeeadjustmentsEof = new Field("X");
-    private Field fpurchasesEof = new Field("X");
-    private Field fpaEof = new Field("X");
-    private Field fothersEof = new Field("X");
-    private Field fotheradjustmentsEof = new Field("X");
-    private Field fpinvoicesEof = new Field("X");
-    private Field fpinvoicefeesEof = new Field("X");
-    private Field fpipEof = new Field("X");
-    private Field fpinvoiceothersEof = new Field("X");
-    private Field ffeeaggsEof = new Field("X");
-    private Field fprojaggsEof = new Field("X");
-    private Field fperiodsEof = new Field("X");
-    private Field fvouchersEof = new Field("X");
-    private Field fvoucherrowsEof = new Field("X");
-    private Field fcostallocsEof = new Field("X");
-    private Field fcostestimatesEof = new Field("X");
-    private Field faccountbalancesEof = new Field("X");
-    private Field fslinvoicesEof = new Field("X");
-    private Field fslpaymentsEof = new Field("X");
-    private Field finterestinvoicesEof = new Field("X");
-    private Field finterestinvoicerowsEof = new Field("X");
-    private Field fplunbookedinvsEof = new Field("X");
-    private Field fplunbookedinvrowsEof = new Field("X");
-    private Field fplinvoicesEof = new Field("X");
-    private Field fplpEof = new Field("X");
-    private Field amount = new Field("S9(9)V99");
-    private Field feecodeKey = new Field("X(3)");
-    private Field purchasecodeKey = new Field("X(3)");
-    private Field othercodeKey = new Field("X(3)");
-    private Field wsGrupp = new Field("XX");
-    private Field wsLopnr = new Field("9(8)");
--- a/server.src/prg/med/Bib.java
-    private Field fmomsEof = new Field("X");
-    private Field fclientsEof = new Field("X");
-    private Field fclientskunEof = new Field("X");
-    private Field fsuppliersEof = new Field("X");
-    private Field fsuppliercatsEof = new Field("X");
-    private Field faccountsEof = new Field("X");
-    private Field fsumcostcentresEof = new Field("X");
-    private Field fcostcentresEof = new Field("X");
-    private Field fcostobjectsEof = new Field("X");
-    private Field freportaccounts1Eof = new Field("X");
-    private Field freportaccounts2Eof = new Field("X");
-    private Field freportaccounts3Eof = new Field("X");
-    private Field fperiodsEof = new Field("X");
-    private Field fvouchersEof = new Field("X");
-    private Field fvoucherrowsEof = new Field("X");
-    private Field fcostallocsEof = new Field("X");
-    private Field fcostestimatesEof = new Field("X");
-    private Field faccountbalancesEof = new Field("X");
-    private Field fslinvoicesEof = new Field("X");
-    private Field fslpaymentsEof = new Field("X");
-    private Field finterestinvoicesEof = new Field("X");
-    private Field finterestinvoicerowsEof = new Field("X");
-    private Field fplunbookedinvsEof = new Field("X");
-    private Field fplunbookedinvrowsEof = new Field("X");
-    private Field fplinvoicesEof = new Field("X");
-    private Field fplpaymentsEof = new Field("X");
-    private Field accountName = new Field("X(100)");
-    private Field costcentreName = new Field("X(100)");
-    private Field costobjectName = new Field("X(100)");
-    private Field balanceout = new Field("S9(9)V99");
--- a/server.src/prg/med/Bibinc.java
-    private lib.pro.Textpost protext=new lib.pro.Textpost(Bibinc.this, pa);
-    private lib.pro.Almapost proalma=new lib.pro.Almapost(Bibinc.this, pa);
-    private lib.pro.Lexipost prolexi=new lib.pro.Lexipost(Bibinc.this, pa);
-    private lib.pro.Peripost properi=new lib.pro.Peripost(Bibinc.this, pa);
-    private lib.pro.Pestpost propest=new lib.pro.Pestpost(Bibinc.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(Bibinc.this);
-    private Field p04921Namnftg = new Field("X(25)");
-    private Field p04921SparRecord = new Field("X(4)");
-    private Field p04921SparAction = new Field("X(25)");
-    private Field p04921SparDasvar = new Field("XX");
-    private Field proSparTidgPost = new Field("X(3000)");
-    private Field proPrevTidgPost = new Field("X(3000)");
-    private Field proSparFil21Post = new Field("X(3000)");
-    private Field proSparJarvPost = new Field("X(3000)");
-    private Field proPrevJarvPost = new Field("X(3000)");
-    private Field proSparJinkPost = new Field("X(3000)");
-    private Field proPrevJinkPost = new Field("X(3000)");
-    private Field proSparJmatPost = new Field("X(3000)");
-    private Field proPrevJmatPost = new Field("X(3000)");
-    private Field proSparVandPost = new Field("X(3000)");
-    private Field proPrevVandPost = new Field("X(3000)");
-    private Field proTidrOpen = new Field("X");
-    private Field proStatOpen = new Field("X");
-    private Field proTidgOpen = new Field("X");
-    private Field proBokfOpen = new Field("X");
-    private Field proUndlOpen = new Field("X");
-    private Field proBenkOpen = new Field("X");
-    private Field proResrOpen = new Field("X");
-    private Field proFradOpen = new Field("X");
-    private Field proBildOpen = new Field("X");
-    private Field proVandOpen = new Field("X");
-    private Field proJarvOpen = new Field("X");
-    private Field proJinkOpen = new Field("X");
-    private Field proJmatOpen = new Field("X");
-    private Field proRappOpen = new Field("X");
-    private Field proKbudOpen = new Field("X");
-    private Field proPfriOpen = new Field("X");
-    private Field proFkunOpen = new Field("X");
-    private Field proPrfrOpen = new Field("X");
-    private Field proKperOpen = new Field("X");
-    private Field proTidwOpen = new Field("X");
-    private Field proBudwOpen = new Field("X");
-    private Field proBudaOpen = new Field("X");
-    private Field proBudiOpen = new Field("X");
-    private Field proBudoOpen = new Field("X");
-    private Field proTidfOpen = new Field("X");
-    private Field proTidoOpen = new Field("X");
-    private Field proOfhuOpen = new Field("X");
-    private Field proOfraOpen = new Field("X");
-    private Field proOfprOpen = new Field("X");
-    private Field proPma1Open = new Field("X");
-    private Field proPma2Open = new Field("X");
-    private Field proRrapOpen = new Field("X");
-    private Field proRkolOpen = new Field("X");
-    private Field proRbegOpen = new Field("X");
-    private Field proRselOpen = new Field("X");
-    private Field proFateOpen = new Field("X");
-    private Field proFaanOpen = new Field("X");
-    private Field proFaauOpen = new Field("X");
-    private Field proRkopOpen = new Field("X");
-    private Field proLahuOpen = new Field("X");
-    private Field proLaprOpen = new Field("X");
-    private Field proPnotOpen = new Field("X");
-    private Field proRbehOpen = new Field("X");
-    private Field proBudtOpen = new Field("X");
-    private Field proReplOpen = new Field("X");
-    private Field proAgrpOpen = new Field("X");
-    private Field proTidmOpen = new Field("X");
-    private Field proBefaOpen = new Field("X");
-    private Field proIfakOpen = new Field("X");
-    private Field proIfabOpen = new Field("X");
-    private Field proIfatOpen = new Field("X");
-    private Field proIjusOpen = new Field("X");
-    private Field proIjubOpen = new Field("X");
-    private Field proIfaaOpen = new Field("X");
-    private Field proKunbOpen = new Field("X");
-    private Field proIfapOpen = new Field("X");
-    private Field proRepuOpen = new Field("X");
-    private Field proOgrpOpen = new Field("X");
-    private Field proOogrOpen = new Field("X");
-    private Field proIfasOpen = new Field("X");
-    private Field proTlgeOpen = new Field("X");
-    private Field proTlgtOpen = new Field("X");
-    private Field proSalaOpen = new Field("X");
-    private Field proSataOpen = new Field("X");
-    private Field proTidrOpenFtg = new Field("X(4)");
-    private Field proStatOpenFtg = new Field("X(4)");
-    private Field proTidgOpenFtg = new Field("X(4)");
-    private Field proBokfOpenFtg = new Field("X(4)");
-    private Field proUndlOpenFtg = new Field("X(4)");
-    private Field proBenkOpenFtg = new Field("X(4)");
-    private Field proResrOpenFtg = new Field("X(4)");
-    private Field proFradOpenFtg = new Field("X(4)");
-    private Field proBildOpenFtg = new Field("X(4)");
-    private Field proVandOpenFtg = new Field("X(4)");
-    private Field proJarvOpenFtg = new Field("X(4)");
-    private Field proJinkOpenFtg = new Field("X(4)");
-    private Field proJmatOpenFtg = new Field("X(4)");
-    private Field proRappOpenFtg = new Field("X(4)");
-    private Field proKbudOpenFtg = new Field("X(4)");
-    private Field proPfriOpenFtg = new Field("X(4)");
-    private Field proFkunOpenFtg = new Field("X(4)");
-    private Field proPrfrOpenFtg = new Field("X(4)");
-    private Field proKperOpenFtg = new Field("X(4)");
-    private Field proTidwOpenFtg = new Field("X(4)");
-    private Field proBudwOpenFtg = new Field("X(4)");
-    private Field proBudaOpenFtg = new Field("X(4)");
-    private Field proBudiOpenFtg = new Field("X(4)");
-    private Field proBudoOpenFtg = new Field("X(4)");
-    private Field proTidfOpenFtg = new Field("X(4)");
-    private Field proTidoOpenFtg = new Field("X(4)");
-    private Field proOfhuOpenFtg = new Field("X(4)");
-    private Field proOfraOpenFtg = new Field("X(4)");
-    private Field proOfprOpenFtg = new Field("X(4)");
-    private Field proPma1OpenFtg = new Field("X(4)");
-    private Field proPma2OpenFtg = new Field("X(4)");
-    private Field proRrapOpenFtg = new Field("X(4)");
-    private Field proRkolOpenFtg = new Field("X(4)");
-    private Field proRbegOpenFtg = new Field("X(4)");
-    private Field proRselOpenFtg = new Field("X(4)");
-    private Field proFateOpenFtg = new Field("X(4)");
-    private Field proFaanOpenFtg = new Field("X(4)");
-    private Field proFaauOpenFtg = new Field("X(4)");
-    private Field proRkopOpenFtg = new Field("X(4)");
-    private Field proLahuOpenFtg = new Field("X(4)");
-    private Field proLaprOpenFtg = new Field("X(4)");
-    private Field proPnotOpenFtg = new Field("X(4)");
-    private Field proRbehOpenFtg = new Field("X(4)");
-    private Field proBudtOpenFtg = new Field("X(4)");
-    private Field proReplOpenFtg = new Field("X(4)");
-    private Field proAgrpOpenFtg = new Field("X(4)");
-    private Field proTidmOpenFtg = new Field("X(4)");
-    private Field proBefaOpenFtg = new Field("X(4)");
-    private Field proIfakOpenFtg = new Field("X(4)");
-    private Field proIfabOpenFtg = new Field("X(4)");
-    private Field proIfatOpenFtg = new Field("X(4)");
-    private Field proIjusOpenFtg = new Field("X(4)");
-    private Field proIjubOpenFtg = new Field("X(4)");
-    private Field proIfaaOpenFtg = new Field("X(4)");
-    private Field proKunbOpenFtg = new Field("X(4)");
-    private Field proIfapOpenFtg = new Field("X(4)");
-    private Field proRepuOpenFtg = new Field("X(4)");
-    private Field proOgrpOpenFtg = new Field("X(4)");
-    private Field proOogrOpenFtg = new Field("X(4)");
-    private Field proIfasOpenFtg = new Field("X(4)");
-    private Field proTlgeOpenFtg = new Field("X(4)");
-    private Field proTlgtOpenFtg = new Field("X(4)");
-    private Field proSalaOpenFtg = new Field("X(4)");
-    private Field proSataOpenFtg = new Field("X(4)");
-    private Field costamountD = new Field("----------9.99");
-    private Field costamountSt = new Field("S9(9)");
-    private Field contractedhoursD = new Field("----------9.99");
-    private Field contractedhoursSt = new Field("S9(9)");
-    private Field medOrdeLastAction = new Field("X");
-    private Field medOrdeLastBkstvftg = new Field("X(4)");
-    private Field medOrdeLastOrdernr = new Field("9(6)");
-    private Field medOforNum = new Field("S9(10)V99");
-    private Field proNum = new Field("S9(9)V99");
-                    Thread.currentThread().sleep((int)(Math.random()*50));
-        private void proFil1OpenIo() {
-            proFilhantInit();
-            proFil1Init();
-            proFilhantExit();
-        }
-
-        private void proFil1OpenI() {
-            proFilhantInit();
-            if (proFil1Open.equals("J") && !(proFil1OpenFtg.equals(pa.bkstvftg))) {
-                proFil1Close();
-            }
-            if (!(proFil1Open.equals("J"))) {
-                proFil1Filnamn.set(SPACE);
-                proFil1Filnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-1"));
-                proFil1.open("INPUT");
-                if (!((p04921Dasvar.equals("00")))) {
-                    proFil1.close();
-                    proFil1.open("I-O");
-                    proCheck00();
-                    proFil1.close();
-                    proCheck00();
-                    proFil1.open("INPUT");
-                    proCheck00();
-                }
-                proFil1Open.set("J");
-                proFil1OpenFtg.set(pa.bkstvftg);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil1ReadKl() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proFil1.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFil1Readnext() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start(">", "pro_fil_1_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proFil1ReadnextK2() {
-            proFil1.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start(">", "pro_fil_1_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readNext();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proFil1ReadnextK3() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start(">", "pro_fil_1_key3");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readNext();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proFil1ReadnextK4() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start(">", "pro_fil_1_key4");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readNext();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proFil1ReadnextK5() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start(">", "pro_fil_1_key5");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readNext();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proFil1ReadnextK6() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start(">", "pro_fil_1_key6");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readNext();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proFil1ReadnextK7() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start(">", "pro_fil_1_key7");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readNext();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proFil1Readprev() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("<", "pro_fil_1_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proFil1ReadprevK2() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("<", "pro_fil_1_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readPrevious();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proFil1ReadprevK3() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("<", "pro_fil_1_key3");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readPrevious();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proFil1ReadprevK4() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("<", "pro_fil_1_key4");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readPrevious();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proFil1ReadprevK5() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("<", "pro_fil_1_key5");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readPrevious();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proFil1ReadprevK6() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("<", "pro_fil_1_key6");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readPrevious();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proFil1ReadprevK7() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("<", "pro_fil_1_key7");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readPrevious();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proFil1Rewrite() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1Post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFil1OpenFtg, pa.bfar, "PRO", p04921Record, "U", proFil1Post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil1Write() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1Post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1Post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFil1OpenFtg, pa.bfar, "PRO", p04921Record, "N", proFil1Post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil1Delete() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFil1OpenFtg, pa.bfar, "PRO", p04921Record, "D", proFil1Post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil1StartEg() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT<", "pro_fil_1_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT<", "pro_fil_1_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFil1StartEgK2() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT<", "pro_fil_1_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT<", "pro_fil_1_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil1StartEgK3() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT<", "pro_fil_1_key3");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT<", "pro_fil_1_key3");
-            }
-            proCheck000223();
-            proFilhantExit();
-        private void proFil1StartEgK4() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT<", "pro_fil_1_key4");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT<", "pro_fil_1_key4");
-            }
-            proCheck000223();
-            proFilhantExit();
-        private void proFil1StartEgK5() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT<", "pro_fil_1_key5");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT<", "pro_fil_1_key5");
-            }
-            proCheck000223();
-            proFilhantExit();
-        private void proFil1StartEgK6() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT<", "pro_fil_1_key6");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT<", "pro_fil_1_key6");
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil1StartEgK7() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT<", "pro_fil_1_key7");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT<", "pro_fil_1_key7");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil1StartprevEg() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT>", "pro_fil_1_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT>", "pro_fil_1_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFil1StartprevEgK2() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT>", "pro_fil_1_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT>", "pro_fil_1_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil1StartprevEgK3() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT>", "pro_fil_1_key3");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT>", "pro_fil_1_key3");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil1StartprevEgK4() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT>", "pro_fil_1_key4");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT>", "pro_fil_1_key4");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil1StartprevEgK5() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT>", "pro_fil_1_key5");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT>", "pro_fil_1_key5");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil1StartprevEgK6() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT>", "pro_fil_1_key6");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT>", "pro_fil_1_key6");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil1StartprevEgK7() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT>", "pro_fil_1_key7");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT>", "pro_fil_1_key7");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proForeOpenIo() {
-            p04921Record.set("FORE");
-            p04921Action.set("OPEN-IO");
-            proFil1OpenIo();
-        }
-
-        private void proForeOpenI() {
-            p04921Record.set("FORE");
-            p04921Action.set("OPEN-I");
-            proFil1OpenI();
-        }
-
-        private void proForeClose() {
-            p04921Record.set("FORE");
-            p04921Action.set("CLOSE");
-            proFil1Close();
-        }
-
-        private void proForeRead() {
-            p04921Record.set("FORE");
-            p04921Action.set("READ");
-            proFil1Post.set(profore.get().post);
-            proFil1Read();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadKl() {
-            p04921Record.set("FORE");
-            p04921Action.set("READ-KL");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadKl();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadnext() {
-            p04921Record.set("FORE");
-            p04921Action.set("READNEXT");
-            proFil1Post.set(profore.get().post);
-            proFil1Readnext();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadnextK2() {
-            p04921Record.set("FORE");
-            p04921Action.set("READNEXT-K2");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadnextK2();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadnextK3() {
-            p04921Record.set("FORE");
-            p04921Action.set("READNEXT-K3");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadnextK3();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadnextK4() {
-            p04921Record.set("FORE");
-            p04921Action.set("READNEXT-K4");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadnextK4();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadnextK5() {
-            p04921Record.set("FORE");
-            p04921Action.set("READNEXT-K5");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadnextK5();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadnextK6() {
-            p04921Record.set("FORE");
-            p04921Action.set("READNEXT-K6");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadnextK6();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadnextK7() {
-            p04921Record.set("FORE");
-            p04921Action.set("READNEXT-K7");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadnextK7();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadprev() {
-            p04921Record.set("FORE");
-            p04921Action.set("READPREV");
-            proFil1Post.set(profore.get().post);
-            proFil1Readprev();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadprevK2() {
-            p04921Record.set("FORE");
-            p04921Action.set("READPREV-K2");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadprevK2();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadprevK3() {
-            p04921Record.set("FORE");
-            p04921Action.set("READPREV-K3");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadprevK3();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadprevK4() {
-            p04921Record.set("FORE");
-            p04921Action.set("READPREV-K4");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadprevK4();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadprevK5() {
-            p04921Record.set("FORE");
-            p04921Action.set("READPREV-K5");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadprevK5();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadprevK6() {
-            p04921Record.set("FORE");
-            p04921Action.set("READPREV-K6");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadprevK6();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadprevK7() {
-            p04921Record.set("FORE");
-            p04921Action.set("READPREV-K7");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadprevK7();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeRewrite() {
-            p04921Record.set("FORE");
-            p04921Action.set("REWRITE");
-            proFil1Post.set(profore.get().post);
-            proFil1Rewrite();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeWrite() {
-            p04921Record.set("FORE");
-            p04921Action.set("WRITE");
-            proFil1Post.set(profore.get().post);
-            proFil1Write();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeDelete() {
-            p04921Record.set("FORE");
-            p04921Action.set("DELETE");
-            proFil1Post.set(profore.get().post);
-            proFil1Delete();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartEg() {
-            p04921Record.set("FORE");
-            p04921Action.set("START-EG");
-            proFil1Post.set(profore.get().post);
-            proFil1StartEg();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartEgK2() {
-            p04921Record.set("FORE");
-            p04921Action.set("START-EG-K2");
-            proFil1Post.set(profore.get().post);
-            proFil1StartEgK2();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartEgK3() {
-            p04921Record.set("FORE");
-            p04921Action.set("START-EG-K3");
-            proFil1Post.set(profore.get().post);
-            proFil1StartEgK3();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartEgK4() {
-            p04921Record.set("FORE");
-            p04921Action.set("START-EG-K4");
-            proFil1Post.set(profore.get().post);
-            proFil1StartEgK4();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartEgK5() {
-            p04921Record.set("FORE");
-            p04921Action.set("START-EG-K5");
-            proFil1Post.set(profore.get().post);
-            proFil1StartEgK5();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartEgK6() {
-            p04921Record.set("FORE");
-            p04921Action.set("START-EG-K6");
-            proFil1Post.set(profore.get().post);
-            proFil1StartEgK6();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartEgK7() {
-            p04921Record.set("FORE");
-            p04921Action.set("START-EG-K7");
-            proFil1Post.set(profore.get().post);
-            proFil1StartEgK7();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartprevEg() {
-            p04921Record.set("FORE");
-            p04921Action.set("STARTPREV-EG");
-            proFil1Post.set(profore.get().post);
-            proFil1StartprevEg();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartprevEgK2() {
-            p04921Record.set("FORE");
-            p04921Action.set("STARTPREV-EG-K2");
-            proFil1Post.set(profore.get().post);
-            proFil1StartprevEgK2();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartprevEgK3() {
-            p04921Record.set("FORE");
-            p04921Action.set("STARTPREV-EG-K3");
-            proFil1Post.set(profore.get().post);
-            proFil1StartprevEgK3();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartprevEgK4() {
-            p04921Record.set("FORE");
-            p04921Action.set("STARTPREV-EG-K4");
-            proFil1Post.set(profore.get().post);
-            proFil1StartprevEgK4();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartprevEgK5() {
-            p04921Record.set("FORE");
-            p04921Action.set("STARTPREV-EG-K5");
-            proFil1Post.set(profore.get().post);
-            proFil1StartprevEgK5();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartprevEgK6() {
-            p04921Record.set("FORE");
-            p04921Action.set("STARTPREV-EG-K6");
-            proFil1Post.set(profore.get().post);
-            proFil1StartprevEgK6();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartprevEgK7() {
-            p04921Record.set("FORE");
-            p04921Action.set("STARTPREV-EG-K7");
-            proFil1Post.set(profore.get().post);
-            proFil1StartprevEgK7();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proKundOpenIo() {
-            p04921Record.set("KUND");
-            p04921Action.set("OPEN-IO");
-            proFil1OpenIo();
-        }
-
-        private void proKundOpenI() {
-            p04921Record.set("KUND");
-            p04921Action.set("OPEN-I");
-            proFil1OpenI();
-        }
-
-        private void proKundClose() {
-            p04921Record.set("KUND");
-            p04921Action.set("CLOSE");
-            proFil1Close();
-        }
-
-        private void proKundRead() {
-            p04921Record.set("KUND");
-            p04921Action.set("READ");
-            proFil1Post.set(prokund.get().post);
-            proFil1Read();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadKl() {
-            p04921Record.set("KUND");
-            p04921Action.set("READ-KL");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadKl();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadnext() {
-            p04921Record.set("KUND");
-            p04921Action.set("READNEXT");
-            proFil1Post.set(prokund.get().post);
-            proFil1Readnext();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadnextK2() {
-            p04921Record.set("KUND");
-            p04921Action.set("READNEXT-K2");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadnextK2();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadnextK3() {
-            p04921Record.set("KUND");
-            p04921Action.set("READNEXT-K3");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadnextK3();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadnextK4() {
-            p04921Record.set("KUND");
-            p04921Action.set("READNEXT-K4");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadnextK4();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadnextK5() {
-            p04921Record.set("KUND");
-            p04921Action.set("READNEXT-K5");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadnextK5();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadnextK6() {
-            p04921Record.set("KUND");
-            p04921Action.set("READNEXT-K6");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadnextK6();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadnextK7() {
-            p04921Record.set("KUND");
-            p04921Action.set("READNEXT-K7");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadnextK7();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadprev() {
-            p04921Record.set("KUND");
-            p04921Action.set("READPREV");
-            proFil1Post.set(prokund.get().post);
-            proFil1Readprev();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadprevK2() {
-            p04921Record.set("KUND");
-            p04921Action.set("READPREV-K2");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadprevK2();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadprevK3() {
-            p04921Record.set("KUND");
-            p04921Action.set("READPREV-K3");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadprevK3();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadprevK4() {
-            p04921Record.set("KUND");
-            p04921Action.set("READPREV-K4");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadprevK4();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadprevK5() {
-            p04921Record.set("KUND");
-            p04921Action.set("READPREV-K5");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadprevK5();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadprevK6() {
-            p04921Record.set("KUND");
-            p04921Action.set("READPREV-K6");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadprevK6();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadprevK7() {
-            p04921Record.set("KUND");
-            p04921Action.set("READPREV-K7");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadprevK7();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundRewrite() {
-            p04921Record.set("KUND");
-            p04921Action.set("REWRITE");
-            proFil1Post.set(prokund.get().post);
-            proFil1Rewrite();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundWrite() {
-            p04921Record.set("KUND");
-            p04921Action.set("WRITE");
-            proFil1Post.set(prokund.get().post);
-            proFil1Write();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundDelete() {
-            p04921Record.set("KUND");
-            p04921Action.set("DELETE");
-            proFil1Post.set(prokund.get().post);
-            proFil1Delete();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartEg() {
-            p04921Record.set("KUND");
-            p04921Action.set("START-EG");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartEg();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartEgK2() {
-            p04921Record.set("KUND");
-            p04921Action.set("START-EG-K2");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartEgK2();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartEgK3() {
-            p04921Record.set("KUND");
-            p04921Action.set("START-EG-K3");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartEgK3();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartEgK4() {
-            p04921Record.set("KUND");
-            p04921Action.set("START-EG-K4");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartEgK4();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartEgK5() {
-            p04921Record.set("KUND");
-            p04921Action.set("START-EG-K5");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartEgK5();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartEgK6() {
-            p04921Record.set("KUND");
-            p04921Action.set("START-EG-K6");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartEgK6();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartEgK7() {
-            p04921Record.set("KUND");
-            p04921Action.set("START-EG-K7");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartEgK7();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartprevEg() {
-            p04921Record.set("KUND");
-            p04921Action.set("STARTPREV-EG");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartprevEg();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartprevEgK2() {
-            p04921Record.set("KUND");
-            p04921Action.set("STARTPREV-EG-K2");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartprevEgK2();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartprevEgK3() {
-            p04921Record.set("KUND");
-            p04921Action.set("STARTPREV-EG-K3");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartprevEgK3();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartprevEgK4() {
-            p04921Record.set("KUND");
-            p04921Action.set("STARTPREV-EG-K4");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartprevEgK4();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartprevEgK5() {
-            p04921Record.set("KUND");
-            p04921Action.set("STARTPREV-EG-K5");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartprevEgK5();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartprevEgK6() {
-            p04921Record.set("KUND");
-            p04921Action.set("STARTPREV-EG-K6");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartprevEgK6();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartprevEgK7() {
-            p04921Record.set("KUND");
-            p04921Action.set("STARTPREV-EG-K7");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartprevEgK7();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proProjOpenIo() {
-            p04921Record.set("PROJ");
-            p04921Action.set("OPEN-IO");
-            proFil1OpenIo();
-        }
-
-        private void proProjOpenI() {
-            p04921Record.set("PROJ");
-            p04921Action.set("OPEN-I");
-            proFil1OpenI();
-        }
-
-        private void proProjClose() {
-            p04921Record.set("PROJ");
-            p04921Action.set("CLOSE");
-            proFil1Close();
-        }
-
-        private void proProjRead() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READ");
-            proFil1Post.set(proproj.get().post);
-            proFil1Read();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadKl() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READ-KL");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadKl();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadnext() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READNEXT");
-            proFil1Post.set(proproj.get().post);
-            proFil1Readnext();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadnextK2() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READNEXT-K2");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadnextK2();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadnextK3() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READNEXT-K3");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadnextK3();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadnextK4() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READNEXT-K4");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadnextK4();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadnextK5() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READNEXT-K5");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadnextK5();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadnextK6() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READNEXT-K6");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadnextK6();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadnextK7() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READNEXT-K7");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadnextK7();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadprev() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READPREV");
-            proFil1Post.set(proproj.get().post);
-            proFil1Readprev();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadprevK2() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READPREV-K2");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadprevK2();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadprevK3() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READPREV-K3");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadprevK3();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadprevK4() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READPREV-K4");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadprevK4();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadprevK5() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READPREV-K5");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadprevK5();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadprevK6() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READPREV-K6");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadprevK6();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadprevK7() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READPREV-K7");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadprevK7();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjRewrite() {
-            p04921Record.set("PROJ");
-            p04921Action.set("REWRITE");
-            proFil1Post.set(proproj.get().post);
-            proFil1Rewrite();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjWrite() {
-            p04921Record.set("PROJ");
-            p04921Action.set("WRITE");
-            proFil1Post.set(proproj.get().post);
-            proFil1Write();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjDelete() {
-            p04921Record.set("PROJ");
-            p04921Action.set("DELETE");
-            proFil1Post.set(proproj.get().post);
-            proFil1Delete();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartEg() {
-            p04921Record.set("PROJ");
-            p04921Action.set("START-EG");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartEg();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartEgK2() {
-            p04921Record.set("PROJ");
-            p04921Action.set("START-EG-K2");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartEgK2();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartEgK3() {
-            p04921Record.set("PROJ");
-            p04921Action.set("START-EG-K3");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartEgK3();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartEgK4() {
-            p04921Record.set("PROJ");
-            p04921Action.set("START-EG-K4");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartEgK4();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartEgK5() {
-            p04921Record.set("PROJ");
-            p04921Action.set("START-EG-K5");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartEgK5();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartEgK6() {
-            p04921Record.set("PROJ");
-            p04921Action.set("START-EG-K6");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartEgK6();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartEgK7() {
-            p04921Record.set("PROJ");
-            p04921Action.set("START-EG-K7");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartEgK7();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartprevEg() {
-            p04921Record.set("PROJ");
-            p04921Action.set("STARTPREV-EG");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartprevEg();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartprevEgK2() {
-            p04921Record.set("PROJ");
-            p04921Action.set("STARTPREV-EG-K2");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartprevEgK2();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartprevEgK3() {
-            p04921Record.set("PROJ");
-            p04921Action.set("STARTPREV-EG-K3");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartprevEgK3();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartprevEgK4() {
-            p04921Record.set("PROJ");
-            p04921Action.set("STARTPREV-EG-K4");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartprevEgK4();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartprevEgK5() {
-            p04921Record.set("PROJ");
-            p04921Action.set("STARTPREV-EG-K5");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartprevEgK5();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartprevEgK6() {
-            p04921Record.set("PROJ");
-            p04921Action.set("STARTPREV-EG-K6");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartprevEgK6();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartprevEgK7() {
-            p04921Record.set("PROJ");
-            p04921Action.set("STARTPREV-EG-K7");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartprevEgK7();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proFil2Init() {
-            if (proFil2Open.equals("J") && !(proFil2OpenFtg.equals(pa.bkstvftg))) {
-                proFil2Close();
-            }
-            if (!(proFil2Open.equals("J"))) {
-                proFil2Filnamn.set(SPACE);
-                proFil2Filnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-2"));
-                proFil2.open("I-O");
-                proCheck00();
-                proFil2Open.set("J");
-                proFil2OpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proFil2OpenIo() {
-            proFilhantInit();
-            proFil2Init();
-            proFilhantExit();
-        }
-
-        private void proFil2OpenI() {
-            proFilhantInit();
-            if (proFil2Open.equals("J") && !(proFil2OpenFtg.equals(pa.bkstvftg))) {
-                proFil2Close();
-            }
-            if (!(proFil2Open.equals("J"))) {
-                proFil2Filnamn.set(SPACE);
-                proFil2Filnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-2"));
-                proFil2.open("INPUT");
-                if (!((p04921Dasvar.equals("00")))) {
-                    proFil2.close();
-                    proFil2.open("I-O");
-                    proCheck00();
-                    proFil2.close();
-                    proCheck00();
-                    proFil2.open("INPUT");
-                    proCheck00();
-                }
-                proFil2Open.set("J");
-                proFil2OpenFtg.set(pa.bkstvftg);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil2Close() {
-            proFilhantInit();
-            if (proFil2Open.equals("J")) {
-                proFil2.close();
-                proCheck00();
-                proFil2Open.set("N");
-                proFil2OpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil2Read() {
-            proFilhantInit();
-            proFil2Init();
-            proFil2.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil2.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFil2ReadKl() {
-            proFilhantInit();
-            proFil2Init();
-            proFil2.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proFil2.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFil2Readnext() {
-            proFilhantInit();
-            proFil2Init();
-            proFil2.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil2.start(">", "pro_fil_2_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFil2.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proFil2Readprev() {
-            proFilhantInit();
-            proFil2Init();
-            proFil2.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil2.start("<", "pro_fil_2_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFil2.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proFil2Rewrite() {
-            proFilhantInit();
-            proFil2Init();
-            proFil2Post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFil2OpenFtg, pa.bfar, "PRO", p04921Record, "U", proFil2Post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil2Write() {
-            proFilhantInit();
-            proFil2Init();
-            proFil2Post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil2Post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFil2OpenFtg, pa.bfar, "PRO", p04921Record, "N", proFil2Post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil2Delete() {
-            proFilhantInit();
-            proFil2Init();
-            proFil2.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil2.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFil2OpenFtg, pa.bfar, "PRO", p04921Record, "D", proFil2Post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil2StartEg() {
-            proFilhantInit();
-            proFil2Init();
-            proFil2.start("NOT<", "pro_fil_2_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil2.start("NOT<", "pro_fil_2_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFil2StartprevEg() {
-            proFilhantInit();
-            proFil2Init();
-            proFil2.start("NOT>", "pro_fil_2_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil2.start("NOT>", "pro_fil_2_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proMedaOpenIo() {
-            p04921Record.set("MEDA");
-            p04921Action.set("OPEN-IO");
-            proFil2OpenIo();
-        }
-
-        private void proMedaOpenI() {
-            p04921Record.set("MEDA");
-            p04921Action.set("OPEN-I");
-            proFil2OpenI();
-        }
-
-        private void proMedaClose() {
-            p04921Record.set("MEDA");
-            p04921Action.set("CLOSE");
-            proFil2Close();
-        }
-
-        private void proMedaRead() {
-            p04921Record.set("MEDA");
-            p04921Action.set("READ");
-            proFil2Post.set(promeda.get().post);
-            proFil2Read();
-            promeda.get().post.set(proFil2Post);
-        }
-
-        private void proMedaReadKl() {
-            p04921Record.set("MEDA");
-            p04921Action.set("READ-KL");
-            proFil2Post.set(promeda.get().post);
-            proFil2ReadKl();
-            promeda.get().post.set(proFil2Post);
-        }
-
-        private void proMedaReadnext() {
-            p04921Record.set("MEDA");
-            p04921Action.set("READNEXT");
-            proFil2Post.set(promeda.get().post);
-            proFil2Readnext();
-            promeda.get().post.set(proFil2Post);
-        }
-
-        private void proMedaReadprev() {
-            p04921Record.set("MEDA");
-            p04921Action.set("READPREV");
-            proFil2Post.set(promeda.get().post);
-            proFil2Readprev();
-            promeda.get().post.set(proFil2Post);
-        }
-
-        private void proMedaRewrite() {
-            p04921Record.set("MEDA");
-            p04921Action.set("REWRITE");
-            proFil2Post.set(promeda.get().post);
-            proFil2Rewrite();
-            promeda.get().post.set(proFil2Post);
-        }
-
-        private void proMedaWrite() {
-            p04921Record.set("MEDA");
-            p04921Action.set("WRITE");
-            proFil2Post.set(promeda.get().post);
-            proFil2Write();
-            promeda.get().post.set(proFil2Post);
-        }
-
-        private void proMedaDelete() {
-            p04921Record.set("MEDA");
-            p04921Action.set("DELETE");
-            proFil2Post.set(promeda.get().post);
-            proFil2Delete();
-            promeda.get().post.set(proFil2Post);
-        }
-
-        private void proMedaStartEg() {
-            p04921Record.set("MEDA");
-            p04921Action.set("START-EG");
-            proFil2Post.set(promeda.get().post);
-            proFil2StartEg();
-            promeda.get().post.set(proFil2Post);
-        }
-
-        private void proMedaStartprevEg() {
-            p04921Record.set("MEDA");
-            p04921Action.set("STARTPREV-EG");
-            proFil2Post.set(promeda.get().post);
-            proFil2StartprevEg();
-            promeda.get().post.set(proFil2Post);
-        }
-
-        private void proTextOpenIo() {
-            p04921Record.set("TEXT");
-            p04921Action.set("OPEN-IO");
-            proFil2OpenIo();
-        }
-
-        private void proTextOpenI() {
-            p04921Record.set("TEXT");
-            p04921Action.set("OPEN-I");
-            proFil2OpenI();
-        }
-
-        private void proTextClose() {
-            p04921Record.set("TEXT");
-            p04921Action.set("CLOSE");
-            proFil2Close();
-        }
-
-        private void proTextRead() {
-            p04921Record.set("TEXT");
-            p04921Action.set("READ");
-            proFil2Post.set(protext.get().post);
-            proFil2Read();
-            protext.get().post.set(proFil2Post);
-        }
-
-        private void proTextReadKl() {
-            p04921Record.set("TEXT");
-            p04921Action.set("READ-KL");
-            proFil2Post.set(protext.get().post);
-            proFil2ReadKl();
-            protext.get().post.set(proFil2Post);
-        }
-
-        private void proTextReadnext() {
-            p04921Record.set("TEXT");
-            p04921Action.set("READNEXT");
-            proFil2Post.set(protext.get().post);
-            proFil2Readnext();
-            protext.get().post.set(proFil2Post);
-        }
-
-        private void proTextReadprev() {
-            p04921Record.set("TEXT");
-            p04921Action.set("READPREV");
-            proFil2Post.set(protext.get().post);
-            proFil2Readprev();
-            protext.get().post.set(proFil2Post);
-        }
-
-        private void proTextRewrite() {
-            p04921Record.set("TEXT");
-            p04921Action.set("REWRITE");
-            proFil2Post.set(protext.get().post);
-            proFil2Rewrite();
-            protext.get().post.set(proFil2Post);
-        }
-
-        private void proTextWrite() {
-            p04921Record.set("TEXT");
-            p04921Action.set("WRITE");
-            proFil2Post.set(protext.get().post);
-            proFil2Write();
-            protext.get().post.set(proFil2Post);
-        }
-
-        private void proTextDelete() {
-            p04921Record.set("TEXT");
-            p04921Action.set("DELETE");
-            proFil2Post.set(protext.get().post);
-            proFil2Delete();
-            protext.get().post.set(proFil2Post);
-        }
-
-        private void proTextStartEg() {
-            p04921Record.set("TEXT");
-            p04921Action.set("START-EG");
-            proFil2Post.set(protext.get().post);
-            proFil2StartEg();
-            protext.get().post.set(proFil2Post);
-        }
-
-        private void proTextStartprevEg() {
-            p04921Record.set("TEXT");
-            p04921Action.set("STARTPREV-EG");
-            proFil2Post.set(protext.get().post);
-            proFil2StartprevEg();
-            protext.get().post.set(proFil2Post);
-        }
-
-        private void proCaleOpenIo() {
-            p04921Record.set("CALE");
-            p04921Action.set("OPEN-IO");
-            proFil2OpenIo();
-        }
-
-        private void proCaleOpenI() {
-            p04921Record.set("CALE");
-            p04921Action.set("OPEN-I");
-            proFil2OpenI();
-        }
-
-        private void proCaleClose() {
-            p04921Record.set("CALE");
-            p04921Action.set("CLOSE");
-            proFil2Close();
-        }
-
-        private void proCaleRead() {
-            p04921Record.set("CALE");
-            p04921Action.set("READ");
-            proFil2Post.set(procale.get().post);
-            proFil2Read();
-            procale.get().post.set(proFil2Post);
-        }
-
-        private void proCaleReadKl() {
-            p04921Record.set("CALE");
-            p04921Action.set("READ-KL");
-            proFil2Post.set(procale.get().post);
-            proFil2ReadKl();
-            procale.get().post.set(proFil2Post);
-        }
-
-        private void proCaleReadnext() {
-            p04921Record.set("CALE");
-            p04921Action.set("READNEXT");
-            proFil2Post.set(procale.get().post);
-            proFil2Readnext();
-            procale.get().post.set(proFil2Post);
-        }
-
-        private void proCaleReadprev() {
-            p04921Record.set("CALE");
-            p04921Action.set("READPREV");
-            proFil2Post.set(procale.get().post);
-            proFil2Readprev();
-            procale.get().post.set(proFil2Post);
-        }
-
-        private void proCaleRewrite() {
-            p04921Record.set("CALE");
-            p04921Action.set("REWRITE");
-            proFil2Post.set(procale.get().post);
-            proFil2Rewrite();
-            procale.get().post.set(proFil2Post);
-        }
-
-        private void proCaleWrite() {
-            p04921Record.set("CALE");
-            p04921Action.set("WRITE");
-            proFil2Post.set(procale.get().post);
-            proFil2Write();
-            procale.get().post.set(proFil2Post);
-        }
-
-        private void proCaleDelete() {
-            p04921Record.set("CALE");
-            p04921Action.set("DELETE");
-            proFil2Post.set(procale.get().post);
-            proFil2Delete();
-            procale.get().post.set(proFil2Post);
-        }
-
-        private void proCaleStartEg() {
-            p04921Record.set("CALE");
-            p04921Action.set("START-EG");
-            proFil2Post.set(procale.get().post);
-            proFil2StartEg();
-            procale.get().post.set(proFil2Post);
-        }
-
-        private void proCaleStartprevEg() {
-            p04921Record.set("CALE");
-            p04921Action.set("STARTPREV-EG");
-            proFil2Post.set(procale.get().post);
-            proFil2StartprevEg();
-            procale.get().post.set(proFil2Post);
-        }
-
-        private void proAlmaOpenIo() {
-            p04921Record.set("ALMA");
-            p04921Action.set("OPEN-IO");
-            proFil2OpenIo();
-        }
-
-        private void proAlmaOpenI() {
-            p04921Record.set("ALMA");
-            p04921Action.set("OPEN-I");
-            proFil2OpenI();
-        }
-
-        private void proAlmaClose() {
-            p04921Record.set("ALMA");
-            p04921Action.set("CLOSE");
-            proFil2Close();
-        }
-
-        private void proAlmaRead() {
-            p04921Record.set("ALMA");
-            p04921Action.set("READ");
-            proFil2Post.set(proalma.get().post);
-            proFil2Read();
-            proalma.get().post.set(proFil2Post);
-        }
-
-        private void proAlmaReadKl() {
-            p04921Record.set("ALMA");
-            p04921Action.set("READ-KL");
-            proFil2Post.set(proalma.get().post);
-            proFil2ReadKl();
-            proalma.get().post.set(proFil2Post);
-        }
-
-        private void proAlmaReadnext() {
-            p04921Record.set("ALMA");
-            p04921Action.set("READNEXT");
-            proFil2Post.set(proalma.get().post);
-            proFil2Readnext();
-            proalma.get().post.set(proFil2Post);
-        }
-
-        private void proAlmaReadprev() {
-            p04921Record.set("ALMA");
-            p04921Action.set("READPREV");
-            proFil2Post.set(proalma.get().post);
-            proFil2Readprev();
-            proalma.get().post.set(proFil2Post);
-        }
-
-        private void proAlmaRewrite() {
-            p04921Record.set("ALMA");
-            p04921Action.set("REWRITE");
-            proFil2Post.set(proalma.get().post);
-            proFil2Rewrite();
-            proalma.get().post.set(proFil2Post);
-        }
-
-        private void proAlmaWrite() {
-            p04921Record.set("ALMA");
-            p04921Action.set("WRITE");
-            proFil2Post.set(proalma.get().post);
-            proFil2Write();
-            proalma.get().post.set(proFil2Post);
-        }
-
-        private void proAlmaDelete() {
-            p04921Record.set("ALMA");
-            p04921Action.set("DELETE");
-            proFil2Post.set(proalma.get().post);
-            proFil2Delete();
-            proalma.get().post.set(proFil2Post);
-        }
-
-        private void proAlmaStartEg() {
-            p04921Record.set("ALMA");
-            p04921Action.set("START-EG");
-            proFil2Post.set(proalma.get().post);
-            proFil2StartEg();
-            proalma.get().post.set(proFil2Post);
-        }
-
-        private void proAlmaStartprevEg() {
-            p04921Record.set("ALMA");
-            p04921Action.set("STARTPREV-EG");
-            proFil2Post.set(proalma.get().post);
-            proFil2StartprevEg();
-            proalma.get().post.set(proFil2Post);
-        }
-
-        private void proLexiOpenIo() {
-            p04921Record.set("LEXI");
-            p04921Action.set("OPEN-IO");
-            proFil2OpenIo();
-        }
-
-        private void proLexiOpenI() {
-            p04921Record.set("LEXI");
-            p04921Action.set("OPEN-I");
-            proFil2OpenI();
-        }
-
-        private void proLexiClose() {
-            p04921Record.set("LEXI");
-            p04921Action.set("CLOSE");
-            proFil2Close();
-        }
-
-        private void proLexiRead() {
-            p04921Record.set("LEXI");
-            p04921Action.set("READ");
-            proFil2Post.set(prolexi.get().post);
-            proFil2Read();
-            prolexi.get().post.set(proFil2Post);
-        }
-
-        private void proLexiReadKl() {
-            p04921Record.set("LEXI");
-            p04921Action.set("READ-KL");
-            proFil2Post.set(prolexi.get().post);
-            proFil2ReadKl();
-            prolexi.get().post.set(proFil2Post);
-        }
-
-        private void proLexiReadnext() {
-            p04921Record.set("LEXI");
-            p04921Action.set("READNEXT");
-            proFil2Post.set(prolexi.get().post);
-            proFil2Readnext();
-            prolexi.get().post.set(proFil2Post);
-        }
-
-        private void proLexiReadprev() {
-            p04921Record.set("LEXI");
-            p04921Action.set("READPREV");
-            proFil2Post.set(prolexi.get().post);
-            proFil2Readprev();
-            prolexi.get().post.set(proFil2Post);
-        }
-
-        private void proLexiRewrite() {
-            p04921Record.set("LEXI");
-            p04921Action.set("REWRITE");
-            proFil2Post.set(prolexi.get().post);
-            proFil2Rewrite();
-            prolexi.get().post.set(proFil2Post);
-        }
-
-        private void proLexiWrite() {
-            p04921Record.set("LEXI");
-            p04921Action.set("WRITE");
-            proFil2Post.set(prolexi.get().post);
-            proFil2Write();
-            prolexi.get().post.set(proFil2Post);
-        }
-
-        private void proLexiDelete() {
-            p04921Record.set("LEXI");
-            p04921Action.set("DELETE");
-            proFil2Post.set(prolexi.get().post);
-            proFil2Delete();
-            prolexi.get().post.set(proFil2Post);
-        }
-
-        private void proLexiStartEg() {
-            p04921Record.set("LEXI");
-            p04921Action.set("START-EG");
-            proFil2Post.set(prolexi.get().post);
-            proFil2StartEg();
-            prolexi.get().post.set(proFil2Post);
-        }
-
-        private void proLexiStartprevEg() {
-            p04921Record.set("LEXI");
-            p04921Action.set("STARTPREV-EG");
-            proFil2Post.set(prolexi.get().post);
-            proFil2StartprevEg();
-            prolexi.get().post.set(proFil2Post);
-        }
-
-        private void proPeriOpenIo() {
-            p04921Record.set("PERI");
-            p04921Action.set("OPEN-IO");
-            proFil2OpenIo();
-        }
-
-        private void proPeriOpenI() {
-            p04921Record.set("PERI");
-            p04921Action.set("OPEN-I");
-            proFil2OpenI();
-        }
-
-        private void proPeriClose() {
-            p04921Record.set("PERI");
-            p04921Action.set("CLOSE");
-            proFil2Close();
-        }
-
-        private void proPeriRead() {
-            p04921Record.set("PERI");
-            p04921Action.set("READ");
-            proFil2Post.set(properi.get().post);
-            proFil2Read();
-            properi.get().post.set(proFil2Post);
-        }
-
-        private void proPeriReadKl() {
-            p04921Record.set("PERI");
-            p04921Action.set("READ-KL");
-            proFil2Post.set(properi.get().post);
-            proFil2ReadKl();
-            properi.get().post.set(proFil2Post);
-        }
-
-        private void proPeriReadnext() {
-            p04921Record.set("PERI");
-            p04921Action.set("READNEXT");
-            proFil2Post.set(properi.get().post);
-            proFil2Readnext();
-            properi.get().post.set(proFil2Post);
-        }
-
-        private void proPeriReadprev() {
-            p04921Record.set("PERI");
-            p04921Action.set("READPREV");
-            proFil2Post.set(properi.get().post);
-            proFil2Readprev();
-            properi.get().post.set(proFil2Post);
-        }
-
-        private void proPeriRewrite() {
-            p04921Record.set("PERI");
-            p04921Action.set("REWRITE");
-            proFil2Post.set(properi.get().post);
-            proFil2Rewrite();
-            properi.get().post.set(proFil2Post);
-        }
-
-        private void proPeriWrite() {
-            p04921Record.set("PERI");
-            p04921Action.set("WRITE");
-            proFil2Post.set(properi.get().post);
-            proFil2Write();
-            properi.get().post.set(proFil2Post);
-        }
-
-        private void proPeriDelete() {
-            p04921Record.set("PERI");
-            p04921Action.set("DELETE");
-            proFil2Post.set(properi.get().post);
-            proFil2Delete();
-            properi.get().post.set(proFil2Post);
-        }
-
-        private void proPeriStartEg() {
-            p04921Record.set("PERI");
-            p04921Action.set("START-EG");
-            proFil2Post.set(properi.get().post);
-            proFil2StartEg();
-            properi.get().post.set(proFil2Post);
-        }
-
-        private void proPeriStartprevEg() {
-            p04921Record.set("PERI");
-            p04921Action.set("STARTPREV-EG");
-            proFil2Post.set(properi.get().post);
-            proFil2StartprevEg();
-            properi.get().post.set(proFil2Post);
-        }
-
-        private void proPestOpenIo() {
-            p04921Record.set("PEST");
-            p04921Action.set("OPEN-IO");
-            proFil2OpenIo();
-        }
-
-        private void proPestOpenI() {
-            p04921Record.set("PEST");
-            p04921Action.set("OPEN-I");
-            proFil2OpenI();
-        }
-
-        private void proPestClose() {
-            p04921Record.set("PEST");
-            p04921Action.set("CLOSE");
-            proFil2Close();
-        }
-
-        private void proPestRead() {
-            p04921Record.set("PEST");
-            p04921Action.set("READ");
-            proFil2Post.set(propest.get().post);
-            proFil2Read();
-            propest.get().post.set(proFil2Post);
-        }
-
-        private void proPestReadKl() {
-            p04921Record.set("PEST");
-            p04921Action.set("READ-KL");
-            proFil2Post.set(propest.get().post);
-            proFil2ReadKl();
-            propest.get().post.set(proFil2Post);
-        }
-
-        private void proPestReadnext() {
-            p04921Record.set("PEST");
-            p04921Action.set("READNEXT");
-            proFil2Post.set(propest.get().post);
-            proFil2Readnext();
-            propest.get().post.set(proFil2Post);
-        }
-
-        private void proPestReadprev() {
-            p04921Record.set("PEST");
-            p04921Action.set("READPREV");
-            proFil2Post.set(propest.get().post);
-            proFil2Readprev();
-            propest.get().post.set(proFil2Post);
-        }
-
-        private void proPestRewrite() {
-            p04921Record.set("PEST");
-            p04921Action.set("REWRITE");
-            proFil2Post.set(propest.get().post);
-            proFil2Rewrite();
-            propest.get().post.set(proFil2Post);
-        }
-
-        private void proPestWrite() {
-            p04921Record.set("PEST");
-            p04921Action.set("WRITE");
-            proFil2Post.set(propest.get().post);
-            proFil2Write();
-            propest.get().post.set(proFil2Post);
-        }
-
-        private void proPestDelete() {
-            p04921Record.set("PEST");
-            p04921Action.set("DELETE");
-            proFil2Post.set(propest.get().post);
-            proFil2Delete();
-            propest.get().post.set(proFil2Post);
-        }
-
-        private void proPestStartEg() {
-            p04921Record.set("PEST");
-            p04921Action.set("START-EG");
-            proFil2Post.set(propest.get().post);
-            proFil2StartEg();
-            propest.get().post.set(proFil2Post);
-        }
-
-        private void proPestStartprevEg() {
-            p04921Record.set("PEST");
-            p04921Action.set("STARTPREV-EG");
-            proFil2Post.set(propest.get().post);
-            proFil2StartprevEg();
-            propest.get().post.set(proFil2Post);
-        }
-
-        private void proFil21Init() {
-            if (proFil21Open.equals("J") && !(proFil21OpenFtg.equals(pa.bkstvftg))) {
-                proFil21Close();
-            }
-            if (!(proFil21Open.equals("J"))) {
-                proFil21Filnamn.set(SPACE);
-                proFil21Filnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-21"));
-                proFil21.open("I-O");
-                proCheck00();
-                proFil21Open.set("J");
-                proFil21OpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proFil21OpenIo() {
-            proFilhantInit();
-            proFil21Init();
-            proFilhantExit();
-        }
-
-        private void proFil21OpenI() {
-            proFilhantInit();
-            if (proFil21Open.equals("J") && !(proFil21OpenFtg.equals(pa.bkstvftg))) {
-                proFil21Close();
-            }
-            if (!(proFil21Open.equals("J"))) {
-                proFil21Filnamn.set(SPACE);
-                proFil21Filnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-21"));
-                proFil21.open("INPUT");
-                if (!((p04921Dasvar.equals("00")))) {
-                    proFil21.close();
-                    proFil21.open("I-O");
-                    proCheck00();
-                    proFil21.close();
-                    proCheck00();
-                    proFil21.open("INPUT");
-                    proCheck00();
-                }
-                proFil21Open.set("J");
-                proFil21OpenFtg.set(pa.bkstvftg);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil21Close() {
-            proFilhantInit();
-            if (proFil21Open.equals("J")) {
-                proFil21.close();
-                proCheck00();
-                proFil21Open.set("N");
-                proFil21OpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil21Read() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.read();
-            }
-            proCheck0023();
-            proPrevFil21Post.set(proFil21Post);
-            proFilhantExit();
-        }
-
-        private void proFil21ReadKl() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proFil21.readWithLock();
-            }
-            proCheck0023();
-            proPrevFil21Post.set(proFil21Post);
-            proFilhantExit();
-        }
-
-        private void proFil21Readnext() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start(">", "pro_fil_21_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFil21.readNext();
-                }
-            }
-            proCheck0010();
-            proPrevFil21Post.set(proFil21Post);
-            proFilhantExit();
-        }
-
-        private void proFil21ReadnextK2() {
-            proFil21.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start(">", "pro_fil_21_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proFil21.readNext();
-                }
-            }
-            proCheck000210();
-            proPrevFil21Post.set(proFil21Post);
-            proFilhantExit();
-        }
-
-        private void proFil21ReadnextK3() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start(">", "pro_fil_21_key3");
-                if (p04921Dasvar.equals("00")) {
-                    proFil21.readNext();
-                }
-            }
-            proCheck000210();
-            proPrevFil21Post.set(proFil21Post);
-            proFilhantExit();
-        }
-
-        private void proFil21Readprev() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start("<", "pro_fil_21_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFil21.readPrevious();
-                }
-            }
-            proCheck0010();
-            proPrevFil21Post.set(proFil21Post);
-            proFilhantExit();
-        }
-
-        private void proFil21ReadprevK2() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start("<", "pro_fil_21_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proFil21.readPrevious();
-                }
-            }
-            proCheck000210();
-            proPrevFil21Post.set(proFil21Post);
-            proFilhantExit();
-        }
-
-        private void proFil21ReadprevK3() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start("<", "pro_fil_21_key3");
-                if (p04921Dasvar.equals("00")) {
-                    proFil21.readPrevious();
-                }
-            }
-            proCheck000210();
-            proPrevFil21Post.set(proFil21Post);
-            proFilhantExit();
-        }
-
-        private void proFil21Rewrite() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21Post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFil21OpenFtg, pa.bfar, "PRO", p04921Record, "U", proFil21Post);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparFil21Post.set(proFil21Post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                if (proFil21Post.ref(1,1).equals("J")) {
-                    proinkt.get().post.set(proPrevFil21Post);
-                    prosata.get().post.init();
-                    prosata.get().projidG.set(proinkt.get().projidG);
-                    if (proinkt.get().bfdat.ref(1,6).isNumeric()) {
-                        prosata.get().bfper.ref(1,6).set(proinkt.get().bfdat.ref(1,6));
-                    }
-                    proSataRead();
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        prosata.get().data.init();
-                    }
-                    prosata.get().inkRegKost.decrement(proinkt.get().prisink);
-                    prosata.get().inkRegBel.decrement(proinkt.get().utpris);
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataWrite();
-                        }
-                    }
-                    else {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataRewrite();
-                        }
-                        else {
-                            proSataDelete();
-                        }
-                    }
-                    proinkt.get().post.set(proSparFil21Post);
-                    prosata.get().post.init();
-                    prosata.get().projidG.set(proinkt.get().projidG);
-                    if (proinkt.get().bfdat.ref(1,6).isNumeric()) {
-                        prosata.get().bfper.ref(1,6).set(proinkt.get().bfdat.ref(1,6));
-                    }
-                    proSataRead();
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        prosata.get().data.init();
-                    }
-                    prosata.get().inkRegKost.increment(proinkt.get().prisink);
-                    prosata.get().inkRegBel.increment(proinkt.get().utpris);
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataWrite();
-                        }
-                    }
-                    else {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataRewrite();
-                        }
-                        else {
-                            proSataDelete();
-                        }
-                    }
-                }
-                if (proFil21Post.ref(1,1).equals("N")) {
-                    pronatt.get().post.set(proPrevFil21Post);
-                    prosata.get().post.init();
-                    prosata.get().projidG.set(pronatt.get().projidG);
-                    if (pronatt.get().bfdat.ref(1,6).isNumeric()) {
-                        prosata.get().bfper.ref(1,6).set(pronatt.get().bfdat.ref(1,6));
-                    }
-                    proSataRead();
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        prosata.get().data.init();
-                    }
-                    prosata.get().ovrRegKost.decrement(pronatt.get().kalkost);
-                    prosata.get().ovrRegBel.decrement(pronatt.get().utpris);
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataWrite();
-                        }
-                    }
-                    else {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataRewrite();
-                        }
-                        else {
-                            proSataDelete();
-                        }
-                    }
-                    pronatt.get().post.set(proSparFil21Post);
-                    prosata.get().post.init();
-                    prosata.get().projidG.set(pronatt.get().projidG);
-                    if (pronatt.get().bfdat.ref(1,6).isNumeric()) {
-                        prosata.get().bfper.ref(1,6).set(pronatt.get().bfdat.ref(1,6));
-                    }
-                    proSataRead();
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        prosata.get().data.init();
-                    }
-                    prosata.get().ovrRegKost.increment(pronatt.get().kalkost);
-                    prosata.get().ovrRegBel.increment(pronatt.get().utpris);
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataWrite();
-                        }
-                    }
-                    else {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataRewrite();
-                        }
-                        else {
-                            proSataDelete();
-                        }
-                    }
-                }
-                proFil21Post.set(proSparFil21Post);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil21Write() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21Post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21Post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFil21OpenFtg, pa.bfar, "PRO", p04921Record, "N", proFil21Post);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparFil21Post.set(proFil21Post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                if (proFil21Post.ref(1,1).equals("J")) {
-                    proinkt.get().post.set(proSparFil21Post);
-                    prosata.get().post.init();
-                    prosata.get().projidG.set(proinkt.get().projidG);
-                    if (proinkt.get().bfdat.ref(1,6).isNumeric()) {
-                        prosata.get().bfper.ref(1,6).set(proinkt.get().bfdat.ref(1,6));
-                    }
-                    proSataRead();
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        prosata.get().data.init();
-                    }
-                    prosata.get().inkRegKost.increment(proinkt.get().prisink);
-                    prosata.get().inkRegBel.increment(proinkt.get().utpris);
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataWrite();
-                        }
-                    }
-                    else {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataRewrite();
-                        }
-                        else {
-                            proSataDelete();
-                        }
-                    }
-                }
-                if (proFil21Post.ref(1,1).equals("N")) {
-                    pronatt.get().post.set(proSparFil21Post);
-                    prosata.get().post.init();
-                    prosata.get().projidG.set(pronatt.get().projidG);
-                    if (pronatt.get().bfdat.ref(1,6).isNumeric()) {
-                        prosata.get().bfper.ref(1,6).set(pronatt.get().bfdat.ref(1,6));
-                    }
-                    proSataRead();
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        prosata.get().data.init();
-                    }
-                    prosata.get().ovrRegKost.increment(pronatt.get().kalkost);
-                    prosata.get().ovrRegBel.increment(pronatt.get().utpris);
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataWrite();
-                        }
-                    }
-                    else {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataRewrite();
-                        }
-                        else {
-                            proSataDelete();
-                        }
-                    }
-                }
-                proFil21Post.set(proSparFil21Post);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil21Delete() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFil21OpenFtg, pa.bfar, "PRO", p04921Record, "D", proFil21Post);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparFil21Post.set(proFil21Post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                if (proFil21Post.ref(1,1).equals("J")) {
-                    proinkt.get().post.set(proSparFil21Post);
-                    prosata.get().post.init();
-                    prosata.get().projidG.set(proinkt.get().projidG);
-                    if (proinkt.get().bfdat.ref(1,6).isNumeric()) {
-                        prosata.get().bfper.ref(1,6).set(proinkt.get().bfdat.ref(1,6));
-                    }
-                    proSataRead();
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        prosata.get().data.init();
-                    }
-                    prosata.get().inkRegKost.decrement(proinkt.get().prisink);
-                    prosata.get().inkRegBel.decrement(proinkt.get().utpris);
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataWrite();
-                        }
-                    }
-                    else {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataRewrite();
-                        }
-                        else {
-                            proSataDelete();
-                        }
-                    }
-                }
-                if (proFil21Post.ref(1,1).equals("N")) {
-                    pronatt.get().post.set(proSparFil21Post);
-                    prosata.get().post.init();
-                    prosata.get().projidG.set(pronatt.get().projidG);
-                    if (pronatt.get().bfdat.ref(1,6).isNumeric()) {
-                        prosata.get().bfper.ref(1,6).set(pronatt.get().bfdat.ref(1,6));
-                    }
-                    proSataRead();
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        prosata.get().data.init();
-                    }
-                    prosata.get().ovrRegKost.decrement(pronatt.get().kalkost);
-                    prosata.get().ovrRegBel.decrement(pronatt.get().utpris);
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataWrite();
-                        }
-                    }
-                    else {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataRewrite();
-                        }
-                        else {
-                            proSataDelete();
-                        }
-                    }
-                }
-                proFil21Post.set(proSparFil21Post);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil21StartEg() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.start("NOT<", "pro_fil_21_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start("NOT<", "pro_fil_21_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFil21StartEgK2() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.start("NOT<", "pro_fil_21_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start("NOT<", "pro_fil_21_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil21StartEgK3() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.start("NOT<", "pro_fil_21_key3");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start("NOT<", "pro_fil_21_key3");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil21StartprevEg() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.start("NOT>", "pro_fil_21_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start("NOT>", "pro_fil_21_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFil21StartprevEgK2() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.start("NOT>", "pro_fil_21_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start("NOT>", "pro_fil_21_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil21StartprevEgK3() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.start("NOT>", "pro_fil_21_key3");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start("NOT>", "pro_fil_21_key3");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proInktOpenIo() {
-            p04921Record.set("INKT");
-            p04921Action.set("OPEN-IO");
-            proFil21OpenIo();
-        }
-
-        private void proInktOpenI() {
-            p04921Record.set("INKT");
-            p04921Action.set("OPEN-I");
-            proFil21OpenI();
-        }
-
-        private void proInktClose() {
-            p04921Record.set("INKT");
-            p04921Action.set("CLOSE");
-            proFil21Close();
-        }
-
-        private void proInktRead() {
-            p04921Record.set("INKT");
-            p04921Action.set("READ");
-            proFil21Post.set(proinkt.get().post);
-            proFil21Read();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktReadKl() {
-            p04921Record.set("INKT");
-            p04921Action.set("READ-KL");
-            proFil21Post.set(proinkt.get().post);
-            proFil21ReadKl();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktReadnext() {
-            p04921Record.set("INKT");
-            p04921Action.set("READNEXT");
-            proFil21Post.set(proinkt.get().post);
-            proFil21Readnext();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktReadnextK2() {
-            p04921Record.set("INKT");
-            p04921Action.set("READNEXT-K2");
-            proFil21Post.set(proinkt.get().post);
-            proFil21ReadnextK2();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktReadnextK3() {
-            p04921Record.set("INKT");
-            p04921Action.set("READNEXT-K3");
-            proFil21Post.set(proinkt.get().post);
-            proFil21ReadnextK3();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktReadprev() {
-            p04921Record.set("INKT");
-            p04921Action.set("READPREV");
-            proFil21Post.set(proinkt.get().post);
-            proFil21Readprev();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktReadprevK2() {
-            p04921Record.set("INKT");
-            p04921Action.set("READPREV-K2");
-            proFil21Post.set(proinkt.get().post);
-            proFil21ReadprevK2();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktReadprevK3() {
-            p04921Record.set("INKT");
-            p04921Action.set("READPREV-K3");
-            proFil21Post.set(proinkt.get().post);
-            proFil21ReadprevK3();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktRewrite() {
-            p04921Record.set("INKT");
-            p04921Action.set("REWRITE");
-            proFil21Post.set(proinkt.get().post);
-            proFil21Rewrite();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktWrite() {
-            p04921Record.set("INKT");
-            p04921Action.set("WRITE");
-            proFil21Post.set(proinkt.get().post);
-            proFil21Write();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktDelete() {
-            p04921Record.set("INKT");
-            p04921Action.set("DELETE");
-            proFil21Post.set(proinkt.get().post);
-            proFil21Delete();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktStartEg() {
-            p04921Record.set("INKT");
-            p04921Action.set("START-EG");
-            proFil21Post.set(proinkt.get().post);
-            proFil21StartEg();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktStartEgK2() {
-            p04921Record.set("INKT");
-            p04921Action.set("START-EG-K2");
-            proFil21Post.set(proinkt.get().post);
-            proFil21StartEgK2();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktStartEgK3() {
-            p04921Record.set("INKT");
-            p04921Action.set("START-EG-K3");
-            proFil21Post.set(proinkt.get().post);
-            proFil21StartEgK3();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktStartprevEg() {
-            p04921Record.set("INKT");
-            p04921Action.set("STARTPREV-EG");
-            proFil21Post.set(proinkt.get().post);
-            proFil21StartprevEg();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktStartprevEgK2() {
-            p04921Record.set("INKT");
-            p04921Action.set("STARTPREV-EG-K2");
-            proFil21Post.set(proinkt.get().post);
-            proFil21StartprevEgK2();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktStartprevEgK3() {
-            p04921Record.set("INKT");
-            p04921Action.set("STARTPREV-EG-K3");
-            proFil21Post.set(proinkt.get().post);
-            proFil21StartprevEgK3();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proNattOpenIo() {
-            p04921Record.set("NATT");
-            p04921Action.set("OPEN-IO");
-            proFil21OpenIo();
-        }
-
-        private void proNattOpenI() {
-            p04921Record.set("NATT");
-            p04921Action.set("OPEN-I");
-            proFil21OpenI();
-        }
-
-        private void proNattClose() {
-            p04921Record.set("NATT");
-            p04921Action.set("CLOSE");
-            proFil21Close();
-        }
-
-        private void proNattRead() {
-            p04921Record.set("NATT");
-            p04921Action.set("READ");
-            proFil21Post.set(pronatt.get().post);
-            proFil21Read();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattReadKl() {
-            p04921Record.set("NATT");
-            p04921Action.set("READ-KL");
-            proFil21Post.set(pronatt.get().post);
-            proFil21ReadKl();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattReadnext() {
-            p04921Record.set("NATT");
-            p04921Action.set("READNEXT");
-            proFil21Post.set(pronatt.get().post);
-            proFil21Readnext();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattReadnextK2() {
-            p04921Record.set("NATT");
-            p04921Action.set("READNEXT-K2");
-            proFil21Post.set(pronatt.get().post);
-            proFil21ReadnextK2();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattReadnextK3() {
-            p04921Record.set("NATT");
-            p04921Action.set("READNEXT-K3");
-            proFil21Post.set(pronatt.get().post);
-            proFil21ReadnextK3();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattReadprev() {
-            p04921Record.set("NATT");
-            p04921Action.set("READPREV");
-            proFil21Post.set(pronatt.get().post);
-            proFil21Readprev();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattReadprevK2() {
-            p04921Record.set("NATT");
-            p04921Action.set("READPREV-K2");
-            proFil21Post.set(pronatt.get().post);
-            proFil21ReadprevK2();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattReadprevK3() {
-            p04921Record.set("NATT");
-            p04921Action.set("READPREV-K3");
-            proFil21Post.set(pronatt.get().post);
-            proFil21ReadprevK3();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattRewrite() {
-            p04921Record.set("NATT");
-            p04921Action.set("REWRITE");
-            proFil21Post.set(pronatt.get().post);
-            proFil21Rewrite();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattWrite() {
-            p04921Record.set("NATT");
-            p04921Action.set("WRITE");
-            proFil21Post.set(pronatt.get().post);
-            proFil21Write();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattDelete() {
-            p04921Record.set("NATT");
-            p04921Action.set("DELETE");
-            proFil21Post.set(pronatt.get().post);
-            proFil21Delete();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattStartEg() {
-            p04921Record.set("NATT");
-            p04921Action.set("START-EG");
-            proFil21Post.set(pronatt.get().post);
-            proFil21StartEg();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattStartEgK2() {
-            p04921Record.set("NATT");
-            p04921Action.set("START-EG-K2");
-            proFil21Post.set(pronatt.get().post);
-            proFil21StartEgK2();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattStartEgK3() {
-            p04921Record.set("NATT");
-            p04921Action.set("START-EG-K3");
-            proFil21Post.set(pronatt.get().post);
-            proFil21StartEgK3();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattStartprevEg() {
-            p04921Record.set("NATT");
-            p04921Action.set("STARTPREV-EG");
-            proFil21Post.set(pronatt.get().post);
-            proFil21StartprevEg();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattStartprevEgK2() {
-            p04921Record.set("NATT");
-            p04921Action.set("STARTPREV-EG-K2");
-            proFil21Post.set(pronatt.get().post);
-            proFil21StartprevEgK2();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattStartprevEgK3() {
-            p04921Record.set("NATT");
-            p04921Action.set("STARTPREV-EG-K3");
-            proFil21Post.set(pronatt.get().post);
-            proFil21StartprevEgK3();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proDefkInit() {
-            if (proDefkOpen.equals("J") && !(proDefkOpenFtg.equals(pa.bkstvftg))) {
-                proDefkClose();
-            }
-            if (!(proDefkOpen.equals("J"))) {
-                proDefkFilnamn.set(SPACE);
-                proDefkFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-5"));
-                proDefk.open("I-O");
-                proCheck00();
-                proDefkOpen.set("J");
-                proDefkOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proDefkClose() {
-            p04921Record.set("DEFK");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proDefkOpen.equals("J")) {
-                proDefk.close();
-                proCheck00();
-                proDefkOpen.set("N");
-                proDefkOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proDefkRead() {
-            p04921Record.set("DEFK");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proDefkInit();
-            proDefk.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proDefk.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proDefkReadKl() {
-            p04921Record.set("DEFK");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proDefkInit();
-            proDefk.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proDefk.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proDefkReadnext() {
-            p04921Record.set("DEFK");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proDefkInit();
-            proDefk.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proDefk.start(">", "pro_defk_key");
-                if (p04921Dasvar.equals("00")) {
-                    proDefk.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proDefkReadprev() {
-            p04921Record.set("DEFK");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proDefkInit();
-            proDefk.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proDefk.start("<", "pro_defk_key");
-                if (p04921Dasvar.equals("00")) {
-                    proDefk.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proDefkRewrite() {
-            p04921Record.set("DEFK");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proDefkInit();
-            prodefk.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proDefkOpenFtg, pa.bfar, "PRO", p04921Record, "U", prodefk.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proDefkWrite() {
-            p04921Record.set("DEFK");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proDefkInit();
-            prodefk.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                prodefk.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proDefkOpenFtg, pa.bfar, "PRO", p04921Record, "N", prodefk.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proDefkDelete() {
-            p04921Record.set("DEFK");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proDefkInit();
-            proDefk.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proDefk.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proDefkOpenFtg, pa.bfar, "PRO", p04921Record, "D", prodefk.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proDefkStartEg() {
-            p04921Record.set("DEFK");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proDefkInit();
-            proDefk.start("NOT<", "pro_defk_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proDefk.start("NOT<", "pro_defk_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proDefkStartprevEg() {
-            p04921Record.set("DEFK");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proDefkInit();
-            proDefk.start("NOT>", "pro_defk_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proDefk.start("NOT>", "pro_defk_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidrInit() {
-            if (proTidrOpen.equals("J") && !(proTidrOpenFtg.equals(pa.bkstvftg))) {
-                proTidrClose();
-            }
-            if (!(proTidrOpen.equals("J"))) {
-                proTidrFilnamn.set(SPACE);
-                proTidrFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-6"));
-                proTidr.open("I-O");
-                proCheck00();
-                proTidrOpen.set("J");
-                proTidrOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proTidrClose() {
-            p04921Record.set("TIDR");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proTidrOpen.equals("J")) {
-                proTidr.close();
-                proCheck00();
-                proTidrOpen.set("N");
-                proTidrOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidrRead() {
-            p04921Record.set("TIDR");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proTidrInit();
-            proTidr.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidr.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidrReadKl() {
-            p04921Record.set("TIDR");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proTidrInit();
-            proTidr.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proTidr.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidrReadnext() {
-            p04921Record.set("TIDR");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proTidrInit();
-            proTidr.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidr.start(">", "pro_tidr_key");
-                if (p04921Dasvar.equals("00")) {
-                    proTidr.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proTidrReadprev() {
-            p04921Record.set("TIDR");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proTidrInit();
-            proTidr.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidr.start("<", "pro_tidr_key");
-                if (p04921Dasvar.equals("00")) {
-                    proTidr.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proTidrRewrite() {
-            p04921Record.set("TIDR");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proTidrInit();
-            protidr.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTidrOpenFtg, pa.bfar, "PRO", p04921Record, "U", protidr.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidrWrite() {
-            p04921Record.set("TIDR");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proTidrInit();
-            protidr.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                protidr.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTidrOpenFtg, pa.bfar, "PRO", p04921Record, "N", protidr.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidrDelete() {
-            p04921Record.set("TIDR");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proTidrInit();
-            proTidr.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidr.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTidrOpenFtg, pa.bfar, "PRO", p04921Record, "D", protidr.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidrStartEg() {
-            p04921Record.set("TIDR");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proTidrInit();
-            proTidr.start("NOT<", "pro_tidr_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidr.start("NOT<", "pro_tidr_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidrStartprevEg() {
-            p04921Record.set("TIDR");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proTidrInit();
-            proTidr.start("NOT>", "pro_tidr_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidr.start("NOT>", "pro_tidr_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proStatInit() {
-            if (proStatOpen.equals("J") && !(proStatOpenFtg.equals(pa.bkstvftg))) {
-                proStatClose();
-            }
-            if (!(proStatOpen.equals("J"))) {
-                proStatFilnamn.set(SPACE);
-                proStatFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-7"));
-                proStat.open("I-O");
-                proCheck00();
-                proStatOpen.set("J");
-                proStatOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proStatClose() {
-            p04921Record.set("STAT");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proStatOpen.equals("J")) {
-                proStat.close();
-                proCheck00();
-                proStatOpen.set("N");
-                proStatOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proStatRead() {
-            p04921Record.set("STAT");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proStatInit();
-            proStat.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proStat.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proStatReadKl() {
-            p04921Record.set("STAT");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proStatInit();
-            proStat.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proStat.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proStatReadnext() {
-            p04921Record.set("STAT");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proStatInit();
-            proStat.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proStat.start(">", "pro_stat_key");
-                if (p04921Dasvar.equals("00")) {
-                    proStat.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proStatReadprev() {
-            p04921Record.set("STAT");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proStatInit();
-            proStat.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proStat.start("<", "pro_stat_key");
-                if (p04921Dasvar.equals("00")) {
-                    proStat.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proStatRewrite() {
-            p04921Record.set("STAT");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proStatInit();
-            prostat.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proStatOpenFtg, pa.bfar, "PRO", p04921Record, "U", prostat.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proStatWrite() {
-            p04921Record.set("STAT");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proStatInit();
-            prostat.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                prostat.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proStatOpenFtg, pa.bfar, "PRO", p04921Record, "N", prostat.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proStatDelete() {
-            p04921Record.set("STAT");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proStatInit();
-            proStat.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proStat.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proStatOpenFtg, pa.bfar, "PRO", p04921Record, "D", prostat.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proStatStartEg() {
-            p04921Record.set("STAT");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proStatInit();
-            proStat.start("NOT<", "pro_stat_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proStat.start("NOT<", "pro_stat_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proStatStartprevEg() {
-            p04921Record.set("STAT");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proStatInit();
-            proStat.start("NOT>", "pro_stat_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proStat.start("NOT>", "pro_stat_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFaktInit() {
-            if (proFaktOpen.equals("J") && !(proFaktOpenFtg.equals(pa.bkstvftg))) {
-                proFaktClose();
-            }
-            if (!(proFaktOpen.equals("J"))) {
-                proFaktFilnamn.set(SPACE);
-                proFaktFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-8"));
-                proFakt.open("I-O");
-                proCheck00();
-                proFaktOpen.set("J");
-                proFaktOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proFaktClose() {
-            p04921Record.set("FAKT");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proFaktOpen.equals("J")) {
-                proFakt.close();
-                proCheck00();
-                proFaktOpen.set("N");
-                proFaktOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proFaktRead() {
-            p04921Record.set("FAKT");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proFaktInit();
-            proFakt.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFakt.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFaktReadKl() {
-            p04921Record.set("FAKT");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proFaktInit();
-            proFakt.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proFakt.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFaktReadnext() {
-            p04921Record.set("FAKT");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proFaktInit();
-            proFakt.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFakt.start(">", "pro_fakt_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFakt.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proFaktReadnextK2() {
-            p04921Record.set("FAKT");
-            p04921Action.set("READNEXT-K2");
-            proFilhantInit();
-            proFaktInit();
-            proFakt.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFakt.start(">", "pro_fakt_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proFakt.readNext();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proFaktReadnextK3() {
-            p04921Record.set("FAKT");
-            p04921Action.set("READNEXT-K3");
-            proFilhantInit();
-            proFaktInit();
-            proFakt.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFakt.start(">", "pro_fakt_key3");
-                if (p04921Dasvar.equals("00")) {
-                    proFakt.readNext();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proFaktReadprev() {
-            p04921Record.set("FAKT");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proFaktInit();
-            proFakt.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFakt.start("<", "pro_fakt_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFakt.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proFaktReadprevK2() {
-            p04921Record.set("FAKT");
-            p04921Action.set("READPREV-K2");
-            proFilhantInit();
-            proFaktInit();
-            proFakt.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFakt.start("<", "pro_fakt_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proFakt.readPrevious();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proFaktReadprevK3() {
-            p04921Record.set("FAKT");
-            p04921Action.set("READPREV-K3");
-            proFilhantInit();
-            proFaktInit();
-            proFakt.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFakt.start("<", "pro_fakt_key3");
-                if (p04921Dasvar.equals("00")) {
-                    proFakt.readPrevious();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proFaktRewrite() {
-            p04921Record.set("FAKT");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proFaktInit();
-            profakt.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFaktOpenFtg, pa.bfar, "PRO", p04921Record, "U", profakt.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFaktWrite() {
-            p04921Record.set("FAKT");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proFaktInit();
-            profakt.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                profakt.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFaktOpenFtg, pa.bfar, "PRO", p04921Record, "N", profakt.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFaktDelete() {
-            p04921Record.set("FAKT");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proFaktInit();
-            proFakt.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFakt.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFaktOpenFtg, pa.bfar, "PRO", p04921Record, "D", profakt.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFaktStartEg() {
-            p04921Record.set("FAKT");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proFaktInit();
-            proFakt.start("NOT<", "pro_fakt_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFakt.start("NOT<", "pro_fakt_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFaktStartEgK2() {
-            p04921Record.set("FAKT");
-            p04921Action.set("START-EG-K2");
-            proFilhantInit();
-            proFaktInit();
-            proFakt.start("NOT<", "pro_fakt_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFakt.start("NOT<", "pro_fakt_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFaktStartEgK3() {
-            p04921Record.set("FAKT");
-            p04921Action.set("START-EG-K3");
-            proFilhantInit();
-            proFaktInit();
-            proFakt.start("NOT<", "pro_fakt_key3");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFakt.start("NOT<", "pro_fakt_key3");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFaktStartprevEg() {
-            p04921Record.set("FAKT");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proFaktInit();
-            proFakt.start("NOT>", "pro_fakt_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFakt.start("NOT>", "pro_fakt_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFaktStartprevEgK2() {
-            p04921Record.set("FAKT");
-            p04921Action.set("STARTPREV-EG-K2");
-            proFilhantInit();
-            proFaktInit();
-            proFakt.start("NOT>", "pro_fakt_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFakt.start("NOT>", "pro_fakt_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFaktStartprevEgK3() {
-            p04921Record.set("FAKT");
-            p04921Action.set("STARTPREV-EG-K3");
-            proFilhantInit();
-            proFaktInit();
-            proFakt.start("NOT>", "pro_fakt_key3");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFakt.start("NOT>", "pro_fakt_key3");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proTidgInit() {
-            if (proTidgOpen.equals("J") && !(proTidgOpenFtg.equals(pa.bkstvftg))) {
-                proTidgClose();
-            }
-            if (!(proTidgOpen.equals("J"))) {
-                proTidgFilnamn.set(SPACE);
-                proTidgFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-9"));
-                proTidg.open("I-O");
-                proCheck00();
-                proTidgOpen.set("J");
-                proTidgOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proTidgClose() {
-            p04921Record.set("TIDG");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proTidgOpen.equals("J")) {
-                proTidg.close();
-                proCheck00();
-                proTidgOpen.set("N");
-                proTidgOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidgRead() {
-            p04921Record.set("TIDG");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proTidgInit();
-            proTidg.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidg.read();
-            }
-            proCheck0023();
-            proPrevTidgPost.set(protidg.get().post);
-            proFilhantExit();
-        }
-
-        private void proTidgReadKl() {
-            p04921Record.set("TIDG");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proTidgInit();
-            proTidg.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proTidg.readWithLock();
-            }
-            proCheck0023();
-            proPrevTidgPost.set(protidg.get().post);
-            proFilhantExit();
-        }
-
-        private void proTidgReadnext() {
-            p04921Record.set("TIDG");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proTidgInit();
-            proTidg.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidg.start(">", "pro_tidg_key");
-                if (p04921Dasvar.equals("00")) {
-                    proTidg.readNext();
-                }
-            }
-            proCheck0010();
-            proPrevTidgPost.set(protidg.get().post);
-            proFilhantExit();
-        }
-
-        private void proTidgReadnextK2() {
-            p04921Record.set("TIDG");
-            p04921Action.set("READNEXT-K2");
-            proFilhantInit();
-            proTidgInit();
-            proTidg.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidg.start(">", "pro_tidg_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proTidg.readNext();
-                }
-            }
-            proCheck000210();
-            proPrevTidgPost.set(protidg.get().post);
-            proFilhantExit();
-        }
-
-        private void proTidgReadnextK3() {
-            p04921Record.set("TIDG");
-            p04921Action.set("READNEXT-K3");
-            proFilhantInit();
-            proTidgInit();
-            proTidg.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidg.start(">", "pro_tidg_key3");
-                if (p04921Dasvar.equals("00")) {
-                    proTidg.readNext();
-                }
-            }
-            proCheck0010();
-            proPrevTidgPost.set(protidg.get().post);
-            proFilhantExit();
-        }
-
-        private void proTidgReadprev() {
-            p04921Record.set("TIDG");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proTidgInit();
-            proTidg.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidg.start("<", "pro_tidg_key");
-                if (p04921Dasvar.equals("00")) {
-                    proTidg.readPrevious();
-                }
-            }
-            proCheck0010();
-            proPrevTidgPost.set(protidg.get().post);
-            proFilhantExit();
-        }
-
-        private void proTidgReadprevK2() {
-            p04921Record.set("TIDG");
-            p04921Action.set("READPREV-K2");
-            proFilhantInit();
-            proTidgInit();
-            proTidg.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidg.start("<", "pro_tidg_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proTidg.readPrevious();
-                }
-            }
-            proCheck000210();
-            proPrevTidgPost.set(protidg.get().post);
-            proFilhantExit();
-        }
-
-        private void proTidgReadprevK3() {
-            p04921Record.set("TIDG");
-            p04921Action.set("READPREV-K3");
-            proFilhantInit();
-            proTidgInit();
-            proTidg.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidg.start("<", "pro_tidg_key3");
-                if (p04921Dasvar.equals("00")) {
-                    proTidg.readPrevious();
-                }
-            }
-            proCheck0010();
-            proPrevTidgPost.set(protidg.get().post);
-            proFilhantExit();
-        }
-
-        private void proTidgRewrite() {
-            p04921Record.set("TIDG");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proTidgInit();
-            protidg.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTidgOpenFtg, pa.bfar, "PRO", p04921Record, "U", protidg.get().post);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparTidgPost.set(protidg.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                protidg.get().post.set(proPrevTidgPost);
-                prosala.get().post.init();
-                prosala.get().projidG.set(protidg.get().projidG);
-                prosala.get().medarid.set(protidg.get().medarid);
-                prosala.get().grpthtM.set(protidg.get().grpthtM);
-                prosala.get().kat.set(protidg.get().kat);
-                prosala.get().kod.set(protidg.get().kod);
-                if (protidg.get().bfdat.ref(1,6).isNumeric()) {
-                    prosala.get().bfper.ref(1,6).set(protidg.get().bfdat.ref(1,6));
-                }
-                proSalaRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosala.get().data.init();
-                }
-                prosala.get().regAnt.decrement(protidg.get().timant);
-                prosala.get().regBel.decrement(protidg.get().belakt);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaWrite();
-                    }
-                }
-                else {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaRewrite();
-                    }
-                    else {
-                        proSalaDelete();
-                    }
-                }
-                protidg.get().post.set(proSparTidgPost);
-                prosala.get().post.init();
-                prosala.get().projidG.set(protidg.get().projidG);
-                prosala.get().medarid.set(protidg.get().medarid);
-                prosala.get().grpthtM.set(protidg.get().grpthtM);
-                prosala.get().kat.set(protidg.get().kat);
-                prosala.get().kod.set(protidg.get().kod);
-                if (protidg.get().bfdat.ref(1,6).isNumeric()) {
-                    prosala.get().bfper.ref(1,6).set(protidg.get().bfdat.ref(1,6));
-                }
-                proSalaRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosala.get().data.init();
-                }
-                prosala.get().regAnt.increment(protidg.get().timant);
-                prosala.get().regBel.increment(protidg.get().belakt);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaWrite();
-                    }
-                }
-                else {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaRewrite();
-                    }
-                    else {
-                        proSalaDelete();
-                    }
-                }
-                protidg.get().post.set(proSparTidgPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparTidgPost.set(protidg.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                protidg.get().post.set(proPrevTidgPost);
-                prosata.get().post.init();
-                prosata.get().projidG.set(protidg.get().projidG);
-                if (protidg.get().bfdat.ref(1,6).isNumeric()) {
-                    prosata.get().bfper.ref(1,6).set(protidg.get().bfdat.ref(1,6));
-                }
-                proSataRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosata.get().data.init();
-                }
-                prosata.get().arvRegKost.decrement(protidg.get().kalkost);
-                prosata.get().arvRegAnt.decrement(protidg.get().timant);
-                prosata.get().arvRegBel.decrement(protidg.get().belakt);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataWrite();
-                    }
-                }
-                else {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataRewrite();
-                    }
-                    else {
-                        proSataDelete();
-                    }
-                }
-                protidg.get().post.set(proSparTidgPost);
-                prosata.get().post.init();
-                prosata.get().projidG.set(protidg.get().projidG);
-                if (protidg.get().bfdat.ref(1,6).isNumeric()) {
-                    prosata.get().bfper.ref(1,6).set(protidg.get().bfdat.ref(1,6));
-                }
-                proSataRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosata.get().data.init();
-                }
-                prosata.get().arvRegKost.increment(protidg.get().kalkost);
-                prosata.get().arvRegAnt.increment(protidg.get().timant);
-                prosata.get().arvRegBel.increment(protidg.get().belakt);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataWrite();
-                    }
-                }
-                else {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataRewrite();
-                    }
-                    else {
-                        proSataDelete();
-                    }
-                }
-                protidg.get().post.set(proSparTidgPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidgWrite() {
-            p04921Record.set("TIDG");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proTidgInit();
-            protidg.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                protidg.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTidgOpenFtg, pa.bfar, "PRO", p04921Record, "N", protidg.get().post);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparTidgPost.set(protidg.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                protidg.get().post.set(proSparTidgPost);
-                prosala.get().post.init();
-                prosala.get().projidG.set(protidg.get().projidG);
-                prosala.get().medarid.set(protidg.get().medarid);
-                prosala.get().grpthtM.set(protidg.get().grpthtM);
-                prosala.get().kat.set(protidg.get().kat);
-                prosala.get().kod.set(protidg.get().kod);
-                if (protidg.get().bfdat.ref(1,6).isNumeric()) {
-                    prosala.get().bfper.ref(1,6).set(protidg.get().bfdat.ref(1,6));
-                }
-                proSalaRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosala.get().data.init();
-                }
-                prosala.get().regAnt.increment(protidg.get().timant);
-                prosala.get().regBel.increment(protidg.get().belakt);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaWrite();
-                    }
-                }
-                else {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaRewrite();
-                    }
-                    else {
-                        proSalaDelete();
-                    }
-                }
-                protidg.get().post.set(proSparTidgPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparTidgPost.set(protidg.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                protidg.get().post.set(proSparTidgPost);
-                prosata.get().post.init();
-                prosata.get().projidG.set(protidg.get().projidG);
-                if (protidg.get().bfdat.ref(1,6).isNumeric()) {
-                    prosata.get().bfper.ref(1,6).set(protidg.get().bfdat.ref(1,6));
-                }
-                proSataRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosata.get().data.init();
-                }
-                prosata.get().arvRegKost.increment(protidg.get().kalkost);
-                prosata.get().arvRegAnt.increment(protidg.get().timant);
-                prosata.get().arvRegBel.increment(protidg.get().belakt);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataWrite();
-                    }
-                }
-                else {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataRewrite();
-                    }
-                    else {
-                        proSataDelete();
-                    }
-                }
-                protidg.get().post.set(proSparTidgPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidgDelete() {
-            p04921Record.set("TIDG");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proTidgInit();
-            proTidg.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidg.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTidgOpenFtg, pa.bfar, "PRO", p04921Record, "D", protidg.get().post);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparTidgPost.set(protidg.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                protidg.get().post.set(proSparTidgPost);
-                prosala.get().post.init();
-                prosala.get().projidG.set(protidg.get().projidG);
-                prosala.get().medarid.set(protidg.get().medarid);
-                prosala.get().grpthtM.set(protidg.get().grpthtM);
-                prosala.get().kat.set(protidg.get().kat);
-                prosala.get().kod.set(protidg.get().kod);
-                if (protidg.get().bfdat.ref(1,6).isNumeric()) {
-                    prosala.get().bfper.ref(1,6).set(protidg.get().bfdat.ref(1,6));
-                }
-                proSalaRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosala.get().data.init();
-                }
-                prosala.get().regAnt.decrement(protidg.get().timant);
-                prosala.get().regBel.decrement(protidg.get().belakt);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaWrite();
-                    }
-                }
-                else {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaRewrite();
-                    }
-                    else {
-                        proSalaDelete();
-                    }
-                }
-                protidg.get().post.set(proSparTidgPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparTidgPost.set(protidg.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                protidg.get().post.set(proSparTidgPost);
-                prosata.get().post.init();
-                prosata.get().projidG.set(protidg.get().projidG);
-                if (protidg.get().bfdat.ref(1,6).isNumeric()) {
-                    prosata.get().bfper.ref(1,6).set(protidg.get().bfdat.ref(1,6));
-                }
-                proSataRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosata.get().data.init();
-                }
-                prosata.get().arvRegKost.decrement(protidg.get().kalkost);
-                prosata.get().arvRegAnt.decrement(protidg.get().timant);
-                prosata.get().arvRegBel.decrement(protidg.get().belakt);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataWrite();
-                    }
-                }
-                else {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataRewrite();
-                    }
-                    else {
-                        proSataDelete();
-                    }
-                }
-                protidg.get().post.set(proSparTidgPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidgStartEg() {
-            p04921Record.set("TIDG");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proTidgInit();
-            proTidg.start("NOT<", "pro_tidg_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidg.start("NOT<", "pro_tidg_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidgStartEgK2() {
-            p04921Record.set("TIDG");
-            p04921Action.set("START-EG-K2");
-            proFilhantInit();
-            proTidgInit();
-            proTidg.start("NOT<", "pro_tidg_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidg.start("NOT<", "pro_tidg_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proTidgStartEgK3() {
-            p04921Record.set("TIDG");
-            p04921Action.set("START-EG-K3");
-            proFilhantInit();
-            proTidgInit();
-            proTidg.start("NOT<", "pro_tidg_key3");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidg.start("NOT<", "pro_tidg_key3");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidgStartprevEg() {
-            p04921Record.set("TIDG");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proTidgInit();
-            proTidg.start("NOT>", "pro_tidg_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidg.start("NOT>", "pro_tidg_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidgStartprevEgK2() {
-            p04921Record.set("TIDG");
-            p04921Action.set("STARTPREV-EG-K2");
-            proFilhantInit();
-            proTidgInit();
-            proTidg.start("NOT>", "pro_tidg_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidg.start("NOT>", "pro_tidg_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proTidgStartprevEgK3() {
-            p04921Record.set("TIDG");
-            p04921Action.set("STARTPREV-EG-K3");
-            proFilhantInit();
-            proTidgInit();
-            proTidg.start("NOT>", "pro_tidg_key3");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidg.start("NOT>", "pro_tidg_key3");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBokfInit() {
-            if (proBokfOpen.equals("J") && !(proBokfOpenFtg.equals(pa.bkstvftg))) {
-                proBokfClose();
-            }
-            if (!(proBokfOpen.equals("J"))) {
-                proBokfFilnamn.set(SPACE);
-                proBokfFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-10"));
-                proBokf.open("I-O");
-                proCheck00();
-                proBokfOpen.set("J");
-                proBokfOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proBokfClose() {
-            p04921Record.set("BOKF");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proBokfOpen.equals("J")) {
-                proBokf.close();
-                proCheck00();
-                proBokfOpen.set("N");
-                proBokfOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proBokfRead() {
-            p04921Record.set("BOKF");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proBokfInit();
-            proBokf.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBokf.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBokfReadKl() {
-            p04921Record.set("BOKF");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proBokfInit();
-            proBokf.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proBokf.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBokfReadnext() {
-            p04921Record.set("BOKF");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proBokfInit();
-            proBokf.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBokf.start(">", "pro_bokf_key");
-                if (p04921Dasvar.equals("00")) {
-                    proBokf.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proBokfReadprev() {
-            p04921Record.set("BOKF");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proBokfInit();
-            proBokf.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBokf.start("<", "pro_bokf_key");
-                if (p04921Dasvar.equals("00")) {
-                    proBokf.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proBokfRewrite() {
-            p04921Record.set("BOKF");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proBokfInit();
-            probokf.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBokfOpenFtg, pa.bfar, "PRO", p04921Record, "U", probokf.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBokfWrite() {
-            p04921Record.set("BOKF");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proBokfInit();
-            probokf.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                probokf.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBokfOpenFtg, pa.bfar, "PRO", p04921Record, "N", probokf.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBokfDelete() {
-            p04921Record.set("BOKF");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proBokfInit();
-            proBokf.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBokf.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBokfOpenFtg, pa.bfar, "PRO", p04921Record, "D", probokf.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBokfStartEg() {
-            p04921Record.set("BOKF");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proBokfInit();
-            proBokf.start("NOT<", "pro_bokf_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBokf.start("NOT<", "pro_bokf_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBokfStartprevEg() {
-            p04921Record.set("BOKF");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proBokfInit();
-            proBokf.start("NOT>", "pro_bokf_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBokf.start("NOT>", "pro_bokf_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proUndlInit() {
-            if (proUndlOpen.equals("J") && !(proUndlOpenFtg.equals(pa.bkstvftg))) {
-                proUndlClose();
-            }
-            if (!(proUndlOpen.equals("J"))) {
-                proUndlFilnamn.set(SPACE);
-                proUndlFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-14"));
-                proUndl.open("I-O");
-                proCheck00();
-                proUndlOpen.set("J");
-                proUndlOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proUndlClose() {
-            p04921Record.set("UNDL");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proUndlOpen.equals("J")) {
-                proUndl.close();
-                proCheck00();
-                proUndlOpen.set("N");
-                proUndlOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proUndlRead() {
-            p04921Record.set("UNDL");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proUndlInit();
-            proUndl.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proUndl.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proUndlReadKl() {
-            p04921Record.set("UNDL");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proUndlInit();
-            proUndl.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proUndl.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proUndlReadnext() {
-            p04921Record.set("UNDL");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proUndlInit();
-            proUndl.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proUndl.start(">", "pro_undl_key");
-                if (p04921Dasvar.equals("00")) {
-                    proUndl.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proUndlReadprev() {
-            p04921Record.set("UNDL");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proUndlInit();
-            proUndl.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proUndl.start("<", "pro_undl_key");
-                if (p04921Dasvar.equals("00")) {
-                    proUndl.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proUndlRewrite() {
-            p04921Record.set("UNDL");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proUndlInit();
-            proundl.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proUndlOpenFtg, pa.bfar, "PRO", p04921Record, "U", proundl.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proUndlWrite() {
-            p04921Record.set("UNDL");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proUndlInit();
-            proundl.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proundl.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proUndlOpenFtg, pa.bfar, "PRO", p04921Record, "N", proundl.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proUndlDelete() {
-            p04921Record.set("UNDL");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proUndlInit();
-            proUndl.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proUndl.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proUndlOpenFtg, pa.bfar, "PRO", p04921Record, "D", proundl.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proUndlStartEg() {
-            p04921Record.set("UNDL");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proUndlInit();
-            proUndl.start("NOT<", "pro_undl_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proUndl.start("NOT<", "pro_undl_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proUndlStartprevEg() {
-            p04921Record.set("UNDL");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proUndlInit();
-            proUndl.start("NOT>", "pro_undl_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proUndl.start("NOT>", "pro_undl_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proAvtpInit() {
-            if (proAvtpOpen.equals("J") && !(proAvtpOpenFtg.equals(pa.bkstvftg))) {
-                proAvtpClose();
-            }
-            if (!(proAvtpOpen.equals("J"))) {
-                proAvtpFilnamn.set(SPACE);
-                proAvtpFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-15"));
-                proAvtp.open("I-O");
-                proCheck00();
-                proAvtpOpen.set("J");
-                proAvtpOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proAvtpClose() {
-            p04921Record.set("AVTP");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proAvtpOpen.equals("J")) {
-                proAvtp.close();
-                proCheck00();
-                proAvtpOpen.set("N");
-                proAvtpOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proAvtpRead() {
-            p04921Record.set("AVTP");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proAvtpInit();
-            proAvtp.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proAvtp.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proAvtpReadKl() {
-            p04921Record.set("AVTP");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proAvtpInit();
-            proAvtp.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proAvtp.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proAvtpReadnext() {
-            p04921Record.set("AVTP");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proAvtpInit();
-            proAvtp.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proAvtp.start(">", "pro_avtp_key");
-                if (p04921Dasvar.equals("00")) {
-                    proAvtp.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proAvtpReadprev() {
-            p04921Record.set("AVTP");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proAvtpInit();
-            proAvtp.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proAvtp.start("<", "pro_avtp_key");
-                if (p04921Dasvar.equals("00")) {
-                    proAvtp.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proAvtpRewrite() {
-            p04921Record.set("AVTP");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proAvtpInit();
-            proavtp.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proAvtpOpenFtg, pa.bfar, "PRO", p04921Record, "U", proavtp.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proAvtpWrite() {
-            p04921Record.set("AVTP");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proAvtpInit();
-            proavtp.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proavtp.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proAvtpOpenFtg, pa.bfar, "PRO", p04921Record, "N", proavtp.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proAvtpDelete() {
-            p04921Record.set("AVTP");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proAvtpInit();
-            proAvtp.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proAvtp.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proAvtpOpenFtg, pa.bfar, "PRO", p04921Record, "D", proavtp.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proAvtpStartEg() {
-            p04921Record.set("AVTP");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proAvtpInit();
-            proAvtp.start("NOT<", "pro_avtp_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proAvtp.start("NOT<", "pro_avtp_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proAvtpStartprevEg() {
-            p04921Record.set("AVTP");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proAvtpInit();
-            proAvtp.start("NOT>", "pro_avtp_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proAvtp.start("NOT>", "pro_avtp_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBenkInit() {
-            if (proBenkOpen.equals("J") && !(proBenkOpenFtg.equals(pa.bkstvftg))) {
-                proBenkClose();
-            }
-            if (!(proBenkOpen.equals("J"))) {
-                proBenkFilnamn.set(SPACE);
-                proBenkFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-16"));
-                proBenk.open("I-O");
-                proCheck00();
-                proBenkOpen.set("J");
-                proBenkOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proBenkClose() {
-            p04921Record.set("BENK");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proBenkOpen.equals("J")) {
-                proBenk.close();
-                proCheck00();
-                proBenkOpen.set("N");
-                proBenkOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proBenkRead() {
-            p04921Record.set("BENK");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proBenkInit();
-            proBenk.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBenk.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBenkReadKl() {
-            p04921Record.set("BENK");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proBenkInit();
-            proBenk.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proBenk.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBenkReadnext() {
-            p04921Record.set("BENK");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proBenkInit();
-            proBenk.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBenk.start(">", "pro_benk_key");
-                if (p04921Dasvar.equals("00")) {
-                    proBenk.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proBenkReadprev() {
-            p04921Record.set("BENK");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proBenkInit();
-            proBenk.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBenk.start("<", "pro_benk_key");
-                if (p04921Dasvar.equals("00")) {
-                    proBenk.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proBenkRewrite() {
-            p04921Record.set("BENK");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proBenkInit();
-            probenk.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBenkOpenFtg, pa.bfar, "PRO", p04921Record, "U", probenk.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBenkWrite() {
-            p04921Record.set("BENK");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proBenkInit();
-            probenk.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                probenk.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBenkOpenFtg, pa.bfar, "PRO", p04921Record, "N", probenk.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBenkDelete() {
-            p04921Record.set("BENK");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proBenkInit();
-            proBenk.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBenk.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBenkOpenFtg, pa.bfar, "PRO", p04921Record, "D", probenk.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBenkStartEg() {
-            p04921Record.set("BENK");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proBenkInit();
-            proBenk.start("NOT<", "pro_benk_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBenk.start("NOT<", "pro_benk_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBenkStartprevEg() {
-            p04921Record.set("BENK");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proBenkInit();
-            proBenk.start("NOT>", "pro_benk_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBenk.start("NOT>", "pro_benk_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proResrInit() {
-            if (proResrOpen.equals("J") && !(proResrOpenFtg.equals(pa.bkstvftg))) {
-                proResrClose();
-            }
-            if (!(proResrOpen.equals("J"))) {
-                proResrFilnamn.set(SPACE);
-                proResrFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-17"));
-                proResr.open("I-O");
-                proCheck00();
-                proResrOpen.set("J");
-                proResrOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proResrClose() {
-            p04921Record.set("RESR");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proResrOpen.equals("J")) {
-                proResr.close();
-                proCheck00();
-                proResrOpen.set("N");
-                proResrOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proResrRead() {
-            p04921Record.set("RESR");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proResrInit();
-            proResr.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proResr.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proResrReadKl() {
-            p04921Record.set("RESR");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proResrInit();
-            proResr.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proResr.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proResrReadnext() {
-            p04921Record.set("RESR");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proResrInit();
-            proResr.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proResr.start(">", "pro_resr_key1");
-                if (p04921Dasvar.equals("00")) {
-                    proResr.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proResrReadnextK2() {
-            p04921Record.set("RESR");
-            p04921Action.set("READNEXT-K2");
-            proFilhantInit();
-            proResrInit();
-            proResr.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proResr.start(">", "pro_resr_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proResr.readNext();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proResrReadprev() {
-            p04921Record.set("RESR");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proResrInit();
-            proResr.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proResr.start("<", "pro_resr_key1");
-                if (p04921Dasvar.equals("00")) {
-                    proResr.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proResrReadprevK2() {
-            p04921Record.set("RESR");
-            p04921Action.set("READPREV-K2");
-            proFilhantInit();
-            proResrInit();
-            proResr.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proResr.start("<", "pro_resr_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proResr.readPrevious();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proResrRewrite() {
-            p04921Record.set("RESR");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proResrInit();
-            proresr.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proResrOpenFtg, pa.bfar, "PRO", p04921Record, "U", proresr.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proResrWrite() {
-            p04921Record.set("RESR");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proResrInit();
-            proresr.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proresr.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proResrOpenFtg, pa.bfar, "PRO", p04921Record, "N", proresr.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proResrDelete() {
-            p04921Record.set("RESR");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proResrInit();
-            proResr.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proResr.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proResrOpenFtg, pa.bfar, "PRO", p04921Record, "D", proresr.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proResrStartEg() {
-            p04921Record.set("RESR");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proResrInit();
-            proResr.start("NOT<", "pro_resr_key1");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proResr.start("NOT<", "pro_resr_key1");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proResrStartEgK2() {
-            p04921Record.set("RESR");
-            p04921Action.set("START-EG-K2");
-            proFilhantInit();
-            proResrInit();
-            proResr.start("NOT<", "pro_resr_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proResr.start("NOT<", "pro_resr_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proResrStartprevEg() {
-            p04921Record.set("RESR");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proResrInit();
-            proResr.start("NOT>", "pro_resr_key1");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proResr.start("NOT>", "pro_resr_key1");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proResrStartprevEgK2() {
-            p04921Record.set("RESR");
-            p04921Action.set("STARTPREV-EG-K2");
-            proFilhantInit();
-            proResrInit();
-            proResr.start("NOT>", "pro_resr_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proResr.start("NOT>", "pro_resr_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFradInit() {
-            if (proFradOpen.equals("J") && !(proFradOpenFtg.equals(pa.bkstvftg))) {
-                proFradClose();
-            }
-            if (!(proFradOpen.equals("J"))) {
-                proFradFilnamn.set(SPACE);
-                proFradFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-18"));
-                proFrad.open("I-O");
-                proCheck00();
-                proFradOpen.set("J");
-                proFradOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proFradClose() {
-            p04921Record.set("FRAD");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proFradOpen.equals("J")) {
-                proFrad.close();
-                proCheck00();
-                proFradOpen.set("N");
-                proFradOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proFradRead() {
-            p04921Record.set("FRAD");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proFradInit();
-            proFrad.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFrad.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFradReadKl() {
-            p04921Record.set("FRAD");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proFradInit();
-            proFrad.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proFrad.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFradReadnext() {
-            p04921Record.set("FRAD");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proFradInit();
-            proFrad.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFrad.start(">", "pro_frad_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFrad.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proFradReadprev() {
-            p04921Record.set("FRAD");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proFradInit();
-            proFrad.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFrad.start("<", "pro_frad_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFrad.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proFradRewrite() {
-            p04921Record.set("FRAD");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proFradInit();
-            profrad.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFradOpenFtg, pa.bfar, "PRO", p04921Record, "U", profrad.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFradWrite() {
-            p04921Record.set("FRAD");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proFradInit();
-            profrad.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                profrad.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFradOpenFtg, pa.bfar, "PRO", p04921Record, "N", profrad.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFradDelete() {
-            p04921Record.set("FRAD");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proFradInit();
-            proFrad.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFrad.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFradOpenFtg, pa.bfar, "PRO", p04921Record, "D", profrad.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFradStartEg() {
-            p04921Record.set("FRAD");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proFradInit();
-            proFrad.start("NOT<", "pro_frad_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFrad.start("NOT<", "pro_frad_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFradStartprevEg() {
-            p04921Record.set("FRAD");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proFradInit();
-            proFrad.start("NOT>", "pro_frad_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFrad.start("NOT>", "pro_frad_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBildInit() {
-            if (proBildOpen.equals("J") && !(proBildOpenFtg.equals(pa.bkstvftg))) {
-                proBildClose();
-            }
-            if (!(proBildOpen.equals("J"))) {
-                proBildFilnamn.set(SPACE);
-                proBildFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-19"));
-                proBild.open("I-O");
-                proCheck00();
-                proBildOpen.set("J");
-                proBildOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proBildClose() {
-            p04921Record.set("BILD");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proBildOpen.equals("J")) {
-                proBild.close();
-                proCheck00();
-                proBildOpen.set("N");
-                proBildOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proBildRead() {
-            p04921Record.set("BILD");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proBildInit();
-            proBild.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBild.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBildReadKl() {
-            p04921Record.set("BILD");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proBildInit();
-            proBild.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proBild.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBildReadnext() {
-            p04921Record.set("BILD");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proBildInit();
-            proBild.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBild.start(">", "pro_bild_key");
-                if (p04921Dasvar.equals("00")) {
-                    proBild.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proBildReadprev() {
-            p04921Record.set("BILD");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proBildInit();
-            proBild.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBild.start("<", "pro_bild_key");
-                if (p04921Dasvar.equals("00")) {
-                    proBild.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proBildRewrite() {
-            p04921Record.set("BILD");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proBildInit();
-            probild.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBildOpenFtg, pa.bfar, "PRO", p04921Record, "U", probild.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBildWrite() {
-            p04921Record.set("BILD");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proBildInit();
-            probild.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                probild.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBildOpenFtg, pa.bfar, "PRO", p04921Record, "N", probild.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBildDelete() {
-            p04921Record.set("BILD");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proBildInit();
-            proBild.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBild.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBildOpenFtg, pa.bfar, "PRO", p04921Record, "D", probild.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBildStartEg() {
-            p04921Record.set("BILD");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proBildInit();
-            proBild.start("NOT<", "pro_bild_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBild.start("NOT<", "pro_bild_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBildStartprevEg() {
-            p04921Record.set("BILD");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proBildInit();
-            proBild.start("NOT>", "pro_bild_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBild.start("NOT>", "pro_bild_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proVandInit() {
-            if (proVandOpen.equals("J") && !(proVandOpenFtg.equals(pa.bkstvftg))) {
-                proVandClose();
-            }
-            if (!(proVandOpen.equals("J"))) {
-                proVandFilnamn.set(SPACE);
-                proVandFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-23"));
-                proVand.open("I-O");
-                proCheck00();
-                proVandOpen.set("J");
-                proVandOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proVandClose() {
-            p04921Record.set("VAND");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proVandOpen.equals("J")) {
-                proVand.close();
-                proCheck00();
-                proVandOpen.set("N");
-                proVandOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proVandRead() {
-            p04921Record.set("VAND");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proVandInit();
-            proVand.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proVand.read();
-            }
-            proCheck0023();
-            proPrevVandPost.set(provand.get().post);
-            proFilhantExit();
-        }
-
-        private void proVandReadKl() {
-            p04921Record.set("VAND");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proVandInit();
-            proVand.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proVand.readWithLock();
-            }
-            proCheck0023();
-            proPrevVandPost.set(provand.get().post);
-            proFilhantExit();
-        }
-
-        private void proVandReadnext() {
-            p04921Record.set("VAND");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proVandInit();
-            proVand.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proVand.start(">", "pro_vand_key");
-                if (p04921Dasvar.equals("00")) {
-                    proVand.readNext();
-                }
-            }
-            proCheck0010();
-            proPrevVandPost.set(provand.get().post);
-            proFilhantExit();
-        }
-
-        private void proVandReadnextK2() {
-            p04921Record.set("VAND");
-            p04921Action.set("READNEXT-K2");
-            proFilhantInit();
-            proVandInit();
-            proVand.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proVand.start(">", "pro_vand_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proVand.readNext();
-                }
-            }
-            proCheck000210();
-            proPrevVandPost.set(provand.get().post);
-            proFilhantExit();
-        }
-
-        private void proVandReadprev() {
-            p04921Record.set("VAND");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proVandInit();
-            proVand.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proVand.start("<", "pro_vand_key");
-                if (p04921Dasvar.equals("00")) {
-                    proVand.readPrevious();
-                }
-            }
-            proCheck0010();
-            proPrevVandPost.set(provand.get().post);
-            proFilhantExit();
-        }
-
-        private void proVandReadprevK2() {
-            p04921Record.set("VAND");
-            p04921Action.set("READPREV-K2");
-            proFilhantInit();
-            proVandInit();
-            proVand.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proVand.start("<", "pro_vand_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proVand.readPrevious();
-                }
-            }
-            proCheck000210();
-            proPrevVandPost.set(provand.get().post);
-            proFilhantExit();
-        }
-
-        private void proVandRewrite() {
-            p04921Record.set("VAND");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proVandInit();
-            provand.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proVandOpenFtg, pa.bfar, "PRO", p04921Record, "U", provand.get().post);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparVandPost.set(provand.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                provand.get().post.set(proPrevVandPost);
-                prosala.get().post.init();
-                prosala.get().projidG.set(provand.get().projidG);
-                prosala.get().medarid.set(provand.get().medarid);
-                prosala.get().grpthtM.set(provand.get().grpthtM);
-                prosala.get().kat.set(provand.get().kat);
-                prosala.get().kod.set(provand.get().kod);
-                if (provand.get().bfdat.ref(1,6).isNumeric()) {
-                    prosala.get().bfper.ref(1,6).set(provand.get().bfdat.ref(1,6));
-                }
-                proSalaRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosala.get().data.init();
-                }
-                prosala.get().faktAnt.decrement(provand.get().antal);
-                prosala.get().faktBel.decrement(provand.get().belfak);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaWrite();
-                    }
-                }
-                else {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaRewrite();
-                    }
-                    else {
-                        proSalaDelete();
-                    }
-                }
-                provand.get().post.set(proSparVandPost);
-                prosala.get().post.init();
-                prosala.get().projidG.set(provand.get().projidG);
-                prosala.get().medarid.set(provand.get().medarid);
-                prosala.get().grpthtM.set(provand.get().grpthtM);
-                prosala.get().kat.set(provand.get().kat);
-                prosala.get().kod.set(provand.get().kod);
-                if (provand.get().bfdat.ref(1,6).isNumeric()) {
-                    prosala.get().bfper.ref(1,6).set(provand.get().bfdat.ref(1,6));
-                }
-                proSalaRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosala.get().data.init();
-                }
-                prosala.get().faktAnt.increment(provand.get().antal);
-                prosala.get().faktBel.increment(provand.get().belfak);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaWrite();
-                    }
-                }
-                else {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaRewrite();
-                    }
-                    else {
-                        proSalaDelete();
-                    }
-                }
-                provand.get().post.set(proSparVandPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparVandPost.set(provand.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                provand.get().post.set(proPrevVandPost);
-                prosata.get().post.init();
-                prosata.get().projidG.set(provand.get().projidG);
-                if (provand.get().bfdat.ref(1,6).isNumeric()) {
-                    prosata.get().bfper.ref(1,6).set(provand.get().bfdat.ref(1,6));
-                }
-                proSataRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosata.get().data.init();
-                }
-                switch (provand.get().saldotyp.getStringValue()) {
-                    case "A":
-                        prosata.get().arvFaktKost.decrement(provand.get().infak);
-                        prosata.get().arvFaktAnt.decrement(provand.get().antal);
-                        prosata.get().arvFaktBel.decrement(provand.get().belfak);
-                        break;
-                    case "I":
-                        prosata.get().inkFaktKost.decrement(provand.get().infak);
-                        prosata.get().inkFaktBel.decrement(provand.get().belfak);
-                        break;
-                    case "N":
-                        prosata.get().ovrFaktKost.decrement(provand.get().infak);
-                        prosata.get().ovrFaktBel.decrement(provand.get().belfak);
-                        break;
-                }
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataWrite();
-                    }
-                }
-                else {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataRewrite();
-                    }
-                    else {
-                        proSataDelete();
-                    }
-                }
-                provand.get().post.set(proSparVandPost);
-                prosata.get().post.init();
-                prosata.get().projidG.set(provand.get().projidG);
-                if (provand.get().bfdat.ref(1,6).isNumeric()) {
-                    prosata.get().bfper.ref(1,6).set(provand.get().bfdat.ref(1,6));
-                }
-                proSataRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosata.get().data.init();
-                }
-                switch (provand.get().saldotyp.getStringValue()) {
-                    case "A":
-                        prosata.get().arvFaktKost.increment(provand.get().infak);
-                        prosata.get().arvFaktAnt.increment(provand.get().antal);
-                        prosata.get().arvFaktBel.increment(provand.get().belfak);
-                        break;
-                    case "I":
-                        prosata.get().inkFaktKost.increment(provand.get().infak);
-                        prosata.get().inkFaktBel.increment(provand.get().belfak);
-                        break;
-                    case "N":
-                        prosata.get().ovrFaktKost.increment(provand.get().infak);
-                        prosata.get().ovrFaktBel.increment(provand.get().belfak);
-                        break;
-                }
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataWrite();
-                    }
-                }
-                else {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataRewrite();
-                    }
-                    else {
-                        proSataDelete();
-                    }
-                }
-                provand.get().post.set(proSparVandPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            proFilhantExit();
-        }
-
-        private void proVandWrite() {
-            p04921Record.set("VAND");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proVandInit();
-            provand.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                provand.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proVandOpenFtg, pa.bfar, "PRO", p04921Record, "N", provand.get().post);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparVandPost.set(provand.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                provand.get().post.set(proSparVandPost);
-                prosala.get().post.init();
-                prosala.get().projidG.set(provand.get().projidG);
-                prosala.get().medarid.set(provand.get().medarid);
-                prosala.get().grpthtM.set(provand.get().grpthtM);
-                prosala.get().kat.set(provand.get().kat);
-                prosala.get().kod.set(provand.get().kod);
-                if (provand.get().bfdat.ref(1,6).isNumeric()) {
-                    prosala.get().bfper.ref(1,6).set(provand.get().bfdat.ref(1,6));
-                }
-                proSalaRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosala.get().data.init();
-                }
-                prosala.get().faktAnt.increment(provand.get().antal);
-                prosala.get().faktBel.increment(provand.get().belfak);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaWrite();
-                    }
-                }
-                else {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaRewrite();
-                    }
-                    else {
-                        proSalaDelete();
-                    }
-                }
-                provand.get().post.set(proSparVandPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparVandPost.set(provand.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                provand.get().post.set(proSparVandPost);
-                prosata.get().post.init();
-                prosata.get().projidG.set(provand.get().projidG);
-                if (provand.get().bfdat.ref(1,6).isNumeric()) {
-                    prosata.get().bfper.ref(1,6).set(provand.get().bfdat.ref(1,6));
-                }
-                proSataRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosata.get().data.init();
-                }
-                switch (provand.get().saldotyp.getStringValue()) {
-                    case "A":
-                        prosata.get().arvFaktKost.increment(provand.get().infak);
-                        prosata.get().arvFaktAnt.increment(provand.get().antal);
-                        prosata.get().arvFaktBel.increment(provand.get().belfak);
-                        break;
-                    case "I":
-                        prosata.get().inkFaktKost.increment(provand.get().infak);
-                        prosata.get().inkFaktBel.increment(provand.get().belfak);
-                        break;
-                    case "N":
-                        prosata.get().ovrFaktKost.increment(provand.get().infak);
-                        prosata.get().ovrFaktBel.increment(provand.get().belfak);
-                        break;
-                }
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataWrite();
-                    }
-                }
-                else {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataRewrite();
-                    }
-                    else {
-                        proSataDelete();
-                    }
-                }
-                provand.get().post.set(proSparVandPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            proFilhantExit();
-        }
-
-        private void proVandDelete() {
-            p04921Record.set("VAND");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proVandInit();
-            proVand.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proVand.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proVandOpenFtg, pa.bfar, "PRO", p04921Record, "D", provand.get().post);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparVandPost.set(provand.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                provand.get().post.set(proSparVandPost);
-                prosala.get().post.init();
-                prosala.get().projidG.set(provand.get().projidG);
-                prosala.get().medarid.set(provand.get().medarid);
-                prosala.get().grpthtM.set(provand.get().grpthtM);
-                prosala.get().kat.set(provand.get().kat);
-                prosala.get().kod.set(provand.get().kod);
-                if (provand.get().bfdat.ref(1,6).isNumeric()) {
-                    prosala.get().bfper.ref(1,6).set(provand.get().bfdat.ref(1,6));
-                }
-                proSalaRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosala.get().data.init();
-                }
-                prosala.get().faktAnt.decrement(provand.get().antal);
-                prosala.get().faktBel.decrement(provand.get().belfak);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaWrite();
-                    }
-                }
-                else {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaRewrite();
-                    }
-                    else {
-                        proSalaDelete();
-                    }
-                }
-                provand.get().post.set(proSparVandPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparVandPost.set(provand.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                provand.get().post.set(proSparVandPost);
-                prosata.get().post.init();
-                prosata.get().projidG.set(provand.get().projidG);
-                if (provand.get().bfdat.ref(1,6).isNumeric()) {
-                    prosata.get().bfper.ref(1,6).set(provand.get().bfdat.ref(1,6));
-                }
-                proSataRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosata.get().data.init();
-                }
-                switch (provand.get().saldotyp.getStringValue()) {
-                    case "A":
-                        prosata.get().arvFaktKost.decrement(provand.get().infak);
-                        prosata.get().arvFaktAnt.decrement(provand.get().antal);
-                        prosata.get().arvFaktBel.decrement(provand.get().belfak);
-                        break;
-                    case "I":
-                        prosata.get().inkFaktKost.decrement(provand.get().infak);
-                        prosata.get().inkFaktBel.decrement(provand.get().belfak);
-                        break;
-                    case "N":
-                        prosata.get().ovrFaktKost.decrement(provand.get().infak);
-                        prosata.get().ovrFaktBel.decrement(provand.get().belfak);
-                        break;
-                }
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataWrite();
-                    }
-                }
-                else {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataRewrite();
-                    }
-                    else {
-                        proSataDelete();
-                    }
-                }
-                provand.get().post.set(proSparVandPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            proFilhantExit();
-        }
-
-        private void proVandStartEg() {
-            p04921Record.set("VAND");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proVandInit();
-            proVand.start("NOT<", "pro_vand_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proVand.start("NOT<", "pro_vand_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proVandStartEgK2() {
-            p04921Record.set("VAND");
-            p04921Action.set("START-EG-K2");
-            proFilhantInit();
-            proVandInit();
-            proVand.start("NOT<", "pro_vand_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proVand.start("NOT<", "pro_vand_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proVandStartprevEg() {
-            p04921Record.set("VAND");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proVandInit();
-            proVand.start("NOT>", "pro_vand_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proVand.start("NOT>", "pro_vand_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proVandStartprevEgK2() {
-            p04921Record.set("VAND");
-            p04921Action.set("STARTPREV-EG-K2");
-            proFilhantInit();
-            proVandInit();
-            proVand.start("NOT>", "pro_vand_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proVand.start("NOT>", "pro_vand_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proJarvInit() {
-            if (proJarvOpen.equals("J") && !(proJarvOpenFtg.equals(pa.bkstvftg))) {
-                proJarvClose();
-            }
-            if (!(proJarvOpen.equals("J"))) {
-                proJarvFilnamn.set(SPACE);
-                proJarvFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-33"));
-                proJarv.open("I-O");
-                proCheck00();
-                proJarvOpen.set("J");
-                proJarvOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proJarvClose() {
-            p04921Record.set("JARV");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proJarvOpen.equals("J")) {
-                proJarv.close();
-                proCheck00();
-                proJarvOpen.set("N");
-                proJarvOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proJarvRead() {
-            p04921Record.set("JARV");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proJarvInit();
-            proJarv.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proJarv.read();
-            }
-            proCheck0023();
-            proPrevJarvPost.set(projarv.get().post);
-            proFilhantExit();
-        }
-
-        private void proJarvReadKl() {
-            p04921Record.set("JARV");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proJarvInit();
-            proJarv.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proJarv.readWithLock();
-            }
-            proCheck0023();
-            proPrevJarvPost.set(projarv.get().post);
-            proFilhantExit();
-        }
-
-        private void proJarvReadnext() {
-            p04921Record.set("JARV");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proJarvInit();
-            proJarv.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proJarv.start(">", "pro_jarv_key");
-                if (p04921Dasvar.equals("00")) {
-                    proJarv.readNext();
-                }
-            }
-            proCheck0010();
-            proPrevJarvPost.set(projarv.get().post);
-            proFilhantExit();
-        }
-
-        private void proJarvReadprev() {
-            p04921Record.set("JARV");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proJarvInit();
-            proJarv.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proJarv.start("<", "pro_jarv_key");
-                if (p04921Dasvar.equals("00")) {
-                    proJarv.readPrevious();
-                }
-            }
-            proCheck0010();
-            proPrevJarvPost.set(projarv.get().post);
-            proFilhantExit();
-        }
-
-        private void proJarvRewrite() {
-            p04921Record.set("JARV");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proJarvInit();
-            projarv.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proJarvOpenFtg, pa.bfar, "PRO", p04921Record, "U", projarv.get().post);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparJarvPost.set(projarv.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                projarv.get().post.set(proPrevJarvPost);
-                prosala.get().post.init();
-                prosala.get().projidG.set(projarv.get().projidG);
-                prosala.get().medarid.set(projarv.get().medarid);
-                prosala.get().grpthtM.set(projarv.get().grpthtM);
-                prosala.get().kat.set(projarv.get().kat);
-                prosala.get().kod.set(projarv.get().kod);
-                if (projarv.get().bfdat.ref(1,6).isNumeric()) {
-                    prosala.get().bfper.ref(1,6).set(projarv.get().bfdat.ref(1,6));
-                }
-                proSalaRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosala.get().data.init();
-                }
-                prosala.get().regAnt.decrement(projarv.get().timjust);
-                prosala.get().regBel.decrement(projarv.get().beljust);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaWrite();
-                    }
-                }
-                else {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaRewrite();
-                    }
-                    else {
-                        proSalaDelete();
-                    }
-                }
-                projarv.get().post.set(proSparJarvPost);
-                prosala.get().post.init();
-                prosala.get().projidG.set(projarv.get().projidG);
-                prosala.get().medarid.set(projarv.get().medarid);
-                prosala.get().grpthtM.set(projarv.get().grpthtM);
-                prosala.get().kat.set(projarv.get().kat);
-                prosala.get().kod.set(projarv.get().kod);
-                if (projarv.get().bfdat.ref(1,6).isNumeric()) {
-                    prosala.get().bfper.ref(1,6).set(projarv.get().bfdat.ref(1,6));
-                }
-                proSalaRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosala.get().data.init();
-                }
-                prosala.get().justAnt.increment(projarv.get().timjust);
-                prosala.get().justBel.increment(projarv.get().beljust);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaWrite();
-                    }
-                }
-                else {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaRewrite();
-                    }
-                    else {
-                        proSalaDelete();
-                    }
-                }
-                projarv.get().post.set(proSparJarvPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparJarvPost.set(projarv.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                projarv.get().post.set(proPrevJarvPost);
-                prosata.get().post.init();
-                prosata.get().projidG.set(projarv.get().projidG);
-                if (projarv.get().bfdat.ref(1,6).isNumeric()) {
-                    prosata.get().bfper.ref(1,6).set(projarv.get().bfdat.ref(1,6));
-                }
-                proSataRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosata.get().data.init();
-                }
-                prosata.get().arvJustAnt.decrement(projarv.get().timjust);
-                prosata.get().arvJustBel.decrement(projarv.get().beljust);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataWrite();
-                    }
-                }
-                else {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataRewrite();
-                    }
-                    else {
-                        proSataDelete();
-                    }
-                }
-                projarv.get().post.set(proSparJarvPost);
-                prosata.get().post.init();
-                prosata.get().projidG.set(projarv.get().projidG);
-                if (projarv.get().bfdat.ref(1,6).isNumeric()) {
-                    prosata.get().bfper.ref(1,6).set(projarv.get().bfdat.ref(1,6));
-                }
-                proSataRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosata.get().data.init();
-                }
-                prosata.get().arvJustAnt.increment(projarv.get().timjust);
-                prosata.get().arvJustBel.increment(projarv.get().beljust);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataWrite();
-                    }
-                }
-                else {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataRewrite();
-                    }
-                    else {
-                        proSataDelete();
-                    }
-                }
-                projarv.get().post.set(proSparJarvPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            proFilhantExit();
-        }
-
-        private void proJarvWrite() {
-            p04921Record.set("JARV");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proJarvInit();
-            projarv.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                projarv.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proJarvOpenFtg, pa.bfar, "PRO", p04921Record, "N", projarv.get().post);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparJarvPost.set(projarv.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                projarv.get().post.set(proSparJarvPost);
-                prosala.get().post.init();
-                prosala.get().projidG.set(projarv.get().projidG);
-                prosala.get().medarid.set(projarv.get().medarid);
-                prosala.get().grpthtM.set(projarv.get().grpthtM);
-                prosala.get().kat.set(projarv.get().kat);
-                prosala.get().kod.set(projarv.get().kod);
-                if (projarv.get().bfdat.ref(1,6).isNumeric()) {
-                    prosala.get().bfper.ref(1,6).set(projarv.get().bfdat.ref(1,6));
-                }
-                proSalaRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosala.get().data.init();
-                }
-                prosala.get().justAnt.increment(projarv.get().timjust);
-                prosala.get().justBel.increment(projarv.get().beljust);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaWrite();
-                    }
-                }
-                else {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaRewrite();
-                    }
-                    else {
-                        proSalaDelete();
-                    }
-                }
-                projarv.get().post.set(proSparJarvPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparJarvPost.set(projarv.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                projarv.get().post.set(proSparJarvPost);
-                prosata.get().post.init();
-                prosata.get().projidG.set(projarv.get().projidG);
-                if (projarv.get().bfdat.ref(1,6).isNumeric()) {
-                    prosata.get().bfper.ref(1,6).set(projarv.get().bfdat.ref(1,6));
-                }
-                proSataRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosata.get().data.init();
-                }
-                prosata.get().arvJustAnt.increment(projarv.get().timjust);
-                prosata.get().arvJustBel.increment(projarv.get().beljust);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataWrite();
-                    }
-                }
-                else {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataRewrite();
-                    }
-                    else {
-                        proSataDelete();
-                    }
-                }
-                projarv.get().post.set(proSparJarvPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            proFilhantExit();
-        }
-
-        private void proJarvDelete() {
-            p04921Record.set("JARV");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proJarvInit();
-            proJarv.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proJarv.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proJarvOpenFtg, pa.bfar, "PRO", p04921Record, "D", projarv.get().post);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparJarvPost.set(projarv.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                projarv.get().post.set(proSparJarvPost);
-                prosala.get().post.init();
-                prosala.get().projidG.set(projarv.get().projidG);
-                prosala.get().medarid.set(projarv.get().medarid);
-                prosala.get().grpthtM.set(projarv.get().grpthtM);
-                prosala.get().kat.set(projarv.get().kat);
-                prosala.get().kod.set(projarv.get().kod);
-                if (projarv.get().bfdat.ref(1,6).isNumeric()) {
-                    prosala.get().bfper.ref(1,6).set(projarv.get().bfdat.ref(1,6));
-                }
-                proSalaRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosala.get().data.init();
-                }
-                prosala.get().justAnt.decrement(projarv.get().timjust);
-                prosala.get().justBel.decrement(projarv.get().beljust);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaWrite();
-                    }
-                }
-                else {
-                    if (!(prosala.get().regAnt.equals(ZERO)) || !(prosala.get().regBel.equals(ZERO)) || !(prosala.get().justAnt.equals(ZERO)) || !(prosala.get().justBel.equals(ZERO)) || !(prosala.get().faktAnt.equals(ZERO)) || !(prosala.get().faktBel.equals(ZERO))) {
-                        proSalaRewrite();
-                    }
-                    else {
-                        proSalaDelete();
-                    }
-                }
-                projarv.get().post.set(proSparJarvPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparJarvPost.set(projarv.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                projarv.get().post.set(proSparJarvPost);
-                prosata.get().post.init();
-                prosata.get().projidG.set(projarv.get().projidG);
-                if (projarv.get().bfdat.ref(1,6).isNumeric()) {
-                    prosata.get().bfper.ref(1,6).set(projarv.get().bfdat.ref(1,6));
-                }
-                proSataRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosata.get().data.init();
-                }
-                prosata.get().arvJustAnt.decrement(projarv.get().timjust);
-                prosata.get().arvJustBel.decrement(projarv.get().beljust);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataWrite();
-                    }
-                }
-                else {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataRewrite();
-                    }
-                    else {
-                        proSataDelete();
-                    }
-                }
-                projarv.get().post.set(proSparJarvPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            proFilhantExit();
-        }
-
-        private void proJarvStartEg() {
-            p04921Record.set("JARV");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proJarvInit();
-            proJarv.start("NOT<", "pro_jarv_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proJarv.start("NOT<", "pro_jarv_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proJarvStartprevEg() {
-            p04921Record.set("JARV");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proJarvInit();
-            proJarv.start("NOT>", "pro_jarv_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proJarv.start("NOT>", "pro_jarv_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proJinkInit() {
-            if (proJinkOpen.equals("J") && !(proJinkOpenFtg.equals(pa.bkstvftg))) {
-                proJinkClose();
-            }
-            if (!(proJinkOpen.equals("J"))) {
-                proJinkFilnamn.set(SPACE);
-                proJinkFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-34"));
-                proJink.open("I-O");
-                proCheck00();
-                proJinkOpen.set("J");
-                proJinkOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proJinkClose() {
-            p04921Record.set("JINK");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proJinkOpen.equals("J")) {
-                proJink.close();
-                proCheck00();
-                proJinkOpen.set("N");
-                proJinkOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proJinkRead() {
-            p04921Record.set("JINK");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proJinkInit();
-            proJink.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proJink.read();
-            }
-            proCheck0023();
-            proPrevJinkPost.set(projink.get().post);
-            proFilhantExit();
-        }
-
-        private void proJinkReadKl() {
-            p04921Record.set("JINK");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proJinkInit();
-            proJink.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proJink.readWithLock();
-            }
-            proCheck0023();
-            proPrevJinkPost.set(projink.get().post);
-            proFilhantExit();
-        }
-
-        private void proJinkReadnext() {
-            p04921Record.set("JINK");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proJinkInit();
-            proJink.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proJink.start(">", "pro_jink_key");
-                if (p04921Dasvar.equals("00")) {
-                    proJink.readNext();
-                }
-            }
-            proCheck0010();
-            proPrevJinkPost.set(projink.get().post);
-            proFilhantExit();
-        }
-
-        private void proJinkReadprev() {
-            p04921Record.set("JINK");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proJinkInit();
-            proJink.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proJink.start("<", "pro_jink_key");
-                if (p04921Dasvar.equals("00")) {
-                    proJink.readPrevious();
-                }
-            }
-            proCheck0010();
-            proPrevJinkPost.set(projink.get().post);
-            proFilhantExit();
-        }
-
-        private void proJinkRewrite() {
-            p04921Record.set("JINK");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proJinkInit();
-            projink.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proJinkOpenFtg, pa.bfar, "PRO", p04921Record, "U", projink.get().post);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparJinkPost.set(projink.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                projink.get().post.set(proPrevJinkPost);
-                prosata.get().post.init();
-                prosata.get().projidG.set(projink.get().projidG);
-                if (projink.get().bfdat.ref(1,6).isNumeric()) {
-                    prosata.get().bfper.ref(1,6).set(projink.get().bfdat.ref(1,6));
-                }
-                proSataRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosata.get().data.init();
-                }
-                prosata.get().inkJustBel.decrement(projink.get().beljust);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataWrite();
-                    }
-                }
-                else {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataRewrite();
-                    }
-                    else {
-                        proSataDelete();
-                    }
-                }
-                projink.get().post.set(proSparJinkPost);
-                prosata.get().post.init();
-                prosata.get().projidG.set(projink.get().projidG);
-                if (projink.get().bfdat.ref(1,6).isNumeric()) {
-                    prosata.get().bfper.ref(1,6).set(projink.get().bfdat.ref(1,6));
-                }
-                proSataRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosata.get().data.init();
-                }
-                prosata.get().inkJustBel.increment(projink.get().beljust);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataWrite();
-                    }
-                }
-                else {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataRewrite();
-                    }
-                    else {
-                        proSataDelete();
-                    }
-                }
-                projink.get().post.set(proSparJinkPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            proFilhantExit();
-        }
-
-        private void proJinkWrite() {
-            p04921Record.set("JINK");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proJinkInit();
-            projink.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                projink.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proJinkOpenFtg, pa.bfar, "PRO", p04921Record, "N", projink.get().post);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparJinkPost.set(projink.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                projink.get().post.set(proSparJinkPost);
-                prosata.get().post.init();
-                prosata.get().projidG.set(projink.get().projidG);
-                if (projink.get().bfdat.ref(1,6).isNumeric()) {
-                    prosata.get().bfper.ref(1,6).set(projink.get().bfdat.ref(1,6));
-                }
-                proSataRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosata.get().data.init();
-                }
-                prosata.get().inkJustBel.increment(projink.get().beljust);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataWrite();
-                    }
-                }
-                else {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataRewrite();
-                    }
-                    else {
-                        proSataDelete();
-                    }
-                }
-                projink.get().post.set(proSparJinkPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            proFilhantExit();
-        }
-
-        private void proJinkDelete() {
-            p04921Record.set("JINK");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proJinkInit();
-            proJink.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proJink.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proJinkOpenFtg, pa.bfar, "PRO", p04921Record, "D", projink.get().post);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparJinkPost.set(projink.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                projink.get().post.set(proSparJinkPost);
-                prosata.get().post.init();
-                prosata.get().projidG.set(projink.get().projidG);
-                if (projink.get().bfdat.ref(1,6).isNumeric()) {
-                    prosata.get().bfper.ref(1,6).set(projink.get().bfdat.ref(1,6));
-                }
-                proSataRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosata.get().data.init();
-                }
-                prosata.get().inkJustBel.decrement(projink.get().beljust);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataWrite();
-                    }
-                }
-                else {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataRewrite();
-                    }
-                    else {
-                        proSataDelete();
-                    }
-                }
-                projink.get().post.set(proSparJinkPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            proFilhantExit();
-        }
-
-        private void proJinkStartEg() {
-            p04921Record.set("JINK");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proJinkInit();
-            proJink.start("NOT<", "pro_jink_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proJink.start("NOT<", "pro_jink_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proJinkStartprevEg() {
-            p04921Record.set("JINK");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proJinkInit();
-            proJink.start("NOT>", "pro_jink_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proJink.start("NOT>", "pro_jink_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proJmatInit() {
-            if (proJmatOpen.equals("J") && !(proJmatOpenFtg.equals(pa.bkstvftg))) {
-                proJmatClose();
-            }
-            if (!(proJmatOpen.equals("J"))) {
-                proJmatFilnamn.set(SPACE);
-                proJmatFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-35"));
-                proJmat.open("I-O");
-                proCheck00();
-                proJmatOpen.set("J");
-                proJmatOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proJmatClose() {
-            p04921Record.set("JMAT");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proJmatOpen.equals("J")) {
-                proJmat.close();
-                proCheck00();
-                proJmatOpen.set("N");
-                proJmatOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proJmatRead() {
-            p04921Record.set("JMAT");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proJmatInit();
-            proJmat.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proJmat.read();
-            }
-            proCheck0023();
-            proPrevJmatPost.set(projmat.get().post);
-            proFilhantExit();
-        }
-
-        private void proJmatReadKl() {
-            p04921Record.set("JMAT");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proJmatInit();
-            proJmat.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proJmat.readWithLock();
-            }
-            proCheck0023();
-            proPrevJmatPost.set(projmat.get().post);
-            proFilhantExit();
-        }
-
-        private void proJmatReadnext() {
-            p04921Record.set("JMAT");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proJmatInit();
-            proJmat.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proJmat.start(">", "pro_jmat_key");
-                if (p04921Dasvar.equals("00")) {
-                    proJmat.readNext();
-                }
-            }
-            proCheck0010();
-            proPrevJmatPost.set(projmat.get().post);
-            proFilhantExit();
-        }
-
-        private void proJmatReadprev() {
-            p04921Record.set("JMAT");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proJmatInit();
-            proJmat.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proJmat.start("<", "pro_jmat_key");
-                if (p04921Dasvar.equals("00")) {
-                    proJmat.readPrevious();
-                }
-            }
-            proCheck0010();
-            proPrevJmatPost.set(projmat.get().post);
-            proFilhantExit();
-        }
-
-        private void proJmatRewrite() {
-            p04921Record.set("JMAT");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proJmatInit();
-            projmat.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proJmatOpenFtg, pa.bfar, "PRO", p04921Record, "U", projmat.get().post);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparJmatPost.set(projmat.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                projmat.get().post.set(proPrevJmatPost);
-                prosata.get().post.init();
-                prosata.get().projidG.set(projmat.get().projidG);
-                if (projmat.get().bfdat.ref(1,6).isNumeric()) {
-                    prosata.get().bfper.ref(1,6).set(projmat.get().bfdat.ref(1,6));
-                }
-                proSataRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosata.get().data.init();
-                }
-                prosata.get().ovrJustBel.decrement(projmat.get().beljust);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataWrite();
-                    }
-                }
-                else {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataRewrite();
-                    }
-                    else {
-                        proSataDelete();
-                    }
-                }
-                projmat.get().post.set(proSparJmatPost);
-                prosata.get().post.init();
-                prosata.get().projidG.set(projmat.get().projidG);
-                if (projmat.get().bfdat.ref(1,6).isNumeric()) {
-                    prosata.get().bfper.ref(1,6).set(projmat.get().bfdat.ref(1,6));
-                }
-                proSataRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosata.get().data.init();
-                }
-                prosata.get().ovrJustBel.increment(projmat.get().beljust);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataWrite();
-                    }
-                }
-                else {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataRewrite();
-                    }
-                    else {
-                        proSataDelete();
-                    }
-                }
-                projmat.get().post.set(proSparJmatPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            proFilhantExit();
-        }
-
-        private void proJmatWrite() {
-            p04921Record.set("JMAT");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proJmatInit();
-            projmat.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                projmat.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proJmatOpenFtg, pa.bfar, "PRO", p04921Record, "N", projmat.get().post);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparJmatPost.set(projmat.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                projmat.get().post.set(proSparJmatPost);
-                prosata.get().post.init();
-                prosata.get().projidG.set(projmat.get().projidG);
-                if (projmat.get().bfdat.ref(1,6).isNumeric()) {
-                    prosata.get().bfper.ref(1,6).set(projmat.get().bfdat.ref(1,6));
-                }
-                proSataRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosata.get().data.init();
-                }
-                prosata.get().ovrJustBel.increment(projmat.get().beljust);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataWrite();
-                    }
-                }
-                else {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataRewrite();
-                    }
-                    else {
-                        proSataDelete();
-                    }
-                }
-                projmat.get().post.set(proSparJmatPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            proFilhantExit();
-        }
-
-        private void proJmatDelete() {
-            p04921Record.set("JMAT");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proJmatInit();
-            proJmat.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proJmat.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proJmatOpenFtg, pa.bfar, "PRO", p04921Record, "D", projmat.get().post);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparJmatPost.set(projmat.get().post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                projmat.get().post.set(proSparJmatPost);
-                prosata.get().post.init();
-                prosata.get().projidG.set(projmat.get().projidG);
-                if (projmat.get().bfdat.ref(1,6).isNumeric()) {
-                    prosata.get().bfper.ref(1,6).set(projmat.get().bfdat.ref(1,6));
-                }
-                proSataRead();
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    prosata.get().data.init();
-                }
-                prosata.get().ovrJustBel.decrement(projmat.get().beljust);
-                if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataWrite();
-                    }
-                }
-                else {
-                    if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                        proSataRewrite();
-                    }
-                    else {
-                        proSataDelete();
-                    }
-                }
-                projmat.get().post.set(proSparJmatPost);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            proFilhantExit();
-        }
-
-        private void proJmatStartEg() {
-            p04921Record.set("JMAT");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proJmatInit();
-            proJmat.start("NOT<", "pro_jmat_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proJmat.start("NOT<", "pro_jmat_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proJmatStartprevEg() {
-            p04921Record.set("JMAT");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proJmatInit();
-            proJmat.start("NOT>", "pro_jmat_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proJmat.start("NOT>", "pro_jmat_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRappInit() {
-            if (proRappOpen.equals("J") && !(proRappOpenFtg.equals(pa.bkstvftg))) {
-                proRappClose();
-            }
-            if (!(proRappOpen.equals("J"))) {
-                proRappFilnamn.set(SPACE);
-                proRappFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-40"));
-                proRapp.open("I-O");
-                proCheck00();
-                proRappOpen.set("J");
-                proRappOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proRappClose() {
-            p04921Record.set("RAPP");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proRappOpen.equals("J")) {
-                proRapp.close();
-                proCheck00();
-                proRappOpen.set("N");
-                proRappOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proRappRead() {
-            p04921Record.set("RAPP");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proRappInit();
-            proRapp.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRapp.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRappReadKl() {
-            p04921Record.set("RAPP");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proRappInit();
-            proRapp.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proRapp.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRappReadnext() {
-            p04921Record.set("RAPP");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proRappInit();
-            proRapp.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRapp.start(">", "pro_rapp_key");
-                if (p04921Dasvar.equals("00")) {
-                    proRapp.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proRappReadprev() {
-            p04921Record.set("RAPP");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proRappInit();
-            proRapp.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRapp.start("<", "pro_rapp_key");
-                if (p04921Dasvar.equals("00")) {
-                    proRapp.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proRappRewrite() {
-            p04921Record.set("RAPP");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proRappInit();
-            prorapp.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRappOpenFtg, pa.bfar, "PRO", p04921Record, "U", prorapp.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRappWrite() {
-            p04921Record.set("RAPP");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proRappInit();
-            prorapp.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                prorapp.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRappOpenFtg, pa.bfar, "PRO", p04921Record, "N", prorapp.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRappDelete() {
-            p04921Record.set("RAPP");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proRappInit();
-            proRapp.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRapp.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRappOpenFtg, pa.bfar, "PRO", p04921Record, "D", prorapp.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRappStartEg() {
-            p04921Record.set("RAPP");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proRappInit();
-            proRapp.start("NOT<", "pro_rapp_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRapp.start("NOT<", "pro_rapp_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRappStartprevEg() {
-            p04921Record.set("RAPP");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proRappInit();
-            proRapp.start("NOT>", "pro_rapp_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRapp.start("NOT>", "pro_rapp_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOverInit() {
-            if (proOverOpen.equals("J") && !(proOverOpenFtg.equals(pa.bkstvftg))) {
-                proOverClose();
-            }
-            if (!(proOverOpen.equals("J"))) {
-                proOverFilnamn.set(SPACE);
-                proOverFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-41"));
-                proOver.open("I-O");
-                proCheck00();
-                proOverOpen.set("J");
-                proOverOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proOverClose() {
-            p04921Record.set("OVER");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proOverOpen.equals("J")) {
-                proOver.close();
-                proCheck00();
-                proOverOpen.set("N");
-                proOverOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proOverRead() {
-            p04921Record.set("OVER");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proOverInit();
-            proOver.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOver.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOverReadKl() {
-            p04921Record.set("OVER");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proOverInit();
-            proOver.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proOver.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOverReadnext() {
-            p04921Record.set("OVER");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proOverInit();
-            proOver.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOver.start(">", "pro_over_key");
-                if (p04921Dasvar.equals("00")) {
-                    proOver.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proOverReadprev() {
-            p04921Record.set("OVER");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proOverInit();
-            proOver.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOver.start("<", "pro_over_key");
-                if (p04921Dasvar.equals("00")) {
-                    proOver.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proOverRewrite() {
-            p04921Record.set("OVER");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proOverInit();
-            proover.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proOverOpenFtg, pa.bfar, "PRO", p04921Record, "U", proover.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proOverWrite() {
-            p04921Record.set("OVER");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proOverInit();
-            proover.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proover.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proOverOpenFtg, pa.bfar, "PRO", p04921Record, "N", proover.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proOverDelete() {
-            p04921Record.set("OVER");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proOverInit();
-            proOver.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOver.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proOverOpenFtg, pa.bfar, "PRO", p04921Record, "D", proover.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proOverStartEg() {
-            p04921Record.set("OVER");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proOverInit();
-            proOver.start("NOT<", "pro_over_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOver.start("NOT<", "pro_over_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOverStartprevEg() {
-            p04921Record.set("OVER");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proOverInit();
-            proOver.start("NOT>", "pro_over_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOver.start("NOT>", "pro_over_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proKbudInit() {
-            if (proKbudOpen.equals("J") && !(proKbudOpenFtg.equals(pa.bkstvftg))) {
-                proKbudClose();
-            }
-            if (!(proKbudOpen.equals("J"))) {
-                proKbudFilnamn.set(SPACE);
-                proKbudFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-42"));
-                proKbud.open("I-O");
-                proCheck00();
-                proKbudOpen.set("J");
-                proKbudOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proKbudClose() {
-            p04921Record.set("KBUD");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proKbudOpen.equals("J")) {
-                proKbud.close();
-                proCheck00();
-                proKbudOpen.set("N");
-                proKbudOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proKbudRead() {
-            p04921Record.set("KBUD");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proKbudInit();
-            proKbud.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proKbud.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proKbudReadKl() {
-            p04921Record.set("KBUD");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proKbudInit();
-            proKbud.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proKbud.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proKbudReadnext() {
-            p04921Record.set("KBUD");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proKbudInit();
-            proKbud.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proKbud.start(">", "pro_kbud_key");
-                if (p04921Dasvar.equals("00")) {
-                    proKbud.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proKbudReadprev() {
-            p04921Record.set("KBUD");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proKbudInit();
-            proKbud.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proKbud.start("<", "pro_kbud_key");
-                if (p04921Dasvar.equals("00")) {
-                    proKbud.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proKbudRewrite() {
-            p04921Record.set("KBUD");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proKbudInit();
-            prokbud.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proKbudOpenFtg, pa.bfar, "PRO", p04921Record, "U", prokbud.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proKbudWrite() {
-            p04921Record.set("KBUD");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proKbudInit();
-            prokbud.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                prokbud.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proKbudOpenFtg, pa.bfar, "PRO", p04921Record, "N", prokbud.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proKbudDelete() {
-            p04921Record.set("KBUD");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proKbudInit();
-            proKbud.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proKbud.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proKbudOpenFtg, pa.bfar, "PRO", p04921Record, "D", prokbud.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proKbudStartEg() {
-            p04921Record.set("KBUD");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proKbudInit();
-            proKbud.start("NOT<", "pro_kbud_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proKbud.start("NOT<", "pro_kbud_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proKbudStartprevEg() {
-            p04921Record.set("KBUD");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proKbudInit();
-            proKbud.start("NOT>", "pro_kbud_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proKbud.start("NOT>", "pro_kbud_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proPfriInit() {
-            if (proPfriOpen.equals("J") && !(proPfriOpenFtg.equals(pa.bkstvftg))) {
-                proPfriClose();
-            }
-            if (!(proPfriOpen.equals("J"))) {
-                proPfriFilnamn.set(SPACE);
-                proPfriFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-43"));
-                proPfri.open("I-O");
-                proCheck00();
-                proPfriOpen.set("J");
-                proPfriOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proPfriClose() {
-            p04921Record.set("PFRI");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proPfriOpen.equals("J")) {
-                proPfri.close();
-                proCheck00();
-                proPfriOpen.set("N");
-                proPfriOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proPfriRead() {
-            p04921Record.set("PFRI");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proPfriInit();
-            proPfri.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPfri.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proPfriReadKl() {
-            p04921Record.set("PFRI");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proPfriInit();
-            proPfri.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proPfri.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proPfriReadnext() {
-            p04921Record.set("PFRI");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proPfriInit();
-            proPfri.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPfri.start(">", "pro_pfri_key");
-                if (p04921Dasvar.equals("00")) {
-                    proPfri.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proPfriReadprev() {
-            p04921Record.set("PFRI");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proPfriInit();
-            proPfri.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPfri.start("<", "pro_pfri_key");
-                if (p04921Dasvar.equals("00")) {
-                    proPfri.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proPfriRewrite() {
-            p04921Record.set("PFRI");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proPfriInit();
-            propfri.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proPfriOpenFtg, pa.bfar, "PRO", p04921Record, "U", propfri.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proPfriWrite() {
-            p04921Record.set("PFRI");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proPfriInit();
-            propfri.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                propfri.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proPfriOpenFtg, pa.bfar, "PRO", p04921Record, "N", propfri.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proPfriDelete() {
-            p04921Record.set("PFRI");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proPfriInit();
-            proPfri.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPfri.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proPfriOpenFtg, pa.bfar, "PRO", p04921Record, "D", propfri.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proPfriStartEg() {
-            p04921Record.set("PFRI");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proPfriInit();
-            proPfri.start("NOT<", "pro_pfri_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPfri.start("NOT<", "pro_pfri_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proPfriStartprevEg() {
-            p04921Record.set("PFRI");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proPfriInit();
-            proPfri.start("NOT>", "pro_pfri_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPfri.start("NOT>", "pro_pfri_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFkunInit() {
-            if (proFkunOpen.equals("J") && !(proFkunOpenFtg.equals(pa.bkstvftg))) {
-                proFkunClose();
-            }
-            if (!(proFkunOpen.equals("J"))) {
-                proFkunFilnamn.set(SPACE);
-                proFkunFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FKUN"));
-                proFkun.open("I-O");
-                proCheck00();
-                proFkunOpen.set("J");
-                proFkunOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proFkunClose() {
-            p04921Record.set("FKUN");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proFkunOpen.equals("J")) {
-                proFkun.close();
-                proCheck00();
-                proFkunOpen.set("N");
-                proFkunOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proFkunRead() {
-            p04921Record.set("FKUN");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proFkunInit();
-            proFkun.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFkun.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFkunReadKl() {
-            p04921Record.set("FKUN");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proFkunInit();
-            proFkun.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proFkun.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFkunReadnext() {
-            p04921Record.set("FKUN");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proFkunInit();
-            proFkun.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFkun.start(">", "pro_fkun_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFkun.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proFkunReadprev() {
-            p04921Record.set("FKUN");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proFkunInit();
-            proFkun.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFkun.start("<", "pro_fkun_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFkun.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proFkunRewrite() {
-            p04921Record.set("FKUN");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proFkunInit();
-            profkun.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFkunOpenFtg, pa.bfar, "PRO", p04921Record, "U", profkun.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFkunWrite() {
-            p04921Record.set("FKUN");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proFkunInit();
-            profkun.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                profkun.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFkunOpenFtg, pa.bfar, "PRO", p04921Record, "N", profkun.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFkunDelete() {
-            p04921Record.set("FKUN");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proFkunInit();
-            proFkun.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFkun.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFkunOpenFtg, pa.bfar, "PRO", p04921Record, "D", profkun.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFkunStartEg() {
-            p04921Record.set("FKUN");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proFkunInit();
-            proFkun.start("NOT<", "pro_fkun_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFkun.start("NOT<", "pro_fkun_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFkunStartprevEg() {
-            p04921Record.set("FKUN");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proFkunInit();
-            proFkun.start("NOT>", "pro_fkun_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFkun.start("NOT>", "pro_fkun_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proPrfrInit() {
-            if (proPrfrOpen.equals("J") && !(proPrfrOpenFtg.equals(pa.bkstvftg))) {
-                proPrfrClose();
-            }
-            if (!(proPrfrOpen.equals("J"))) {
-                proPrfrFilnamn.set(SPACE);
-                proPrfrFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/PRFR"));
-                proPrfr.open("I-O");
-                proCheck00();
-                proPrfrOpen.set("J");
-                proPrfrOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proPrfrClose() {
-            p04921Record.set("PRFR");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proPrfrOpen.equals("J")) {
-                proPrfr.close();
-                proCheck00();
-                proPrfrOpen.set("N");
-                proPrfrOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proPrfrRead() {
-            p04921Record.set("PRFR");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proPrfrInit();
-            proPrfr.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPrfr.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proPrfrReadKl() {
-            p04921Record.set("PRFR");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proPrfrInit();
-            proPrfr.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proPrfr.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proPrfrReadnext() {
-            p04921Record.set("PRFR");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proPrfrInit();
-            proPrfr.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPrfr.start(">", "pro_prfr_key");
-                if (p04921Dasvar.equals("00")) {
-                    proPrfr.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proPrfrReadprev() {
-            p04921Record.set("PRFR");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proPrfrInit();
-            proPrfr.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPrfr.start("<", "pro_prfr_key");
-                if (p04921Dasvar.equals("00")) {
-                    proPrfr.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proPrfrRewrite() {
-            p04921Record.set("PRFR");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proPrfrInit();
-            proprfr.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proPrfrOpenFtg, pa.bfar, "PRO", p04921Record, "U", proprfr.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proPrfrWrite() {
-            p04921Record.set("PRFR");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proPrfrInit();
-            proprfr.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proprfr.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proPrfrOpenFtg, pa.bfar, "PRO", p04921Record, "N", proprfr.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proPrfrDelete() {
-            p04921Record.set("PRFR");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proPrfrInit();
-            proPrfr.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPrfr.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proPrfrOpenFtg, pa.bfar, "PRO", p04921Record, "D", proprfr.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proPrfrStartEg() {
-            p04921Record.set("PRFR");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proPrfrInit();
-            proPrfr.start("NOT<", "pro_prfr_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPrfr.start("NOT<", "pro_prfr_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proPrfrStartprevEg() {
-            p04921Record.set("PRFR");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proPrfrInit();
-            proPrfr.start("NOT>", "pro_prfr_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPrfr.start("NOT>", "pro_prfr_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proKperInit() {
-            if (proKperOpen.equals("J") && !(proKperOpenFtg.equals(pa.bkstvftg))) {
-                proKperClose();
-            }
-            if (!(proKperOpen.equals("J"))) {
-                proKperFilnamn.set(SPACE);
-                proKperFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/KPER"));
-                proKper.open("I-O");
-                proCheck00();
-                proKperOpen.set("J");
-                proKperOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proKperClose() {
-            p04921Record.set("KPER");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proKperOpen.equals("J")) {
-                proKper.close();
-                proCheck00();
-                proKperOpen.set("N");
-                proKperOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proKperRead() {
-            p04921Record.set("KPER");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proKperInit();
-            proKper.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proKper.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proKperReadKl() {
-            p04921Record.set("KPER");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proKperInit();
-            proKper.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proKper.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proKperReadnext() {
-            p04921Record.set("KPER");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proKperInit();
-            proKper.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proKper.start(">", "pro_kper_key");
-                if (p04921Dasvar.equals("00")) {
-                    proKper.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proKperReadprev() {
-            p04921Record.set("KPER");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proKperInit();
-            proKper.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proKper.start("<", "pro_kper_key");
-                if (p04921Dasvar.equals("00")) {
-                    proKper.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proKperRewrite() {
-            p04921Record.set("KPER");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proKperInit();
-            prokper.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proKperOpenFtg, pa.bfar, "PRO", p04921Record, "U", prokper.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proKperWrite() {
-            p04921Record.set("KPER");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proKperInit();
-            prokper.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                prokper.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proKperOpenFtg, pa.bfar, "PRO", p04921Record, "N", prokper.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proKperDelete() {
-            p04921Record.set("KPER");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proKperInit();
-            proKper.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proKper.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proKperOpenFtg, pa.bfar, "PRO", p04921Record, "D", prokper.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proKperStartEg() {
-            p04921Record.set("KPER");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proKperInit();
-            proKper.start("NOT<", "pro_kper_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proKper.start("NOT<", "pro_kper_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proKperStartprevEg() {
-            p04921Record.set("KPER");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proKperInit();
-            proKper.start("NOT>", "pro_kper_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proKper.start("NOT>", "pro_kper_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidwInit() {
-            if (proTidwOpen.equals("J") && !(proTidwOpenFtg.equals(pa.bkstvftg))) {
-                proTidwClose();
-            }
-            if (!(proTidwOpen.equals("J"))) {
-                proTidwFilnamn.set(SPACE);
-                proTidwFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/TIDW"));
-                proTidw.open("I-O");
-                proCheck00();
-                proTidwOpen.set("J");
-                proTidwOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proTidwClose() {
-            p04921Record.set("TIDW");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proTidwOpen.equals("J")) {
-                proTidw.close();
-                proCheck00();
-                proTidwOpen.set("N");
-                proTidwOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidwRead() {
-            p04921Record.set("TIDW");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proTidwInit();
-            proTidw.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidw.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidwReadKl() {
-            p04921Record.set("TIDW");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proTidwInit();
-            proTidw.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proTidw.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidwReadnext() {
-            p04921Record.set("TIDW");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proTidwInit();
-            proTidw.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidw.start(">", "pro_tidw_key");
-                if (p04921Dasvar.equals("00")) {
-                    proTidw.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proTidwReadnextK2() {
-            p04921Record.set("TIDW");
-            p04921Action.set("READNEXT-K2");
-            proFilhantInit();
-            proTidwInit();
-            proTidw.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidw.start(">", "pro_tidw_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proTidw.readNext();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proTidwReadnextK3() {
-            p04921Record.set("TIDW");
-            p04921Action.set("READNEXT-K3");
-            proFilhantInit();
-            proTidwInit();
-            proTidw.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidw.start(">", "pro_tidw_key3");
-                if (p04921Dasvar.equals("00")) {
-                    proTidw.readNext();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proTidwReadnextK4() {
-            p04921Record.set("TIDW");
-            p04921Action.set("READNEXT-K4");
-            proFilhantInit();
-            proTidwInit();
-            proTidw.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidw.start(">", "pro_tidw_key4");
-                if (p04921Dasvar.equals("00")) {
-                    proTidw.readNext();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proTidwReadprev() {
-            p04921Record.set("TIDW");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proTidwInit();
-            proTidw.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidw.start("<", "pro_tidw_key");
-                if (p04921Dasvar.equals("00")) {
-                    proTidw.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proTidwReadprevK2() {
-            p04921Record.set("TIDW");
-            p04921Action.set("READPREV-K2");
-            proFilhantInit();
-            proTidwInit();
-            proTidw.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidw.start("<", "pro_tidw_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proTidw.readPrevious();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proTidwReadprevK3() {
-            p04921Record.set("TIDW");
-            p04921Action.set("READPREV-K3");
-            proFilhantInit();
-            proTidwInit();
-            proTidw.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidw.start("<", "pro_tidw_key3");
-                if (p04921Dasvar.equals("00")) {
-                    proTidw.readPrevious();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proTidwReadprevK4() {
-            p04921Record.set("TIDW");
-            p04921Action.set("READPREV-K4");
-            proFilhantInit();
-            proTidwInit();
-            proTidw.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidw.start("<", "pro_tidw_key4");
-                if (p04921Dasvar.equals("00")) {
-                    proTidw.readPrevious();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proTidwRewrite() {
-            p04921Record.set("TIDW");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proTidwInit();
-            protidw.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTidwOpenFtg, pa.bfar, "PRO", p04921Record, "U", protidw.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidwWrite() {
-            p04921Record.set("TIDW");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proTidwInit();
-            protidw.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                protidw.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTidwOpenFtg, pa.bfar, "PRO", p04921Record, "N", protidw.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidwDelete() {
-            p04921Record.set("TIDW");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proTidwInit();
-            proTidw.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidw.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTidwOpenFtg, pa.bfar, "PRO", p04921Record, "D", protidw.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidwStartEg() {
-            p04921Record.set("TIDW");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proTidwInit();
-            proTidw.start("NOT<", "pro_tidw_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidw.start("NOT<", "pro_tidw_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidwStartEgK2() {
-            p04921Record.set("TIDW");
-            p04921Action.set("START-EG-K2");
-            proFilhantInit();
-            proTidwInit();
-            proTidw.start("NOT<", "pro_tidw_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidw.start("NOT<", "pro_tidw_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proTidwStartEgK3() {
-            p04921Record.set("TIDW");
-            p04921Action.set("START-EG-K3");
-            proFilhantInit();
-            proTidwInit();
-            proTidw.start("NOT<", "pro_tidw_key3");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidw.start("NOT<", "pro_tidw_key3");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proTidwStartEgK4() {
-            p04921Record.set("TIDW");
-            p04921Action.set("START-EG-K4");
-            proFilhantInit();
-            proTidwInit();
-            proTidw.start("NOT<", "pro_tidw_key4");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidw.start("NOT<", "pro_tidw_key4");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proTidwStartprevEg() {
-            p04921Record.set("TIDW");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proTidwInit();
-            proTidw.start("NOT>", "pro_tidw_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidw.start("NOT>", "pro_tidw_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidwStartprevEgK2() {
-            p04921Record.set("TIDW");
-            p04921Action.set("STARTPREV-EG-K2");
-            proFilhantInit();
-            proTidwInit();
-            proTidw.start("NOT>", "pro_tidw_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidw.start("NOT>", "pro_tidw_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proTidwStartprevEgK3() {
-            p04921Record.set("TIDW");
-            p04921Action.set("STARTPREV-EG-K3");
-            proFilhantInit();
-            proTidwInit();
-            proTidw.start("NOT>", "pro_tidw_key3");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidw.start("NOT>", "pro_tidw_key3");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proTidwStartprevEgK4() {
-            p04921Record.set("TIDW");
-            p04921Action.set("STARTPREV-EG-K4");
-            proFilhantInit();
-            proTidwInit();
-            proTidw.start("NOT>", "pro_tidw_key4");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidw.start("NOT>", "pro_tidw_key4");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proBudwInit() {
-            if (proBudwOpen.equals("J") && !(proBudwOpenFtg.equals(pa.bkstvftg))) {
-                proBudwClose();
-            }
-            if (!(proBudwOpen.equals("J"))) {
-                proBudwFilnamn.set(SPACE);
-                proBudwFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/BUDW"));
-                proBudw.open("I-O");
-                proCheck00();
-                proBudwOpen.set("J");
-                proBudwOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proBudwClose() {
-            p04921Record.set("BUDW");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proBudwOpen.equals("J")) {
-                proBudw.close();
-                proCheck00();
-                proBudwOpen.set("N");
-                proBudwOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proBudwRead() {
-            p04921Record.set("BUDW");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proBudwInit();
-            proBudw.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudw.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBudwReadKl() {
-            p04921Record.set("BUDW");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proBudwInit();
-            proBudw.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proBudw.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBudwReadnext() {
-            p04921Record.set("BUDW");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proBudwInit();
-            proBudw.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudw.start(">", "pro_budw_key");
-                if (p04921Dasvar.equals("00")) {
-                    proBudw.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proBudwReadnextK2() {
-            p04921Record.set("BUDW");
-            p04921Action.set("READNEXT-K2");
-            proFilhantInit();
-            proBudwInit();
-            proBudw.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudw.start(">", "pro_budw_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proBudw.readNext();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proBudwReadprev() {
-            p04921Record.set("BUDW");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proBudwInit();
-            proBudw.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudw.start("<", "pro_budw_key");
-                if (p04921Dasvar.equals("00")) {
-                    proBudw.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proBudwReadprevK2() {
-            p04921Record.set("BUDW");
-            p04921Action.set("READPREV-K2");
-            proFilhantInit();
-            proBudwInit();
-            proBudw.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudw.start("<", "pro_budw_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proBudw.readPrevious();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proBudwRewrite() {
-            p04921Record.set("BUDW");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proBudwInit();
-            probudw.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBudwOpenFtg, pa.bfar, "PRO", p04921Record, "U", probudw.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBudwWrite() {
-            p04921Record.set("BUDW");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proBudwInit();
-            probudw.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                probudw.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBudwOpenFtg, pa.bfar, "PRO", p04921Record, "N", probudw.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBudwDelete() {
-            p04921Record.set("BUDW");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proBudwInit();
-            proBudw.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudw.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBudwOpenFtg, pa.bfar, "PRO", p04921Record, "D", probudw.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBudwStartEg() {
-            p04921Record.set("BUDW");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proBudwInit();
-            proBudw.start("NOT<", "pro_budw_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudw.start("NOT<", "pro_budw_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBudwStartEgK2() {
-            p04921Record.set("BUDW");
-            p04921Action.set("START-EG-K2");
-            proFilhantInit();
-            proBudwInit();
-            proBudw.start("NOT<", "pro_budw_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudw.start("NOT<", "pro_budw_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proBudwStartprevEg() {
-            p04921Record.set("BUDW");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proBudwInit();
-            proBudw.start("NOT>", "pro_budw_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudw.start("NOT>", "pro_budw_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBudwStartprevEgK2() {
-            p04921Record.set("BUDW");
-            p04921Action.set("STARTPREV-EG-K2");
-            proFilhantInit();
-            proBudwInit();
-            proBudw.start("NOT>", "pro_budw_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudw.start("NOT>", "pro_budw_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proBudaInit() {
-            if (proBudaOpen.equals("J") && !(proBudaOpenFtg.equals(pa.bkstvftg))) {
-                proBudaClose();
-            }
-            if (!(proBudaOpen.equals("J"))) {
-                proBudaFilnamn.set(SPACE);
-                proBudaFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/BUDA"));
-                proBuda.open("I-O");
-                proCheck00();
-                proBudaOpen.set("J");
-                proBudaOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proBudaClose() {
-            p04921Record.set("BUDA");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proBudaOpen.equals("J")) {
-                proBuda.close();
-                proCheck00();
-                proBudaOpen.set("N");
-                proBudaOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proBudaRead() {
-            p04921Record.set("BUDA");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proBudaInit();
-            proBuda.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBuda.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBudaReadKl() {
-            p04921Record.set("BUDA");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proBudaInit();
-            proBuda.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proBuda.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBudaReadnext() {
-            p04921Record.set("BUDA");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proBudaInit();
-            proBuda.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBuda.start(">", "pro_buda_key");
-                if (p04921Dasvar.equals("00")) {
-                    proBuda.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proBudaReadprev() {
-            p04921Record.set("BUDA");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proBudaInit();
-            proBuda.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBuda.start("<", "pro_buda_key");
-                if (p04921Dasvar.equals("00")) {
-                    proBuda.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proBudaRewrite() {
-            p04921Record.set("BUDA");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proBudaInit();
-            probuda.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBudaOpenFtg, pa.bfar, "PRO", p04921Record, "U", probuda.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBudaWrite() {
-            p04921Record.set("BUDA");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proBudaInit();
-            probuda.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                probuda.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBudaOpenFtg, pa.bfar, "PRO", p04921Record, "N", probuda.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBudaDelete() {
-            p04921Record.set("BUDA");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proBudaInit();
-            proBuda.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBuda.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBudaOpenFtg, pa.bfar, "PRO", p04921Record, "D", probuda.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBudaStartEg() {
-            p04921Record.set("BUDA");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proBudaInit();
-            proBuda.start("NOT<", "pro_buda_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBuda.start("NOT<", "pro_buda_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBudaStartprevEg() {
-            p04921Record.set("BUDA");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proBudaInit();
-            proBuda.start("NOT>", "pro_buda_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBuda.start("NOT>", "pro_buda_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBudiInit() {
-            if (proBudiOpen.equals("J") && !(proBudiOpenFtg.equals(pa.bkstvftg))) {
-                proBudiClose();
-            }
-            if (!(proBudiOpen.equals("J"))) {
-                proBudiFilnamn.set(SPACE);
-                proBudiFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/BUDI"));
-                proBudi.open("I-O");
-                proCheck00();
-                proBudiOpen.set("J");
-                proBudiOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proBudiClose() {
-            p04921Record.set("BUDI");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proBudiOpen.equals("J")) {
-                proBudi.close();
-                proCheck00();
-                proBudiOpen.set("N");
-                proBudiOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proBudiRead() {
-            p04921Record.set("BUDI");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proBudiInit();
-            proBudi.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudi.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBudiReadKl() {
-            p04921Record.set("BUDI");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proBudiInit();
-            proBudi.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proBudi.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBudiReadnext() {
-            p04921Record.set("BUDI");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proBudiInit();
-            proBudi.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudi.start(">", "pro_budi_key");
-                if (p04921Dasvar.equals("00")) {
-                    proBudi.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proBudiReadprev() {
-            p04921Record.set("BUDI");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proBudiInit();
-            proBudi.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudi.start("<", "pro_budi_key");
-                if (p04921Dasvar.equals("00")) {
-                    proBudi.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proBudiRewrite() {
-            p04921Record.set("BUDI");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proBudiInit();
-            probudi.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBudiOpenFtg, pa.bfar, "PRO", p04921Record, "U", probudi.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBudiWrite() {
-            p04921Record.set("BUDI");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proBudiInit();
-            probudi.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                probudi.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBudiOpenFtg, pa.bfar, "PRO", p04921Record, "N", probudi.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBudiDelete() {
-            p04921Record.set("BUDI");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proBudiInit();
-            proBudi.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudi.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBudiOpenFtg, pa.bfar, "PRO", p04921Record, "D", probudi.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBudiStartEg() {
-            p04921Record.set("BUDI");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proBudiInit();
-            proBudi.start("NOT<", "pro_budi_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudi.start("NOT<", "pro_budi_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBudiStartprevEg() {
-            p04921Record.set("BUDI");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proBudiInit();
-            proBudi.start("NOT>", "pro_budi_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudi.start("NOT>", "pro_budi_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBudoInit() {
-            if (proBudoOpen.equals("J") && !(proBudoOpenFtg.equals(pa.bkstvftg))) {
-                proBudoClose();
-            }
-            if (!(proBudoOpen.equals("J"))) {
-                proBudoFilnamn.set(SPACE);
-                proBudoFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/BUDO"));
-                proBudo.open("I-O");
-                proCheck00();
-                proBudoOpen.set("J");
-                proBudoOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proBudoClose() {
-            p04921Record.set("BUDO");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proBudoOpen.equals("J")) {
-                proBudo.close();
-                proCheck00();
-                proBudoOpen.set("N");
-                proBudoOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proBudoRead() {
-            p04921Record.set("BUDO");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proBudoInit();
-            proBudo.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudo.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBudoReadKl() {
-            p04921Record.set("BUDO");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proBudoInit();
-            proBudo.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proBudo.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBudoReadnext() {
-            p04921Record.set("BUDO");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proBudoInit();
-            proBudo.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudo.start(">", "pro_budo_key");
-                if (p04921Dasvar.equals("00")) {
-                    proBudo.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proBudoReadprev() {
-            p04921Record.set("BUDO");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proBudoInit();
-            proBudo.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudo.start("<", "pro_budo_key");
-                if (p04921Dasvar.equals("00")) {
-                    proBudo.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proBudoRewrite() {
-            p04921Record.set("BUDO");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proBudoInit();
-            probudo.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBudoOpenFtg, pa.bfar, "PRO", p04921Record, "U", probudo.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBudoWrite() {
-            p04921Record.set("BUDO");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proBudoInit();
-            probudo.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                probudo.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBudoOpenFtg, pa.bfar, "PRO", p04921Record, "N", probudo.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBudoDelete() {
-            p04921Record.set("BUDO");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proBudoInit();
-            proBudo.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudo.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBudoOpenFtg, pa.bfar, "PRO", p04921Record, "D", probudo.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBudoStartEg() {
-            p04921Record.set("BUDO");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proBudoInit();
-            proBudo.start("NOT<", "pro_budo_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudo.start("NOT<", "pro_budo_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBudoStartprevEg() {
-            p04921Record.set("BUDO");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proBudoInit();
-            proBudo.start("NOT>", "pro_budo_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudo.start("NOT>", "pro_budo_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidfInit() {
-            if (proTidfOpen.equals("J") && !(proTidfOpenFtg.equals(pa.bkstvftg))) {
-                proTidfClose();
-            }
-            if (!(proTidfOpen.equals("J"))) {
-                proTidfFilnamn.set(SPACE);
-                proTidfFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/TIDF"));
-                proTidf.open("I-O");
-                proCheck00();
-                proTidfOpen.set("J");
-                proTidfOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proTidfClose() {
-            p04921Record.set("TIDF");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proTidfOpen.equals("J")) {
-                proTidf.close();
-                proCheck00();
-                proTidfOpen.set("N");
-                proTidfOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidfRead() {
-            p04921Record.set("TIDF");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proTidfInit();
-            proTidf.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidf.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidfReadKl() {
-            p04921Record.set("TIDF");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proTidfInit();
-            proTidf.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proTidf.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidfReadnext() {
-            p04921Record.set("TIDF");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proTidfInit();
-            proTidf.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidf.start(">", "pro_tidf_key");
-                if (p04921Dasvar.equals("00")) {
-                    proTidf.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proTidfReadnextK2() {
-            p04921Record.set("TIDF");
-            p04921Action.set("READNEXT-K2");
-            proFilhantInit();
-            proTidfInit();
-            proTidf.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidf.start(">", "pro_tidf_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proTidf.readNext();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proTidfReadnextK3() {
-            p04921Record.set("TIDF");
-            p04921Action.set("READNEXT-K3");
-            proFilhantInit();
-            proTidfInit();
-            proTidf.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidf.start(">", "pro_tidf_key3");
-                if (p04921Dasvar.equals("00")) {
-                    proTidf.readNext();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proTidfReadnextK4() {
-            p04921Record.set("TIDF");
-            p04921Action.set("READNEXT-K4");
-            proFilhantInit();
-            proTidfInit();
-            proTidf.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidf.start(">", "pro_tidf_key4");
-                if (p04921Dasvar.equals("00")) {
-                    proTidf.readNext();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proTidfReadprev() {
-            p04921Record.set("TIDF");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proTidfInit();
-            proTidf.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidf.start("<", "pro_tidf_key");
-                if (p04921Dasvar.equals("00")) {
-                    proTidf.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proTidfReadprevK2() {
-            p04921Record.set("TIDF");
-            p04921Action.set("READPREV-K2");
-            proFilhantInit();
-            proTidfInit();
-            proTidf.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidf.start("<", "pro_tidf_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proTidf.readPrevious();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proTidfReadprevK3() {
-            p04921Record.set("TIDF");
-            p04921Action.set("READPREV-K3");
-            proFilhantInit();
-            proTidfInit();
-            proTidf.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidf.start("<", "pro_tidf_key3");
-                if (p04921Dasvar.equals("00")) {
-                    proTidf.readPrevious();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proTidfReadprevK4() {
-            p04921Record.set("TIDF");
-            p04921Action.set("READPREV-K4");
-            proFilhantInit();
-            proTidfInit();
-            proTidf.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidf.start("<", "pro_tidf_key4");
-                if (p04921Dasvar.equals("00")) {
-                    proTidf.readPrevious();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proTidfRewrite() {
-            p04921Record.set("TIDF");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proTidfInit();
-            protidf.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTidfOpenFtg, pa.bfar, "PRO", p04921Record, "U", protidf.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidfWrite() {
-            p04921Record.set("TIDF");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proTidfInit();
-            protidf.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                protidf.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTidfOpenFtg, pa.bfar, "PRO", p04921Record, "N", protidf.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidfDelete() {
-            p04921Record.set("TIDF");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proTidfInit();
-            proTidf.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidf.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTidfOpenFtg, pa.bfar, "PRO", p04921Record, "D", protidf.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidfStartEg() {
-            p04921Record.set("TIDF");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proTidfInit();
-            proTidf.start("NOT<", "pro_tidf_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidf.start("NOT<", "pro_tidf_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidfStartEgK2() {
-            p04921Record.set("TIDF");
-            p04921Action.set("START-EG-K2");
-            proFilhantInit();
-            proTidfInit();
-            proTidf.start("NOT<", "pro_tidf_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidf.start("NOT<", "pro_tidf_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proTidfStartEgK3() {
-            p04921Record.set("TIDF");
-            p04921Action.set("START-EG-K3");
-            proFilhantInit();
-            proTidfInit();
-            proTidf.start("NOT<", "pro_tidf_key3");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidf.start("NOT<", "pro_tidf_key3");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proTidfStartEgK4() {
-            p04921Record.set("TIDF");
-            p04921Action.set("START-EG-K4");
-            proFilhantInit();
-            proTidfInit();
-            proTidf.start("NOT<", "pro_tidf_key4");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidf.start("NOT<", "pro_tidf_key4");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proTidfStartprevEg() {
-            p04921Record.set("TIDF");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proTidfInit();
-            proTidf.start("NOT>", "pro_tidf_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidf.start("NOT>", "pro_tidf_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidfStartprevEgK2() {
-            p04921Record.set("TIDF");
-            p04921Action.set("STARTPREV-EG-K2");
-            proFilhantInit();
-            proTidfInit();
-            proTidf.start("NOT>", "pro_tidf_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidf.start("NOT>", "pro_tidf_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proTidfStartprevEgK3() {
-            p04921Record.set("TIDF");
-            p04921Action.set("STARTPREV-EG-K3");
-            proFilhantInit();
-            proTidfInit();
-            proTidf.start("NOT>", "pro_tidf_key3");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidf.start("NOT>", "pro_tidf_key3");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proTidfStartprevEgK4() {
-            p04921Record.set("TIDF");
-            p04921Action.set("STARTPREV-EG-K4");
-            proFilhantInit();
-            proTidfInit();
-            proTidf.start("NOT>", "pro_tidf_key4");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidf.start("NOT>", "pro_tidf_key4");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proTidoInit() {
-            if (proTidoOpen.equals("J") && !(proTidoOpenFtg.equals(pa.bkstvftg))) {
-                proTidoClose();
-            }
-            if (!(proTidoOpen.equals("J"))) {
-                proTidoFilnamn.set(SPACE);
-                proTidoFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/TIDO"));
-                proTido.open("I-O");
-                proCheck00();
-                proTidoOpen.set("J");
-                proTidoOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proTidoClose() {
-            p04921Record.set("TIDO");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proTidoOpen.equals("J")) {
-                proTido.close();
-                proCheck00();
-                proTidoOpen.set("N");
-                proTidoOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidoRead() {
-            p04921Record.set("TIDO");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proTidoInit();
-            proTido.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTido.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidoReadKl() {
-            p04921Record.set("TIDO");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proTidoInit();
-            proTido.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proTido.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidoReadnext() {
-            p04921Record.set("TIDO");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proTidoInit();
-            proTido.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTido.start(">", "pro_tido_key");
-                if (p04921Dasvar.equals("00")) {
-                    proTido.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proTidoReadnextK2() {
-            p04921Record.set("TIDO");
-            p04921Action.set("READNEXT-K2");
-            proFilhantInit();
-            proTidoInit();
-            proTido.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTido.start(">", "pro_tido_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proTido.readNext();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proTidoReadprev() {
-            p04921Record.set("TIDO");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proTidoInit();
-            proTido.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTido.start("<", "pro_tido_key");
-                if (p04921Dasvar.equals("00")) {
-                    proTido.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proTidoReadprevK2() {
-            p04921Record.set("TIDO");
-            p04921Action.set("READPREV-K2");
-            proFilhantInit();
-            proTidoInit();
-            proTido.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTido.start("<", "pro_tido_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proTido.readPrevious();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proTidoRewrite() {
-            p04921Record.set("TIDO");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proTidoInit();
-            protido.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTidoOpenFtg, pa.bfar, "PRO", p04921Record, "U", protido.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidoWrite() {
-            p04921Record.set("TIDO");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proTidoInit();
-            protido.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                protido.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTidoOpenFtg, pa.bfar, "PRO", p04921Record, "N", protido.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidoDelete() {
-            p04921Record.set("TIDO");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proTidoInit();
-            proTido.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTido.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTidoOpenFtg, pa.bfar, "PRO", p04921Record, "D", protido.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidoStartEg() {
-            p04921Record.set("TIDO");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proTidoInit();
-            proTido.start("NOT<", "pro_tido_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTido.start("NOT<", "pro_tido_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidoStartEgK2() {
-            p04921Record.set("TIDO");
-            p04921Action.set("START-EG-K2");
-            proFilhantInit();
-            proTidoInit();
-            proTido.start("NOT<", "pro_tido_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTido.start("NOT<", "pro_tido_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proTidoStartprevEg() {
-            p04921Record.set("TIDO");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proTidoInit();
-            proTido.start("NOT>", "pro_tido_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTido.start("NOT>", "pro_tido_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidoStartprevEgK2() {
-            p04921Record.set("TIDO");
-            p04921Action.set("STARTPREV-EG-K2");
-            proFilhantInit();
-            proTidoInit();
-            proTido.start("NOT>", "pro_tido_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTido.start("NOT>", "pro_tido_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proOfhuInit() {
-            if (proOfhuOpen.equals("J") && !(proOfhuOpenFtg.equals(pa.bkstvftg))) {
-                proOfhuClose();
-            }
-            if (!(proOfhuOpen.equals("J"))) {
-                proOfhuFilnamn.set(SPACE);
-                proOfhuFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/OFHU"));
-                proOfhu.open("I-O");
-                proCheck00();
-                proOfhuOpen.set("J");
-                proOfhuOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proOfhuClose() {
-            p04921Record.set("OFHU");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proOfhuOpen.equals("J")) {
-                proOfhu.close();
-                proCheck00();
-                proOfhuOpen.set("N");
-                proOfhuOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proOfhuRead() {
-            p04921Record.set("OFHU");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proOfhuInit();
-            proOfhu.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfhu.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOfhuReadKl() {
-            p04921Record.set("OFHU");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proOfhuInit();
-            proOfhu.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proOfhu.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOfhuReadnext() {
-            p04921Record.set("OFHU");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proOfhuInit();
-            proOfhu.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfhu.start(">", "pro_ofhu_key");
-                if (p04921Dasvar.equals("00")) {
-                    proOfhu.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proOfhuReadprev() {
-            p04921Record.set("OFHU");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proOfhuInit();
-            proOfhu.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfhu.start("<", "pro_ofhu_key");
-                if (p04921Dasvar.equals("00")) {
-                    proOfhu.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proOfhuRewrite() {
-            p04921Record.set("OFHU");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proOfhuInit();
-            proofhu.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proOfhuOpenFtg, pa.bfar, "PRO", p04921Record, "U", proofhu.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proOfhuWrite() {
-            p04921Record.set("OFHU");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proOfhuInit();
-            proofhu.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proofhu.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proOfhuOpenFtg, pa.bfar, "PRO", p04921Record, "N", proofhu.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proOfhuDelete() {
-            p04921Record.set("OFHU");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proOfhuInit();
-            proOfhu.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfhu.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proOfhuOpenFtg, pa.bfar, "PRO", p04921Record, "D", proofhu.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proOfhuStartEg() {
-            p04921Record.set("OFHU");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proOfhuInit();
-            proOfhu.start("NOT<", "pro_ofhu_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfhu.start("NOT<", "pro_ofhu_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOfhuStartprevEg() {
-            p04921Record.set("OFHU");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proOfhuInit();
-            proOfhu.start("NOT>", "pro_ofhu_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfhu.start("NOT>", "pro_ofhu_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOfraInit() {
-            if (proOfraOpen.equals("J") && !(proOfraOpenFtg.equals(pa.bkstvftg))) {
-                proOfraClose();
-            }
-            if (!(proOfraOpen.equals("J"))) {
-                proOfraFilnamn.set(SPACE);
-                proOfraFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/OFRA"));
-                proOfra.open("I-O");
-                proCheck00();
-                proOfraOpen.set("J");
-                proOfraOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proOfraClose() {
-            p04921Record.set("OFRA");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proOfraOpen.equals("J")) {
-                proOfra.close();
-                proCheck00();
-                proOfraOpen.set("N");
-                proOfraOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proOfraRead() {
-            p04921Record.set("OFRA");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proOfraInit();
-            proOfra.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfra.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOfraReadKl() {
-            p04921Record.set("OFRA");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proOfraInit();
-            proOfra.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proOfra.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOfraReadnext() {
-            p04921Record.set("OFRA");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proOfraInit();
-            proOfra.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfra.start(">", "pro_ofra_key");
-                if (p04921Dasvar.equals("00")) {
-                    proOfra.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proOfraReadprev() {
-            p04921Record.set("OFRA");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proOfraInit();
-            proOfra.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfra.start("<", "pro_ofra_key");
-                if (p04921Dasvar.equals("00")) {
-                    proOfra.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proOfraRewrite() {
-            p04921Record.set("OFRA");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proOfraInit();
-            proofra.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proOfraOpenFtg, pa.bfar, "PRO", p04921Record, "U", proofra.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proOfraWrite() {
-            p04921Record.set("OFRA");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proOfraInit();
-            proofra.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proofra.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proOfraOpenFtg, pa.bfar, "PRO", p04921Record, "N", proofra.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proOfraDelete() {
-            p04921Record.set("OFRA");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proOfraInit();
-            proOfra.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfra.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proOfraOpenFtg, pa.bfar, "PRO", p04921Record, "D", proofra.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proOfraStartEg() {
-            p04921Record.set("OFRA");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proOfraInit();
-            proOfra.start("NOT<", "pro_ofra_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfra.start("NOT<", "pro_ofra_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOfraStartprevEg() {
-            p04921Record.set("OFRA");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proOfraInit();
-            proOfra.start("NOT>", "pro_ofra_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfra.start("NOT>", "pro_ofra_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOfprInit() {
-            if (proOfprOpen.equals("J") && !(proOfprOpenFtg.equals(pa.bkstvftg))) {
-                proOfprClose();
-            }
-            if (!(proOfprOpen.equals("J"))) {
-                proOfprFilnamn.set(SPACE);
-                proOfprFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/OFPR"));
-                proOfpr.open("I-O");
-                proCheck00();
-                proOfprOpen.set("J");
-                proOfprOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proOfprClose() {
-            p04921Record.set("OFPR");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proOfprOpen.equals("J")) {
-                proOfpr.close();
-                proCheck00();
-                proOfprOpen.set("N");
-                proOfprOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proOfprRead() {
-            p04921Record.set("OFPR");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proOfprInit();
-            proOfpr.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfpr.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOfprReadKl() {
-            p04921Record.set("OFPR");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proOfprInit();
-            proOfpr.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proOfpr.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOfprReadnext() {
-            p04921Record.set("OFPR");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proOfprInit();
-            proOfpr.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfpr.start(">", "pro_ofpr_key");
-                if (p04921Dasvar.equals("00")) {
-                    proOfpr.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proOfprReadnextK2() {
-            p04921Record.set("OFPR");
-            p04921Action.set("READNEXT-K2");
-            proFilhantInit();
-            proOfprInit();
-            proOfpr.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfpr.start(">", "pro_ofpr_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proOfpr.readNext();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proOfprReadprev() {
-            p04921Record.set("OFPR");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proOfprInit();
-            proOfpr.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfpr.start("<", "pro_ofpr_key");
-                if (p04921Dasvar.equals("00")) {
-                    proOfpr.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proOfprReadprevK2() {
-            p04921Record.set("OFPR");
-            p04921Action.set("READPREV-K2");
-            proFilhantInit();
-            proOfprInit();
-            proOfpr.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfpr.start("<", "pro_ofpr_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proOfpr.readPrevious();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proOfprRewrite() {
-            p04921Record.set("OFPR");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proOfprInit();
-            proofpr.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proOfprOpenFtg, pa.bfar, "PRO", p04921Record, "U", proofpr.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proOfprWrite() {
-            p04921Record.set("OFPR");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proOfprInit();
-            proofpr.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proofpr.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proOfprOpenFtg, pa.bfar, "PRO", p04921Record, "N", proofpr.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proOfprDelete() {
-            p04921Record.set("OFPR");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proOfprInit();
-            proOfpr.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfpr.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proOfprOpenFtg, pa.bfar, "PRO", p04921Record, "D", proofpr.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proOfprStartEg() {
-            p04921Record.set("OFPR");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proOfprInit();
-            proOfpr.start("NOT<", "pro_ofpr_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfpr.start("NOT<", "pro_ofpr_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOfprStartEgK2() {
-            p04921Record.set("OFPR");
-            p04921Action.set("START-EG-K2");
-            proFilhantInit();
-            proOfprInit();
-            proOfpr.start("NOT<", "pro_ofpr_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfpr.start("NOT<", "pro_ofpr_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proOfprStartprevEg() {
-            p04921Record.set("OFPR");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proOfprInit();
-            proOfpr.start("NOT>", "pro_ofpr_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfpr.start("NOT>", "pro_ofpr_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOfprStartprevEgK2() {
-            p04921Record.set("OFPR");
-            p04921Action.set("STARTPREV-EG-K2");
-            proFilhantInit();
-            proOfprInit();
-            proOfpr.start("NOT>", "pro_ofpr_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOfpr.start("NOT>", "pro_ofpr_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proPma1Init() {
-            if (proPma1Open.equals("J") && !(proPma1OpenFtg.equals(pa.bkstvftg))) {
-                proPma1Close();
-            }
-            if (!(proPma1Open.equals("J"))) {
-                proPma1Filnamn.set(SPACE);
-                proPma1Filnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/PMA1"));
-                proPma1.open("I-O");
-                proCheck00();
-                proPma1Open.set("J");
-                proPma1OpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proPma1Close() {
-            p04921Record.set("PMA1");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proPma1Open.equals("J")) {
-                proPma1.close();
-                proCheck00();
-                proPma1Open.set("N");
-                proPma1OpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proPma1Read() {
-            p04921Record.set("PMA1");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proPma1Init();
-            proPma1.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPma1.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proPma1ReadKl() {
-            p04921Record.set("PMA1");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proPma1Init();
-            proPma1.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proPma1.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proPma1Readnext() {
-            p04921Record.set("PMA1");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proPma1Init();
-            proPma1.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPma1.start(">", "pro_pma1_key");
-                if (p04921Dasvar.equals("00")) {
-                    proPma1.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proPma1Readprev() {
-            p04921Record.set("PMA1");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proPma1Init();
-            proPma1.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPma1.start("<", "pro_pma1_key");
-                if (p04921Dasvar.equals("00")) {
-                    proPma1.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proPma1Rewrite() {
-            p04921Record.set("PMA1");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proPma1Init();
-            propma1.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proPma1OpenFtg, pa.bfar, "PRO", p04921Record, "U", propma1.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proPma1Write() {
-            p04921Record.set("PMA1");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proPma1Init();
-            propma1.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                propma1.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proPma1OpenFtg, pa.bfar, "PRO", p04921Record, "N", propma1.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proPma1Delete() {
-            p04921Record.set("PMA1");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proPma1Init();
-            proPma1.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPma1.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proPma1OpenFtg, pa.bfar, "PRO", p04921Record, "D", propma1.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proPma1StartEg() {
-            p04921Record.set("PMA1");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proPma1Init();
-            proPma1.start("NOT<", "pro_pma1_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPma1.start("NOT<", "pro_pma1_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proPma1StartprevEg() {
-            p04921Record.set("PMA1");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proPma1Init();
-            proPma1.start("NOT>", "pro_pma1_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPma1.start("NOT>", "pro_pma1_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proPma2Init() {
-            if (proPma2Open.equals("J") && !(proPma2OpenFtg.equals(pa.bkstvftg))) {
-                proPma2Close();
-            }
-            if (!(proPma2Open.equals("J"))) {
-                proPma2Filnamn.set(SPACE);
-                proPma2Filnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/PMA2"));
-                proPma2.open("I-O");
-                proCheck00();
-                proPma2Open.set("J");
-                proPma2OpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proPma2Close() {
-            p04921Record.set("PMA2");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proPma2Open.equals("J")) {
-                proPma2.close();
-                proCheck00();
-                proPma2Open.set("N");
-                proPma2OpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proPma2Read() {
-            p04921Record.set("PMA2");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proPma2Init();
-            proPma2.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPma2.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proPma2ReadKl() {
-            p04921Record.set("PMA2");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proPma2Init();
-            proPma2.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proPma2.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proPma2Readnext() {
-            p04921Record.set("PMA2");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proPma2Init();
-            proPma2.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPma2.start(">", "pro_pma2_key");
-                if (p04921Dasvar.equals("00")) {
-                    proPma2.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proPma2Readprev() {
-            p04921Record.set("PMA2");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proPma2Init();
-            proPma2.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPma2.start("<", "pro_pma2_key");
-                if (p04921Dasvar.equals("00")) {
-                    proPma2.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proPma2Rewrite() {
-            p04921Record.set("PMA2");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proPma2Init();
-            propma2.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proPma2OpenFtg, pa.bfar, "PRO", p04921Record, "U", propma2.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proPma2Write() {
-            p04921Record.set("PMA2");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proPma2Init();
-            propma2.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                propma2.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proPma2OpenFtg, pa.bfar, "PRO", p04921Record, "N", propma2.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proPma2Delete() {
-            p04921Record.set("PMA2");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proPma2Init();
-            proPma2.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPma2.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proPma2OpenFtg, pa.bfar, "PRO", p04921Record, "D", propma2.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proPma2StartEg() {
-            p04921Record.set("PMA2");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proPma2Init();
-            proPma2.start("NOT<", "pro_pma2_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPma2.start("NOT<", "pro_pma2_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proPma2StartprevEg() {
-            p04921Record.set("PMA2");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proPma2Init();
-            proPma2.start("NOT>", "pro_pma2_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPma2.start("NOT>", "pro_pma2_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRrapInit() {
-            if (proRrapOpen.equals("J") && !(proRrapOpenFtg.equals(pa.bkstvftg))) {
-                proRrapClose();
-            }
-            if (!(proRrapOpen.equals("J"))) {
-                proRrapFilnamn.set(SPACE);
-                proRrapFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/RRAP"));
-                proRrap.open("I-O");
-                proCheck00();
-                proRrapOpen.set("J");
-                proRrapOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proRrapClose() {
-            p04921Record.set("RRAP");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proRrapOpen.equals("J")) {
-                proRrap.close();
-                proCheck00();
-                proRrapOpen.set("N");
-                proRrapOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proRrapRead() {
-            p04921Record.set("RRAP");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proRrapInit();
-            proRrap.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRrap.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRrapReadKl() {
-            p04921Record.set("RRAP");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proRrapInit();
-            proRrap.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proRrap.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRrapReadnext() {
-            p04921Record.set("RRAP");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proRrapInit();
-            proRrap.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRrap.start(">", "pro_rrap_key");
-                if (p04921Dasvar.equals("00")) {
-                    proRrap.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proRrapReadprev() {
-            p04921Record.set("RRAP");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proRrapInit();
-            proRrap.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRrap.start("<", "pro_rrap_key");
-                if (p04921Dasvar.equals("00")) {
-                    proRrap.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proRrapRewrite() {
-            p04921Record.set("RRAP");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proRrapInit();
-            prorrap.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRrapOpenFtg, pa.bfar, "PRO", p04921Record, "U", prorrap.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRrapWrite() {
-            p04921Record.set("RRAP");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proRrapInit();
-            prorrap.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                prorrap.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRrapOpenFtg, pa.bfar, "PRO", p04921Record, "N", prorrap.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRrapDelete() {
-            p04921Record.set("RRAP");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proRrapInit();
-            proRrap.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRrap.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRrapOpenFtg, pa.bfar, "PRO", p04921Record, "D", prorrap.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRrapStartEg() {
-            p04921Record.set("RRAP");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proRrapInit();
-            proRrap.start("NOT<", "pro_rrap_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRrap.start("NOT<", "pro_rrap_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRrapStartprevEg() {
-            p04921Record.set("RRAP");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proRrapInit();
-            proRrap.start("NOT>", "pro_rrap_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRrap.start("NOT>", "pro_rrap_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRkolInit() {
-            if (proRkolOpen.equals("J") && !(proRkolOpenFtg.equals(pa.bkstvftg))) {
-                proRkolClose();
-            }
-            if (!(proRkolOpen.equals("J"))) {
-                proRkolFilnamn.set(SPACE);
-                proRkolFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/RKOL"));
-                proRkol.open("I-O");
-                proCheck00();
-                proRkolOpen.set("J");
-                proRkolOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proRkolClose() {
-            p04921Record.set("RKOL");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proRkolOpen.equals("J")) {
-                proRkol.close();
-                proCheck00();
-                proRkolOpen.set("N");
-                proRkolOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proRkolRead() {
-            p04921Record.set("RKOL");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proRkolInit();
-            proRkol.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRkol.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRkolReadKl() {
-            p04921Record.set("RKOL");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proRkolInit();
-            proRkol.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proRkol.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRkolReadnext() {
-            p04921Record.set("RKOL");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proRkolInit();
-            proRkol.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRkol.start(">", "pro_rkol_key");
-                if (p04921Dasvar.equals("00")) {
-                    proRkol.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proRkolReadprev() {
-            p04921Record.set("RKOL");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proRkolInit();
-            proRkol.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRkol.start("<", "pro_rkol_key");
-                if (p04921Dasvar.equals("00")) {
-                    proRkol.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proRkolRewrite() {
-            p04921Record.set("RKOL");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proRkolInit();
-            prorkol.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRkolOpenFtg, pa.bfar, "PRO", p04921Record, "U", prorkol.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRkolWrite() {
-            p04921Record.set("RKOL");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proRkolInit();
-            prorkol.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                prorkol.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRkolOpenFtg, pa.bfar, "PRO", p04921Record, "N", prorkol.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRkolDelete() {
-            p04921Record.set("RKOL");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proRkolInit();
-            proRkol.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRkol.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRkolOpenFtg, pa.bfar, "PRO", p04921Record, "D", prorkol.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRkolStartEg() {
-            p04921Record.set("RKOL");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proRkolInit();
-            proRkol.start("NOT<", "pro_rkol_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRkol.start("NOT<", "pro_rkol_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRkolStartprevEg() {
-            p04921Record.set("RKOL");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proRkolInit();
-            proRkol.start("NOT>", "pro_rkol_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRkol.start("NOT>", "pro_rkol_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRbegInit() {
-            if (proRbegOpen.equals("J") && !(proRbegOpenFtg.equals(pa.bkstvftg))) {
-                proRbegClose();
-            }
-            if (!(proRbegOpen.equals("J"))) {
-                proRbegFilnamn.set(SPACE);
-                proRbegFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/RBEG"));
-                proRbeg.open("I-O");
-                proCheck00();
-                proRbegOpen.set("J");
-                proRbegOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proRbegClose() {
-            p04921Record.set("RBEG");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proRbegOpen.equals("J")) {
-                proRbeg.close();
-                proCheck00();
-                proRbegOpen.set("N");
-                proRbegOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proRbegRead() {
-            p04921Record.set("RBEG");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proRbegInit();
-            proRbeg.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRbeg.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRbegReadKl() {
-            p04921Record.set("RBEG");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proRbegInit();
-            proRbeg.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proRbeg.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRbegReadnext() {
-            p04921Record.set("RBEG");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proRbegInit();
-            proRbeg.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRbeg.start(">", "pro_rbeg_key");
-                if (p04921Dasvar.equals("00")) {
-                    proRbeg.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proRbegReadprev() {
-            p04921Record.set("RBEG");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proRbegInit();
-            proRbeg.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRbeg.start("<", "pro_rbeg_key");
-                if (p04921Dasvar.equals("00")) {
-                    proRbeg.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proRbegRewrite() {
-            p04921Record.set("RBEG");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proRbegInit();
-            prorbeg.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRbegOpenFtg, pa.bfar, "PRO", p04921Record, "U", prorbeg.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRbegWrite() {
-            p04921Record.set("RBEG");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proRbegInit();
-            prorbeg.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                prorbeg.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRbegOpenFtg, pa.bfar, "PRO", p04921Record, "N", prorbeg.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRbegDelete() {
-            p04921Record.set("RBEG");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proRbegInit();
-            proRbeg.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRbeg.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRbegOpenFtg, pa.bfar, "PRO", p04921Record, "D", prorbeg.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRbegStartEg() {
-            p04921Record.set("RBEG");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proRbegInit();
-            proRbeg.start("NOT<", "pro_rbeg_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRbeg.start("NOT<", "pro_rbeg_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRbegStartprevEg() {
-            p04921Record.set("RBEG");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proRbegInit();
-            proRbeg.start("NOT>", "pro_rbeg_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRbeg.start("NOT>", "pro_rbeg_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRselInit() {
-            if (proRselOpen.equals("J") && !(proRselOpenFtg.equals(pa.bkstvftg))) {
-                proRselClose();
-            }
-            if (!(proRselOpen.equals("J"))) {
-                proRselFilnamn.set(SPACE);
-                proRselFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/RSEL"));
-                proRsel.open("I-O");
-                proCheck00();
-                proRselOpen.set("J");
-                proRselOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proRselClose() {
-            p04921Record.set("RSEL");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proRselOpen.equals("J")) {
-                proRsel.close();
-                proCheck00();
-                proRselOpen.set("N");
-                proRselOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proRselRead() {
-            p04921Record.set("RSEL");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proRselInit();
-            proRsel.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRsel.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRselReadKl() {
-            p04921Record.set("RSEL");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proRselInit();
-            proRsel.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proRsel.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRselReadnext() {
-            p04921Record.set("RSEL");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proRselInit();
-            proRsel.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRsel.start(">", "pro_rsel_key");
-                if (p04921Dasvar.equals("00")) {
-                    proRsel.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proRselReadprev() {
-            p04921Record.set("RSEL");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proRselInit();
-            proRsel.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRsel.start("<", "pro_rsel_key");
-                if (p04921Dasvar.equals("00")) {
-                    proRsel.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proRselRewrite() {
-            p04921Record.set("RSEL");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proRselInit();
-            prorsel.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRselOpenFtg, pa.bfar, "PRO", p04921Record, "U", prorsel.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRselWrite() {
-            p04921Record.set("RSEL");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proRselInit();
-            prorsel.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                prorsel.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRselOpenFtg, pa.bfar, "PRO", p04921Record, "N", prorsel.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRselDelete() {
-            p04921Record.set("RSEL");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proRselInit();
-            proRsel.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRsel.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRselOpenFtg, pa.bfar, "PRO", p04921Record, "D", prorsel.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRselStartEg() {
-            p04921Record.set("RSEL");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proRselInit();
-            proRsel.start("NOT<", "pro_rsel_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRsel.start("NOT<", "pro_rsel_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRselStartprevEg() {
-            p04921Record.set("RSEL");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proRselInit();
-            proRsel.start("NOT>", "pro_rsel_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRsel.start("NOT>", "pro_rsel_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFateInit() {
-            if (proFateOpen.equals("J") && !(proFateOpenFtg.equals(pa.bkstvftg))) {
-                proFateClose();
-            }
-            if (!(proFateOpen.equals("J"))) {
-                proFateFilnamn.set(SPACE);
-                proFateFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FATE"));
-                proFate.open("I-O");
-                proCheck00();
-                proFateOpen.set("J");
-                proFateOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proFateClose() {
-            p04921Record.set("FATE");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proFateOpen.equals("J")) {
-                proFate.close();
-                proCheck00();
-                proFateOpen.set("N");
-                proFateOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proFateRead() {
-            p04921Record.set("FATE");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proFateInit();
-            proFate.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFate.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFateReadKl() {
-            p04921Record.set("FATE");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proFateInit();
-            proFate.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proFate.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFateReadnext() {
-            p04921Record.set("FATE");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proFateInit();
-            proFate.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFate.start(">", "pro_fate_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFate.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proFateReadprev() {
-            p04921Record.set("FATE");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proFateInit();
-            proFate.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFate.start("<", "pro_fate_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFate.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proFateRewrite() {
-            p04921Record.set("FATE");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proFateInit();
-            profate.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFateOpenFtg, pa.bfar, "PRO", p04921Record, "U", profate.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFateWrite() {
-            p04921Record.set("FATE");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proFateInit();
-            profate.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                profate.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFateOpenFtg, pa.bfar, "PRO", p04921Record, "N", profate.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFateDelete() {
-            p04921Record.set("FATE");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proFateInit();
-            proFate.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFate.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFateOpenFtg, pa.bfar, "PRO", p04921Record, "D", profate.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFateStartEg() {
-            p04921Record.set("FATE");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proFateInit();
-            proFate.start("NOT<", "pro_fate_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFate.start("NOT<", "pro_fate_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFateStartprevEg() {
-            p04921Record.set("FATE");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proFateInit();
-            proFate.start("NOT>", "pro_fate_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFate.start("NOT>", "pro_fate_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFaanInit() {
-            if (proFaanOpen.equals("J") && !(proFaanOpenFtg.equals(pa.bkstvftg))) {
-                proFaanClose();
-            }
-            if (!(proFaanOpen.equals("J"))) {
-                proFaanFilnamn.set(SPACE);
-                proFaanFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FAAN"));
-                proFaan.open("I-O");
-                proCheck00();
-                proFaanOpen.set("J");
-                proFaanOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proFaanClose() {
-            p04921Record.set("FAAN");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proFaanOpen.equals("J")) {
-                proFaan.close();
-                proCheck00();
-                proFaanOpen.set("N");
-                proFaanOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proFaanRead() {
-            p04921Record.set("FAAN");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proFaanInit();
-            proFaan.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFaan.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFaanReadKl() {
-            p04921Record.set("FAAN");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proFaanInit();
-            proFaan.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proFaan.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFaanReadnext() {
-            p04921Record.set("FAAN");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proFaanInit();
-            proFaan.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFaan.start(">", "pro_faan_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFaan.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proFaanReadprev() {
-            p04921Record.set("FAAN");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proFaanInit();
-            proFaan.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFaan.start("<", "pro_faan_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFaan.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proFaanRewrite() {
-            p04921Record.set("FAAN");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proFaanInit();
-            profaan.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFaanOpenFtg, pa.bfar, "PRO", p04921Record, "U", profaan.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFaanWrite() {
-            p04921Record.set("FAAN");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proFaanInit();
-            profaan.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                profaan.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFaanOpenFtg, pa.bfar, "PRO", p04921Record, "N", profaan.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFaanDelete() {
-            p04921Record.set("FAAN");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proFaanInit();
-            proFaan.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFaan.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFaanOpenFtg, pa.bfar, "PRO", p04921Record, "D", profaan.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFaanStartEg() {
-            p04921Record.set("FAAN");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proFaanInit();
-            proFaan.start("NOT<", "pro_faan_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFaan.start("NOT<", "pro_faan_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFaanStartprevEg() {
-            p04921Record.set("FAAN");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proFaanInit();
-            proFaan.start("NOT>", "pro_faan_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFaan.start("NOT>", "pro_faan_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFaauInit() {
-            if (proFaauOpen.equals("J") && !(proFaauOpenFtg.equals(pa.bkstvftg))) {
-                proFaauClose();
-            }
-            if (!(proFaauOpen.equals("J"))) {
-                proFaauFilnamn.set(SPACE);
-                proFaauFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FAAU"));
-                proFaau.open("I-O");
-                proCheck00();
-                proFaauOpen.set("J");
-                proFaauOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proFaauClose() {
-            p04921Record.set("FAAU");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proFaauOpen.equals("J")) {
-                proFaau.close();
-                proCheck00();
-                proFaauOpen.set("N");
-                proFaauOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proFaauRead() {
-            p04921Record.set("FAAU");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proFaauInit();
-            proFaau.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFaau.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFaauReadKl() {
-            p04921Record.set("FAAU");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proFaauInit();
-            proFaau.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proFaau.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFaauReadnext() {
-            p04921Record.set("FAAU");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proFaauInit();
-            proFaau.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFaau.start(">", "pro_faau_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFaau.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proFaauReadprev() {
-            p04921Record.set("FAAU");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proFaauInit();
-            proFaau.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFaau.start("<", "pro_faau_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFaau.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proFaauRewrite() {
-            p04921Record.set("FAAU");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proFaauInit();
-            profaau.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFaauOpenFtg, pa.bfar, "PRO", p04921Record, "U", profaau.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFaauWrite() {
-            p04921Record.set("FAAU");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proFaauInit();
-            profaau.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                profaau.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFaauOpenFtg, pa.bfar, "PRO", p04921Record, "N", profaau.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFaauDelete() {
-            p04921Record.set("FAAU");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proFaauInit();
-            proFaau.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFaau.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFaauOpenFtg, pa.bfar, "PRO", p04921Record, "D", profaau.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFaauStartEg() {
-            p04921Record.set("FAAU");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proFaauInit();
-            proFaau.start("NOT<", "pro_faau_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFaau.start("NOT<", "pro_faau_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFaauStartprevEg() {
-            p04921Record.set("FAAU");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proFaauInit();
-            proFaau.start("NOT>", "pro_faau_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFaau.start("NOT>", "pro_faau_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRkopInit() {
-            if (proRkopOpen.equals("J") && !(proRkopOpenFtg.equals(pa.bkstvftg))) {
-                proRkopClose();
-            }
-            if (!(proRkopOpen.equals("J"))) {
-                proRkopFilnamn.set(SPACE);
-                proRkopFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/RKOP"));
-                proRkop.open("I-O");
-                proCheck00();
-                proRkopOpen.set("J");
-                proRkopOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proRkopClose() {
-            p04921Record.set("RKOP");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proRkopOpen.equals("J")) {
-                proRkop.close();
-                proCheck00();
-                proRkopOpen.set("N");
-                proRkopOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proRkopRead() {
-            p04921Record.set("RKOP");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proRkopInit();
-            proRkop.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRkop.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRkopReadKl() {
-            p04921Record.set("RKOP");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proRkopInit();
-            proRkop.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proRkop.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRkopReadnext() {
-            p04921Record.set("RKOP");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proRkopInit();
-            proRkop.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRkop.start(">", "pro_rkop_key");
-                if (p04921Dasvar.equals("00")) {
-                    proRkop.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proRkopReadprev() {
-            p04921Record.set("RKOP");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proRkopInit();
-            proRkop.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRkop.start("<", "pro_rkop_key");
-                if (p04921Dasvar.equals("00")) {
-                    proRkop.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proRkopRewrite() {
-            p04921Record.set("RKOP");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proRkopInit();
-            prorkop.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRkopOpenFtg, pa.bfar, "PRO", p04921Record, "U", prorkop.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRkopWrite() {
-            p04921Record.set("RKOP");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proRkopInit();
-            prorkop.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                prorkop.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRkopOpenFtg, pa.bfar, "PRO", p04921Record, "N", prorkop.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRkopDelete() {
-            p04921Record.set("RKOP");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proRkopInit();
-            proRkop.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRkop.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRkopOpenFtg, pa.bfar, "PRO", p04921Record, "D", prorkop.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRkopStartEg() {
-            p04921Record.set("RKOP");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proRkopInit();
-            proRkop.start("NOT<", "pro_rkop_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRkop.start("NOT<", "pro_rkop_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRkopStartprevEg() {
-            p04921Record.set("RKOP");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proRkopInit();
-            proRkop.start("NOT>", "pro_rkop_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRkop.start("NOT>", "pro_rkop_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proLahuInit() {
-            if (proLahuOpen.equals("J") && !(proLahuOpenFtg.equals(pa.bkstvftg))) {
-                proLahuClose();
-            }
-            if (!(proLahuOpen.equals("J"))) {
-                proLahuFilnamn.set(SPACE);
-                proLahuFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/LAHU"));
-                proLahu.open("I-O");
-                proCheck00();
-                proLahuOpen.set("J");
-                proLahuOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proLahuClose() {
-            p04921Record.set("LAHU");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proLahuOpen.equals("J")) {
-                proLahu.close();
-                proCheck00();
-                proLahuOpen.set("N");
-                proLahuOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proLahuRead() {
-            p04921Record.set("LAHU");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proLahuInit();
-            proLahu.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proLahu.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proLahuReadKl() {
-            p04921Record.set("LAHU");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proLahuInit();
-            proLahu.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proLahu.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proLahuReadnext() {
-            p04921Record.set("LAHU");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proLahuInit();
-            proLahu.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proLahu.start(">", "pro_lahu_key");
-                if (p04921Dasvar.equals("00")) {
-                    proLahu.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proLahuReadprev() {
-            p04921Record.set("LAHU");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proLahuInit();
-            proLahu.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proLahu.start("<", "pro_lahu_key");
-                if (p04921Dasvar.equals("00")) {
-                    proLahu.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proLahuRewrite() {
-            p04921Record.set("LAHU");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proLahuInit();
-            prolahu.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proLahuOpenFtg, pa.bfar, "PRO", p04921Record, "U", prolahu.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proLahuWrite() {
-            p04921Record.set("LAHU");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proLahuInit();
-            prolahu.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                prolahu.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proLahuOpenFtg, pa.bfar, "PRO", p04921Record, "N", prolahu.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proLahuDelete() {
-            p04921Record.set("LAHU");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proLahuInit();
-            proLahu.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proLahu.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proLahuOpenFtg, pa.bfar, "PRO", p04921Record, "D", prolahu.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proLahuStartEg() {
-            p04921Record.set("LAHU");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proLahuInit();
-            proLahu.start("NOT<", "pro_lahu_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proLahu.start("NOT<", "pro_lahu_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proLahuStartprevEg() {
-            p04921Record.set("LAHU");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proLahuInit();
-            proLahu.start("NOT>", "pro_lahu_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proLahu.start("NOT>", "pro_lahu_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proLaprInit() {
-            if (proLaprOpen.equals("J") && !(proLaprOpenFtg.equals(pa.bkstvftg))) {
-                proLaprClose();
-            }
-            if (!(proLaprOpen.equals("J"))) {
-                proLaprFilnamn.set(SPACE);
-                proLaprFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/LAPR"));
-                proLapr.open("I-O");
-                proCheck00();
-                proLaprOpen.set("J");
-                proLaprOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proLaprClose() {
-            p04921Record.set("LAPR");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proLaprOpen.equals("J")) {
-                proLapr.close();
-                proCheck00();
-                proLaprOpen.set("N");
-                proLaprOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proLaprRead() {
-            p04921Record.set("LAPR");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proLaprInit();
-            proLapr.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proLapr.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proLaprReadKl() {
-            p04921Record.set("LAPR");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proLaprInit();
-            proLapr.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proLapr.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proLaprReadnext() {
-            p04921Record.set("LAPR");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proLaprInit();
-            proLapr.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proLapr.start(">", "pro_lapr_key");
-                if (p04921Dasvar.equals("00")) {
-                    proLapr.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proLaprReadprev() {
-            p04921Record.set("LAPR");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proLaprInit();
-            proLapr.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proLapr.start("<", "pro_lapr_key");
-                if (p04921Dasvar.equals("00")) {
-                    proLapr.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proLaprRewrite() {
-            p04921Record.set("LAPR");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proLaprInit();
-            prolapr.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proLaprOpenFtg, pa.bfar, "PRO", p04921Record, "U", prolapr.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proLaprWrite() {
-            p04921Record.set("LAPR");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proLaprInit();
-            prolapr.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                prolapr.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proLaprOpenFtg, pa.bfar, "PRO", p04921Record, "N", prolapr.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proLaprDelete() {
-            p04921Record.set("LAPR");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proLaprInit();
-            proLapr.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proLapr.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proLaprOpenFtg, pa.bfar, "PRO", p04921Record, "D", prolapr.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proLaprStartEg() {
-            p04921Record.set("LAPR");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proLaprInit();
-            proLapr.start("NOT<", "pro_lapr_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proLapr.start("NOT<", "pro_lapr_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proLaprStartprevEg() {
-            p04921Record.set("LAPR");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proLaprInit();
-            proLapr.start("NOT>", "pro_lapr_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proLapr.start("NOT>", "pro_lapr_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proPnotInit() {
-            if (proPnotOpen.equals("J") && !(proPnotOpenFtg.equals(pa.bkstvftg))) {
-                proPnotClose();
-            }
-            if (!(proPnotOpen.equals("J"))) {
-                proPnotFilnamn.set(SPACE);
-                proPnotFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/PNOT"));
-                proPnot.open("I-O");
-                proCheck00();
-                proPnotOpen.set("J");
-                proPnotOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proPnotClose() {
-            p04921Record.set("PNOT");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proPnotOpen.equals("J")) {
-                proPnot.close();
-                proCheck00();
-                proPnotOpen.set("N");
-                proPnotOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proPnotRead() {
-            p04921Record.set("PNOT");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proPnotInit();
-            proPnot.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPnot.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proPnotReadKl() {
-            p04921Record.set("PNOT");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proPnotInit();
-            proPnot.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proPnot.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proPnotReadnext() {
-            p04921Record.set("PNOT");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proPnotInit();
-            proPnot.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPnot.start(">", "pro_pnot_key");
-                if (p04921Dasvar.equals("00")) {
-                    proPnot.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proPnotReadprev() {
-            p04921Record.set("PNOT");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proPnotInit();
-            proPnot.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPnot.start("<", "pro_pnot_key");
-                if (p04921Dasvar.equals("00")) {
-                    proPnot.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proPnotRewrite() {
-            p04921Record.set("PNOT");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proPnotInit();
-            propnot.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proPnotOpenFtg, pa.bfar, "PRO", p04921Record, "U", propnot.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proPnotWrite() {
-            p04921Record.set("PNOT");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proPnotInit();
-            propnot.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                propnot.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proPnotOpenFtg, pa.bfar, "PRO", p04921Record, "N", propnot.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proPnotDelete() {
-            p04921Record.set("PNOT");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proPnotInit();
-            proPnot.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPnot.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proPnotOpenFtg, pa.bfar, "PRO", p04921Record, "D", propnot.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proPnotStartEg() {
-            p04921Record.set("PNOT");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proPnotInit();
-            proPnot.start("NOT<", "pro_pnot_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPnot.start("NOT<", "pro_pnot_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proPnotStartprevEg() {
-            p04921Record.set("PNOT");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proPnotInit();
-            proPnot.start("NOT>", "pro_pnot_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proPnot.start("NOT>", "pro_pnot_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRbehInit() {
-            if (proRbehOpen.equals("J") && !(proRbehOpenFtg.equals(pa.bkstvftg))) {
-                proRbehClose();
-            }
-            if (!(proRbehOpen.equals("J"))) {
-                proRbehFilnamn.set(SPACE);
-                proRbehFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/RBEH"));
-                proRbeh.open("I-O");
-                proCheck00();
-                proRbehOpen.set("J");
-                proRbehOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proRbehClose() {
-            p04921Record.set("RBEH");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proRbehOpen.equals("J")) {
-                proRbeh.close();
-                proCheck00();
-                proRbehOpen.set("N");
-                proRbehOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proRbehRead() {
-            p04921Record.set("RBEH");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proRbehInit();
-            proRbeh.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRbeh.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRbehReadKl() {
-            p04921Record.set("RBEH");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proRbehInit();
-            proRbeh.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proRbeh.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRbehReadnext() {
-            p04921Record.set("RBEH");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proRbehInit();
-            proRbeh.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRbeh.start(">", "pro_rbeh_key");
-                if (p04921Dasvar.equals("00")) {
-                    proRbeh.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proRbehReadprev() {
-            p04921Record.set("RBEH");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proRbehInit();
-            proRbeh.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRbeh.start("<", "pro_rbeh_key");
-                if (p04921Dasvar.equals("00")) {
-                    proRbeh.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proRbehRewrite() {
-            p04921Record.set("RBEH");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proRbehInit();
-            prorbeh.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRbehOpenFtg, pa.bfar, "PRO", p04921Record, "U", prorbeh.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRbehWrite() {
-            p04921Record.set("RBEH");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proRbehInit();
-            prorbeh.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                prorbeh.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRbehOpenFtg, pa.bfar, "PRO", p04921Record, "N", prorbeh.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRbehDelete() {
-            p04921Record.set("RBEH");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proRbehInit();
-            proRbeh.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRbeh.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRbehOpenFtg, pa.bfar, "PRO", p04921Record, "D", prorbeh.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRbehStartEg() {
-            p04921Record.set("RBEH");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proRbehInit();
-            proRbeh.start("NOT<", "pro_rbeh_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRbeh.start("NOT<", "pro_rbeh_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRbehStartprevEg() {
-            p04921Record.set("RBEH");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proRbehInit();
-            proRbeh.start("NOT>", "pro_rbeh_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRbeh.start("NOT>", "pro_rbeh_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBudtInit() {
-            if (proBudtOpen.equals("J") && !(proBudtOpenFtg.equals(pa.bkstvftg))) {
-                proBudtClose();
-            }
-            if (!(proBudtOpen.equals("J"))) {
-                proBudtFilnamn.set(SPACE);
-                proBudtFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/BUDT"));
-                proBudt.open("I-O");
-                proCheck00();
-                proBudtOpen.set("J");
-                proBudtOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proBudtClose() {
-            p04921Record.set("BUDT");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proBudtOpen.equals("J")) {
-                proBudt.close();
-                proCheck00();
-                proBudtOpen.set("N");
-                proBudtOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proBudtRead() {
-            p04921Record.set("BUDT");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proBudtInit();
-            proBudt.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudt.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBudtReadKl() {
-            p04921Record.set("BUDT");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proBudtInit();
-            proBudt.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proBudt.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBudtReadnext() {
-            p04921Record.set("BUDT");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proBudtInit();
-            proBudt.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudt.start(">", "pro_budt_key");
-                if (p04921Dasvar.equals("00")) {
-                    proBudt.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proBudtReadprev() {
-            p04921Record.set("BUDT");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proBudtInit();
-            proBudt.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudt.start("<", "pro_budt_key");
-                if (p04921Dasvar.equals("00")) {
-                    proBudt.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proBudtRewrite() {
-            p04921Record.set("BUDT");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proBudtInit();
-            probudt.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBudtOpenFtg, pa.bfar, "PRO", p04921Record, "U", probudt.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBudtWrite() {
-            p04921Record.set("BUDT");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proBudtInit();
-            probudt.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                probudt.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBudtOpenFtg, pa.bfar, "PRO", p04921Record, "N", probudt.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBudtDelete() {
-            p04921Record.set("BUDT");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proBudtInit();
-            proBudt.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudt.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBudtOpenFtg, pa.bfar, "PRO", p04921Record, "D", probudt.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBudtStartEg() {
-            p04921Record.set("BUDT");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proBudtInit();
-            proBudt.start("NOT<", "pro_budt_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudt.start("NOT<", "pro_budt_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBudtStartprevEg() {
-            p04921Record.set("BUDT");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proBudtInit();
-            proBudt.start("NOT>", "pro_budt_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBudt.start("NOT>", "pro_budt_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proReplInit() {
-            if (proReplOpen.equals("J") && !(proReplOpenFtg.equals(pa.bkstvftg))) {
-                proReplClose();
-            }
-            if (!(proReplOpen.equals("J"))) {
-                proReplFilnamn.set(SPACE);
-                proReplFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/REPL"));
-                proRepl.open("I-O");
-                proCheck00();
-                proReplOpen.set("J");
-                proReplOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proReplClose() {
-            p04921Record.set("REPL");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proReplOpen.equals("J")) {
-                proRepl.close();
-                proCheck00();
-                proReplOpen.set("N");
-                proReplOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proReplRead() {
-            p04921Record.set("REPL");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proReplInit();
-            proRepl.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRepl.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proReplReadKl() {
-            p04921Record.set("REPL");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proReplInit();
-            proRepl.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proRepl.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proReplReadnext() {
-            p04921Record.set("REPL");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proReplInit();
-            proRepl.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRepl.start(">", "pro_repl_key");
-                if (p04921Dasvar.equals("00")) {
-                    proRepl.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proReplReadprev() {
-            p04921Record.set("REPL");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proReplInit();
-            proRepl.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRepl.start("<", "pro_repl_key");
-                if (p04921Dasvar.equals("00")) {
-                    proRepl.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proReplRewrite() {
-            p04921Record.set("REPL");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proReplInit();
-            prorepl.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proReplOpenFtg, pa.bfar, "PRO", p04921Record, "U", prorepl.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proReplWrite() {
-            p04921Record.set("REPL");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proReplInit();
-            prorepl.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                prorepl.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proReplOpenFtg, pa.bfar, "PRO", p04921Record, "N", prorepl.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proReplDelete() {
-            p04921Record.set("REPL");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proReplInit();
-            proRepl.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRepl.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proReplOpenFtg, pa.bfar, "PRO", p04921Record, "D", prorepl.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proReplStartEg() {
-            p04921Record.set("REPL");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proReplInit();
-            proRepl.start("NOT<", "pro_repl_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRepl.start("NOT<", "pro_repl_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proReplStartprevEg() {
-            p04921Record.set("REPL");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proReplInit();
-            proRepl.start("NOT>", "pro_repl_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRepl.start("NOT>", "pro_repl_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proAgrpInit() {
-            if (proAgrpOpen.equals("J") && !(proAgrpOpenFtg.equals(pa.bkstvftg))) {
-                proAgrpClose();
-            }
-            if (!(proAgrpOpen.equals("J"))) {
-                proAgrpFilnamn.set(SPACE);
-                proAgrpFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/AGRP"));
-                proAgrp.open("I-O");
-                proCheck00();
-                proAgrpOpen.set("J");
-                proAgrpOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proAgrpClose() {
-            p04921Record.set("AGRP");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proAgrpOpen.equals("J")) {
-                proAgrp.close();
-                proCheck00();
-                proAgrpOpen.set("N");
-                proAgrpOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proAgrpRead() {
-            p04921Record.set("AGRP");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proAgrpInit();
-            proAgrp.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proAgrp.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proAgrpReadKl() {
-            p04921Record.set("AGRP");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proAgrpInit();
-            proAgrp.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proAgrp.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proAgrpReadnext() {
-            p04921Record.set("AGRP");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proAgrpInit();
-            proAgrp.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proAgrp.start(">", "pro_agrp_key");
-                if (p04921Dasvar.equals("00")) {
-                    proAgrp.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proAgrpReadprev() {
-            p04921Record.set("AGRP");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proAgrpInit();
-            proAgrp.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proAgrp.start("<", "pro_agrp_key");
-                if (p04921Dasvar.equals("00")) {
-                    proAgrp.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proAgrpRewrite() {
-            p04921Record.set("AGRP");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proAgrpInit();
-            proagrp.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proAgrpOpenFtg, pa.bfar, "PRO", p04921Record, "U", proagrp.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proAgrpWrite() {
-            p04921Record.set("AGRP");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proAgrpInit();
-            proagrp.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proagrp.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proAgrpOpenFtg, pa.bfar, "PRO", p04921Record, "N", proagrp.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proAgrpDelete() {
-            p04921Record.set("AGRP");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proAgrpInit();
-            proAgrp.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proAgrp.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proAgrpOpenFtg, pa.bfar, "PRO", p04921Record, "D", proagrp.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proAgrpStartEg() {
-            p04921Record.set("AGRP");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proAgrpInit();
-            proAgrp.start("NOT<", "pro_agrp_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proAgrp.start("NOT<", "pro_agrp_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proAgrpStartprevEg() {
-            p04921Record.set("AGRP");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proAgrpInit();
-            proAgrp.start("NOT>", "pro_agrp_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proAgrp.start("NOT>", "pro_agrp_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidmInit() {
-            if (proTidmOpen.equals("J") && !(proTidmOpenFtg.equals(pa.bkstvftg))) {
-                proTidmClose();
-            }
-            if (!(proTidmOpen.equals("J"))) {
-                proTidmFilnamn.set(SPACE);
-                proTidmFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/TIDM"));
-                proTidm.open("I-O");
-                proCheck00();
-                proTidmOpen.set("J");
-                proTidmOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proTidmClose() {
-            p04921Record.set("TIDM");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proTidmOpen.equals("J")) {
-                proTidm.close();
-                proCheck00();
-                proTidmOpen.set("N");
-                proTidmOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidmRead() {
-            p04921Record.set("TIDM");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proTidmInit();
-            proTidm.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidm.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidmReadKl() {
-            p04921Record.set("TIDM");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proTidmInit();
-            proTidm.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proTidm.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidmReadnext() {
-            p04921Record.set("TIDM");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proTidmInit();
-            proTidm.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidm.start(">", "pro_tidm_key");
-                if (p04921Dasvar.equals("00")) {
-                    proTidm.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proTidmReadprev() {
-            p04921Record.set("TIDM");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proTidmInit();
-            proTidm.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidm.start("<", "pro_tidm_key");
-                if (p04921Dasvar.equals("00")) {
-                    proTidm.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proTidmRewrite() {
-            p04921Record.set("TIDM");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proTidmInit();
-            protidm.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTidmOpenFtg, pa.bfar, "PRO", p04921Record, "U", protidm.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidmWrite() {
-            p04921Record.set("TIDM");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proTidmInit();
-            protidm.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                protidm.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTidmOpenFtg, pa.bfar, "PRO", p04921Record, "N", protidm.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidmDelete() {
-            p04921Record.set("TIDM");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proTidmInit();
-            proTidm.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidm.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTidmOpenFtg, pa.bfar, "PRO", p04921Record, "D", protidm.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidmStartEg() {
-            p04921Record.set("TIDM");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proTidmInit();
-            proTidm.start("NOT<", "pro_tidm_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidm.start("NOT<", "pro_tidm_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidmStartprevEg() {
-            p04921Record.set("TIDM");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proTidmInit();
-            proTidm.start("NOT>", "pro_tidm_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidm.start("NOT>", "pro_tidm_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBefaInit() {
-            if (proBefaOpen.equals("J") && !(proBefaOpenFtg.equals(pa.bkstvftg))) {
-                proBefaClose();
-            }
-            if (!(proBefaOpen.equals("J"))) {
-                proBefaFilnamn.set(SPACE);
-                proBefaFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/BEFA"));
-                proBefa.open("I-O");
-                proCheck00();
-                proBefaOpen.set("J");
-                proBefaOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proBefaClose() {
-            p04921Record.set("BEFA");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proBefaOpen.equals("J")) {
-                proBefa.close();
-                proCheck00();
-                proBefaOpen.set("N");
-                proBefaOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proBefaRead() {
-            p04921Record.set("BEFA");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proBefaInit();
-            proBefa.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBefa.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBefaReadKl() {
-            p04921Record.set("BEFA");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proBefaInit();
-            proBefa.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proBefa.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBefaReadnext() {
-            p04921Record.set("BEFA");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proBefaInit();
-            proBefa.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBefa.start(">", "pro_befa_key");
-                if (p04921Dasvar.equals("00")) {
-                    proBefa.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proBefaReadprev() {
-            p04921Record.set("BEFA");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proBefaInit();
-            proBefa.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBefa.start("<", "pro_befa_key");
-                if (p04921Dasvar.equals("00")) {
-                    proBefa.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proBefaRewrite() {
-            p04921Record.set("BEFA");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proBefaInit();
-            probefa.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBefaOpenFtg, pa.bfar, "PRO", p04921Record, "U", probefa.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBefaWrite() {
-            p04921Record.set("BEFA");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proBefaInit();
-            probefa.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                probefa.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBefaOpenFtg, pa.bfar, "PRO", p04921Record, "N", probefa.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBefaDelete() {
-            p04921Record.set("BEFA");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proBefaInit();
-            proBefa.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBefa.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proBefaOpenFtg, pa.bfar, "PRO", p04921Record, "D", probefa.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proBefaStartEg() {
-            p04921Record.set("BEFA");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proBefaInit();
-            proBefa.start("NOT<", "pro_befa_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBefa.start("NOT<", "pro_befa_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proBefaStartprevEg() {
-            p04921Record.set("BEFA");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proBefaInit();
-            proBefa.start("NOT>", "pro_befa_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proBefa.start("NOT>", "pro_befa_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfakInit() {
-            if (proIfakOpen.equals("J") && !(proIfakOpenFtg.equals(pa.bkstvftg))) {
-                proIfakClose();
-            }
-            if (!(proIfakOpen.equals("J"))) {
-                proIfakFilnamn.set(SPACE);
-                proIfakFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/IFAK"));
-                proIfak.open("I-O");
-                proCheck00();
-                proIfakOpen.set("J");
-                proIfakOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proIfakClose() {
-            p04921Record.set("IFAK");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proIfakOpen.equals("J")) {
-                proIfak.close();
-                proCheck00();
-                proIfakOpen.set("N");
-                proIfakOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfakRead() {
-            p04921Record.set("IFAK");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proIfakInit();
-            proIfak.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfak.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfakReadKl() {
-            p04921Record.set("IFAK");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proIfakInit();
-            proIfak.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proIfak.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfakReadnext() {
-            p04921Record.set("IFAK");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proIfakInit();
-            proIfak.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfak.start(">", "pro_ifak_key");
-                if (p04921Dasvar.equals("00")) {
-                    proIfak.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proIfakReadprev() {
-            p04921Record.set("IFAK");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proIfakInit();
-            proIfak.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfak.start("<", "pro_ifak_key");
-                if (p04921Dasvar.equals("00")) {
-                    proIfak.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proIfakRewrite() {
-            p04921Record.set("IFAK");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proIfakInit();
-            proifak.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIfakOpenFtg, pa.bfar, "PRO", p04921Record, "U", proifak.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfakWrite() {
-            p04921Record.set("IFAK");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proIfakInit();
-            proifak.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proifak.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIfakOpenFtg, pa.bfar, "PRO", p04921Record, "N", proifak.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfakDelete() {
-            p04921Record.set("IFAK");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proIfakInit();
-            proIfak.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfak.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIfakOpenFtg, pa.bfar, "PRO", p04921Record, "D", proifak.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfakStartEg() {
-            p04921Record.set("IFAK");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proIfakInit();
-            proIfak.start("NOT<", "pro_ifak_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfak.start("NOT<", "pro_ifak_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfakStartprevEg() {
-            p04921Record.set("IFAK");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proIfakInit();
-            proIfak.start("NOT>", "pro_ifak_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfak.start("NOT>", "pro_ifak_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfabInit() {
-            if (proIfabOpen.equals("J") && !(proIfabOpenFtg.equals(pa.bkstvftg))) {
-                proIfabClose();
-            }
-            if (!(proIfabOpen.equals("J"))) {
-                proIfabFilnamn.set(SPACE);
-                proIfabFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/IFAB"));
-                proIfab.open("I-O");
-                proCheck00();
-                proIfabOpen.set("J");
-                proIfabOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proIfabClose() {
-            p04921Record.set("IFAB");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proIfabOpen.equals("J")) {
-                proIfab.close();
-                proCheck00();
-                proIfabOpen.set("N");
-                proIfabOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfabRead() {
-            p04921Record.set("IFAB");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proIfabInit();
-            proIfab.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfab.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfabReadKl() {
-            p04921Record.set("IFAB");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proIfabInit();
-            proIfab.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proIfab.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfabReadnext() {
-            p04921Record.set("IFAB");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proIfabInit();
-            proIfab.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfab.start(">", "pro_ifab_key");
-                if (p04921Dasvar.equals("00")) {
-                    proIfab.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proIfabReadprev() {
-            p04921Record.set("IFAB");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proIfabInit();
-            proIfab.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfab.start("<", "pro_ifab_key");
-                if (p04921Dasvar.equals("00")) {
-                    proIfab.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proIfabRewrite() {
-            p04921Record.set("IFAB");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proIfabInit();
-            proifab.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIfabOpenFtg, pa.bfar, "PRO", p04921Record, "U", proifab.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfabWrite() {
-            p04921Record.set("IFAB");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proIfabInit();
-            proifab.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proifab.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIfabOpenFtg, pa.bfar, "PRO", p04921Record, "N", proifab.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfabDelete() {
-            p04921Record.set("IFAB");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proIfabInit();
-            proIfab.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfab.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIfabOpenFtg, pa.bfar, "PRO", p04921Record, "D", proifab.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfabStartEg() {
-            p04921Record.set("IFAB");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proIfabInit();
-            proIfab.start("NOT<", "pro_ifab_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfab.start("NOT<", "pro_ifab_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfabStartprevEg() {
-            p04921Record.set("IFAB");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proIfabInit();
-            proIfab.start("NOT>", "pro_ifab_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfab.start("NOT>", "pro_ifab_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfatInit() {
-            if (proIfatOpen.equals("J") && !(proIfatOpenFtg.equals(pa.bkstvftg))) {
-                proIfatClose();
-            }
-            if (!(proIfatOpen.equals("J"))) {
-                proIfatFilnamn.set(SPACE);
-                proIfatFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/IFAT"));
-                proIfat.open("I-O");
-                proCheck00();
-                proIfatOpen.set("J");
-                proIfatOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proIfatClose() {
-            p04921Record.set("IFAT");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proIfatOpen.equals("J")) {
-                proIfat.close();
-                proCheck00();
-                proIfatOpen.set("N");
-                proIfatOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfatRead() {
-            p04921Record.set("IFAT");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proIfatInit();
-            proIfat.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfat.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfatReadKl() {
-            p04921Record.set("IFAT");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proIfatInit();
-            proIfat.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proIfat.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfatReadnext() {
-            p04921Record.set("IFAT");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proIfatInit();
-            proIfat.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfat.start(">", "pro_ifat_key");
-                if (p04921Dasvar.equals("00")) {
-                    proIfat.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proIfatReadprev() {
-            p04921Record.set("IFAT");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proIfatInit();
-            proIfat.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfat.start("<", "pro_ifat_key");
-                if (p04921Dasvar.equals("00")) {
-                    proIfat.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proIfatRewrite() {
-            p04921Record.set("IFAT");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proIfatInit();
-            proifat.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIfatOpenFtg, pa.bfar, "PRO", p04921Record, "U", proifat.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfatWrite() {
-            p04921Record.set("IFAT");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proIfatInit();
-            proifat.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proifat.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIfatOpenFtg, pa.bfar, "PRO", p04921Record, "N", proifat.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfatDelete() {
-            p04921Record.set("IFAT");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proIfatInit();
-            proIfat.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfat.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIfatOpenFtg, pa.bfar, "PRO", p04921Record, "D", proifat.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfatStartEg() {
-            p04921Record.set("IFAT");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proIfatInit();
-            proIfat.start("NOT<", "pro_ifat_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfat.start("NOT<", "pro_ifat_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfatStartprevEg() {
-            p04921Record.set("IFAT");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proIfatInit();
-            proIfat.start("NOT>", "pro_ifat_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfat.start("NOT>", "pro_ifat_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIjusInit() {
-            if (proIjusOpen.equals("J") && !(proIjusOpenFtg.equals(pa.bkstvftg))) {
-                proIjusClose();
-            }
-            if (!(proIjusOpen.equals("J"))) {
-                proIjusFilnamn.set(SPACE);
-                proIjusFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/IJUS"));
-                proIjus.open("I-O");
-                proCheck00();
-                proIjusOpen.set("J");
-                proIjusOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proIjusClose() {
-            p04921Record.set("IJUS");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proIjusOpen.equals("J")) {
-                proIjus.close();
-                proCheck00();
-                proIjusOpen.set("N");
-                proIjusOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proIjusRead() {
-            p04921Record.set("IJUS");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proIjusInit();
-            proIjus.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIjus.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIjusReadKl() {
-            p04921Record.set("IJUS");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proIjusInit();
-            proIjus.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proIjus.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIjusReadnext() {
-            p04921Record.set("IJUS");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proIjusInit();
-            proIjus.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIjus.start(">", "pro_ijus_key");
-                if (p04921Dasvar.equals("00")) {
-                    proIjus.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proIjusReadprev() {
-            p04921Record.set("IJUS");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proIjusInit();
-            proIjus.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIjus.start("<", "pro_ijus_key");
-                if (p04921Dasvar.equals("00")) {
-                    proIjus.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proIjusRewrite() {
-            p04921Record.set("IJUS");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proIjusInit();
-            proijus.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIjusOpenFtg, pa.bfar, "PRO", p04921Record, "U", proijus.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIjusWrite() {
-            p04921Record.set("IJUS");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proIjusInit();
-            proijus.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proijus.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIjusOpenFtg, pa.bfar, "PRO", p04921Record, "N", proijus.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIjusDelete() {
-            p04921Record.set("IJUS");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proIjusInit();
-            proIjus.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIjus.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIjusOpenFtg, pa.bfar, "PRO", p04921Record, "D", proijus.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIjusStartEg() {
-            p04921Record.set("IJUS");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proIjusInit();
-            proIjus.start("NOT<", "pro_ijus_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIjus.start("NOT<", "pro_ijus_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIjusStartprevEg() {
-            p04921Record.set("IJUS");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proIjusInit();
-            proIjus.start("NOT>", "pro_ijus_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIjus.start("NOT>", "pro_ijus_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIjubInit() {
-            if (proIjubOpen.equals("J") && !(proIjubOpenFtg.equals(pa.bkstvftg))) {
-                proIjubClose();
-            }
-            if (!(proIjubOpen.equals("J"))) {
-                proIjubFilnamn.set(SPACE);
-                proIjubFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/IJUB"));
-                proIjub.open("I-O");
-                proCheck00();
-                proIjubOpen.set("J");
-                proIjubOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proIjubClose() {
-            p04921Record.set("IJUB");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proIjubOpen.equals("J")) {
-                proIjub.close();
-                proCheck00();
-                proIjubOpen.set("N");
-                proIjubOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proIjubRead() {
-            p04921Record.set("IJUB");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proIjubInit();
-            proIjub.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIjub.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIjubReadKl() {
-            p04921Record.set("IJUB");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proIjubInit();
-            proIjub.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proIjub.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIjubReadnext() {
-            p04921Record.set("IJUB");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proIjubInit();
-            proIjub.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIjub.start(">", "pro_ijub_key");
-                if (p04921Dasvar.equals("00")) {
-                    proIjub.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proIjubReadprev() {
-            p04921Record.set("IJUB");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proIjubInit();
-            proIjub.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIjub.start("<", "pro_ijub_key");
-                if (p04921Dasvar.equals("00")) {
-                    proIjub.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proIjubRewrite() {
-            p04921Record.set("IJUB");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proIjubInit();
-            proijub.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIjubOpenFtg, pa.bfar, "PRO", p04921Record, "U", proijub.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIjubWrite() {
-            p04921Record.set("IJUB");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proIjubInit();
-            proijub.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proijub.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIjubOpenFtg, pa.bfar, "PRO", p04921Record, "N", proijub.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIjubDelete() {
-            p04921Record.set("IJUB");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proIjubInit();
-            proIjub.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIjub.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIjubOpenFtg, pa.bfar, "PRO", p04921Record, "D", proijub.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIjubStartEg() {
-            p04921Record.set("IJUB");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proIjubInit();
-            proIjub.start("NOT<", "pro_ijub_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIjub.start("NOT<", "pro_ijub_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIjubStartprevEg() {
-            p04921Record.set("IJUB");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proIjubInit();
-            proIjub.start("NOT>", "pro_ijub_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIjub.start("NOT>", "pro_ijub_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfaaInit() {
-            if (proIfaaOpen.equals("J") && !(proIfaaOpenFtg.equals(pa.bkstvftg))) {
-                proIfaaClose();
-            }
-            if (!(proIfaaOpen.equals("J"))) {
-                proIfaaFilnamn.set(SPACE);
-                proIfaaFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/IFAA"));
-                proIfaa.open("I-O");
-                proCheck00();
-                proIfaaOpen.set("J");
-                proIfaaOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proIfaaClose() {
-            p04921Record.set("IFAA");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proIfaaOpen.equals("J")) {
-                proIfaa.close();
-                proCheck00();
-                proIfaaOpen.set("N");
-                proIfaaOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfaaRead() {
-            p04921Record.set("IFAA");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proIfaaInit();
-            proIfaa.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfaa.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfaaReadKl() {
-            p04921Record.set("IFAA");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proIfaaInit();
-            proIfaa.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proIfaa.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfaaReadnext() {
-            p04921Record.set("IFAA");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proIfaaInit();
-            proIfaa.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfaa.start(">", "pro_ifaa_key");
-                if (p04921Dasvar.equals("00")) {
-                    proIfaa.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proIfaaReadprev() {
-            p04921Record.set("IFAA");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proIfaaInit();
-            proIfaa.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfaa.start("<", "pro_ifaa_key");
-                if (p04921Dasvar.equals("00")) {
-                    proIfaa.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proIfaaRewrite() {
-            p04921Record.set("IFAA");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proIfaaInit();
-            proifaa.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIfaaOpenFtg, pa.bfar, "PRO", p04921Record, "U", proifaa.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfaaWrite() {
-            p04921Record.set("IFAA");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proIfaaInit();
-            proifaa.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proifaa.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIfaaOpenFtg, pa.bfar, "PRO", p04921Record, "N", proifaa.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfaaDelete() {
-            p04921Record.set("IFAA");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proIfaaInit();
-            proIfaa.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfaa.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIfaaOpenFtg, pa.bfar, "PRO", p04921Record, "D", proifaa.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfaaStartEg() {
-            p04921Record.set("IFAA");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proIfaaInit();
-            proIfaa.start("NOT<", "pro_ifaa_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfaa.start("NOT<", "pro_ifaa_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfaaStartprevEg() {
-            p04921Record.set("IFAA");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proIfaaInit();
-            proIfaa.start("NOT>", "pro_ifaa_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfaa.start("NOT>", "pro_ifaa_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proKunbInit() {
-            if (proKunbOpen.equals("J") && !(proKunbOpenFtg.equals(pa.bkstvftg))) {
-                proKunbClose();
-            }
-            if (!(proKunbOpen.equals("J"))) {
-                proKunbFilnamn.set(SPACE);
-                proKunbFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/KUNB"));
-                proKunb.open("I-O");
-                proCheck00();
-                proKunbOpen.set("J");
-                proKunbOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proKunbClose() {
-            p04921Record.set("KUNB");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proKunbOpen.equals("J")) {
-                proKunb.close();
-                proCheck00();
-                proKunbOpen.set("N");
-                proKunbOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proKunbRead() {
-            p04921Record.set("KUNB");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proKunbInit();
-            proKunb.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proKunb.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proKunbReadKl() {
-            p04921Record.set("KUNB");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proKunbInit();
-            proKunb.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proKunb.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proKunbReadnext() {
-            p04921Record.set("KUNB");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proKunbInit();
-            proKunb.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proKunb.start(">", "pro_kunb_key");
-                if (p04921Dasvar.equals("00")) {
-                    proKunb.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proKunbReadprev() {
-            p04921Record.set("KUNB");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proKunbInit();
-            proKunb.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proKunb.start("<", "pro_kunb_key");
-                if (p04921Dasvar.equals("00")) {
-                    proKunb.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proKunbRewrite() {
-            p04921Record.set("KUNB");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proKunbInit();
-            prokunb.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proKunbOpenFtg, pa.bfar, "PRO", p04921Record, "U", prokunb.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proKunbWrite() {
-            p04921Record.set("KUNB");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proKunbInit();
-            prokunb.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                prokunb.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proKunbOpenFtg, pa.bfar, "PRO", p04921Record, "N", prokunb.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proKunbDelete() {
-            p04921Record.set("KUNB");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proKunbInit();
-            proKunb.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proKunb.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proKunbOpenFtg, pa.bfar, "PRO", p04921Record, "D", prokunb.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proKunbStartEg() {
-            p04921Record.set("KUNB");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proKunbInit();
-            proKunb.start("NOT<", "pro_kunb_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proKunb.start("NOT<", "pro_kunb_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proKunbStartprevEg() {
-            p04921Record.set("KUNB");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proKunbInit();
-            proKunb.start("NOT>", "pro_kunb_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proKunb.start("NOT>", "pro_kunb_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfapInit() {
-            if (proIfapOpen.equals("J") && !(proIfapOpenFtg.equals(pa.bkstvftg))) {
-                proIfapClose();
-            }
-            if (!(proIfapOpen.equals("J"))) {
-                proIfapFilnamn.set(SPACE);
-                proIfapFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/IFAP"));
-                proIfap.open("I-O");
-                proCheck00();
-                proIfapOpen.set("J");
-                proIfapOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proIfapClose() {
-            p04921Record.set("IFAP");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proIfapOpen.equals("J")) {
-                proIfap.close();
-                proCheck00();
-                proIfapOpen.set("N");
-                proIfapOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfapRead() {
-            p04921Record.set("IFAP");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proIfapInit();
-            proIfap.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfap.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfapReadKl() {
-            p04921Record.set("IFAP");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proIfapInit();
-            proIfap.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proIfap.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfapReadnext() {
-            p04921Record.set("IFAP");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proIfapInit();
-            proIfap.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfap.start(">", "pro_ifap_key");
-                if (p04921Dasvar.equals("00")) {
-                    proIfap.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proIfapReadprev() {
-            p04921Record.set("IFAP");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proIfapInit();
-            proIfap.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfap.start("<", "pro_ifap_key");
-                if (p04921Dasvar.equals("00")) {
-                    proIfap.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proIfapRewrite() {
-            p04921Record.set("IFAP");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proIfapInit();
-            proifap.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIfapOpenFtg, pa.bfar, "PRO", p04921Record, "U", proifap.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfapWrite() {
-            p04921Record.set("IFAP");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proIfapInit();
-            proifap.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proifap.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIfapOpenFtg, pa.bfar, "PRO", p04921Record, "N", proifap.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfapDelete() {
-            p04921Record.set("IFAP");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proIfapInit();
-            proIfap.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfap.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIfapOpenFtg, pa.bfar, "PRO", p04921Record, "D", proifap.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfapStartEg() {
-            p04921Record.set("IFAP");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proIfapInit();
-            proIfap.start("NOT<", "pro_ifap_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfap.start("NOT<", "pro_ifap_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfapStartprevEg() {
-            p04921Record.set("IFAP");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proIfapInit();
-            proIfap.start("NOT>", "pro_ifap_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfap.start("NOT>", "pro_ifap_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRepuInit() {
-            if (proRepuOpen.equals("J") && !(proRepuOpenFtg.equals(pa.bkstvftg))) {
-                proRepuClose();
-            }
-            if (!(proRepuOpen.equals("J"))) {
-                proRepuFilnamn.set(SPACE);
-                proRepuFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/REPU"));
-                proRepu.open("I-O");
-                proCheck00();
-                proRepuOpen.set("J");
-                proRepuOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proRepuClose() {
-            p04921Record.set("REPU");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proRepuOpen.equals("J")) {
-                proRepu.close();
-                proCheck00();
-                proRepuOpen.set("N");
-                proRepuOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proRepuRead() {
-            p04921Record.set("REPU");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proRepuInit();
-            proRepu.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRepu.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRepuReadKl() {
-            p04921Record.set("REPU");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proRepuInit();
-            proRepu.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proRepu.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRepuReadnext() {
-            p04921Record.set("REPU");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proRepuInit();
-            proRepu.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRepu.start(">", "pro_repu_key");
-                if (p04921Dasvar.equals("00")) {
-                    proRepu.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proRepuReadprev() {
-            p04921Record.set("REPU");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proRepuInit();
-            proRepu.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRepu.start("<", "pro_repu_key");
-                if (p04921Dasvar.equals("00")) {
-                    proRepu.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proRepuRewrite() {
-            p04921Record.set("REPU");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proRepuInit();
-            prorepu.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRepuOpenFtg, pa.bfar, "PRO", p04921Record, "U", prorepu.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRepuWrite() {
-            p04921Record.set("REPU");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proRepuInit();
-            prorepu.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                prorepu.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRepuOpenFtg, pa.bfar, "PRO", p04921Record, "N", prorepu.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRepuDelete() {
-            p04921Record.set("REPU");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proRepuInit();
-            proRepu.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRepu.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proRepuOpenFtg, pa.bfar, "PRO", p04921Record, "D", prorepu.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proRepuStartEg() {
-            p04921Record.set("REPU");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proRepuInit();
-            proRepu.start("NOT<", "pro_repu_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRepu.start("NOT<", "pro_repu_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proRepuStartprevEg() {
-            p04921Record.set("REPU");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proRepuInit();
-            proRepu.start("NOT>", "pro_repu_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proRepu.start("NOT>", "pro_repu_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOgrpInit() {
-            if (proOgrpOpen.equals("J") && !(proOgrpOpenFtg.equals(pa.bkstvftg))) {
-                proOgrpClose();
-            }
-            if (!(proOgrpOpen.equals("J"))) {
-                proOgrpFilnamn.set(SPACE);
-                proOgrpFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/OGRP"));
-                proOgrp.open("I-O");
-                proCheck00();
-                proOgrpOpen.set("J");
-                proOgrpOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proOgrpClose() {
-            p04921Record.set("OGRP");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proOgrpOpen.equals("J")) {
-                proOgrp.close();
-                proCheck00();
-                proOgrpOpen.set("N");
-                proOgrpOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proOgrpRead() {
-            p04921Record.set("OGRP");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proOgrpInit();
-            proOgrp.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOgrp.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOgrpReadKl() {
-            p04921Record.set("OGRP");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proOgrpInit();
-            proOgrp.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proOgrp.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOgrpReadnext() {
-            p04921Record.set("OGRP");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proOgrpInit();
-            proOgrp.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOgrp.start(">", "pro_ogrp_key");
-                if (p04921Dasvar.equals("00")) {
-                    proOgrp.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proOgrpReadprev() {
-            p04921Record.set("OGRP");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proOgrpInit();
-            proOgrp.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOgrp.start("<", "pro_ogrp_key");
-                if (p04921Dasvar.equals("00")) {
-                    proOgrp.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proOgrpRewrite() {
-            p04921Record.set("OGRP");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proOgrpInit();
-            proogrp.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proOgrpOpenFtg, pa.bfar, "PRO", p04921Record, "U", proogrp.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proOgrpWrite() {
-            p04921Record.set("OGRP");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proOgrpInit();
-            proogrp.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proogrp.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proOgrpOpenFtg, pa.bfar, "PRO", p04921Record, "N", proogrp.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proOgrpDelete() {
-            p04921Record.set("OGRP");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proOgrpInit();
-            proOgrp.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOgrp.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proOgrpOpenFtg, pa.bfar, "PRO", p04921Record, "D", proogrp.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proOgrpStartEg() {
-            p04921Record.set("OGRP");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proOgrpInit();
-            proOgrp.start("NOT<", "pro_ogrp_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOgrp.start("NOT<", "pro_ogrp_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOgrpStartprevEg() {
-            p04921Record.set("OGRP");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proOgrpInit();
-            proOgrp.start("NOT>", "pro_ogrp_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOgrp.start("NOT>", "pro_ogrp_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOogrInit() {
-            if (proOogrOpen.equals("J") && !(proOogrOpenFtg.equals(pa.bkstvftg))) {
-                proOogrClose();
-            }
-            if (!(proOogrOpen.equals("J"))) {
-                proOogrFilnamn.set(SPACE);
-                proOogrFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/OOGR"));
-                proOogr.open("I-O");
-                proCheck00();
-                proOogrOpen.set("J");
-                proOogrOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proOogrClose() {
-            p04921Record.set("OOGR");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proOogrOpen.equals("J")) {
-                proOogr.close();
-                proCheck00();
-                proOogrOpen.set("N");
-                proOogrOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proOogrRead() {
-            p04921Record.set("OOGR");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proOogrInit();
-            proOogr.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOogr.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOogrReadKl() {
-            p04921Record.set("OOGR");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proOogrInit();
-            proOogr.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proOogr.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOogrReadnext() {
-            p04921Record.set("OOGR");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proOogrInit();
-            proOogr.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOogr.start(">", "pro_oogr_key");
-                if (p04921Dasvar.equals("00")) {
-                    proOogr.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proOogrReadprev() {
-            p04921Record.set("OOGR");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proOogrInit();
-            proOogr.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOogr.start("<", "pro_oogr_key");
-                if (p04921Dasvar.equals("00")) {
-                    proOogr.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proOogrRewrite() {
-            p04921Record.set("OOGR");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proOogrInit();
-            prooogr.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proOogrOpenFtg, pa.bfar, "PRO", p04921Record, "U", prooogr.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proOogrWrite() {
-            p04921Record.set("OOGR");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proOogrInit();
-            prooogr.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                prooogr.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proOogrOpenFtg, pa.bfar, "PRO", p04921Record, "N", prooogr.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proOogrDelete() {
-            p04921Record.set("OOGR");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proOogrInit();
-            proOogr.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOogr.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proOogrOpenFtg, pa.bfar, "PRO", p04921Record, "D", prooogr.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proOogrStartEg() {
-            p04921Record.set("OOGR");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proOogrInit();
-            proOogr.start("NOT<", "pro_oogr_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOogr.start("NOT<", "pro_oogr_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proOogrStartprevEg() {
-            p04921Record.set("OOGR");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proOogrInit();
-            proOogr.start("NOT>", "pro_oogr_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proOogr.start("NOT>", "pro_oogr_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfasInit() {
-            if (proIfasOpen.equals("J") && !(proIfasOpenFtg.equals(pa.bkstvftg))) {
-                proIfasClose();
-            }
-            if (!(proIfasOpen.equals("J"))) {
-                proIfasFilnamn.set(SPACE);
-                proIfasFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/IFAS"));
-                proIfas.open("I-O");
-                proCheck00();
-                proIfasOpen.set("J");
-                proIfasOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proIfasClose() {
-            p04921Record.set("IFAS");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proIfasOpen.equals("J")) {
-                proIfas.close();
-                proCheck00();
-                proIfasOpen.set("N");
-                proIfasOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfasRead() {
-            p04921Record.set("IFAS");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proIfasInit();
-            proIfas.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfas.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfasReadKl() {
-            p04921Record.set("IFAS");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proIfasInit();
-            proIfas.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proIfas.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfasReadnext() {
-            p04921Record.set("IFAS");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proIfasInit();
-            proIfas.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfas.start(">", "pro_ifas_key");
-                if (p04921Dasvar.equals("00")) {
-                    proIfas.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proIfasReadprev() {
-            p04921Record.set("IFAS");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proIfasInit();
-            proIfas.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfas.start("<", "pro_ifas_key");
-                if (p04921Dasvar.equals("00")) {
-                    proIfas.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proIfasRewrite() {
-            p04921Record.set("IFAS");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proIfasInit();
-            proifas.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIfasOpenFtg, pa.bfar, "PRO", p04921Record, "U", proifas.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfasWrite() {
-            p04921Record.set("IFAS");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proIfasInit();
-            proifas.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proifas.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIfasOpenFtg, pa.bfar, "PRO", p04921Record, "N", proifas.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfasDelete() {
-            p04921Record.set("IFAS");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proIfasInit();
-            proIfas.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfas.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proIfasOpenFtg, pa.bfar, "PRO", p04921Record, "D", proifas.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proIfasStartEg() {
-            p04921Record.set("IFAS");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proIfasInit();
-            proIfas.start("NOT<", "pro_ifas_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfas.start("NOT<", "pro_ifas_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proIfasStartprevEg() {
-            p04921Record.set("IFAS");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proIfasInit();
-            proIfas.start("NOT>", "pro_ifas_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proIfas.start("NOT>", "pro_ifas_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTlgeInit() {
-            if (proTlgeOpen.equals("J") && !(proTlgeOpenFtg.equals(pa.bkstvftg))) {
-                proTlgeClose();
-            }
-            if (!(proTlgeOpen.equals("J"))) {
-                proTlgeFilnamn.set(SPACE);
-                proTlgeFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/TLGE"));
-                proTlge.open("I-O");
-                proCheck00();
-                proTlgeOpen.set("J");
-                proTlgeOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proTlgeClose() {
-            p04921Record.set("TLGE");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proTlgeOpen.equals("J")) {
-                proTlge.close();
-                proCheck00();
-                proTlgeOpen.set("N");
-                proTlgeOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proTlgeRead() {
-            p04921Record.set("TLGE");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proTlgeInit();
-            proTlge.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTlge.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTlgeReadKl() {
-            p04921Record.set("TLGE");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proTlgeInit();
-            proTlge.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proTlge.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTlgeReadnext() {
-            p04921Record.set("TLGE");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proTlgeInit();
-            proTlge.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTlge.start(">", "pro_tlge_key");
-                if (p04921Dasvar.equals("00")) {
-                    proTlge.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proTlgeReadnextK2() {
-            p04921Record.set("TLGE");
-            p04921Action.set("READNEXT-K2");
-            proFilhantInit();
-            proTlgeInit();
-            proTlge.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTlge.start(">", "pro_tlge_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proTlge.readNext();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proTlgeReadprev() {
-            p04921Record.set("TLGE");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proTlgeInit();
-            proTlge.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTlge.start("<", "pro_tlge_key");
-                if (p04921Dasvar.equals("00")) {
-                    proTlge.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proTlgeReadprevK2() {
-            p04921Record.set("TLGE");
-            p04921Action.set("READPREV-K2");
-            proFilhantInit();
-            proTlgeInit();
-            proTlge.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTlge.start("<", "pro_tlge_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proTlge.readPrevious();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proTlgeRewrite() {
-            p04921Record.set("TLGE");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proTlgeInit();
-            protlge.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTlgeOpenFtg, pa.bfar, "PRO", p04921Record, "U", protlge.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTlgeWrite() {
-            p04921Record.set("TLGE");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proTlgeInit();
-            protlge.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                protlge.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTlgeOpenFtg, pa.bfar, "PRO", p04921Record, "N", protlge.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTlgeDelete() {
-            p04921Record.set("TLGE");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proTlgeInit();
-            proTlge.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTlge.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTlgeOpenFtg, pa.bfar, "PRO", p04921Record, "D", protlge.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTlgeStartEg() {
-            p04921Record.set("TLGE");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proTlgeInit();
-            proTlge.start("NOT<", "pro_tlge_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTlge.start("NOT<", "pro_tlge_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTlgeStartEgK2() {
-            p04921Record.set("TLGE");
-            p04921Action.set("START-EG-K2");
-            proFilhantInit();
-            proTlgeInit();
-            proTlge.start("NOT<", "pro_tlge_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTlge.start("NOT<", "pro_tlge_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proTlgeStartprevEg() {
-            p04921Record.set("TLGE");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proTlgeInit();
-            proTlge.start("NOT>", "pro_tlge_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTlge.start("NOT>", "pro_tlge_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTlgeStartprevEgK2() {
-            p04921Record.set("TLGE");
-            p04921Action.set("STARTPREV-EG-K2");
-            proFilhantInit();
-            proTlgeInit();
-            proTlge.start("NOT>", "pro_tlge_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTlge.start("NOT>", "pro_tlge_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proTlgtInit() {
-            if (proTlgtOpen.equals("J") && !(proTlgtOpenFtg.equals(pa.bkstvftg))) {
-                proTlgtClose();
-            }
-            if (!(proTlgtOpen.equals("J"))) {
-                proTlgtFilnamn.set(SPACE);
-                proTlgtFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/TLGT"));
-                proTlgt.open("I-O");
-                proCheck00();
-                proTlgtOpen.set("J");
-                proTlgtOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proTlgtClose() {
-            p04921Record.set("TLGT");
-            p04921Action.set("CLOSE");
-            proFilhantInit();
-            if (proTlgtOpen.equals("J")) {
-                proTlgt.close();
-                proTlgtOpen.set("N");
-                proTlgtOpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proTlgtRead() {
-            p04921Record.set("TLGT");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proTlgtInit();
-            proTlgt.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTlgt.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTlgtReadKl() {
-            p04921Record.set("TLGT");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proTlgtInit();
-            proTlgt.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proTlgt.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTlgtReadnext() {
-            p04921Record.set("TLGT");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proTlgtInit();
-            proTlgt.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTlgt.start(">", "pro_tlgt_key");
-                if (p04921Dasvar.equals("00")) {
-                    proTlgt.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proTlgtReadprev() {
-            p04921Record.set("TLGT");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proTlgtInit();
-            proTlgt.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTlgt.start("<", "pro_tlgt_key");
-                if (p04921Dasvar.equals("00")) {
-                    proTlgt.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proTlgtRewrite() {
-            p04921Record.set("TLGT");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proTlgtInit();
-            protlgt.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTlgtOpenFtg, pa.bfar, "PRO", p04921Record, "U", protlgt.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTlgtWrite() {
-            p04921Record.set("TLGT");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proTlgtInit();
-            protlgt.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                protlgt.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTlgtOpenFtg, pa.bfar, "PRO", p04921Record, "N", protlgt.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTlgtDelete() {
-            p04921Record.set("TLGT");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proTlgtInit();
-            proTlgt.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTlgt.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTlgtOpenFtg, pa.bfar, "PRO", p04921Record, "D", protlgt.get().post);
-            proFilhantExit();
-        private void proTlgtStartEg() {
-            p04921Record.set("TLGT");
-            p04921Action.set("START-EG");
-            proTlgtInit();
-            proTlgt.start("NOT<", "pro_tlgt_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTlgt.start("NOT<", "pro_tlgt_key");
-            proCheck0023();
-        private void proTlgtStartprevEg() {
-            p04921Record.set("TLGT");
-            p04921Action.set("STARTPREV-EG");
-            proTlgtInit();
-            proTlgt.start("NOT>", "pro_tlgt_key");
-                proTlgt.start("NOT>", "pro_tlgt_key");
-        private void proSalaInit() {
-            if (proSalaOpen.equals("J") && !(proSalaOpenFtg.equals(pa.bkstvftg))) {
-                proSalaClose();
-            }
-            if (!(proSalaOpen.equals("J"))) {
-                proSalaFilnamn.set(SPACE);
-                proSalaFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/SALA"));
-                proSala.open("I-O");
-                proSalaOpen.set("J");
-                proSalaOpenFtg.set(pa.bkstvftg);
-        private void proSalaClose() {
-            p04921Record.set("SALA");
-            p04921Action.set("CLOSE");
-            if (proSalaOpen.equals("J")) {
-                proSala.close();
-                proSalaOpen.set("N");
-                proSalaOpenFtg.set(SPACE);
-        private void proSalaRead() {
-            p04921Record.set("SALA");
-            p04921Action.set("READ");
-            proSalaInit();
-            proSala.read();
-                proSala.read();
-        private void proSalaReadKl() {
-            p04921Record.set("SALA");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proSalaInit();
-            proSala.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proSala.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        private void proSalaReadnext() {
-            p04921Record.set("SALA");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proSalaInit();
-            proSala.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proSala.start(">", "pro_sala_key");
-                if (p04921Dasvar.equals("00")) {
-                    proSala.readNext();
-                }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proSalaReadprev() {
-            p04921Record.set("SALA");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proSalaInit();
-            proSala.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proSala.start("<", "pro_sala_key");
-                if (p04921Dasvar.equals("00")) {
-                    proSala.readPrevious();
-                }
-            proCheck0010();
-            proFilhantExit();
-        private void proSalaRewrite() {
-            p04921Record.set("SALA");
-            p04921Action.set("REWRITE");
-            proSalaInit();
-            prosala.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proSalaOpenFtg, pa.bfar, "PRO", p04921Record, "U", prosala.get().post);
-        private void proSalaWrite() {
-            p04921Record.set("SALA");
-            p04921Action.set("WRITE");
-            proSalaInit();
-            prosala.get().post.write();
-                prosala.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proSalaOpenFtg, pa.bfar, "PRO", p04921Record, "N", prosala.get().post);
-        private void proSalaDelete() {
-            p04921Record.set("SALA");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proSalaInit();
-            proSala.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proSala.delete();
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proSalaOpenFtg, pa.bfar, "PRO", p04921Record, "D", prosala.get().post);
-            proFilhantExit();
-        private void proSalaStartEg() {
-            p04921Record.set("SALA");
-            p04921Action.set("START-EG");
-            proSalaInit();
-            proSala.start("NOT<", "pro_sala_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proSala.start("NOT<", "pro_sala_key");
-            proCheck0023();
-        private void proSalaStartprevEg() {
-            p04921Record.set("SALA");
-            p04921Action.set("STARTPREV-EG");
-            proSalaInit();
-            proSala.start("NOT>", "pro_sala_key");
-                proSala.start("NOT>", "pro_sala_key");
-        private void proSataInit() {
-            if (proSataOpen.equals("J") && !(proSataOpenFtg.equals(pa.bkstvftg))) {
-                proSataClose();
-            }
-            if (!(proSataOpen.equals("J"))) {
-                proSataFilnamn.set(SPACE);
-                proSataFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/SATA"));
-                proSata.open("I-O");
-                proSataOpen.set("J");
-                proSataOpenFtg.set(pa.bkstvftg);
-        private void proSataClose() {
-            p04921Record.set("SATA");
-            if (proSataOpen.equals("J")) {
-                proSata.close();
-                proSataOpen.set("N");
-                proSataOpenFtg.set(SPACE);
-        private void proSataRead() {
-            p04921Record.set("SATA");
-            proSataInit();
-            proSata.read();
-                proSata.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proSataReadKl() {
-            p04921Record.set("SATA");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proSataInit();
-            proSata.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proSata.readWithLock();
-        private void proSataReadnext() {
-            p04921Record.set("SATA");
-            proSataInit();
-            proSata.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proSata.start(">", "pro_sata_key");
-                if (p04921Dasvar.equals("00")) {
-                    proSata.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proSataReadprev() {
-            p04921Record.set("SATA");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proSataInit();
-            proSata.readPrevious();
-                proSata.start("<", "pro_sata_key");
-                    proSata.readPrevious();
-        private void proSataRewrite() {
-            p04921Record.set("SATA");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proSataInit();
-            prosata.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proSataOpenFtg, pa.bfar, "PRO", p04921Record, "U", prosata.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proSataWrite() {
-            p04921Record.set("SATA");
-            p04921Action.set("WRITE");
-            proSataInit();
-            prosata.get().post.write();
-                prosata.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proSataOpenFtg, pa.bfar, "PRO", p04921Record, "N", prosata.get().post);
-        private void proSataDelete() {
-            p04921Record.set("SATA");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proSataInit();
-            proSata.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proSata.delete();
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proSataOpenFtg, pa.bfar, "PRO", p04921Record, "D", prosata.get().post);
-            proFilhantExit();
-        private void proSataStartEg() {
-            p04921Record.set("SATA");
-            p04921Action.set("START-EG");
-            proSataInit();
-            proSata.start("NOT<", "pro_sata_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proSata.start("NOT<", "pro_sata_key");
-            proCheck0023();
-        private void proSataStartprevEg() {
-            p04921Record.set("SATA");
-            p04921Action.set("STARTPREV-EG");
-            proSataInit();
-            proSata.start("NOT>", "pro_sata_key");
-                proSata.start("NOT>", "pro_sata_key");
-        private void proFileCommit() {
-            p04921Record.set("FILE");
-            p04921Action.set("COMMIT");
-            proFilhantInit();
-            unlockFiles();
-            proFilhantExit();
-        }
-
-        private void proFileOpenAll() {
-            p04921Record.set("FILE");
-            p04921Action.set("OPEN-ALL");
-            proFilhantInit();
-            p04921Namnftg.set(pa.namnftg);
-            p04921Dasvar.set("00");
-            proFilhantExit();
-        }
-
-        private void proFileOpenI() {
-            p04921Record.set("FILE");
-            p04921Action.set("OPEN-I");
-            proFilhantInit();
-            p04921Namnftg.set(pa.namnftg);
-            p04921Dasvar.set("00");
-            proFilhantExit();
-        }
-
-        private void proFileClose() {
-            p04921Record.set("FILE");
-            p04921Action.set("CLOSE");
-            proFileCloseAll();
-        }
-
-        private void proFileCloseAll() {
-            p04921Record.set("FILE");
-            p04921Action.set("CLOSE-ALL");
-            proFilhantInit();
-            proFil1Close();
-            proFil2Close();
-            proFil21Close();
-            proDefkClose();
-            proTidrClose();
-            proStatClose();
-            proFaktClose();
-            proTidgClose();
-            proBokfClose();
-            proUndlClose();
-            proAvtpClose();
-            proBenkClose();
-            proResrClose();
-            proFradClose();
-            proBildClose();
-            proVandClose();
-            proJarvClose();
-            proJinkClose();
-            proJmatClose();
-            proRappClose();
-            proOverClose();
-            proKbudClose();
-            proPfriClose();
-            proFkunClose();
-            proPrfrClose();
-            proKperClose();
-            proTidwClose();
-            proBudwClose();
-            proBudaClose();
-            proBudiClose();
-            proBudoClose();
-            proTidfClose();
-            proTidoClose();
-            proOfhuClose();
-            proOfraClose();
-            proOfprClose();
-            proPma1Close();
-            proPma2Close();
-            proRrapClose();
-            proRkolClose();
-            proRbegClose();
-            proRselClose();
-            proFateClose();
-            proFaanClose();
-            proFaauClose();
-            proRkopClose();
-            proLahuClose();
-            proLaprClose();
-            proPnotClose();
-            proRbehClose();
-            proBudtClose();
-            proReplClose();
-            proAgrpClose();
-            proTidmClose();
-            proBefaClose();
-            proIfakClose();
-            proIfabClose();
-            proIfatClose();
-            proIjusClose();
-            proIjubClose();
-            proIfaaClose();
-            proKunbClose();
-            proIfapClose();
-            proRepuClose();
-            proOgrpClose();
-            proOogrClose();
-            proIfasClose();
-            proTlgeClose();
-            proTlgtClose();
-            proSalaClose();
-            proSataClose();
-            if (!(p04921Namnftg.equals(SPACE))) {
-                pa.namnftg.set(p04921Namnftg);
-            }
-            p04921Dasvar.set("00");
-            proFilhantExit();
-        }
-
-        private void proCheck000210() {
-            if (!((p04921Dasvar.equalsEither("00", "02", "10")))) {
-                proAbort();
-            }
-        }
-
-        private void proCheck000222() {
-            if (!((p04921Dasvar.equalsEither("00", "02", "22")))) {
-                proAbort();
-            }
-        }
-
-        private void proCheck000223() {
-            if (!((p04921Dasvar.equalsEither("00", "02", "23")))) {
-                proAbort();
-            }
-        }
-
-    private void proFilhantDummy() {
-        // COPY "SRC/BOK/LIB/RKTOPOST.PRD". 
-        // COPY "SRC/BOK/LIB/VPERPOST.PRD". 
-        // COPY "SRC/KUN/LIB/RARAPOST.PRD". 
-        // COPY "SRC/LEV/LIB/LEVEPOST.PRD". 
-        // COPY "SRC/LEV/LIB/KATEPOST.PRD". 
-        // COPY "SRC/GEM/LIB/BKUNPOST.PRD". 
-        // COPY "SRC/GEM/LIB/KAMPPOST.PRD". 
-        // COPY "SRC/GEM/LIB/REFNPOST.PRD". 
-        // COPY "SRC/GEM/LIB/AKTUPOST.PRD". 
-    }
-
--- a/server.src/prg/med/Bim.java
-    private lib.med.Vduram vduram=new lib.med.Vduram(Bim.this);
-    private Field stdVal = new Field("9");
-    private Field stdKey = new Field("999");
-    private Field unixSystem = new Field("X(6)", "SYSTEM");
-    private Field fuserlimitclientsEof = new Field("X");
-    private Field fbudgetclientsEof = new Field("X");
-    private Field fclientsEof = new Field("X");
-    private Field fclientsmedEof = new Field("X");
-    private Field fclientagreementsEof = new Field("X");
-    private Field fcollclientsEof = new Field("X");
-    private Field fcollproductsEof = new Field("X");
-    private Field fproductsEof = new Field("X");
-    private Field fcampaignsEof = new Field("X");
-    private Field frefsEof = new Field("X");
-    private Field fclientcatsEof = new Field("X");
-    private Field fgroupsEof = new Field("X");
-    private Field fgroupsmedEof = new Field("X");
-    private Field fdigitalchannelsEof = new Field("X");
-    private Field funitsEof = new Field("X");
-    private Field fagreementsEof = new Field("X");
-    private Field fagreementmediatypesEof = new Field("X");
-    private Field fagreementspecialsEof = new Field("X");
-    private Field fsurchagreesEof = new Field("X");
-    private Field fsurchagreemediatypesEof = new Field("X");
-    private Field fsurchagreemediasEof = new Field("X");
-    private Field fcollpublishersEof = new Field("X");
-    private Field fpublishersEof = new Field("X");
-    private Field fmediabrandsEof = new Field("X");
-    private Field fmedstatcodesEof = new Field("X");
-    private Field fmediasEof = new Field("X");
-    private Field flocalmediasEof = new Field("X");
-    private Field fmediaclassesEof = new Field("X");
-    private Field fcollmediatypesEof = new Field("X");
-    private Field fmediatypesEof = new Field("X");
-    private Field fsurchargecodesEof = new Field("X");
-    private Field fdiscountcodesEof = new Field("X");
-    private Field fagenciesEof = new Field("X");
-    private Field fplansEof = new Field("X");
-    private Field fordersEof = new Field("X");
-    private Field forderpackagesEof = new Field("X");
-    private Field finsertionpackagesEof = new Field("X");
-    private Field fallocationsEof = new Field("X");
-    private Field finsertionsEof = new Field("X");
-    private Field fpricerowsEof = new Field("X");
-    private Field fpreinvoicesEof = new Field("X");
-    private Field fcinvoicesEof = new Field("X");
-    private Field fcinvoicerowsEof = new Field("X");
-    private Field fagencyadjustmentsEof = new Field("X");
-    private Field fminvoicesEof = new Field("X");
-    private Field fminvoicerowsEof = new Field("X");
-    private Field fsettleddiscrepanciesEof = new Field("X");
-    private Field freconciliationsEof = new Field("X");
-    private Field fmunbookedinvoicesEof = new Field("X");
-    private Field wsMediatypeName = new Field("X(50)");
-    private Field wsRab1Name = new Field("X(50)");
-    private Field wsRab2Name = new Field("X(50)");
-    private Field wsRab3Name = new Field("X(50)");
-    private Field wsRab4Name = new Field("X(50)");
-    private Field momskod = new Field("X");
-    private Field momskod1 = new Field("X");
-    private Field momskod2 = new Field("X");
-    private Field momskod3 = new Field("X");
-    private Field momskod4 = new Field("X");
-    private Field momsgrund = new Field("X");
-    private Field typ = new Field("X(4)");
-    private Field momspl = new Field("X");
-    private Field ptyp = new Field("XX");
-    private Field vernr = new Field("9(6)");
-    private Field bfdat = new Field("9(8)");
-    private Field kto = new Field("X(6)");
-    private Field kst = new Field("X(6)");
-    private Field kbr = new Field("X(6)");
-    private Field kund = new Field("X(4)");
-    private Field prod = new Field("X(4)");
-    private Field mediaKey = new Field("X(10)");
-    private Field ordernr = new Field("X(6)");
-    private Field tiKod = new Field("XXX");
-    private Field comm = new Field("X(100)");
-    private Field bel = new Field("S9(9)V99");
-    private Field beh = new Field("X");
-    private void getSizeNameFrad() {
-        lib.med.Fradpost.fd frad=p8921.medfrad.get();
-        lib.med.Formpost.fd form=p8921.medform.get();
-        if (!(frad.format.equals(SPACE))) {
-            form.typ.set("O");
-            form.kod.set(frad.format);
-            p8921.medFormRead();
-            if (pa.ok()) {
-                sizeName.set(form.benamn1);
-            }
-            else {
-                sizeName.set(frad.format);
-            }
-        }
-        else if (!(frad.bredd.equals(ZERO))) {
-            sizeWidthD.set(frad.bredd);
-            while (!(!(sizeWidthD.ref(1,1).equals(SPACE)))) {
-                sizeWidthD.ref(1,1).set(sizeWidthD.ref(2,1));
-                sizeWidthD.ref(2,1).set(sizeWidthD.ref(3,1));
-                sizeWidthD.ref(3,1).set(SPACE);
-            }
-            sizeHeightD.set(frad.hojd);
-            if (sizeHeightD.ref(5,1).equals("0")) {
-                sizeHeightD.ref(4,2).set(SPACE);
-            }
-            while (!(!(sizeHeightD.ref(1,1).equals(SPACE)))) {
-                sizeHeightD.ref(1,1).set(sizeHeightD.ref(2,1));
-                sizeHeightD.ref(2,1).set(sizeHeightD.ref(3,1));
-                sizeHeightD.ref(3,1).set(sizeHeightD.ref(4,1));
-                sizeHeightD.ref(4,1).set(sizeHeightD.ref(5,1));
-                sizeHeightD.ref(5,1).set(SPACE);
-            }
-            sizeName.set(SPACE);
-            sizeName.set(concat(limit(sizeWidthD.ref(1,3),SPACE)," x ",limit(sizeHeightD.ref(1,5),SPACE)));
-        }
-        else {
-            sizeName.set(SPACE);
-        }
-    }
-
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisakod.set("F");
-        stddata.stdVisakod.ref(2).set(pa.txtnr.ref(1));
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisakod);
-    }
-
-    private void z05BlankaMeddelande() {
-        call("prg.bas.visa", pa.paraArea, "F000");
-        pa.txtnr.set(ZERO);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdFunk, stddata.stdKom);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            call("prg.bas.visa", pa.paraArea, "F902");
-        }
-    }
-
-    private void z21Upshift() {
-        z21Konv.toUpper();
-    }
-
--- a/server.src/prg/med/Bip.java
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Bip.this, pa);
-    private lib.pro.Bokfpost probokf=new lib.pro.Bokfpost(Bip.this, pa);
-    private Field fusersEof = new Field("X");
-    private Field fdevicesEof = new Field("X");
-    private Field fuserlimitclientsEof = new Field("X");
-    private Field fclientsEof = new Field("X");
-    private Field fclientsproEof = new Field("X");
-    private Field fcollclientsEof = new Field("X");
-    private Field fclientcatsEof = new Field("X");
-    private Field fcollcollgroupsEof = new Field("X");
-    private Field fcollgroupsEof = new Field("X");
-    private Field fgroupsEof = new Field("X");
-    private Field fgroupsproEof = new Field("X");
-    private Field fprojectsEof = new Field("X");
-    private Field fprojectfreesEof = new Field("X");
-    private Field fjobtypesEof = new Field("X");
-    private Field fprojectlabels1Eof = new Field("X");
-    private Field fprojectlabels2Eof = new Field("X");
-    private Field femployeesEof = new Field("X");
-    private Field fcalendarsEof = new Field("X");
-    private Field fcontractedhoursEof = new Field("X");
-    private Field fteamsEof = new Field("X");
-    private Field fstaffcatsEof = new Field("X");
-    private Field fpositionsEof = new Field("X");
-    private Field ffeecatsEof = new Field("X");
-    private Field fpurchasecatsEof = new Field("X");
-    private Field fothercatsEof = new Field("X");
-    private Field ffeecodesEof = new Field("X");
-    private Field fpurchasecodesEof = new Field("X");
-    private Field fothercodesEof = new Field("X");
-    private Field fprojectbudgetsEof = new Field("X");
-    private Field fprojectbudgetfeesEof = new Field("X");
-    private Field fprojectbudgetpurchasesEof = new Field("X");
-    private Field fprojectbudgetothersEof = new Field("X");
-    private Field ftimereportrowsEof = new Field("X");
-    private Field ftimereports2Eof = new Field("X");
-    private Field ftimereportrows2Eof = new Field("X");
-    private Field ffeeadjustmentsEof = new Field("X");
-    private Field fpurchasesEof = new Field("X");
-    private Field fpurchaseadjustmentsEof = new Field("X");
-    private Field fothersEof = new Field("X");
-    private Field fotheradjustmentsEof = new Field("X");
-    private Field fpinvoicesEof = new Field("X");
-    private Field fpinvoicefeesEof = new Field("X");
-    private Field fpinvoicepurchasesEof = new Field("X");
-    private Field fpinvoiceothersEof = new Field("X");
-    private Field ffeeaggsEof = new Field("X");
-    private Field fprojaggsEof = new Field("X");
-    private Field momskod = new Field("X");
-    private Field typ = new Field("X(4)");
-    private Field momspl = new Field("X");
-    private Field ptyp = new Field("XX");
-    private Field vernr = new Field("9(6)");
-    private Field bfdat = new Field("9(8)");
-    private Field kto = new Field("X(6)");
-    private Field kst = new Field("X(6)");
-    private Field kbr = new Field("X(6)");
-    private Field kund = new Field("X(4)");
-    private Field proj = new Field("9(4)");
-    private Field meda = new Field("X(4)");
-    private Field leve = new Field("X(10)");
-    private Field akod = new Field("XXX");
-    private Field ikod = new Field("XXX");
-    private Field okod = new Field("XXX");
-    private Field comm = new Field("X(100)");
-    private Field bel = new Field("S9(9)V99");
-    private Field wsMomspro = new Field("99V99");
-    private Field wsMomsdec = new Field("X");
-    private Field unixSystem = new Field("X(6)", "SYSTEM");
-    private Field tmpTidwKey = new Field("X(100)");
-    private Field ejSlut = new Field("X");
-    private Field beh = new Field("X");
--- a/server.src/prg/med/Bix.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Bix.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Bix.this);
-    private lib.med.Planpost medplan=new lib.med.Planpost(Bix.this, pa);
-    private lib.med.Pforpost medpfor=new lib.med.Pforpost(Bix.this, pa);
-    private lib.med.Kundpost medkund=new lib.med.Kundpost(Bix.this, pa);
-    private lib.med.Avdepost medavde=new lib.med.Avdepost(Bix.this, pa);
-    private lib.med.Avtapost medavta=new lib.med.Avtapost(Bix.this, pa);
-    private lib.med.Medapost medmeda=new lib.med.Medapost(Bix.this, pa);
-    private lib.med.Tidnpost medtidn=new lib.med.Tidnpost(Bix.this, pa);
-    private lib.med.Samapost medsama=new lib.med.Samapost(Bix.this, pa);
-    private lib.med.Tillpost medtill=new lib.med.Tillpost(Bix.this, pa);
-    private lib.med.Ordepost medorde=new lib.med.Ordepost(Bix.this, pa);
-    private lib.med.Ordppost medordp=new lib.med.Ordppost(Bix.this, pa);
-    private lib.med.Oinfpost medoinf=new lib.med.Oinfpost(Bix.this, pa);
-    private lib.med.Oforpost medofor=new lib.med.Oforpost(Bix.this, pa);
-    private lib.med.Ofpapost medofpa=new lib.med.Ofpapost(Bix.this, pa);
-    private lib.med.Rkgmpost medrkgm=new lib.med.Rkgmpost(Bix.this, pa);
-    private lib.med.Forepost medfore=new lib.med.Forepost(Bix.this, pa);
-    private lib.med.Datab meddatabDa=new lib.med.Datab(Bix.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Bix.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Bix.this);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Bix.this, pa);
-    private lib.pro.Fatepost profate=new lib.pro.Fatepost(Bix.this, pa);
-    private lib.pro.Faanpost profaan=new lib.pro.Faanpost(Bix.this, pa);
-    private lib.pro.Datab prodatabDa=new lib.pro.Datab(Bix.this);
-    private Field xmlP1 = new Field("X(80)");
-    private Field xmlP2 = new Field("X(80)");
-    private Field xmlP3 = new Field("X(80)");
-    private Field xmlP = new Field("X(100)");
-    private Field xmlPPek = new Field("S9(9)");
-    private Field xmlTmpP = new Field("X(100)");
-    private Field xmlTmpPPek = new Field("S9(9)");
-    private Field xmlBelD = new Field("--------9.99");
-    private Field infilEof = new Field("X");
-    private void xmlLeftP1() {
-        xmlP.set(xmlP1);
-        xmlLeft();
-        xmlP1.set(xmlP);
-    }
-
-    private void xmlLeftP2() {
-        xmlP.set(xmlP2);
-        xmlLeft();
-        xmlP2.set(xmlP);
-    }
-
-    private void xmlLeftP3() {
-        xmlP.set(xmlP3);
-        xmlLeft();
-        xmlP3.set(xmlP);
-    }
-
-    private void xmlLeft() {
-        if (!(xmlP.equals(SPACE))) {
-            for (xmlPek.set(1);(!((!(xmlP.ref(xmlPek,1).equals(SPACE)) && !(xmlP.ref(xmlPek,1).equals("0"))) || 
-                            (xmlPek.compareTo(25)>0)));xmlPek.increment(1)) {
-            }
-            xmlTmpRad.set(xmlP.ref(xmlPek));
-            xmlP.set(xmlTmpRad);
-        }
-    }
-
-    private void xmlTalP1() {
-        xmlTal();
-        xmlP1.set(xmlP);
-    }
-
-    private void xmlTalP2() {
-        xmlTal();
-        xmlP2.set(xmlP);
-    }
-
-    private void xmlTalP3() {
-        xmlTal();
-        xmlP3.set(xmlP);
-    }
-
-    private void xmlTal() {
-        xmlBelD.ref(10,1).set(",");
-        if (xmlBelD.ref(11,2).equals("00")) {
-            xmlBelD.ref(10).set(SPACE);
-        }
-        if (xmlBelD.ref(12,1).equals("0")) {
-            xmlBelD.ref(12).set(SPACE);
-        }
-        xmlP.set(xmlBelD.ref(1));
-    }
-
-    private void xmlKonvP1() {
-        xmlP.set(xmlP1);
-        xmlKonv();
-        xmlP1.set(xmlP);
-    }
-
-    private void xmlKonvP2() {
-        xmlP.set(xmlP2);
-        xmlKonv();
-        xmlP2.set(xmlP);
-    }
-
-    private void xmlKonvP3() {
-        xmlP.set(xmlP3);
-        xmlKonv();
-        xmlP3.set(xmlP);
-    }
-
-    private void xmlKonv() {
-        xmlTmpP.set(SPACE);
-        xmlTmpPPek.set(1);
-        xmlPPek.set(1);
-        while (!(xmlPPek.compareTo(80)>0)) {
-            switch (xmlP.ref(xmlPPek,1).getStringValue()) {
-                case "&":
-                    if (xmlTmpPPek.compareTo(96)<=0) {
-                        xmlTmpP.ref(xmlTmpPPek,5).set("&amp;");
-                        xmlTmpPPek.increment(5);
-                    }
-                    break;
-                case "<":
-                    if (xmlTmpPPek.compareTo(97)<=0) {
-                        xmlTmpP.ref(xmlTmpPPek,4).set("&lt;");
-                        xmlTmpPPek.increment(4);
-                    }
-                    break;
-                case ">":
-                    if (xmlTmpPPek.compareTo(97)<=0) {
-                        xmlTmpP.ref(xmlTmpPPek,4).set("&gt;");
-                        xmlTmpPPek.increment(4);
-                    }
-                    break;
-                case "\"":
-                    if (xmlTmpPPek.compareTo(95)<=0) {
-                        xmlTmpP.ref(xmlTmpPPek,6).set("&quot;");
-                        xmlTmpPPek.increment(6);
-                    }
-                    break;
-                default:
-                    if (xmlTmpPPek.compareTo(100)<=0) {
-                        xmlTmpP.ref(xmlTmpPPek,1).set(xmlP.ref(xmlPPek,1));
-                        xmlTmpPPek.increment(1);
-                    }
-            }
-            xmlPPek.increment(1);
-        }
-        xmlP.set(xmlTmpP);
-    }
-
-    private void xmlKonvFrXml() {
-        xmlTmpP.set(SPACE);
-        xmlTmpPPek.set(1);
-        xmlPPek.set(1);
-        while (!(xmlPPek.compareTo(80)>0)) {
-            if (xmlP.ref(xmlPPek,5).equals("&amp;")) {
-                if (xmlTmpPPek.compareTo(100)<=0) {
-                    xmlTmpP.ref(xmlTmpPPek,1).set("&");
-                    xmlTmpPPek.increment(1);
-                }
-                xmlPPek.increment(5);
-            }
-            else if (xmlP.ref(xmlPPek,4).equals("&lt;")) {
-                if (xmlTmpPPek.compareTo(100)<=0) {
-                    xmlTmpP.ref(xmlTmpPPek,1).set("<");
-                    xmlTmpPPek.increment(1);
-                }
-                xmlPPek.increment(4);
-            }
-            else if (xmlP.ref(xmlPPek,4).equals("&gt;")) {
-                if (xmlTmpPPek.compareTo(100)<=0) {
-                    xmlTmpP.ref(xmlTmpPPek,1).set(">");
-                    xmlTmpPPek.increment(1);
-                }
-                xmlPPek.increment(4);
-            }
-            else if (xmlP.ref(xmlPPek,6).equals("&quot;")) {
-                if (xmlTmpPPek.compareTo(100)<=0) {
-                    xmlTmpP.ref(xmlTmpPPek,1).set("\"");
-                    xmlTmpPPek.increment(1);
-                }
-                xmlPPek.increment(6);
-            }
-            else {
-                if (xmlTmpPPek.compareTo(100)<=0) {
-                    xmlTmpP.ref(xmlTmpPPek,1).set(xmlP.ref(xmlPPek,1));
-                    xmlTmpPPek.increment(1);
-                }
-                xmlPPek.increment(1);
-            }
-        }
-        xmlP.set(xmlTmpP);
-    }
-
-
--- a/server.src/prg/med/Bortbok.java
-    private lib.med.Vduram vduram=new lib.med.Vduram(Bortbok.this);
-
-    private void s11ReadTfav() {
-        lib.med.Tfavpost.fd tfav=p8921.medtfav.get();
-        pa.recid.set(da.tfav);
-        pa.action.set(da.read);
-        medrecarea.recArea.set(tfav.post);
-        p8921.medFilhant();
-        tfav.post.set(medrecarea.recArea);
-    }
-
--- a/server.src/prg/med/Caraqv.java
-    private Field fplansEof = new Field("X");
-    private Field fordersEof = new Field("X");
-    private Field finsertionsEof = new Field("X");
-    private Field fpricerowsEof = new Field("X");
-    private Field fcinvoicesEof = new Field("X");
-    private Field fcinvoicerowsEof = new Field("X");
-    private Field fminvoicesEof = new Field("X");
-    private Field fminvoicerowsEof = new Field("X");
-    private Field fdiscrepanciesEof = new Field("X");
-    private Field fmediasEof = new Field("X");
-    private Field fmediatypesEof = new Field("X");
-    private Field fclientsEof = new Field("X");
-    private Field fcollclientsEof = new Field("X");
-    private Field fcollproductsEof = new Field("X");
-    private Field fproductsEof = new Field("X");
-    private Field fagreementsEof = new Field("X");
-    private Field fpricetypesEof = new Field("X");
-    private Field wsGrupp = new Field("XX");
-    private Field wsLopnr = new Field("9(8)");
--- a/server.src/prg/med/Caraqvm.java
-    private lib.med.Vduram vduram=new lib.med.Vduram(Caraqvm.this);







-    private Field stdVal = new Field("9");
-    private Field stdKey = new Field("999");
-    private Field fplansEof = new Field("X");
-    private Field fordersEof = new Field("X");
-    private Field finsertionsEof = new Field("X");
-    private Field fpricerowsEof = new Field("X");
-    private Field fcinvoicesEof = new Field("X");
-    private Field fcinvoicerowsEof = new Field("X");
-    private Field fminvoicesEof = new Field("X");
-    private Field fminvoicerowsEof = new Field("X");
-    private Field fdiscrepanciesEof = new Field("X");
-    private Field fmediasEof = new Field("X");
-    private Field fmediatypesEof = new Field("X");
-    private Field fclientsEof = new Field("X");
-    private Field fcollclientsEof = new Field("X");
-    private Field fcollproductsEof = new Field("X");
-    private Field fproductsEof = new Field("X");
-    private Field fagreementsEof = new Field("X");
-    private Field fpricetypesEof = new Field("X");
-
-    private void getSizeNameFrad() {
-        lib.med.Fradpost.fd frad=p8921.medfrad.get();
-        lib.med.Formpost.fd form=p8921.medform.get();
-        if (!(frad.format.equals(SPACE))) {
-            form.typ.set("O");
-            form.kod.set(frad.format);
-            p8921.medFormRead();
-            if (pa.ok()) {
-                sizeName.set(form.benamn1);
-            }
-            else {
-                sizeName.set(frad.format);
-            }
-        }
-        else if (!(frad.bredd.equals(ZERO))) {
-            sizeWidthD.set(frad.bredd);
-            while (!(!(sizeWidthD.ref(1,1).equals(SPACE)))) {
-                sizeWidthD.ref(1,1).set(sizeWidthD.ref(2,1));
-                sizeWidthD.ref(2,1).set(sizeWidthD.ref(3,1));
-                sizeWidthD.ref(3,1).set(SPACE);
-            }
-            sizeHeightD.set(frad.hojd);
-            if (sizeHeightD.ref(5,1).equals("0")) {
-                sizeHeightD.ref(4,2).set(SPACE);
-            }
-            while (!(!(sizeHeightD.ref(1,1).equals(SPACE)))) {
-                sizeHeightD.ref(1,1).set(sizeHeightD.ref(2,1));
-                sizeHeightD.ref(2,1).set(sizeHeightD.ref(3,1));
-                sizeHeightD.ref(3,1).set(sizeHeightD.ref(4,1));
-                sizeHeightD.ref(4,1).set(sizeHeightD.ref(5,1));
-                sizeHeightD.ref(5,1).set(SPACE);
-            }
-            sizeName.set(SPACE);
-            sizeName.set(concat(limit(sizeWidthD.ref(1,3),SPACE)," x ",limit(sizeHeightD.ref(1,5),SPACE)));
-        }
-        else {
-            sizeName.set(SPACE);
-        }
-    }
-
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisakod.set("F");
-        stddata.stdVisakod.ref(2).set(pa.txtnr.ref(1));
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisakod);
-    }
-
-    private void z05BlankaMeddelande() {
-        call("prg.bas.visa", pa.paraArea, "F000");
-        pa.txtnr.set(ZERO);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdFunk, stddata.stdKom);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            call("prg.bas.visa", pa.paraArea, "F902");
-        }
-    }
-
-    private void z21Upshift() {
-        z21Konv.toUpper();
-    }
-
--- a/server.src/prg/med/Carasync.java
-    private lib.med.Stddata stddata=new lib.med.Stddata(Carasync.this);
-    private lib.med.Datab da=new lib.med.Datab(Carasync.this);







-    private Field stdVal = new Field("9");
-    private Field stdKey = new Field("999");
-    private Field fsortEof = new Field("X");
-    private void z04Meddela() {
-        stddata.stdVisakod.set("F");
-        stddata.stdVisakod.ref(2).set(pa.txtnr.ref(1));
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisakod);
-    }
-
-    private void z05BlankaMeddelande() {
-        call("prg.bas.visa", pa.paraArea, "F000");
-        pa.txtnr.set(ZERO);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdFunk, stddata.stdKom);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            call("prg.bas.visa", pa.paraArea, "F902");
-        }
-    }
-
-    private void z21Upshift() {
-        z21Konv.toUpper();
-    }
-
--- a/server.src/prg/med/Caraxls.java
-    private Field fdataEof = new Field("X");
-    private Field fkundEof = new Field("X");
-    private Field fgruppEof = new Field("X");
-    private Field fperskatEof = new Field("X");
-    private Field fmediaEof = new Field("X");
-    private Field ftillaggEof = new Field("X");
-    private Field fkundansEof = new Field("X");
-    private Field fmtypEof = new Field("X");
-    private Field foverEof = new Field("X");
--- a/server.src/prg/med/Caraxls1.java
-    private lib.med.Medapost medmeda=new lib.med.Medapost(Caraxls1.this, pa);
-    private lib.med.Vduram vduram=new lib.med.Vduram(Caraxls1.this);







-    private Field stdVal = new Field("9");
-    private Field stdKey = new Field("999");
-    private Field fdataEof = new Field("X");
-    private Field fkundEof = new Field("X");
-    private Field fgruppEof = new Field("X");
-    private Field fperskatEof = new Field("X");
-    private Field fmediaEof = new Field("X");
-    private Field ftillaggEof = new Field("X");
-    private Field fkundansEof = new Field("X");
-    private Field fmtypEof = new Field("X");
-    private Field foverEof = new Field("X");
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisakod.set("F");
-        stddata.stdVisakod.ref(2).set(pa.txtnr.ref(1));
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisakod);
-    }
-
-    private void z05BlankaMeddelande() {
-        call("prg.bas.visa", pa.paraArea, "F000");
-        pa.txtnr.set(ZERO);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdFunk, stddata.stdKom);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            call("prg.bas.visa", pa.paraArea, "F902");
-        }
-    }
-
-    private void z21Upshift() {
-        z21Konv.toUpper();
-    }
-
--- a/server.src/prg/med/Caraxls2.java
-    private Field fdataEof = new Field("X");
-    private Field fkundEof = new Field("X");
-    private Field fgruppEof = new Field("X");
-    private Field fperskatEof = new Field("X");
-    private Field fmediaEof = new Field("X");
-    private Field ftillaggEof = new Field("X");
-    private Field fkundansEof = new Field("X");
-    private Field fmtypEof = new Field("X");
-    private Field foverEof = new Field("X");
--- a/server.src/prg/med/Cardmkop.java
-    private lib.med.Stddata stddata=new lib.med.Stddata(Cardmkop.this);
-    private lib.med.Datab da=new lib.med.Datab(Cardmkop.this);







-    private Field stdVal = new Field("9");
-    private Field stdKey = new Field("999");
-    private Field fsortEof = new Field("X");
-    private void z04Meddela() {
-        stddata.stdVisakod.set("F");
-        stddata.stdVisakod.ref(2).set(pa.txtnr.ref(1));
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisakod);
-    }
-
-    private void z05BlankaMeddelande() {
-        call("prg.bas.visa", pa.paraArea, "F000");
-        pa.txtnr.set(ZERO);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdFunk, stddata.stdKom);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            call("prg.bas.visa", pa.paraArea, "F902");
-        }
-    }
-
-    private void z21Upshift() {
-        z21Konv.toUpper();
-    }
-
--- a/server.src/prg/med/Carnsync.java
-    private lib.med.Stddata stddata=new lib.med.Stddata(Carnsync.this);
-    private lib.med.Datab da=new lib.med.Datab(Carnsync.this);







-    private Field stdVal = new Field("9");
-    private Field stdKey = new Field("999");
-    private Field fsortEof = new Field("X");
-    private void z04Meddela() {
-        stddata.stdVisakod.set("F");
-        stddata.stdVisakod.ref(2).set(pa.txtnr.ref(1));
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisakod);
-    }
-
-    private void z05BlankaMeddelande() {
-        call("prg.bas.visa", pa.paraArea, "F000");
-        pa.txtnr.set(ZERO);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdFunk, stddata.stdKom);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            call("prg.bas.visa", pa.paraArea, "F902");
-        }
-    }
-
-    private void z21Upshift() {
-        z21Konv.toUpper();
-    }
-
--- a/server.src/prg/med/Ediin.java
-    private lib.pri.Medipost primedi=new lib.pri.Medipost(Ediin.this);
-    private lib.pri.Tugdpost pritugd=new lib.pri.Tugdpost(Ediin.this);
-    private lib.pri.Ugfdpost priugfd=new lib.pri.Ugfdpost(Ediin.this);
-    private lib.pri.Prispost pripris=new lib.pri.Prispost(Ediin.this);
-    private lib.pri.Vdagpost privdag=new lib.pri.Vdagpost(Ediin.this);
-    private lib.pri.Sektpost prisekt=new lib.pri.Sektpost(Ediin.this);
-    private lib.pri.Edimpost priedim=new lib.pri.Edimpost(Ediin.this);
-    private lib.pri.Priepost priprie=new lib.pri.Priepost(Ediin.this);
-    private lib.pri.Tfrmpost pritfrm=new lib.pri.Tfrmpost(Ediin.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Ediin.this);
-    private lib.pri.Tidnpost prisPritidn=new lib.pri.Tidnpost(Ediin.this);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Ediin.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(Ediin.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Ediin.this, webpara, pa);
-    private Field qu = new Field("X(2000)");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(2000)");
-    private Field p4 = new Field("X(50)");
-    private Field p5 = new Field("X(50)");
-    private Field poster = new Field("99999");
-    private Field flagga2 = new Field("X");
-    private Field flagga4 = new Field("X");
-    private Field flagga5 = new Field("X");
-    private Field flagga510 = new Field("X");
-    private Field flagga6 = new Field("X");
-    private Field flagga7 = new Field("X");
-    private Field flagga8 = new Field("X");
-    private Field flagga9 = new Field("X");
-    private Field flagga10 = new Field("X");
-    private Field flagga11 = new Field("X");
-    private Field flagga12 = new Field("X");
-    private Field flagga13 = new Field("X");
-    private Field flagga14 = new Field("X");
-    private Field flagga15 = new Field("X");
-    private Field antalAnvisn = new Field("9");
-    private Field endaktiva = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field post = new Field("X(1000)");
-    private Field pkey = new Field("X(100)");
-    private Field pvalue = new Field("X(900)");
-    private Field oldEdim = new Field("X(4)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field pOk = new Field("X");
-    private Field varningar = new Field("99");
-    private Field kolla = new Field("X");
-    private Field modul = new Field("XXX");
-    private Field mdx = new Field("9");
-    private Field mdy = new Field("9V9");
-    private Field nyttPlannr = new Field("9(6)");
-    private Field nyttOrdernr = new Field("9(6)");
-    private Field tmp6 = new Field("9(6)");
-    private Field valuta = new Field("XXX");
-    private Field lunamn = new Field("X(50)");
-    private Field tmpX = new Field("X");
-    private Field kkrok = new Field("X");
-    private Field tmpTiKod = new Field("XXX");
-    private Field tmpErs = new Field("XX");
-    private Field tmp10000 = new Field("X(10000)");
-    private Field ptr = new Field("99999");
-    private Field ediVal = new Field("X");
-    private Field xmlFilnamn = new Field("X(100)");
-    private Field prBrutto = new Field("S9(10)");
-    private Field prNetto = new Field("S9(10)");
-    private Field postbak = new Field("X(20000)");
-    private Field tmpEdirKey = new Field("X(100)");
-    private Field tmpEdirRaDat = new Field("9(8)");
-    private Field rabBelopp = new Field("S9(10)V99");
-    private Field lstBel = new Field("----B---B--9,99");
-        lib.med.Tidnpost.fd med_tidn=p8921.medtidn.get();
-        lib.pri.Tidnpost.fd pris_Pritidn_tidn=prisPritidn.get();
--- a/server.src/prg/med/Edistat.java
-    private lib.pri.Tidnpost pritidn=new lib.pri.Tidnpost(Edistat.this);
-    private lib.pri.Medipost primedi=new lib.pri.Medipost(Edistat.this);
-    private lib.pri.Tugdpost pritugd=new lib.pri.Tugdpost(Edistat.this);
-    private lib.pri.Ugfdpost priugfd=new lib.pri.Ugfdpost(Edistat.this);
-    private lib.pri.Prispost pripris=new lib.pri.Prispost(Edistat.this);
-    private lib.pri.Vdagpost privdag=new lib.pri.Vdagpost(Edistat.this);
-    private lib.pri.Sektpost prisekt=new lib.pri.Sektpost(Edistat.this);
-    private lib.pri.Tfrmpost pritfrm=new lib.pri.Tfrmpost(Edistat.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Edistat.this);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Edistat.this);
-    private lib.gem.Pgempost gempgem=new lib.gem.Pgempost(Edistat.this, pa);
-    private lib.pri.Tidnpost prisPritidn=new lib.pri.Tidnpost(Edistat.this);
-    private lib.bas.Std std=new lib.bas.Std(Edistat.this);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Edistat.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(Edistat.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Edistat.this, webpara, pa);
-    private Field tmp3 = new Field("X(100)");
-    private Field qu = new Field("X(2000)");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(2000)");
-    private Field p4 = new Field("X(50)");
-    private Field p5 = new Field("X(50)");
-    private Field poster = new Field("99999");
-    private Field i = new Field("99999");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field flagga1 = new Field("X");
-    private Field flagga2 = new Field("X");
-    private Field flagga3 = new Field("X");
-    private Field flagga4 = new Field("X");
-    private Field flagga5 = new Field("X");
-    private Field flagga510 = new Field("X");
-    private Field flagga6 = new Field("X");
-    private Field flagga7 = new Field("X");
-    private Field flagga8 = new Field("X");
-    private Field flagga9 = new Field("X");
-    private Field flagga10 = new Field("X");
-    private Field flagga11 = new Field("X");
-    private Field flagga12 = new Field("X");
-    private Field flagga13 = new Field("X");
-    private Field flagga14 = new Field("X");
-    private Field flagga15 = new Field("X");
-    private Field antalAnvisn = new Field("9");
-    private Field endaktiva = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field post = new Field("X(1000)");
-    private Field pkey = new Field("X(100)");
-    private Field pvalue = new Field("X(900)");
-    private Field oldEdim = new Field("X(4)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field pOk = new Field("X");
-    private Field varningar = new Field("99");
-    private Field kolla = new Field("X");
-    private Field modul = new Field("XXX");
-    private Field mdx = new Field("9");
-    private Field mdy = new Field("9V9");
-    private Field nyttPlannr = new Field("9(6)");
-    private Field nyttOrdernr = new Field("9(6)");
-    private Field tmpOrdernr = new Field("9(6)");
-    private Field tmp6 = new Field("9(6)");
-    private Field valuta = new Field("XXX");
-    private Field lunamn = new Field("X(50)");
-    private Field tmpX = new Field("X");
-    private Field kkrok = new Field("X");
-    private Field tmpTiKod = new Field("XXX");
-    private Field tmpErs = new Field("XX");
-    private Field tmp10000 = new Field("X(10000)");
-    private Field ptr = new Field("99999");
-    private Field ediVal = new Field("X");
-        lib.med.Tidnpost.fd tidn=p8921.medtidn.get();
-        lib.pri.Tidnpost.fd pris_tidn=prisPritidn.get();
--- a/server.src/prg/med/Exorcb.java
-    private lib.med.Stddata stddata=new lib.med.Stddata(Exorcb.this);
-    private lib.med.Datab da=new lib.med.Datab(Exorcb.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Exorcb.this);
--- a/server.src/prg/med/Exorget.java
-    private Field infilPost = infil.extend("X(2000)");
-
-    private lib.med.Stddata stddata=new lib.med.Stddata(Exorget.this);
-    private lib.med.Datab da=new lib.med.Datab(Exorget.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Exorget.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Exorget.this);
-    private Field tmp80 = new Field("X(80)");
-    private Field selV = new Field("9(6)");
-    private Field selLnr = new Field("99999");
-    private Field tmpDatum = new Field("9(8)");
-    private Field lnr = new Field("99999");
-    private Field tmp6n = new Field("9(6)");
-    private Field tmpBelv4 = new Field("S9(10)V9999");
-    private Field pristidn = new Field("X(6)");
-    private Field lunamn = new Field("X(200)");
--- a/server.src/prg/med/Exorget2.java
-    private Field infilPost = infil.extend("X(2000)");
-    private lib.med.Stddata stddata=new lib.med.Stddata(Exorget2.this);
-    private lib.med.Datab da=new lib.med.Datab(Exorget2.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Exorget2.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Exorget2.this);
-    private Field tmp1 = new Field("X(50)");
-    private Field tmp2 = new Field("X(50)");
-    private Field tmp80 = new Field("X(80)");
-    private Field selV = new Field("9(6)");
-    private Field selLnr = new Field("99999");
-    private Field tmpDatum = new Field("9(8)");
-    private Field i = new Field("999");
-    private Field j = new Field("999");
-    private Field lnr = new Field("99999");
-    private Field tmp6n = new Field("9(6)");
-    private Field tmpBel1 = new Field("S9(10)V99");
-    private Field tmpBel2 = new Field("S9(10)V99");
-    private Field tmpBel2b = new Field("S9(10)V99");
-    private Field tmpBel3 = new Field("S9(10)V99");
-    private Field tmpBelv4 = new Field("S9(10)V9999");
-    private Field pristidn = new Field("X(6)");
-    private Field lunamn = new Field("X(200)");
--- a/server.src/prg/med/Exorget3.java
-    private Field infilPost = infil.extend("X(2000)");
-    private lib.med.Stddata stddata=new lib.med.Stddata(Exorget3.this);
-    private lib.med.Datab da=new lib.med.Datab(Exorget3.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Exorget3.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Exorget3.this);
-    private Field tmp80 = new Field("X(80)");
-    private Field selV = new Field("9(6)");
-    private Field selLnr = new Field("99999");
-    private Field tmpDatum = new Field("9(8)");
-    private Field lnr = new Field("99999");
-    private Field tmp6n = new Field("9(6)");
-    private Field tmpBelv4 = new Field("S9(10)V9999");
-    private Field pristidn = new Field("X(6)");
-    private Field lunamn = new Field("X(200)");
--- a/server.src/prg/med/Exorget4.java
-    private Field infilPost = infil.extend("X(2000)");
-    private lib.med.Datab da=new lib.med.Datab(Exorget4.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Exorget4.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Exorget4.this);
-    private Field tmp80 = new Field("X(80)");
-    private Field selV = new Field("9(6)");
-    private Field selLnr = new Field("99999");
-    private Field tmpDatum = new Field("9(8)");
-    private Field lnr = new Field("99999");
-    private Field tmp6n = new Field("9(6)");
-    private Field pristidn = new Field("X(6)");
-    private Field lunamn = new Field("X(200)");
--- a/server.src/prg/med/Exorimp.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Exorimp.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Exorimp.this);
-    private lib.med.Datab da=new lib.med.Datab(Exorimp.this);
-    private Field orderPek = new Field("S9(9)");
-    private Field i = new Field("S9(9)");
-        lib.pri.Tidnpost.fd pris_tidn=prisPritidn.get();
--- a/server.src/prg/med/Expgoall.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Expgoall.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Expgoall.this);
-    private lib.med.Datab da=new lib.med.Datab(Expgoall.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Expgoall.this, webpara, pa);
-    private Field ix = new Field("9(5)");
-    private Field paPlannr = new Field("X(6)");
--- a/server.src/prg/med/Exporde1.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Exporde1.this);
-    private lib.med.Datab da=new lib.med.Datab(Exporde1.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Exporde1.this, webpara, pa);
-    private Field tmpSlutdat = new Field("9(8)");
-    private Field tmpStatus = new Field("X");
-    private Field tmp = new Field("X(200)");
--- a/server.src/prg/med/Expxavde.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Expxavde.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(Expxavde.this);
-    private Field tmpHel = new Field("9(9)");
--- a/server.src/prg/med/Expxkund.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Expxkund.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(Expxkund.this);
--- a/server.src/prg/med/Faktexor.java
-    private lib.med.Datab da=new lib.med.Datab(Faktexor.this);
-    private Field tmp = new Field("X(300)");
-    private Field xmlFilnamn = new Field("X(100)");
-    private Field i = new Field("99999");
--- a/server.src/prg/med/Fixahdt.java
-    private Field fselOrdernr = fselId.extend("9(6)");
-    private Field fselUtskriven = fselId.extend("X");
-    private Field tabfilPost = tabfil.extend("X(5000)");
-    private lib.med.Enhtpost medenht=new lib.med.Enhtpost(Fixahdt.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Fixahdt.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(Fixahdt.this, pa);
-    private lib.med.Vduram vduram=new lib.med.Vduram(Fixahdt.this);
-    private Field tmp = new Field("X(200)");
-    private Field tmpRad = new Field("X(2000)");
-    private Field tmp1 = new Field("X(200)");
-    private Field tmp2 = new Field("X(200)");
-    private Field tmp3 = new Field("X(200)");
-    private Field tmp4 = new Field("X(200)");
-    private Field tmp5 = new Field("X(200)");
-    private Field tmp6 = new Field("X(200)");
-    private Field tmp7 = new Field("X(200)");
-    private Field tmpKtrl = new Field("X");
-    private Field wsTidnnamn = new Field("X(35)");
-    private Field wsKtrlDat = new Field("9(8)");
-    private Field wsAntal = new Field("9(6)");
-    private Field wsPaket = new Field("X");
-    private Field wsPaketFormat = new Field("X(100)");
-    private Field wsPaketPlacering = new Field("X(30)");
-    private Field wsPaketFarg = new Field("X(50)");
-    private Field foregDatum = new Field("9(8)");
-    private Field wsKtrlSid = new Field("X(10)");
-    private Field wsKtrlSektSid = new Field("9(4)");
-    private Field wsKtrlKomm1 = new Field("X(60)");
-    private Field wsKtrlKomm2 = new Field("X(60)");
-    private Field wsKtrlKomm3 = new Field("X(60)");
-    private Field wsBredd = new Field("ZZ9");
-    private Field wsBreddP = new Field("S9(9)");
-    private Field wsHojd = new Field("ZZ9.9");
-    private Field wsHojdP = new Field("S9(9)");
-    private Field wsFormat = new Field("X(100)");
-    private Field wsFord = new Field("X(500)");
-    private Field helD = new Field("---------9");
-    private Field helSt = new Field("S9(9)");
-    private Field fselEof = new Field("X");
-    private Field formatben = new Field("X(200)");
-    private Field xmlFilnamn = new Field("X(100)");
-    private Field xmlFilnamn2 = new Field("X(100)");







-    private Field stdVal = new Field("9");
-    private Field stdKey = new Field("999");
--- a/server.src/prg/med/Fixakark.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Fixakark.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Fixakark.this);
-    private lib.med.Datab da=new lib.med.Datab(Fixakark.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Fixakark.this, webpara, pa);
-    private Field ix = new Field("9(5)");
-    private Field paPlannr = new Field("X(6)");
--- a/server.src/prg/med/Fixakop.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Fixakop.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Fixakop.this);
-    private lib.med.Datab da=new lib.med.Datab(Fixakop.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Fixakop.this, webpara, pa);
-    private Field ix = new Field("9(5)");
--- a/server.src/prg/med/Fixalock.java
-    private lib.med.Datab da=new lib.med.Datab(Fixalock.this);
-    private Field sumBelopp = new Field("S9(9)");
-    private Field tmpBelopp = new Field("S9(9)");
-    private Field tmpBelopp2 = new Field("S9(9)V99");
-    private Field tmp = new Field("X(300)");
-    private Field xmlFilnamn = new Field("X(100)");
-    private Field i = new Field("99999");
--- a/server.src/prg/med/Fixanet.java
-    private lib.med.Datab da=new lib.med.Datab(Fixanet.this);
-    private Field tmp = new Field("X(300)");
-    private Field xmlFilnamn = new Field("X(100)");
-    private Field i = new Field("99999");
--- a/server.src/prg/med/Fixaordelev.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Fixaordelev.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Fixaordelev.this);
-    private lib.med.Datab da=new lib.med.Datab(Fixaordelev.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Fixaordelev.this, webpara, pa);
-    private Field ix = new Field("9(5)");
--- a/server.src/prg/med/Fixarab.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Fixarab.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Fixarab.this);
-    private lib.med.Datab da=new lib.med.Datab(Fixarab.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Fixarab.this, webpara, pa);
--- a/server.src/prg/med/Fixarabkod.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Fixarabkod.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Fixarabkod.this);
-    private lib.med.Datab da=new lib.med.Datab(Fixarabkod.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Fixarabkod.this, webpara, pa);
--- a/server.src/prg/med/Fixarapp.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Fixarapp.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Fixarapp.this);
-    private lib.med.Datab da=new lib.med.Datab(Fixarapp.this);
-    private lib.med.P8calc p8calc=new lib.med.P8calc(Fixarapp.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(Fixarapp.this, webpara, pa);
--- a/server.src/prg/med/Fixaskaf.java
-    private lib.med.Datab da=new lib.med.Datab(Fixaskaf.this);
-    private lib.med.P8calc p8calc=new lib.med.P8calc(Fixaskaf.this);
-    private Field tmpProv = new Field("S9(9)V99");
-    private Field tmpProc = new Field("S9(9)V99");
-    private Field tmpProc2 = new Field("S9(9)V99");
-    private Field tmpNetto = new Field("S9(9)V99");
-    private Field tmpNetNet = new Field("S9(9)V99");
-    private Field tmp = new Field("X(300)");
-    private Field xmlFilnamn = new Field("X(100)");
-    private Field i = new Field("99999");
--- a/server.src/prg/med/Grodsync.java
-    private lib.med.Stddata stddata=new lib.med.Stddata(Grodsync.this);
-    private lib.med.Datab da=new lib.med.Datab(Grodsync.this);







-    private Field stdVal = new Field("9");
-    private Field stdKey = new Field("999");
-    private Field fsortEof = new Field("X");
-    private void z04Meddela() {
-        stddata.stdVisakod.set("F");
-        stddata.stdVisakod.ref(2).set(pa.txtnr.ref(1));
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisakod);
-    }
-
-    private void z05BlankaMeddelande() {
-        call("prg.bas.visa", pa.paraArea, "F000");
-        pa.txtnr.set(ZERO);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdFunk, stddata.stdKom);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            call("prg.bas.visa", pa.paraArea, "F902");
-        }
-    }
-
-    private void z21Upshift() {
-        z21Konv.toUpper();
-    }
-
--- a/server.src/prg/med/Gronsync.java
-    private lib.med.Datab da=new lib.med.Datab(Gronsync.this);







-    private Field stdVal = new Field("9");
-    private Field stdKey = new Field("999");
-    private Field fsortEof = new Field("X");
--- a/server.src/prg/med/Grouamcb.java
-    private lib.med.Datab da=new lib.med.Datab(Grouamcb.this);
-    private Field mtrldattid = new Field("X(25)");
-    private Field tmp = new Field("X(100)");
--- a/server.src/prg/med/Groubig.java
-    private Field fmomsBelopp = fmomsData.extend("S9(9)V99");    
-    private lib.med.Datab da=new lib.med.Datab(Groubig.this);
-    private Field infilEof = new Field("X");
-    private Field felfilFilnamn = new Field("X(50)");
-    private Field fmomsEof = new Field("X");        
-    private Field fbudgetclientsEof = new Field("X");
-    private Field fclientsEof = new Field("X");
-    private Field fclientagreementsEof = new Field("X");
-    private Field fcollclientsEof = new Field("X");
-    private Field fcollproductsEof = new Field("X");
-    private Field fproductsEof = new Field("X");
-    private Field fagreementsEof = new Field("X");
-    private Field fagreementmediatypesEof = new Field("X");
-    private Field fsurchagreesEof = new Field("X");
-    private Field fsurchagreemediatypesEof = new Field("X");
-    private Field fsurchagreemediasEof = new Field("X");
-    private Field fclientcatsEof = new Field("X");
-    private Field fgroupsEof = new Field("X");
-    private Field fdigitalchannelsEof = new Field("X");
-    private Field funitsEof = new Field("X");
-    private Field fprojectsEof = new Field("X");
-    private Field fjobtypesEof = new Field("X");
-    private Field fprojmarks1Eof = new Field("X");
-    private Field fprojmarks2Eof = new Field("X");
-    private Field fcampaignsEof = new Field("X");
-    private Field frefsEof = new Field("X");
-    private Field fcollpublishersEof = new Field("X");
-    private Field fpublishersEof = new Field("X");
-    private Field fmediabrandsEof = new Field("X");
-    private Field fmediasEof = new Field("X");
-    private Field flocalmediasEof = new Field("X");
-    private Field fmediaclassesEof = new Field("X");
-    private Field fcollmediatypesEof = new Field("X");
-    private Field fmediatypesEof = new Field("X");
-    private Field fmediestatistikkoderEof = new Field("X");
-    private Field fpricetypesEof = new Field("X");
-    private Field fdiscountcodesEof = new Field("X");
-    private Field fagenciesEof = new Field("X");
-    private Field femployeesEof = new Field("X");
-    private Field fcalendarsEof = new Field("X");
-    private Field fcontractedhoursEof = new Field("X");
-    private Field fteamsEof = new Field("X");
-    private Field femployeecatsEof = new Field("X");
-    private Field fpositionsEof = new Field("X");
-    private Field ftimecatsEof = new Field("X");
-    private Field fpurchasecatsEof = new Field("X");
-    private Field ftimecodesEof = new Field("X");
-    private Field fpurchasecodesEof = new Field("X");
-    private Field fmaterialcodesEof = new Field("X");
-    private Field fprojectbudgetsEof = new Field("X");
-    private Field fprojectbudgetfeesEof = new Field("X");
-    private Field fprojectbudgetpurchasesEof = new Field("X");
-    private Field fprojectbudgetothersEof = new Field("X");
-    private Field fsuppliersEof = new Field("X");
-    private Field fsuppliercatsEof = new Field("X");
-    private Field faccountsEof = new Field("X");
-    private Field fcostcentresEof = new Field("X");
-    private Field fcostobjectsEof = new Field("X");
-    private Field fplansEof = new Field("X");
-    private Field fordersEof = new Field("X");
-    private Field forderpackagesEof = new Field("X");
-    private Field finsertionpackagesEof = new Field("X");
-    private Field ffordsEof = new Field("X");
-    private Field finsertionsEof = new Field("X");
-    private Field fpricerowsEof = new Field("X");
-    private Field fcinvoicesEof = new Field("X");
-    private Field fcinvoicerowsEof = new Field("X");
-    private Field fagencyadjustmentsEof = new Field("X");
-    private Field fminvoicesEof = new Field("X");
-    private Field fminvoicerowsEof = new Field("X");
-    private Field fdiscrepanciesEof = new Field("X");
-    private Field ftimereportsEof = new Field("X");
-    private Field ftimeadjustmentsEof = new Field("X");
-    private Field fpurchasesEof = new Field("X");
-    private Field fpurchaseadjustmentsEof = new Field("X");
-    private Field fmaterialsEof = new Field("X");
-    private Field fmaterialadjustmentsEof = new Field("X");
-    private Field fpinvoicesEof = new Field("X");
-    private Field fpinvoicetimesEof = new Field("X");
-    private Field fpinvoicepurchasesEof = new Field("X");
-    private Field fpinvoicematerialsEof = new Field("X");
-    private Field fvouchersEof = new Field("X");
-    private Field fvoucherrowsEof = new Field("X");
-    private Field fvoucherrows2Eof = new Field("X");
-    private Field fslinvoicesEof = new Field("X");
-    private Field fslpaymentsEof = new Field("X");
-    private Field fplunbookedinvsEof = new Field("X");
-    private Field fplunbookedinvrowsEof = new Field("X");
-    private Field fplinvoicesEof = new Field("X");
-    private Field fplpaymentsEof = new Field("X");
-    private Field timecodeKey = new Field("X(3)");
-    private Field purchasecodeKey = new Field("X(3)");
-    private Field materialcodeKey = new Field("X(3)");
-    private Field wsGrupp = new Field("XX");
-    private Field wsLopnr = new Field("9(8)");
-    private Field tmpBkstvftg = new Field("X(4)");
-    private void bTabfilerVoucherrows2() {
-        tabfilFilnamn.set(SPACE);
-        tabfilFilnamn.set(concat("EXP/BIGM/voucherrows2.txt"));
-        tabfil.open("OUTPUT");
-        fvoucherrows2Key.init();
-        fvoucherrows2.start("NOT<", "fvoucherrows2_key");
-        if (fvoucherrows2Fs.equals("00")) {
-            fvoucherrows2.readNext();
-        }
-        while (!(!(fvoucherrows2Fs.equals("00")))) {
-            if (fvoucherrows2VoucherBfdat.ref(1,6).compareTo(paFrPerVoucherrows2.ref(1,6))>=0) {
-                fvoucherrows2Post.convert("\t"," ");
-                amountD.set(fvoucherrows2Amount);
-                amountD.ref(1).replace(".",",");
-                for (amountSt.set(1);(!(!(amountD.ref(amountSt,1).equals(SPACE))));amountSt.increment(1)) {
-                }
-                tabfilRad.set(SPACE);
-                tabfilRad.set(concat(fvoucherrows2Ftg,"\t",fvoucherrows2VoucherType,"-",fvoucherrows2VoucherNr.ref(1,6),"\t",fvoucherrows2VoucherBfdat.ref(1,4),"-",fvoucherrows2VoucherBfdat.ref(5,2),"-",fvoucherrows2VoucherBfdat.ref(7,2),"\t",fvoucherrows2Account,"\t",fvoucherrows2Costcentre,"\t",fvoucherrows2Costobject,"\t",fvoucherrows2ClientKey,"\t",fvoucherrows2ProductKey,"\t",fvoucherrows2ProjectKey,"\t",fvoucherrows2MediaKey,"\t",fvoucherrows2OrderKey,"\t",fvoucherrows2EmployeeKey,"\t",fvoucherrows2SupplierKey,"\t",fvoucherrows2TimecodeKey,"\t",fvoucherrows2PurchasecodeKey,"\t",fvoucherrows2MaterialcodeKey,"\t",amountD.ref(amountSt),"\t",limit(fvoucherrows2Comm,"    "),"\t",fvoucherrows2PricetypeKey,"\t",fvoucherrows2TimecatKey));
-                pa.bkstvftg.set(fvoucherrows2Ftg);
-                tabfilWrite();
-            }
-            fvoucherrows2.readNext();
-        }
-        fvoucherrowsKey.init();
-        fvoucherrows.start("NOT<", "fvoucherrows_key");
-        if (fvoucherrowsFs.equals("00")) {
-            fvoucherrows.readNext();
-        }
-        while (!(!(fvoucherrowsFs.equals("00")))) {
-            if (fvoucherrowsVoucherBfdat.ref(1,6).compareTo(paFrPerVoucherrows2.ref(1,6))>=0) {
-                fvoucherrowsPost.convert("\t"," ");
-                fvoucherrows2Key.init();
-                fvoucherrows2Ftg.set(fvoucherrowsFtg);
-                fvoucherrows2VoucherType.set(fvoucherrowsVoucherType);
-                fvoucherrows2VoucherNr.set(fvoucherrowsVoucherNr);
-                fvoucherrows2VoucherBfdat.set(fvoucherrowsVoucherBfdat);
-                fvoucherrows2.start("NOT<", "fvoucherrows2_key");
-                if (fvoucherrows2Fs.equals("00")) {
-                    fvoucherrows2.readNext();
-                }
-                if (!(fvoucherrows2Fs.equals("00")) || !(fvoucherrows2Ftg.equals(fvoucherrowsFtg)) || !(fvoucherrows2VoucherType.equals(fvoucherrowsVoucherType)) || !(fvoucherrows2VoucherNr.equals(fvoucherrowsVoucherNr)) || !(fvoucherrows2VoucherBfdat.equals(fvoucherrowsVoucherBfdat))) {
-                    amountD.set(fvoucherrowsAmount);
-                    amountD.ref(1).replace(".",",");
-                    for (amountSt.set(1);(!(!(amountD.ref(amountSt,1).equals(SPACE))));amountSt.increment(1)) {
-                    }
-                    timecodeKey.set(SPACE);
-                    purchasecodeKey.set(SPACE);
-                    materialcodeKey.set(SPACE);
-                    if (fvoucherrowsSkod.ref(1,1).equals("A")) {
-                        timecodeKey.set(fvoucherrowsSkod.ref(2,3));
-                    }
-                    if (fvoucherrowsSkod.ref(1,1).equals("I")) {
-                        purchasecodeKey.set(fvoucherrowsSkod.ref(2,3));
-                    }
-                    if (fvoucherrowsSkod.ref(1,1).equals("O")) {
-                        materialcodeKey.set(fvoucherrowsSkod.ref(2,3));
-                    }
-                    flocalmediasPost.init();
-                    flocalmediasFtg.set(fvoucherrowsFtg);
-                    flocalmediasCode.set(fvoucherrowsTidn);
-                    flocalmedias.read();
-                    tabfilRad.set(SPACE);
-                    tabfilRad.set(concat(fvoucherrowsFtg,"\t",fvoucherrowsVoucherType,"-",fvoucherrowsVoucherNr.ref(1,6),"\t",fvoucherrowsVoucherBfdat.ref(1,4),"-",fvoucherrowsVoucherBfdat.ref(5,2),"-",fvoucherrowsVoucherBfdat.ref(7,2),"\t",fvoucherrowsAccount,"\t",fvoucherrowsCostcentre,"\t",fvoucherrowsCostobject,"\t",fvoucherrowsKund,"\t",fvoucherrowsAvde.ref(5,4),"\t",fvoucherrowsKpro.ref(5,4),"\t",flocalmediasMediaKey,"\t",fvoucherrowsOrde,"\t"," ","\t","  ","\t",timecodeKey,"\t",purchasecodeKey,"\t",materialcodeKey,"\t",amountD.ref(amountSt),"\t",limit(fvoucherrowsComm,"    "),"\t",fvoucherrowsTiko,"\t",fvoucherrowsAkat));
-                    pa.bkstvftg.set(fvoucherrowsFtg);
-                    tabfilWrite();
-                }
-            }
-            fvoucherrows.readNext();
-        }
-        tabfil.close();
-        progressValue.set(100);
-        progress();
-    }
-
--- a/server.src/prg/med/Groubigb.java
-    private Field fmomsEof = new Field("X");
-    private Field fclientsEof = new Field("X");
-    private Field fsuppliersEof = new Field("X");
-    private Field fsuppliercatsEof = new Field("X");
-    private Field faccountsEof = new Field("X");
-    private Field fcostcentresEof = new Field("X");
-    private Field fcostobjectsEof = new Field("X");
-    private Field fvouchersEof = new Field("X");
-    private Field fvoucherrowsEof = new Field("X");
-    private Field fslinvoicesEof = new Field("X");
-    private Field fslpaymentsEof = new Field("X");
-    private Field fplunbookedinvsEof = new Field("X");
-    private Field fplunbookedinvrowsEof = new Field("X");
-    private Field fplinvoicesEof = new Field("X");
-    private Field fplpaymentsEof = new Field("X");
-    private Field accountName = new Field("X(100)");
-    private Field costcentreName = new Field("X(100)");
-    private Field costobjectName = new Field("X(100)");
--- a/server.src/prg/med/Groubigm.java
-    private lib.med.Vduram vduram=new lib.med.Vduram(Groubigm.this);







-    private Field stdVal = new Field("9");
-    private Field stdKey = new Field("999");
-    private Field unixSystem = new Field("X(6)", "SYSTEM");
-    private Field fbudgetclientsEof = new Field("X");
-    private Field fclientsEof = new Field("X");
-    private Field fclientagreementsEof = new Field("X");
-    private Field fcollclientsEof = new Field("X");
-    private Field fcollproductsEof = new Field("X");
-    private Field fproductsEof = new Field("X");
-    private Field fclientcatsEof = new Field("X");
-    private Field fgroupsEof = new Field("X");
-    private Field fdigitalchannelsEof = new Field("X");
-    private Field funitsEof = new Field("X");
-    private Field fagreementsEof = new Field("X");
-    private Field fagreementmediatypesEof = new Field("X");
-    private Field fsurchagreesEof = new Field("X");
-    private Field fsurchagreemediatypesEof = new Field("X");
-    private Field fsurchagreemediasEof = new Field("X");
-    private Field fcollpublishersEof = new Field("X");
-    private Field fpublishersEof = new Field("X");
-    private Field fmediabrandsEof = new Field("X");
-    private Field fmediasEof = new Field("X");
-    private Field flocalmediasEof = new Field("X");
-    private Field fmediaclassesEof = new Field("X");
-    private Field fcollmediatypesEof = new Field("X");
-    private Field fmediatypesEof = new Field("X");
-    private Field fmediestatistikkoderEof = new Field("X");
-    private Field fpricetypesEof = new Field("X");
-    private Field fdiscountcodesEof = new Field("X");
-    private Field fagenciesEof = new Field("X");
-    private Field fplansEof = new Field("X");
-    private Field fordersEof = new Field("X");
-    private Field forderpackagesEof = new Field("X");
-    private Field finsertionpackagesEof = new Field("X");
-    private Field ffordsEof = new Field("X");
-    private Field finsertionsEof = new Field("X");
-    private Field fpricerowsEof = new Field("X");
-    private Field fcinvoicesEof = new Field("X");
-    private Field fcinvoicerowsEof = new Field("X");
-    private Field fagencyadjustmentsEof = new Field("X");
-    private Field fminvoicesEof = new Field("X");
-    private Field fminvoicerowsEof = new Field("X");
-    private Field fdiscrepanciesEof = new Field("X");
-    private Field fvouchersEof = new Field("X");
-    private Field fvoucherrows2Eof = new Field("X");
-    private Field wsMediatypeName = new Field("X(50)");
-    private Field wsRab1Name = new Field("X(50)");
-    private Field wsRab2Name = new Field("X(50)");
-    private Field wsRab3Name = new Field("X(50)");
-    private Field wsRab4Name = new Field("X(50)");
-    private Field momskod = new Field("X");
-    private Field momskod1 = new Field("X");
-    private Field momskod2 = new Field("X");
-    private Field momskod3 = new Field("X");
-    private Field momskod4 = new Field("X");
-    private Field momskod9 = new Field("X");
-    private Field momsgrund = new Field("X");
-    private Field typ = new Field("X(4)");
-    private Field momspl = new Field("X");
-    private Field ptyp = new Field("XX");
-    private Field vernr = new Field("9(6)");
-    private Field bfdat = new Field("9(8)");
-    private Field kto = new Field("X(6)");
-    private Field kst = new Field("X(6)");
-    private Field kbr = new Field("X(6)");
-    private Field wkund = new Field("X(4)");
-    private Field prod = new Field("X(4)");
-    private Field mediaKey = new Field("X(10)");
-    private Field ordernr = new Field("X(6)");
-    private Field tiKod = new Field("XXX");
-    private Field comm = new Field("X(100)");
-    private Field bel = new Field("S9(9)V99");
-    private void skapaFsort() {
-        lib.med.Faktpost.fd fakt=p8921.medfakt.get();
-        lib.med.Kundpost.fd kund=p8921.medkund.get();
-        lib.med.Forepost.fd fore=p8921.medfore.get();
-        lib.med.Fktopost.fd fkto=p8921.medfkto.get();
-        lib.med.For2post.fd for2=p8921.medfor2.get();
-        lib.med.Fradpost.fd frad=p8921.medfrad.get();
-        lib.med.Tidnpost.fd tidn=p8921.medtidn.get();
-        lib.bas.Ftgspost.fd ftgs=basftgs.get();
-        lib.med.Rkgmpost.fd rkgm=p8921.medrkgm.get();
-        lib.med.Tillpost.fd till=p8921.medtill.get();
-        lib.med.Kostpost.fd kost=p8921.medkost.get();
-        lib.med.Tfavpost.fd tfav=p8921.medtfav.get();
-        lib.med.Ordepost.fd orde=p8921.medorde.get();
-        //  Kundfakturor 
-        fakt.post.init();
-        p8921.medFaktStartEg();
-        if (pa.ok()) {
-            p8921.medFaktReadnext();
-        }
-        while (pa.ok()) {
-            if (fakt.bfdat.ref(1,6).compareTo(paFrPer.ref(1,6))>=0) {
-                kund.post.init();
-                kund.typ.set("K");
-                kund.kKund.set(fakt.kund);
-                p8921.medKundRead();
-                ptyp.set(fore.faktFtyp);
-                vernr.ref(1,6).set(fakt.faknr.ref(2,6));
-                bfdat.set(fakt.bfdat);
-                kst.set(kund.kst);
-                kbr.set(kund.kbr);
-                wkund.set(fakt.kund);
-                prod.set(fakt.avdKod);
-                mediaKey.set(SPACE);
-                ordernr.set(SPACE);
-                tiKod.set(SPACE);
-                if (!(kund.internben.equals(SPACE))) {
-                    comm.set(kund.internben);
-                }
-                else {
-                    comm.set(kund.namnkun);
-                }
-                fkto.post.init();
-                fkto.faknr.set(fakt.faknr);
-                p8921.medFktoRead();
-                momskod1.set("N");
-                momskod2.set("N");
-                momskod3.set("N");
-                momskod4.set("N");
-                momskod9.set("N");
-                for (stddata.x.set(1);(!(stddata.x.compareTo(200)>0 || fkto.konto[stddata.x.getInt()-1].equals(SPACE)));stddata.x.increment(1)) {
-                    switch (fkto.konto[stddata.x.getInt()-1].ref(6,1).getStringValue()) {
-                        case "1":
-                            momskod1.set("J");
-                            break;
-                        case "2":
-                            momskod2.set("J");
-                            break;
-                        case "3":
-                            momskod3.set("J");
-                            break;
-                        case "4":
-                            momskod4.set("J");
-                            break;
-                        case "9":
-                            momskod9.set("J");
-                            break;
-                    }
-                }
-                if (momskod9.equals("J")) {
-                    momskod.set("I");
-                }
-                else if (momskod4.equals("J")) {
-                    momskod.set("E");
-                }
-                else if (momskod3.equals("J")) {
-                    momskod.set("U");
-                }
-                else if (momskod2.equals("J") && momskod1.equals("N")) {
-                    momskod.set("N");
-                }
-                else if (momskod1.equals("J")) {
-                    momskod.set("J");
-                }
-                else {
-                    momskod.set(kund.momskod);
-                }
-                typ.set("FKFO");
-                kto.set(fore.ktokfor);
-                bel.set(fakt.kundf, ROUND_HALF_UP);
-                skapaFsort2();
-                typ.set("FMVS");
-                kto.set(fore.ktomoms);
-                bel.set(ZERO.subtract(fakt.moms), ROUND_HALF_UP);
-                skapaFsort2();
-                typ.set("FACO");
-                momspl.set("J");
-                kto.set(for2.f2Ktoaconto);
-                bel.set(ZERO.subtract(fakt.acontoMpl), ROUND_HALF_UP);
-                skapaFsort2();
-                typ.set("FACO");
-                momspl.set("N");
-                kto.set(for2.f2Ktoaconto);
-                bel.set(ZERO.subtract(fakt.acontoMfr), ROUND_HALF_UP);
-                skapaFsort2();
-                frad.post.init();
-                frad.faknr.set(fakt.faknr);
-                p8921.medFradStartEg();
-                if (pa.ok()) {
-                    p8921.medFradReadnext();
-                }
-                while (!(!(pa.ok()) || !(frad.faknr.equals(fakt.faknr)))) {
-                    tidn.post.init();
-                    tidn.typ.set("T");
-                    tidn.tidnid.set(frad.tidn);
-                    p8921.medTidnRead();
-                    if (!kundid.equalsEither("433", "447", "519", "520", "616", "622", "668")) {
-                        mediaKey.set(frad.tidn);
-                    }
-                    else {
-                        mediaKey.set(SPACE);
-                        mediaKey.set(concat(limit(ftgs.foland,SPACE),"-",limit(frad.tidn,SPACE)));
-                    }
-                    //                    END-IF 
-                    ordernr.set(frad.ordernr);
-                    tiKod.set(frad.tiKod);
-                    rkgm.post.init();
-                    rkgm.typ.set("M");
-                    if (frad.medtyp.ref(1,2).compareTo("00")>0) {
-                        rkgm.kodR.set(frad.medtyp);
-                    }
-                    else {
-                        rkgm.kodR.set(tidn.medtyp);
-                    }
-                    p8921.medRkgmRead();
-                    till.post.init();
-                    till.kod.set(frad.tiKod);
-                    p8921.medTillRead();
-                    if (!(frad.momsgrund.equals(SPACE))) {
-                        momsgrund.set(frad.momsgrund);
-                    }
-                    else {
-                        if (frad.tiKod.equals("000")) {
-                            momsgrund.set(tidn.momskod);
-                        }
-                        else {
-                            if (till.moms.equals("K")) {
-                                momsgrund.set(momskod);
-                            }
-                            else if (till.moms.equals("M")) {
-                                momsgrund.set(tidn.momskod);
-                            }
-                            else if (till.moms.equals("N")) {
-                                momsgrund.set("N");
-                            }
-                            else {
-                                momsgrund.set(momskod);
-                            }
-                        }
-                    }
-                    //  Fakturerat kund 
-                    typ.set("FKNE");
-                    momspl.set(momsgrund);
-                    if (!(till.konto.equals(SPACE))) {
-                        kto.set(till.konto);
-                    }
-                    else {
-                        if (frad.tiKod.equals("000") || till.tidnDeb.equals("J")) {
-                            if (!(rkgm.konto.equals(SPACE))) {
-                                kto.set(rkgm.konto);
-                            }
-                            else {
-                                kto.set(fore.ktoannons);
-                            }
-                        }
-                        else {
-                            kto.set(fore.ktotillagg);
-                        }
-                    }
-                    bel.set(ZERO.subtract(frad.netto), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FKPR");
-                    momspl.set(momsgrund);
-                    kto.set(fore.ktoprovis);
-                    bel.set(frad.provK, ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FKPR");
-                    momspl.set(momsgrund);
-                    kto.set(fore.ktoinfers);
-                    bel.set(frad.infErsK, ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FKPR");
-                    momspl.set(momsgrund);
-                    kto.set(fore.ktobetg);
-                    bel.set(frad.betgK, ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FKPR");
-                    momspl.set(momsgrund);
-                    kto.set(fore.ktomtrlers);
-                    bel.set(frad.mtrlersK, ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FKPR");
-                    momspl.set(momsgrund);
-                    kto.set(fore.ktoonline);
-                    bel.set(frad.onlineK, ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FKPR");
-                    momspl.set(momsgrund);
-                    kto.set(fore.ktoteknisk);
-                    bel.set(frad.tekniskK, ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FKPR");
-                    momspl.set(momsgrund);
-                    kto.set(fore.ktokommun);
-                    bel.set(frad.kommunK, ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FKPR");
-                    momspl.set(momsgrund);
-                    kto.set(fore.ktospecifik);
-                    bel.set(frad.specifikK, ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FKPR");
-                    momspl.set(momsgrund);
-                    kto.set(fore.ktokrabnet);
-                    bel.set(frad.krabnetK, ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FKPR");
-                    momspl.set(momsgrund);
-                    kto.set(fore.ktokrab);
-                    bel.set(frad.krabK, ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FKKK");
-                    if (!(rkgm.ktoKapkost.equals(SPACE))) {
-                        kto.set(rkgm.ktoKapkost);
-                    }
-                    else {
-                        kto.set(fore.ktokapkost);
-                    }
-                    bel.set(ZERO.subtract(frad.kapKostK.subtract(frad.kapKost2).subtract(frad.kapKost3).subtract(frad.kapKost4)), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FKKK");
-                    if (!(rkgm.ktoKapkost.equals(SPACE))) {
-                        kto.set(rkgm.ktoKapkost);
-                    }
-                    else {
-                        if (!(fore.ktokapkost2.equals(SPACE))) {
-                            kto.set(fore.ktokapkost2);
-                        }
-                        else {
-                            kto.set(fore.ktokapkost);
-                        }
-                    }
-                    bel.set(ZERO.subtract(frad.kapKost2), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FKKK");
-                    if (!(rkgm.ktoKapkost.equals(SPACE))) {
-                        kto.set(rkgm.ktoKapkost);
-                    }
-                    else {
-                        if (!(fore.ktokapkost3.equals(SPACE))) {
-                            kto.set(fore.ktokapkost3);
-                        }
-                        else {
-                            kto.set(fore.ktokapkost);
-                        }
-                    }
-                    bel.set(ZERO.subtract(frad.kapKost3), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FKKK");
-                    if (!(rkgm.ktoKapkost.equals(SPACE))) {
-                        kto.set(rkgm.ktoKapkost);
-                    }
-                    else {
-                        if (!(fore.ktokapkost4.equals(SPACE))) {
-                            kto.set(fore.ktokapkost4);
-                        }
-                        else {
-                            kto.set(fore.ktokapkost);
-                        }
-                    }
-                    bel.set(ZERO.subtract(frad.kapKost4), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FKKD");
-                    if (!(for2.f2Ktokapkrab.equals(SPACE))) {
-                        kto.set(for2.f2Ktokapkrab);
-                    }
-                    else {
-                        if (!(rkgm.ktoKapkost.equals(SPACE))) {
-                            kto.set(rkgm.ktoKapkost);
-                        }
-                        else {
-                            kto.set(fore.ktokapkost);
-                        }
-                    }
-                    bel.set(ZERO.subtract(frad.kapkRabK), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FKIA");
-                    kto.set(fore.ktoinfavg);
-                    bel.set(ZERO.subtract(frad.ordKostK), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FKIA");
-                    kto.set(for2.f2Ktoinfavg2);
-                    bel.set(ZERO.subtract(frad.ordKost2), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FKIA");
-                    kto.set(for2.f2Ktoinfavg3);
-                    bel.set(ZERO.subtract(frad.ordKost3), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FKIA");
-                    kto.set(for2.f2Ktofaktavg);
-                    bel.set(ZERO.subtract(frad.faktKost), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FKIA");
-                    kto.set(for2.f2Ktoplanavg);
-                    bel.set(ZERO.subtract(frad.planavg), ROUND_HALF_UP);
-                    skapaFsort2();
-                    //  Skuld till media (avräkning av ej medierelaterade kostnader hanteras inte) 
-                    if (frad.tiKod.equals("000") || till.tidnDeb.equals("J")) {
-                        typ.set("FMNE");
-                        //  Det är TILL-KONTO som avgör om TILL-KONTO2 ska användas 
-                        if (!(till.konto.equals(SPACE))) {
-                            kto.set(till.konto2);
-                        }
-                        else {
-                            if (!(rkgm.konto2.equals(SPACE))) {
-                                kto.set(rkgm.konto2);
-                            }
-                            else {
-                                kto.set(for2.f2Ktokstnmed);
-                            }
-                        }
-                        if (!(kto.equals(SPACE))) {
-                            bel.set(frad.netto.subtract(frad.rabBeloppB), ROUND_HALF_UP);
-                            skapaFsort2();
-                            kto.set(for2.f2Ktolagermed);
-                            bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                            skapaFsort2();
-                        }
-                        typ.set("FMPR");
-                        kto.set(for2.f2KtoprovisF);
-                        bel.set(ZERO.subtract(frad.provF), ROUND_HALF_UP);
-                        skapaFsort2();
-                        kto.set(for2.f2Ktolagermed);
-                        bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                        skapaFsort2();
-                        typ.set("FMPR");
-                        kto.set(for2.f2KtoinfersF);
-                        bel.set(ZERO.subtract(frad.infErsF), ROUND_HALF_UP);
-                        skapaFsort2();
-                        kto.set(for2.f2Ktolagermed);
-                        bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                        skapaFsort2();
-                        typ.set("FMPR");
-                        kto.set(for2.f2KtobetgF);
-                        bel.set(ZERO.subtract(frad.betgF), ROUND_HALF_UP);
-                        skapaFsort2();
-                        kto.set(for2.f2Ktolagermed);
-                        bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                        skapaFsort2();
-                        typ.set("FMPR");
-                        kto.set(for2.f2KtomtrlersF);
-                        bel.set(ZERO.subtract(frad.mtrlersF), ROUND_HALF_UP);
-                        skapaFsort2();
-                        kto.set(for2.f2Ktolagermed);
-                        bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                        skapaFsort2();
-                        typ.set("FMPR");
-                        kto.set(for2.f2KtoonlineF);
-                        bel.set(ZERO.subtract(frad.onlineF), ROUND_HALF_UP);
-                        skapaFsort2();
-                        kto.set(for2.f2Ktolagermed);
-                        bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                        skapaFsort2();
-                        typ.set("FMPR");
-                        kto.set(for2.f2KtotekniskF);
-                        bel.set(ZERO.subtract(frad.tekniskF), ROUND_HALF_UP);
-                        skapaFsort2();
-                        kto.set(for2.f2Ktolagermed);
-                        bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                        skapaFsort2();
-                        typ.set("FMPR");
-                        kto.set(for2.f2KtokommunF);
-                        bel.set(ZERO.subtract(frad.kommunF), ROUND_HALF_UP);
-                        skapaFsort2();
-                        kto.set(for2.f2Ktolagermed);
-                        bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                        skapaFsort2();
-                        typ.set("FMPR");
-                        kto.set(for2.f2KtospecifikF);
-                        bel.set(ZERO.subtract(frad.specifikF), ROUND_HALF_UP);
-                        skapaFsort2();
-                        kto.set(for2.f2Ktolagermed);
-                        bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                        skapaFsort2();
-                        typ.set("FMPR");
-                        kto.set(for2.f2KtokrabnetF);
-                        bel.set(ZERO.subtract(frad.krabnetF), ROUND_HALF_UP);
-                        skapaFsort2();
-                        kto.set(for2.f2Ktolagermed);
-                        bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                        skapaFsort2();
-                        typ.set("FMPR");
-                        kto.set(for2.f2KtokapkostLf);
-                        bel.set(frad.kapKostLf, ROUND_HALF_UP);
-                        skapaFsort2();
-                        kto.set(for2.f2Ktolagermed);
-                        bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                        skapaFsort2();
-                    }
-                    //  Skuld till byrå 
-                    typ.set("FBNE");
-                    kto.set(for2.f2KtonettoB);
-                    bel.set(frad.nettoB, ROUND_HALF_UP);
-                    skapaFsort2();
-                    kto.set(for2.f2Ktobyraavr);
-                    bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FBRA");
-                    kto.set(for2.f2KtorabattB);
-                    bel.set(frad.rabBeloppB, ROUND_HALF_UP);
-                    skapaFsort2();
-                    kto.set(for2.f2Ktobyraavr);
-                    bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FBIA");
-                    kto.set(for2.f2KtoinfavgB);
-                    bel.set(frad.ordKostB, ROUND_HALF_UP);
-                    skapaFsort2();
-                    kto.set(for2.f2Ktobyraavr);
-                    bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FBKK");
-                    kto.set(for2.f2KtokapkostB);
-                    bel.set(frad.kapKostB.add(frad.kapKostB2), ROUND_HALF_UP);
-                    skapaFsort2();
-                    kto.set(for2.f2Ktobyraavr);
-                    bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FBKD");
-                    kto.set(for2.f2KtokapkRabB);
-                    bel.set(frad.kapkRabB, ROUND_HALF_UP);
-                    skapaFsort2();
-                    kto.set(for2.f2Ktobyraavr);
-                    bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FBPR");
-                    kto.set(for2.f2KtoprovisB);
-                    bel.set(frad.provB, ROUND_HALF_UP);
-                    skapaFsort2();
-                    kto.set(for2.f2Ktobyraavr);
-                    bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FBPR");
-                    kto.set(for2.f2KtoinfersB);
-                    bel.set(frad.infErsB, ROUND_HALF_UP);
-                    skapaFsort2();
-                    kto.set(for2.f2Ktobyraavr);
-                    bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FBPR");
-                    kto.set(for2.f2KtobetgB);
-                    bel.set(frad.betgB, ROUND_HALF_UP);
-                    skapaFsort2();
-                    kto.set(for2.f2Ktobyraavr);
-                    bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FBPR");
-                    kto.set(for2.f2KtomtrlersB);
-                    bel.set(frad.mtrlersB, ROUND_HALF_UP);
-                    skapaFsort2();
-                    kto.set(for2.f2Ktobyraavr);
-                    bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FBPR");
-                    kto.set(for2.f2KtoonlineB);
-                    bel.set(frad.onlineB, ROUND_HALF_UP);
-                    skapaFsort2();
-                    kto.set(for2.f2Ktobyraavr);
-                    bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FBPR");
-                    kto.set(for2.f2KtotekniskB);
-                    bel.set(frad.tekniskB, ROUND_HALF_UP);
-                    skapaFsort2();
-                    kto.set(for2.f2Ktobyraavr);
-                    bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FBPR");
-                    kto.set(for2.f2KtokommunB);
-                    bel.set(frad.kommunB, ROUND_HALF_UP);
-                    skapaFsort2();
-                    kto.set(for2.f2Ktobyraavr);
-                    bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FBPR");
-                    kto.set(for2.f2KtospecifikB);
-                    bel.set(frad.specifikB, ROUND_HALF_UP);
-                    skapaFsort2();
-                    kto.set(for2.f2Ktobyraavr);
-                    bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FBPR");
-                    kto.set(for2.f2KtokrabnetB);
-                    bel.set(frad.krabnetB, ROUND_HALF_UP);
-                    skapaFsort2();
-                    kto.set(for2.f2Ktobyraavr);
-                    bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                    skapaFsort2();
-                    typ.set("FBPR");
-                    kto.set(for2.f2KtokrabB);
-                    bel.set(frad.krabB, ROUND_HALF_UP);
-                    skapaFsort2();
-                    kto.set(for2.f2Ktobyraavr);
-                    bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                    skapaFsort2();
-                    p8921.medFradReadnext();
-                }
-            }
-            p8921.medFaktReadnext();
-        }
-        //  Byråavräkning - intäkt och kostnad för upp- respektive nedskrivning 
-        kost.post.init();
-        p8921.medKostStartEg();
-        if (pa.ok()) {
-            p8921.medKostReadnext();
-        }
-        while (pa.ok()) {
-            if (kost.bfdat.ref(1,6).compareTo(paFrPer.ref(1,6))>=0) {
-                frad.faknr.set(kost.faknr);
-                frad.faklnr.set(kost.faklnr);
-                p8921.medFradRead();
-                kund.post.init();
-                kund.typ.set("K");
-                kund.kKund.set(frad.kund);
-                p8921.medKundRead();
-                tidn.post.init();
-                tidn.typ.set("T");
-                tidn.tidnid.set(frad.tidn);
-                p8921.medTidnRead();
-                ptyp.set(kost.ptyp);
-                vernr.set(kost.vernr);
-                bfdat.set(kost.bfdat);
-                kst.set(kund.kst);
-                kbr.set(kund.kbr);
-                wkund.set(frad.kund);
-                prod.set(frad.avd);
-                if (!kundid.equalsEither("433", "447", "519", "520", "616", "622", "668")) {
-                    mediaKey.set(frad.tidn);
-                }
-                else {
-                    mediaKey.set(SPACE);
-                    mediaKey.set(concat(limit(ftgs.foland,SPACE),"-",limit(frad.tidn,SPACE)));
-                }
-                //                END-IF 
-                ordernr.set(frad.ordernr);
-                tiKod.set(frad.tiKod);
-                if (!(kund.internben.equals(SPACE))) {
-                    comm.set(kund.internben);
-                }
-                else {
-                    comm.set(kund.namnkun);
-                }
-                rkgm.post.init();
-                rkgm.typ.set("M");
-                if (frad.medtyp.ref(1,2).compareTo("00")>0) {
-                    rkgm.kodR.set(frad.medtyp);
-                }
-                else {
-                    rkgm.kodR.set(tidn.medtyp);
-                }
-                p8921.medRkgmRead();
-                till.post.init();
-                till.kod.set(frad.tiKod);
-                p8921.medTillRead();
-                typ.set("FBRA");
-                kto.set(for2.f2KtorabattB);
-                bel.set(kost.rabatt, ROUND_HALF_UP);
-                skapaFsort2();
-                kto.set(for2.f2Ktobyraavr);
-                bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                skapaFsort2();
-                typ.set("FBIA");
-                kto.set(for2.f2KtoinfavgB);
-                bel.set(kost.ordKost, ROUND_HALF_UP);
-                skapaFsort2();
-                kto.set(for2.f2Ktobyraavr);
-                bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                skapaFsort2();
-                typ.set("FBKK");
-                kto.set(for2.f2KtokapkostB);
-                bel.set(kost.kapKost, ROUND_HALF_UP);
-                skapaFsort2();
-                kto.set(for2.f2Ktobyraavr);
-                bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                skapaFsort2();
-                typ.set("FBKD");
-                kto.set(for2.f2KtokapkRabB);
-                bel.set(kost.kapkRab, ROUND_HALF_UP);
-                skapaFsort2();
-                kto.set(for2.f2Ktobyraavr);
-                bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                skapaFsort2();
-                typ.set("FBPR");
-                kto.set(for2.f2KtoprovisB);
-                bel.set(kost.prov, ROUND_HALF_UP);
-                skapaFsort2();
-                kto.set(for2.f2Ktobyraavr);
-                bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                skapaFsort2();
-                typ.set("FBPR");
-                kto.set(for2.f2KtoinfersB);
-                bel.set(kost.infErs, ROUND_HALF_UP);
-                skapaFsort2();
-                kto.set(for2.f2Ktobyraavr);
-                bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                skapaFsort2();
-                typ.set("FBPR");
-                kto.set(for2.f2KtobetgB);
-                bel.set(kost.betg, ROUND_HALF_UP);
-                skapaFsort2();
-                kto.set(for2.f2Ktobyraavr);
-                bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                skapaFsort2();
-                typ.set("FBPR");
-                kto.set(for2.f2KtomtrlersB);
-                bel.set(kost.mtrlers, ROUND_HALF_UP);
-                skapaFsort2();
-                kto.set(for2.f2Ktobyraavr);
-                bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                skapaFsort2();
-                typ.set("FBPR");
-                kto.set(for2.f2KtoonlineB);
-                bel.set(kost.online, ROUND_HALF_UP);
-                skapaFsort2();
-                kto.set(for2.f2Ktobyraavr);
-                bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                skapaFsort2();
-                typ.set("FBPR");
-                kto.set(for2.f2KtotekniskB);
-                bel.set(kost.teknisk, ROUND_HALF_UP);
-                skapaFsort2();
-                kto.set(for2.f2Ktobyraavr);
-                bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                skapaFsort2();
-                typ.set("FBPR");
-                kto.set(for2.f2KtokommunB);
-                bel.set(kost.kommun, ROUND_HALF_UP);
-                skapaFsort2();
-                kto.set(for2.f2Ktobyraavr);
-                bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                skapaFsort2();
-                typ.set("FBPR");
-                kto.set(for2.f2KtospecifikB);
-                bel.set(kost.specifik, ROUND_HALF_UP);
-                skapaFsort2();
-                kto.set(for2.f2Ktobyraavr);
-                bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                skapaFsort2();
-                typ.set("FBPR");
-                kto.set(for2.f2KtokrabnetB);
-                bel.set(kost.krabnet, ROUND_HALF_UP);
-                skapaFsort2();
-                kto.set(for2.f2Ktobyraavr);
-                bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                skapaFsort2();
-                typ.set("FBPR");
-                kto.set(for2.f2KtokrabB);
-                bel.set(kost.krab, ROUND_HALF_UP);
-                skapaFsort2();
-                kto.set(for2.f2Ktobyraavr);
-                bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                skapaFsort2();
-            }
-            p8921.medKostReadnext();
-        }
-        //  Bokförda bortbokningar 
-        tfav.post.init();
-        p8921.medTfavStartEg();
-        if (pa.ok()) {
-            p8921.medTfavReadnext();
-        }
-        while (pa.ok()) {
-            if ((tfav.typ.equals("B")) && 
-                    (tfav.bfdat.compareTo(ZERO)>0) && 
-                    (tfav.bfdat.ref(1,6).compareTo(paFrPer.ref(1,6))>=0)) {
-                orde.post.init();
-                orde.ordernr.set(tfav.ordernr);
-                p8921.medOrdeRead();
-                if (!(pa.ok())) {
-                    orde.kund.set(tfav.kund);
-                    orde.avdKod.set(tfav.avd);
-                    orde.tidnid.set(tfav.tidn);
-                    orde.upplav.set(tfav.upplav);
-                }
-                kund.post.init();
-                kund.typ.set("K");
-                kund.kKund.set(orde.kund);
-                p8921.medKundRead();
-                tidn.post.init();
-                tidn.typ.set("T");
-                tidn.tidnid.set(orde.tidnid);
-                p8921.medTidnRead();
-                ptyp.set(tfav.ptyp);
-                vernr.set(tfav.vernr);
-                bfdat.set(tfav.bfdat);
-                kst.set(kund.kst);
-                kbr.set(kund.kbr);
-                wkund.set(orde.kund);
-                prod.set(orde.avdKod);
-                if (!kundid.equalsEither("433", "447", "519", "520", "616", "622", "668")) {
-                    mediaKey.set(orde.tidnid);
-                }
-                else {
-                    mediaKey.set(SPACE);
-                    mediaKey.set(concat(limit(ftgs.foland,SPACE),"-",limit(orde.tidnid,SPACE)));
-                }
-                //                END-IF 
-                ordernr.set(orde.ordernr);
-                tiKod.set(SPACE);
-                if (!(kund.internben.equals(SPACE))) {
-                    comm.set(kund.internben);
-                }
-                else {
-                    comm.set(kund.namnkun);
-                }
-                rkgm.post.init();
-                rkgm.typ.set("M");
-                rkgm.kodR.set(tidn.medtyp);
-                p8921.medRkgmRead();
-                till.post.init();
-                till.kod.set(tfav.tiKod);
-                p8921.medTillRead();
-                typ.set("BORT");
-                if (!(till.kontoBortbokn.equals(SPACE))) {
-                    kto.set(till.kontoBortbokn);
-                }
-                else {
-                    if (!(rkgm.kontoBortbokn.equals(SPACE))) {
-                        kto.set(rkgm.kontoBortbokn);
-                    }
-                    else {
-                        kto.set(fore.ktobortmed);
-                    }
-                }
-                bel.set(ZERO.subtract(tfav.belopp.subtract(tfav.formErs).subtract(tfav.infoErs).subtract(tfav.betg).subtract(tfav.mtrlers).subtract(tfav.online).subtract(tfav.teknisk).subtract(tfav.kommun).subtract(tfav.specifik).subtract(tfav.krabnet).add(tfav.kklf)), ROUND_HALF_UP);
-                skapaFsort2();
-                kto.set(for2.f2Ktolagermed);
-                bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                skapaFsort2();
-            }
-            p8921.medTfavReadnext();
-        }
-    }
-
-    private void skapaFsort2() {
-        lib.med.Forepost.fd fore=p8921.medfore.get();
-        if (!bel.ref(1,10).isNumeric()) {
-            bel.set(ZERO);
-        }
-        if (!(bel.equals(ZERO)) || !(kto.equals(SPACE))) {
-            if (kto.equals(SPACE)) {
-                kto.set("9999");
-            }
-            if (typ.equalsEither("FACO", "FKNE", "FKPR", "FKKK", "FKKD", "FKIA")) {
-                if (kto.ref(5,1).equals(SPACE)) {
-                    kto.ref(5,1).set("0");
-                }
-                if (momskod.equals("U")) {
-                    kto.ref(6,1).set("3");
-                }
-                else if (momskod.equals("E")) {
-                    kto.ref(6,1).set("4");
-                }
-                else if (momskod.equals("I")) {
-                    kto.ref(6,1).set("9");
-                }
-                else if ((momskod.equals("N")) || 
-                        (typ.equals("FACO") && !(momspl.equals("J"))) || 
-                        (typ.equals("FKNE") && !(momspl.equals("J"))) || 
-                        (typ.equals("FKPR") && fore.faktMomsProv.equals("N") && !(momspl.equals("J")))) {
-                    kto.ref(6,1).set("2");
-                }
-                else {
-                    kto.ref(6,1).set("1");
-                }
-            }
-            fsortPost.init();
-            fsortPtyp.set(ptyp);
-            fsortVernr.set(vernr);
-            fsortBfdat.set(bfdat);
-            fsortKto.set(kto);
-            fsortKst.set(kst);
-            fsortKbr.set(kbr);
-            fsortKund.set(wkund);
-            fsortProd.set(prod);
-            fsortMediaKey.set(mediaKey);
-            fsortOrdernr.set(ordernr);
-            fsortTiKod.set(tiKod);
-            fsort.read();
-            if (!(fsortFs.equals("00"))) {
-                fsortData.init();
-                fsortComm.set(comm);
-            }
-            if (fsortFs.equals("00")) {
-                fsortBel.increment(bel);
-                fsortPost.rewrite();
-            }
-            else {
-                fsortBel.set(bel);
-                fsortPost.write();
-            }
-        }
-    }
-
-    private void getSizeNameFrad() {
-        lib.med.Fradpost.fd frad=p8921.medfrad.get();
-        lib.med.Formpost.fd form=p8921.medform.get();
-        if (!(frad.format.equals(SPACE))) {
-            form.typ.set("O");
-            form.kod.set(frad.format);
-            p8921.medFormRead();
-            if (pa.ok()) {
-                sizeName.set(form.benamn1);
-            }
-            else {
-                sizeName.set(frad.format);
-            }
-        }
-        else if (!(frad.bredd.equals(ZERO))) {
-            sizeWidthD.set(frad.bredd);
-            while (!(!(sizeWidthD.ref(1,1).equals(SPACE)))) {
-                sizeWidthD.ref(1,1).set(sizeWidthD.ref(2,1));
-                sizeWidthD.ref(2,1).set(sizeWidthD.ref(3,1));
-                sizeWidthD.ref(3,1).set(SPACE);
-            }
-            sizeHeightD.set(frad.hojd);
-            if (sizeHeightD.ref(5,1).equals("0")) {
-                sizeHeightD.ref(4,2).set(SPACE);
-            }
-            while (!(!(sizeHeightD.ref(1,1).equals(SPACE)))) {
-                sizeHeightD.ref(1,1).set(sizeHeightD.ref(2,1));
-                sizeHeightD.ref(2,1).set(sizeHeightD.ref(3,1));
-                sizeHeightD.ref(3,1).set(sizeHeightD.ref(4,1));
-                sizeHeightD.ref(4,1).set(sizeHeightD.ref(5,1));
-                sizeHeightD.ref(5,1).set(SPACE);
-            }
-            sizeName.set(SPACE);
-            sizeName.set(concat(limit(sizeWidthD.ref(1,3),SPACE)," x ",limit(sizeHeightD.ref(1,5),SPACE)));
-        }
-        else {
-            sizeName.set(SPACE);
-        }
-    }
-
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisakod.set("F");
-        stddata.stdVisakod.ref(2).set(pa.txtnr.ref(1));
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisakod);
-    }
-
-    private void z05BlankaMeddelande() {
-        call("prg.bas.visa", pa.paraArea, "F000");
-        pa.txtnr.set(ZERO);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdFunk, stddata.stdKom);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            call("prg.bas.visa", pa.paraArea, "F902");
-        }
-    }
-
-    private void z21Upshift() {
-        z21Konv.toUpper();
-    }
-
--- a/server.src/prg/med/Groubigp.java
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Groubigp.this, pa);
-    private lib.pro.Bokfpost probokf=new lib.pro.Bokfpost(Groubigp.this, pa);
-    private Field fclientsEof = new Field("X");
-    private Field fcollclientsEof = new Field("X");
-    private Field fclientcatsEof = new Field("X");
-    private Field fgroupsEof = new Field("X");
-    private Field fprojectsEof = new Field("X");
-    private Field fjobtypesEof = new Field("X");
-    private Field fprojmarks1Eof = new Field("X");
-    private Field fprojmarks2Eof = new Field("X");
-    private Field fcampaignsEof = new Field("X");
-    private Field frefsEof = new Field("X");
-    private Field femployeesEof = new Field("X");
-    private Field fcalendarsEof = new Field("X");
-    private Field fcontractedhoursEof = new Field("X");
-    private Field fteamsEof = new Field("X");
-    private Field femployeecatsEof = new Field("X");
-    private Field fpositionsEof = new Field("X");
-    private Field ftimecatsEof = new Field("X");
-    private Field fpurchasecatsEof = new Field("X");
-    private Field ftimecodesEof = new Field("X");
-    private Field fpurchasecodesEof = new Field("X");
-    private Field fmaterialcodesEof = new Field("X");
-    private Field fprojectbudgetsEof = new Field("X");
-    private Field fprojectbudgetfeesEof = new Field("X");
-    private Field fprojectbudgetpurchasesEof = new Field("X");
-    private Field fprojectbudgetothersEof = new Field("X");
-    private Field ftimereportsEof = new Field("X");
-    private Field ftimeadjustmentsEof = new Field("X");
-    private Field fpurchasesEof = new Field("X");
-    private Field fpurchaseadjustmentsEof = new Field("X");
-    private Field fmaterialsEof = new Field("X");
-    private Field fmaterialadjustmentsEof = new Field("X");
-    private Field fpinvoicesEof = new Field("X");
-    private Field fpinvoicetimesEof = new Field("X");
-    private Field fpinvoicepurchasesEof = new Field("X");
-    private Field fpinvoicematerialsEof = new Field("X");
-    private Field fvouchersEof = new Field("X");
-    private Field fvoucherrows2Eof = new Field("X");
-    private Field momskod = new Field("X");
-    private Field typ = new Field("X(4)");
-    private Field momspl = new Field("X");
-    private Field ptyp = new Field("XX");
-    private Field vernr = new Field("9(6)");
-    private Field bfdat = new Field("9(8)");
-    private Field kto = new Field("X(6)");
-    private Field kst = new Field("X(6)");
-    private Field kbr = new Field("X(6)");
-    private Field kund = new Field("X(4)");
-    private Field wproj = new Field("9(4)");
-    private Field meda = new Field("X(4)");
-    private Field leve = new Field("X(10)");
-    private Field akod = new Field("XXX");
-    private Field ikod = new Field("XXX");
-    private Field okod = new Field("XXX");
-    private Field akat = new Field("XX");
-    private Field comm = new Field("X(100)");
-    private Field bel = new Field("S9(9)V99");
-    private Field wsMomspro = new Field("99V99");
-    private Field wsMomsdec = new Field("X");
-    private Field unixSystem = new Field("X(6)", "SYSTEM");
-    private void skapaFsort() {
-        lib.lev.Faktpost.fd lev_fakt=levfakt.get();
-        lib.pro.Faktpost.fd pro_fakt=profakt.get();
-        lib.pro.Projpost.fd proj=proproj.get();
-        lib.pro.Bokfpost.fd bokf=probokf.get();
-        lib.pro.Forepost.fd fore=profore.get();
-        lib.pro.Vandpost.fd vand=provand.get();
-        lib.pro.Defkpost.fd defk=prodefk.get();
-        lib.pro.Inktpost.fd inkt=proinkt.get();
-        lib.pro.Nattpost.fd natt=pronatt.get();
-        lev_fakt.f9702OpenIO();
-        pro_fakt.post.init();
-        call("prg.pro.p4io", pa.paraArea, da.fakt, da.startEg, pro_fakt.post);
-        if (pa.ok()) {
-            call("prg.pro.p4io", pa.paraArea, da.fakt, da.readnext, pro_fakt.post);
-        }
-        while (pa.ok()) {
-            if (pro_fakt.bfdat.ref(1,6).compareTo(paFrPer.ref(1,6))>=0) {
-                proj.post.init();
-                proj.projidG.set(pro_fakt.projidG);
-                call("prg.pro.p4io", pa.paraArea, da.proj, da.read, proj.post);
-                bokf.post.init();
-                bokf.projidG.set(pro_fakt.projidG);
-                bokf.faknr.set(pro_fakt.faknr);
-                call("prg.pro.p4io", pa.paraArea, da.bokf, da.startEg, bokf.post);
-                if (pa.ok()) {
-                    call("prg.pro.p4io", pa.paraArea, da.bokf, da.readnext, bokf.post);
-                }
-                while (!(!(pa.ok()) || !(bokf.projidG.equals(pro_fakt.projidG)) || !(bokf.faknr.equals(pro_fakt.faknr)) || (bokf.bokkto.ref(6,1).equalsEither("1", "3", "4", "9")))) {
-                    call("prg.pro.p4io", pa.paraArea, da.bokf, da.readnext, bokf.post);
-                }
-                if (pa.ok() && bokf.projidG.equals(pro_fakt.projidG) && bokf.faknr.equals(pro_fakt.faknr)) {
-                    switch (bokf.bokkto.ref(6,1).getStringValue()) {
-                        case "1":
-                            momskod.set("J");
-                            break;
-                        case "3":
-                            momskod.set("U");
-                            break;
-                        case "4":
-                            momskod.set("E");
-                            break;
-                        case "9":
-                            momskod.set("I");
-                            break;
-                        default:
-                            momskod.set(proj.momskod);
-                    }
-                }
-                else {
-                    momskod.set(proj.momskod);
-                }
-                ptyp.ref(1,1).set("C");
-                ptyp.ref(2,1).set(pa.bkstvftg.ref(1,1));
-                vernr.ref(1,6).set(pro_fakt.faknr.ref(2,6));
-                bfdat.set(pro_fakt.bfdat);
-                kst.set(proj.kostnst);
-                kbr.set(proj.kstbaer);
-                kund.set(pro_fakt.kundid);
-                wproj.set(pro_fakt.projlnr);
-                meda.set(SPACE);
-                leve.set(SPACE);
-                akod.set(SPACE);
-                ikod.set(SPACE);
-                okod.set(SPACE);
-                akat.set(SPACE);
-                comm.set(proj.namnkun);
-                typ.set("FKFO");
-                kto.set(fore.ktokfor);
-                bel.set(pro_fakt.fakarv.add(pro_fakt.fakink).add(pro_fakt.fakmat).add(pro_fakt.fakaco).add(pro_fakt.fakmoms), ROUND_HALF_UP);
-                skapaFsort2();
-                typ.set("FMVS");
-                call("prg.pro.p4sub", pa.paraArea, "MOMSPRO-MOMS", proj.momssats, wsMomspro, wsMomsdec, kto);
-                bel.set(ZERO.subtract(pro_fakt.fakmoms), ROUND_HALF_UP);
-                skapaFsort2();
-                vand.post.init();
-                vand.projidG.set(pro_fakt.projidG);
-                vand.faknr.set(pro_fakt.faknr);
-                call("prg.pro.p4io", pa.paraArea, da.vand, da.startEg, vand.post);
-                if (pa.ok()) {
-                    call("prg.pro.p4io", pa.paraArea, da.vand, da.readnext, vand.post);
-                }
-                while (!(!(pa.ok()) || !(vand.projidG.equals(pro_fakt.projidG)) || !(vand.faknr.equals(pro_fakt.faknr)))) {
-                    switch (vand.saldotyp.getStringValue()) {
-                        case "A":
-                            meda.set(vand.medarid);
-                            leve.set(SPACE);
-                            akod.set(vand.kod);
-                            ikod.set(SPACE);
-                            okod.set(SPACE);
-                            akat.set(vand.kat);
-                            typ.set("FARV");
-                            defk.key.init();
-                            defk.typkk.set("B");
-                            defk.kod.set(vand.kod);
-                            call("prg.pro.p4io", pa.paraArea, da.defk, da.read, defk.post);
-                            if (pa.ok()) {
-                                if (defk.ktokod.ref(1,4).equalsEither("0000", SPACE)) {
-                                    kto.set(SPACE);
-                                }
-                                else {
-                                    kto.set(defk.ktokod);
-                                }
-                            }
-                            else {
-                                kto.set(SPACE);
-                            }
-                            bel.set(ZERO.subtract(vand.belfak), ROUND_HALF_UP);
-                            skapaFsort2();
-                            if (!(fore.ktokostA.equals(SPACE))) {
-                                typ.set("KARV");
-                                defk.key.init();
-                                defk.typkk.set("B");
-                                defk.kod.set(vand.kod);
-                                call("prg.pro.p4io", pa.paraArea, da.defk, da.read, defk.post);
-                                if (pa.ok()) {
-                                    if (defk.ktokod.ref(1,4).equalsEither("0000", SPACE)) {
-                                        kto.set(SPACE);
-                                    }
-                                    else {
-                                        kto.set(defk.ktokost);
-                                    }
-                                }
-                                else {
-                                    kto.set(SPACE);
-                                }
-                                bel.set(vand.infak, ROUND_HALF_UP);
-                                skapaFsort2();
-                                kto.set(fore.ktokostA);
-                                bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                                skapaFsort2();
-                            }
-                            break;
-                        case "I":
-                            inkt.post.init();
-                            inkt.trantyp1.set("J");
-                            inkt.projidG.set(vand.projidG);
-                            inkt.inknr1.set(vand.aammarb);
-                            call("prg.pro.p4io", pa.paraArea, da.inkt, da.read, inkt.post);
-                            lev_fakt.llrecord.init();
-                            lev_fakt.llptyp.set(inkt.bokPtyp);
-                            lev_fakt.llvernr.set(inkt.vernr1);
-                            lev_fakt.f9702Read();
-                            meda.set(SPACE);
-                            leve.set(lev_fakt.llsrnr);
-                            akod.set(SPACE);
-                            ikod.set(vand.kod);
-                            okod.set(SPACE);
-                            akat.set(SPACE);
-                            typ.set("FINK");
-                            defk.key.init();
-                            defk.typkk.set("J");
-                            defk.kod.set(vand.kod);
-                            call("prg.pro.p4io", pa.paraArea, da.defk, da.read, defk.post);
-                            if (pa.ok()) {
-                                if (defk.ktokod.ref(1,4).equalsEither("0000", SPACE)) {
-                                    kto.set(SPACE);
-                                }
-                                else {
-                                    kto.set(defk.ktokod);
-                                }
-                            }
-                            else {
-                                kto.set(SPACE);
-                            }
-                            bel.set(ZERO.subtract(vand.belfak), ROUND_HALF_UP);
-                            skapaFsort2();
-                            if (!(fore.ktokostI.equals(SPACE))) {
-                                typ.set("KINK");
-                                defk.key.init();
-                                defk.typkk.set("J");
-                                defk.kod.set(vand.kod);
-                                call("prg.pro.p4io", pa.paraArea, da.defk, da.read, defk.post);
-                                if (pa.ok()) {
-                                    if (defk.ktokod.ref(1,4).equalsEither("0000", SPACE)) {
-                                        kto.set(SPACE);
-                                    }
-                                    else {
-                                        kto.set(defk.ktokost);
-                                    }
-                                }
-                                else {
-                                    kto.set(SPACE);
-                                }
-                                bel.set(vand.infak, ROUND_HALF_UP);
-                                skapaFsort2();
-                                kto.set(fore.ktokostI);
-                                bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                                skapaFsort2();
-                            }
-                            break;
-                        case "N":
-                            natt.post.init();
-                            natt.trantyp1.set("N");
-                            natt.projidG.set(vand.projidG);
-                            natt.matnr1.set(vand.aammarb);
-                            call("prg.pro.p4io", pa.paraArea, da.natt, da.read, natt.post);
-                            meda.set(SPACE);
-                            leve.set(SPACE);
-                            akod.set(SPACE);
-                            ikod.set(SPACE);
-                            okod.set(vand.kod);
-                            akat.set(SPACE);
-                            typ.set("FMAT");
-                            defk.key.init();
-                            defk.typkk.set("N");
-                            defk.kod.set(vand.kod);
-                            call("prg.pro.p4io", pa.paraArea, da.defk, da.read, defk.post);
-                            if (pa.ok()) {
-                                if (defk.ktokod.ref(1,4).equalsEither("0000", SPACE)) {
-                                    kto.set(SPACE);
-                                }
-                                else {
-                                    kto.set(defk.ktokod);
-                                }
-                            }
-                            else {
-                                kto.set(SPACE);
-                            }
-                            bel.set(ZERO.subtract(vand.belfak), ROUND_HALF_UP);
-                            skapaFsort2();
-                            if (!(fore.ktokostM.equals(SPACE))) {
-                                typ.set("KMAT");
-                                defk.key.init();
-                                defk.typkk.set("N");
-                                defk.kod.set(vand.kod);
-                                call("prg.pro.p4io", pa.paraArea, da.defk, da.read, defk.post);
-                                if (pa.ok()) {
-                                    if (defk.ktokod.ref(1,4).equalsEither("0000", SPACE)) {
-                                        kto.set(SPACE);
-                                    }
-                                    else {
-                                        kto.set(defk.ktokost);
-                                    }
-                                }
-                                else {
-                                    kto.set(SPACE);
-                                }
-                                bel.set(vand.infak, ROUND_HALF_UP);
-                                skapaFsort2();
-                                kto.set(fore.ktokostM);
-                                bel.set(ZERO.subtract(bel), ROUND_HALF_UP);
-                                skapaFsort2();
-                            }
-                            break;
-                        case "K":
-                            meda.set(SPACE);
-                            leve.set(SPACE);
-                            akod.set(SPACE);
-                            ikod.set(SPACE);
-                            okod.set(SPACE);
-                            akat.set(SPACE);
-                            typ.set("FACO");
-                            kto.set(fore.ktoacon);
-                            bel.set(ZERO.subtract(vand.belfak), ROUND_HALF_UP);
-                            skapaFsort2();
-                            break;
-                    }
-                    call("prg.pro.p4io", pa.paraArea, da.vand, da.readnext, vand.post);
-                }
-            }
-            call("prg.pro.p4io", pa.paraArea, da.fakt, da.readnext, pro_fakt.post);
-        }
-        lev_fakt.f9702Close();
-    }
-
-    private void skapaFsort2() {
-        lib.pro.Faktpost.fd pro_fakt=profakt.get();
-        lib.pro.Inktpost.fd inkt=proinkt.get();
-        lib.pro.Nattpost.fd natt=pronatt.get();
-        lib.pro.Forepost.fd fore=profore.get();
-        if (!(bel.equals(ZERO)) || !(kto.equals(SPACE))) {
-            if (kto.equals(SPACE)) {
-                kto.set("9999");
-            }
-            if (typ.equalsEither("FARV", "FINK", "FMAT", "FACO")) {
-                if (kto.ref(5,1).equals(SPACE)) {
-                    kto.ref(5,1).set("0");
-                }
-                if (typ.equals("FARV")) {
-                    switch (momskod.getStringValue()) {
-                        case "I":
-                            kto.ref(6,1).set("9");
-                            break;
-                        case "U":
-                            call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "U", kto.ref(6,1));
-                            break;
-                        case "N":
-                            call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "N", kto.ref(6,1));
-                            break;
-                        case "E":
-                            call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "E", kto.ref(6,1));
-                            break;
-                        case "J":
-                            call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "J", kto.ref(6,1));
-                            break;
-                        case "A":
-                            call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "N", kto.ref(6,1));
-                            break;
-                        default:
-                            call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "N", kto.ref(6,1));
-                    }
-                }
-                if (typ.equals("FINK")) {
-                    if (momskod.equals("I")) {
-                        kto.ref(6,1).set("9");
-                    }
-                    else if (momskod.equals("U")) {
-                        call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "U", kto.ref(6,1));
-                    }
-                    else if (momskod.equals("N")) {
-                        call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "N", kto.ref(6,1));
-                    }
-                    else if (momskod.equals("E")) {
-                        call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "E", kto.ref(6,1));
-                    }
-                    else if ((momskod.equalsEither("J", "A")) && 
-                            (inkt.momskod.equals("J"))) {
-                        call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "J", kto.ref(6,1));
-                            }
-                    else if ((momskod.equalsEither("J", "A")) && 
-                            (inkt.momskod.equals("N"))) {
-                        call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "N", kto.ref(6,1));
-                            }
-                    else {
-                        call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "N", kto.ref(6,1));
-                    }
-                }
-                if (typ.equals("FMAT")) {
-                    if (momskod.equals("I")) {
-                        kto.ref(6,1).set("9");
-                    }
-                    else if (momskod.equals("U")) {
-                        call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "U", kto.ref(6,1));
-                    }
-                    else if (momskod.equals("N")) {
-                        call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "N", kto.ref(6,1));
-                    }
-                    else if (momskod.equals("E")) {
-                        call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "E", kto.ref(6,1));
-                    }
-                    else if ((momskod.equalsEither("J", "A")) && 
-                            (natt.momskod.equals("J"))) {
-                        call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "J", kto.ref(6,1));
-                            }
-                    else if ((momskod.equalsEither("J", "A")) && 
-                            (natt.momskod.equals("N"))) {
-                        call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "N", kto.ref(6,1));
-                            }
-                    else {
-                        call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "N", kto.ref(6,1));
-                    }
-                }
-                if (typ.equals("FACO")) {
-                    if (fore.momskdc.equals("J") && (momskod.equalsEither("J", "A"))) {
-                        call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "J", kto.ref(6,1));
-                    }
-                    else if (momskod.equals("I")) {
-                        kto.ref(6,1).set("9");
-                    }
-                    else if (momskod.equals("U")) {
-                        call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "U", kto.ref(6,1));
-                    }
-                    else if (momskod.equals("E")) {
-                        call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "E", kto.ref(6,1));
-                    }
-                    else {
-                        call("prg.pro.p4sub", pa.paraArea, "MOMSFSG-PROJ", pro_fakt.projidG, "N", kto.ref(6,1));
-                    }
-                }
-            }
-            fsortPost.init();
-            fsortPtyp.set(ptyp);
-            fsortVernr.set(vernr);
-            fsortBfdat.set(bfdat);
-            fsortKto.set(kto);
-            fsortKst.set(kst);
-            fsortKbr.set(kbr);
-            fsortKund.set(kund);
-            fsortProj.set(wproj);
-            fsortMeda.set(meda);
-            fsortLeve.set(leve);
-            fsortAkod.set(akod);
-            fsortIkod.set(ikod);
-            fsortOkod.set(okod);
-            fsortAkat.set(akat);
-            fsort.read();
-            if (!(fsortFs.equals("00"))) {
-                fsortData.init();
-                fsortComm.set(comm);
-            }
-            if (fsortFs.equals("00")) {
-                fsortBel.increment(bel);
-                fsortPost.rewrite();
-            }
-            else {
-                fsortBel.set(bel);
-                fsortPost.write();
-            }
-        }
-    }
-
--- a/server.src/prg/med/Groubigx.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Groubigx.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Groubigx.this);
-    private lib.med.Planpost medplan=new lib.med.Planpost(Groubigx.this, pa);
-    private lib.med.Pforpost medpfor=new lib.med.Pforpost(Groubigx.this, pa);
-    private lib.med.Kundpost medkund=new lib.med.Kundpost(Groubigx.this, pa);
-    private lib.med.Avdepost medavde=new lib.med.Avdepost(Groubigx.this, pa);
-    private lib.med.Avtapost medavta=new lib.med.Avtapost(Groubigx.this, pa);
-    private lib.med.Medapost medmeda=new lib.med.Medapost(Groubigx.this, pa);
-    private lib.med.Tidnpost medtidn=new lib.med.Tidnpost(Groubigx.this, pa);
-    private lib.med.Samapost medsama=new lib.med.Samapost(Groubigx.this, pa);
-    private lib.med.Tillpost medtill=new lib.med.Tillpost(Groubigx.this, pa);
-    private lib.med.Ordepost medorde=new lib.med.Ordepost(Groubigx.this, pa);
-    private lib.med.Ordppost medordp=new lib.med.Ordppost(Groubigx.this, pa);
-    private lib.med.Oinfpost medoinf=new lib.med.Oinfpost(Groubigx.this, pa);
-    private lib.med.Oforpost medofor=new lib.med.Oforpost(Groubigx.this, pa);
-    private lib.med.Ofpapost medofpa=new lib.med.Ofpapost(Groubigx.this, pa);
-    private lib.med.Rkgmpost medrkgm=new lib.med.Rkgmpost(Groubigx.this, pa);
-    private lib.med.Forepost medfore=new lib.med.Forepost(Groubigx.this, pa);
-    private lib.med.Datab meddatabDa=new lib.med.Datab(Groubigx.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Groubigx.this);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Groubigx.this, pa);
-    private lib.pro.Fatepost profate=new lib.pro.Fatepost(Groubigx.this, pa);
-    private lib.pro.Faanpost profaan=new lib.pro.Faanpost(Groubigx.this, pa);
-    private lib.pro.Datab prodatabDa=new lib.pro.Datab(Groubigx.this);
-    private Field xmlP1 = new Field("X(80)");
-    private Field xmlP2 = new Field("X(80)");
-    private Field xmlP3 = new Field("X(80)");
-    private Field xmlP = new Field("X(100)");
-    private Field xmlPPek = new Field("S9(9)");
-    private Field xmlTmpP = new Field("X(100)");
-    private Field xmlTmpPPek = new Field("S9(9)");
-    private Field xmlBelD = new Field("--------9.99");
-    private Field infilEof = new Field("X");
-    private void xmlLeftP1() {
-        xmlP.set(xmlP1);
-        xmlLeft();
-        xmlP1.set(xmlP);
-    }
-
-    private void xmlLeftP2() {
-        xmlP.set(xmlP2);
-        xmlLeft();
-        xmlP2.set(xmlP);
-    }
-
-    private void xmlLeftP3() {
-        xmlP.set(xmlP3);
-        xmlLeft();
-        xmlP3.set(xmlP);
-    }
-
-    private void xmlLeft() {
-        if (!(xmlP.equals(SPACE))) {
-            for (xmlPek.set(1);(!((!xmlP.ref(xmlPek,1).equalsEither(SPACE, "0")) || 
-                            (xmlPek.compareTo(25)>0)));xmlPek.increment(1)) {
-            }
-            xmlTmpRad.set(xmlP.ref(xmlPek));
-            xmlP.set(xmlTmpRad);
-        }
-    }
-
-    private void xmlTalP1() {
-        xmlTal();
-        xmlP1.set(xmlP);
-    }
-
-    private void xmlTalP2() {
-        xmlTal();
-        xmlP2.set(xmlP);
-    }
-
-    private void xmlTalP3() {
-        xmlTal();
-        xmlP3.set(xmlP);
-    }
-
-    private void xmlTal() {
-        xmlBelD.ref(10,1).set(",");
-        if (xmlBelD.ref(11,2).equals("00")) {
-            xmlBelD.ref(10).set(SPACE);
-        }
-        if (xmlBelD.ref(12,1).equals("0")) {
-            xmlBelD.ref(12).set(SPACE);
-        }
-        xmlP.set(xmlBelD.ref(1));
-    }
-
-    private void xmlKonvP1() {
-        xmlP.set(xmlP1);
-        xmlKonv();
-        xmlP1.set(xmlP);
-    }
-
-    private void xmlKonvP2() {
-        xmlP.set(xmlP2);
-        xmlKonv();
-        xmlP2.set(xmlP);
-    }
-
-    private void xmlKonvP3() {
-        xmlP.set(xmlP3);
-        xmlKonv();
-        xmlP3.set(xmlP);
-    }
-
-    private void xmlKonv() {
-        xmlTmpP.set(SPACE);
-        xmlTmpPPek.set(1);
-        xmlPPek.set(1);
-        while (!(xmlPPek.compareTo(80)>0)) {
-            switch (xmlP.ref(xmlPPek,1).getStringValue()) {
-                case "&":
-                    if (xmlTmpPPek.compareTo(96)<=0) {
-                        xmlTmpP.ref(xmlTmpPPek,5).set("&amp;");
-                        xmlTmpPPek.increment(5);
-                    }
-                    break;
-                case "<":
-                    if (xmlTmpPPek.compareTo(97)<=0) {
-                        xmlTmpP.ref(xmlTmpPPek,4).set("&lt;");
-                        xmlTmpPPek.increment(4);
-                    }
-                    break;
-                case ">":
-                    if (xmlTmpPPek.compareTo(97)<=0) {
-                        xmlTmpP.ref(xmlTmpPPek,4).set("&gt;");
-                        xmlTmpPPek.increment(4);
-                    }
-                    break;
-                case "\"":
-                    if (xmlTmpPPek.compareTo(95)<=0) {
-                        xmlTmpP.ref(xmlTmpPPek,6).set("&quot;");
-                        xmlTmpPPek.increment(6);
-                    }
-                    break;
-                default:
-                    if (xmlTmpPPek.compareTo(100)<=0) {
-                        xmlTmpP.ref(xmlTmpPPek,1).set(xmlP.ref(xmlPPek,1));
-                        xmlTmpPPek.increment(1);
-                    }
-            }
-            xmlPPek.increment(1);
-        }
-        xmlP.set(xmlTmpP);
-    }
-
-    private void xmlKonvFrXml() {
-        xmlTmpP.set(SPACE);
-        xmlTmpPPek.set(1);
-        xmlPPek.set(1);
-        while (!(xmlPPek.compareTo(80)>0)) {
-            if (xmlP.ref(xmlPPek,5).equals("&amp;")) {
-                if (xmlTmpPPek.compareTo(100)<=0) {
-                    xmlTmpP.ref(xmlTmpPPek,1).set("&");
-                    xmlTmpPPek.increment(1);
-                }
-                xmlPPek.increment(5);
-            }
-            else if (xmlP.ref(xmlPPek,4).equals("&lt;")) {
-                if (xmlTmpPPek.compareTo(100)<=0) {
-                    xmlTmpP.ref(xmlTmpPPek,1).set("<");
-                    xmlTmpPPek.increment(1);
-                }
-                xmlPPek.increment(4);
-            }
-            else if (xmlP.ref(xmlPPek,4).equals("&gt;")) {
-                if (xmlTmpPPek.compareTo(100)<=0) {
-                    xmlTmpP.ref(xmlTmpPPek,1).set(">");
-                    xmlTmpPPek.increment(1);
-                }
-                xmlPPek.increment(4);
-            }
-            else if (xmlP.ref(xmlPPek,6).equals("&quot;")) {
-                if (xmlTmpPPek.compareTo(100)<=0) {
-                    xmlTmpP.ref(xmlTmpPPek,1).set("\"");
-                    xmlTmpPPek.increment(1);
-                }
-                xmlPPek.increment(6);
-            }
-            else {
-                if (xmlTmpPPek.compareTo(100)<=0) {
-                    xmlTmpP.ref(xmlTmpPPek,1).set(xmlP.ref(xmlPPek,1));
-                    xmlTmpPPek.increment(1);
-                }
-                xmlPPek.increment(1);
-            }
-        }
-        xmlP.set(xmlTmpP);
-    }
-
--- a/server.src/prg/med/Grousync.java
-    private lib.med.Stddata stddata=new lib.med.Stddata(Grousync.this);
-    private lib.med.Datab da=new lib.med.Datab(Grousync.this);







-    private Field stdVal = new Field("9");
-    private Field stdKey = new Field("999");
-    private Field fsortEof = new Field("X");
-    private void z04Meddela() {
-        stddata.stdVisakod.set("F");
-        stddata.stdVisakod.ref(2).set(pa.txtnr.ref(1));
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisakod);
-    }
-
-    private void z05BlankaMeddelande() {
-        call("prg.bas.visa", pa.paraArea, "F000");
-        pa.txtnr.set(ZERO);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdFunk, stddata.stdKom);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            call("prg.bas.visa", pa.paraArea, "F902");
-        }
-    }
-
-    private void z21Upshift() {
-        z21Konv.toUpper();
-    }
-
--- a/server.src/prg/med/Hdtinut.java
-    private Field tabfilPost = tabfil.extend("X(5000)");
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Hdtinut.this, pa);
-    private lib.med.Vduram vduram=new lib.med.Vduram(Hdtinut.this);
-    private Field tmp = new Field("X(200)");
-    private Field wsTidnnamn = new Field("X(35)");
-    private Field wsPaket = new Field("X");
-    private Field wsPaketFormat = new Field("X(100)");
-    private Field wsPaketPlacering = new Field("X(30)");
-    private Field wsPaketFarg = new Field("X(50)");
-    private Field foregDatum = new Field("9(8)");
-    private Field wsKtrlSid = new Field("X(10)");
-    private Field wsKtrlSektSid = new Field("9(4)");
-    private Field wsKtrlKomm1 = new Field("X(60)");
-    private Field wsKtrlKomm2 = new Field("X(60)");
-    private Field wsKtrlKomm3 = new Field("X(60)");
-    private Field wsFord = new Field("X(500)");
-    private Field helD = new Field("---------9");
-    private Field helSt = new Field("S9(9)");
-    private Field fselEof = new Field("X");







-    private Field stdVal = new Field("9");
-    private Field stdKey = new Field("999");
--- a/server.src/prg/med/Hdtxml.java
-    private lib.med.P8calc p8calc=new lib.med.P8calc(Hdtxml.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Hdtxml.this);
-    private lib.bas.Std std=new lib.bas.Std(Hdtxml.this);
-    private lib.med.Datab da=new lib.med.Datab(Hdtxml.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp = new Field("X(300)");
-    private Field tmp1 = new Field("X(100)");
-    private Field tmp2 = new Field("X(100)");
-    private Field tmpHel = new Field("S9(10)");
-    private Field tmpBel = new Field("S9(10)V99");
-    private Field tmpDatum = new Field("9(8)");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(100)");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field xmlFilnamn = new Field("X(100)");
-    private Field xlsFilnamn = new Field("X(100)");
--- a/server.src/prg/med/Impfakt.java
-    private lib.med.Datab da=new lib.med.Datab(Impfakt.this);
-    private lib.med.Stddata stddata=new lib.med.Stddata(Impfakt.this);
--- a/server.src/prg/med/Inittest.java
-    private lib.med.Stddata stddata=new lib.med.Stddata(Inittest.this);
--- a/server.src/prg/med/Iumdsync.java
-    private lib.med.Stddata stddata=new lib.med.Stddata(Iumdsync.this);
-    private lib.med.Datab da=new lib.med.Datab(Iumdsync.this);







-    private Field stdVal = new Field("9");
-    private Field stdKey = new Field("999");
-    private Field fsortEof = new Field("X");
-    private void z04Meddela() {
-        stddata.stdVisakod.set("F");
-        stddata.stdVisakod.ref(2).set(pa.txtnr.ref(1));
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisakod);
-    }
-
-    private void z05BlankaMeddelande() {
-        call("prg.bas.visa", pa.paraArea, "F000");
-        pa.txtnr.set(ZERO);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdFunk, stddata.stdKom);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            call("prg.bas.visa", pa.paraArea, "F902");
-        }
-    }
-
-    private void z21Upshift() {
-        z21Konv.toUpper();
-    }
-
--- a/server.src/prg/med/K223ml.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K223ml.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K223ml.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K223ml.this);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(K223ml.this);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(K223ml.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(K223ml.this);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(K223ml.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K223ml.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K223ml.this);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(K223ml.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel = new Field("S9(10)");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p1 = new Field("X(50)");
-    private Field p3 = new Field("X(10000)");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");






-    private Field selAvde = new Field("X(1000)");
-    private Field selKkat = new Field("X(1000)");
-    private Field selGrup = new Field("X(1000)");
-    private Field selAvta = new Field("X(1000)");
-    private Field selKans = new Field("X(1000)");
-    private Field selMgrp = new Field("X(1000)");
-    private Field selTidn = new Field("X(1000)");
-    private Field selMtyp = new Field("X(1000)");
-    private Field selBran = new Field("X(1000)");
-    private Field selTsta = new Field("X(1000)");
-    private Field selMeda = new Field("X(1000)");
-    private Field selTiko = new Field("X(1000)");
-    private Field selOsta = new Field("X(1000)");
-    private Field selIsta = new Field("X(1000)");
-    private Field selAkon = new Field("X(1000)");
-    private Field selPlan = new Field("X(1000)");
-    private Field selOrde = new Field("X(1000)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field tmpOrdernr = new Field("9(6)");
-    private Field sortnr = new Field("S9(9)");
-    private Field dataText = new Field("X(100)");
-    private Field dataDest = new Field("X");
-    private Field tmpKod = new Field("XXX");
-    private Field tmpSort = new Field("X");
-    private Field antalkolumner = new Field("999");
-    private Field sumniv = new Field("99");
-    private Field startniv1 = new Field("9999");
-    private Field startniv2 = new Field("9999");
-    private Field startniv3 = new Field("9999");
-    private Field tmpStartniv = new Field("9999");
-    private Field aktrad = new Field("9999");
-    private Field kolbokst = new Field("99");
-    private Field kb1 = new Field("99");
-    private Field kb2 = new Field("99");
-    private Field mtrlDatD = new Field("X(10)");
-    private Field mtrlTidD = new Field("X(5)");
-    private Field tabfilFilnamn = new Field("X(50)");
-    private Field kommMax = new Field("S9(9)");
-    private void testaNum() {
-        lib.med.Tidnpost.fd tidn=p8921.medtidn.get();
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/med/K223mvrp.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K223mvrp.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K223mvrp.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K223mvrp.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K223mvrp.this);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(K223mvrp.this);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(K223mvrp.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(K223mvrp.this);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(K223mvrp.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(K223mvrp.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K223mvrp.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K223mvrp.this);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(K223mvrp.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel = new Field("S9(10)");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p1 = new Field("X(50)");
-    private Field p3 = new Field("X(10000)");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");






-    private Field selAvde = new Field("X(1000)");
-    private Field selKkat = new Field("X(1000)");
-    private Field selGrup = new Field("X(1000)");
-    private Field selAvta = new Field("X(1000)");
-    private Field selKans = new Field("X(1000)");
-    private Field selMgrp = new Field("X(1000)");
-    private Field selTidn = new Field("X(1000)");
-    private Field selMtyp = new Field("X(1000)");
-    private Field selBran = new Field("X(1000)");
-    private Field selTsta = new Field("X(1000)");
-    private Field selMeda = new Field("X(1000)");
-    private Field selTiko = new Field("X(1000)");
-    private Field selOsta = new Field("X(1000)");
-    private Field selIsta = new Field("X(1000)");
-    private Field selAkon = new Field("X(1000)");
-    private Field selPlan = new Field("X(1000)");
-    private Field selOrde = new Field("X(1000)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)V99");
-    private Field sum2b = new Field("S9(10)V99");
-    private Field tmpOrdernr = new Field("9(6)");
-    private Field sortnr = new Field("S9(9)");
-    private Field dataText = new Field("X(100)");
-    private Field dataDest = new Field("X");
-    private Field format = new Field("X(100)");
-    private Field formatBreddD = new Field("ZZ9");
-    private Field formatHojdD = new Field("ZZ9,9");
-    private Field tmpKod = new Field("XXX");
-    private Field tmpSort = new Field("X");
-    private Field antalkolumner = new Field("999");
-    private Field sumniv = new Field("99");
-    private Field startniv1 = new Field("9999");
-    private Field startniv2 = new Field("9999");
-    private Field startniv3 = new Field("9999");
-    private Field tmpStartniv = new Field("9999");
-    private Field aktrad = new Field("9999");
-    private Field kolbokst = new Field("99");
-    private Field kb1 = new Field("99");
-    private Field kb2 = new Field("99");
-    private Field paketNr = new Field("9(9)");
-    private Field paketTidn = new Field("X(4)");
-    private Field paketDatum = new Field("9(8)");
-    private Field paketFormat = new Field("X(10)");
-    private Field paketPlacering = new Field("X(30)");
-    private Field paketMtrlDag = new Field("9(8)");
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/med/K226ub.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K226ub.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K226ub.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K226ub.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K226ub.this);
-    private lib.kun.Fakbpost kunfakb=new lib.kun.Fakbpost(K226ub.this, pa);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(K226ub.this, pa);
-    private lib.med.P8calc p8calc=new lib.med.P8calc(K226ub.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K226ub.this);
-    private lib.med.Datab da=new lib.med.Datab(K226ub.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field fsort2Eof = new Field("X", "N");
-    private Field rub = new Field("X(100)");
-    private Field typ = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selFtg = new Field("XXXX");
--- a/server.src/prg/med/K22rant.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K22rant.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K22rant.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K22rant.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K22rant.this);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(K22rant.this);
-    private lib.med.Datab da=new lib.med.Datab(K22rant.this);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(K22rant.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(K22rant.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K22rant.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K22rant.this);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(K22rant.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field faconEof = new Field("X", "N");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel = new Field("S9(10)");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p1 = new Field("X(50)");
-    private Field p3 = new Field("X(10000)");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");






-    private Field selAvde = new Field("X(1000)");
-    private Field selKkat = new Field("X(1000)");
-    private Field selGrup = new Field("X(1000)");
-    private Field selAvta = new Field("X(1000)");
-    private Field selKans = new Field("X(1000)");
-    private Field selMgrp = new Field("X(1000)");
-    private Field selTidn = new Field("X(1000)");
-    private Field selMtyp = new Field("X(1000)");
-    private Field selBran = new Field("X(1000)");
-    private Field selTsta = new Field("X(1000)");
-    private Field selMeda = new Field("X(1000)");
-    private Field selTiko = new Field("X(1000)");
-    private Field selOsta = new Field("X(1000)");
-    private Field selIsta = new Field("X(1000)");
-    private Field selAkon = new Field("X(1000)");
-    private Field selPlan = new Field("X(1000)");
-    private Field selOrde = new Field("X(1000)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sum1 = new Field("S9(10)V99");
-    private Field sum2 = new Field("S9(10)V99");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)V99");
-    private Field sum2b = new Field("S9(10)V99");
-    private Field antal1 = new Field("99999");
-    private Field tmpOrdernr = new Field("9(6)");
-    private Field sortnr = new Field("S9(9)");
-    private Field dataText = new Field("X(100)");
-    private Field dataDest = new Field("X");
-    private Field format = new Field("X(100)");
-    private Field formatBreddD = new Field("ZZ9");
-    private Field formatHojdD = new Field("ZZ9,9");
-    private Field tmpKod = new Field("XXX");
-    private Field tmpSort = new Field("X");
-    private Field antalkolumner = new Field("999");
-    private Field sumniv = new Field("99");
-    private Field startniv1 = new Field("9999");
-    private Field startniv2 = new Field("9999");
-    private Field startniv3 = new Field("9999");
-    private Field tmpStartniv = new Field("9999");
-    private Field aktrad = new Field("9999");
-    private Field kolbokst = new Field("99");
-    private Field kb1 = new Field("99");
-    private Field kb2 = new Field("99");
-    private Field paketNr = new Field("9(9)");
-    private Field paketTidn = new Field("X(4)");
-    private Field paketDatum = new Field("9(8)");
-    private Field paketFormat = new Field("X(10)");
-    private Field paketPlacering = new Field("X(30)");
-    private Field paketMtrlDag = new Field("9(8)");
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/med/K347ml.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K347ml.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K347ml.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K347ml.this);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(K347ml.this);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(K347ml.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(K347ml.this);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(K347ml.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K347ml.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K347ml.this);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(K347ml.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel = new Field("S9(10)");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p1 = new Field("X(50)");
-    private Field p3 = new Field("X(10000)");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field oldV = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");






-    private Field selAvde = new Field("X(1000)");
-    private Field selKkat = new Field("X(1000)");
-    private Field selGrup = new Field("X(1000)");
-    private Field selAvta = new Field("X(1000)");
-    private Field selKans = new Field("X(1000)");
-    private Field selMgrp = new Field("X(1000)");
-    private Field selTidn = new Field("X(1000)");
-    private Field selMtyp = new Field("X(1000)");
-    private Field selBran = new Field("X(1000)");
-    private Field selTsta = new Field("X(1000)");
-    private Field selMeda = new Field("X(1000)");
-    private Field selTiko = new Field("X(1000)");
-    private Field selOsta = new Field("X(1000)");
-    private Field selIsta = new Field("X(1000)");
-    private Field selAkon = new Field("X(1000)");
-    private Field selPlan = new Field("X(1000)");
-    private Field selOrde = new Field("X(1000)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field tmpOrdernr = new Field("9(6)");
-    private Field sortnr = new Field("S9(9)");
-    private Field dataText = new Field("X(100)");
-    private Field dataDest = new Field("X");
-    private Field tmpKod = new Field("XXX");
-    private Field tmpSort = new Field("X");
-    private Field antalkolumner = new Field("999");
-    private Field sumniv = new Field("99");
-    private Field startniv1 = new Field("9999");
-    private Field startniv2 = new Field("9999");
-    private Field startniv3 = new Field("9999");
-    private Field tmpStartniv = new Field("9999");
-    private Field aktrad = new Field("9999");
-    private Field kolbokst = new Field("99");
-    private Field kb1 = new Field("99");
-    private Field kb2 = new Field("99");
-    private Field mtrlDatD = new Field("X(10)");
-    private Field mtrlTidD = new Field("X(5)");
-    private Field tabfilFilnamn = new Field("X(50)");
-    private Field kommMax = new Field("S9(9)");
-    private void testaNum() {
-        lib.med.Tidnpost.fd tidn=p8921.medtidn.get();
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/med/K375krab.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K375krab.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K375krab.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K375krab.this);
-    private lib.med.Datab da=new lib.med.Datab(K375krab.this);
-    private lib.bas.Std std=new lib.bas.Std(K375krab.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K375krab.this);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(K375krab.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field betPek = new Field("S9(9)");
-    private Field aktLbNetnet = new Field("S9(10)V99");
-    private Field totTfKrab = new Field("S9(10)V99");
-    private Field krabDgr = new Field("9(6)");
-    private Field tmp = new Field("X(300)");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel = new Field("S9(10)");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(10000)");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selFtgs = new Field("X(1000)");
-    private Field selTidn = new Field("X(1000)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field tmpKod = new Field("XXX");
-    private Field tmpSort = new Field("X");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/med/K407krab.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K407krab.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K407krab.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K407krab.this);
-    private lib.med.Datab da=new lib.med.Datab(K407krab.this);
-    private lib.bas.Std std=new lib.bas.Std(K407krab.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K407krab.this);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(K407krab.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp = new Field("X(300)");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpHel = new Field("S9(10)");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(10000)");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field tmpKod = new Field("XXX");
-    private Field tmpSort = new Field("X");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/med/K432im.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K432im.this);
-    private lib.med.Datab da=new lib.med.Datab(K432im.this);
-    private Field fsortEof = new Field("X");
--- a/server.src/prg/med/K432imp.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K432imp.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(K432imp.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(K432imp.this, webpara, pa);
-    private Field fsortEof = new Field("X");
-    private Field paFtg = new Field("X(4)");
--- a/server.src/prg/med/K433dgr.java
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K433dgr.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K433dgr.this);
-    private lib.med.Datab da=new lib.med.Datab(K433dgr.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K433dgr.this);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(K433dgr.this);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(K433dgr.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field faconEof = new Field("X", "N");
-    private Field faco2Eof = new Field("X", "N");
-    private Field foverEof = new Field("X", "N");
-    private Field tmp = new Field("X(300)");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(10000)");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selFtgs = new Field("X(1000)");
-    private Field selTidn = new Field("X(1000)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field tmpKod = new Field("XXX");
-    private Field tmpSort = new Field("X");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/med/K433outr.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K433outr.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K433outr.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K433outr.this);
-    private lib.gem.Pgempost gempgem=new lib.gem.Pgempost(K433outr.this, pa);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(K433outr.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(K433outr.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K433outr.this);
-    private Field format = new Field("X(8)");
-    private Field placering = new Field("X(8)");
-    private Field pris = new Field("S9(9)");
-    private Field yta = new Field("S9(9)");
-    private Field vac = new Field("S9(9)");
-    private Field cpc = new Field("S9(9)");
-    private Field datNum = new Field("9(6)");
-    private Field datNum2 = new Field("9(6)");
-    private Field antDgr = new Field("S9(9)");
-    private Field antVeckor = new Field("S9(9)V99");
-    private Field ytaDgr = new Field("S9(9)");
-    private Field ytaVeckor = new Field("S9(9)");
-    private Field prisYtaDag = new Field("S9(9)");
-    private Field prisYtaVecka = new Field("S9(9)");
-    private Field belopp = new Field("S9(9)");
-    private Field summa = new Field("S9(9)");
-    private Field lnr = new Field("S9(9)");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field sel = new Field("X(1000)");
-    private Field selDatfr = new Field("9(8)");
-    private Field selDatti = new Field("9(8)");
-    private Field selFtgs = new Field("X(1000)");
-    private Field selTidn = new Field("X(1000)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field orderPek = new Field("S9(9)");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/med/K433uann.java
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K433uann.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K433uann.this);
-    private lib.med.Datab da=new lib.med.Datab(K433uann.this);
-    private lib.bas.Std std=new lib.bas.Std(K433uann.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K433uann.this);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(K433uann.this);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(K433uann.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field fkundEof = new Field("X", "N");
-    private Field tmp = new Field("X(300)");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpHel = new Field("S9(10)");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(10000)");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field tmpKod = new Field("XXX");
-    private Field tmpSort = new Field("X");
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/med/K433ut.java
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K433ut.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K433ut.this);
-    private lib.med.Datab da=new lib.med.Datab(K433ut.this);
-    private lib.bas.Std std=new lib.bas.Std(K433ut.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K433ut.this);
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/med/K446per.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K446per.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K446per.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K446per.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K446per.this);
-    private lib.kun.Kundpost kunkund=new lib.kun.Kundpost(K446per.this, pa);
-    private lib.kun.Faktpost kunfakt=new lib.kun.Faktpost(K446per.this, pa);
-    private lib.kun.Fakbpost kunfakb=new lib.kun.Fakbpost(K446per.this, pa);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(K446per.this, pa);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(K446per.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K446per.this);
-    private lib.med.Datab da=new lib.med.Datab(K446per.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field saldo = new Field("S9(9)V99");
-    private Field beft = new Field("S9(9)V99");
-    private Field kreditfors = new Field("S9(9)");
-    private Field kundkat = new Field("XX");
-    private Field fordKund = new Field("X(8)");
-    private Field fordAvd = new Field("X(4)");
-    private Field fordProc = new Field("999V9999");
-    private Field fordInfavg = new Field("S9(9)");
-    private Field fordRef = new Field("X(50)");
-    private Field fordAnt = new Field("S9(9)");
-    private Field tmpHel = new Field("S9(10)");
-    private Field sel = new Field("X(1000)");
-    private Field selFtg = new Field("XXXX");
--- a/server.src/prg/med/K474avde.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(K474avde.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(K474avde.this);
-    private Field tmpHel = new Field("9(9)");
-        lib.bas.Ftgspost.fd ftgs=basftgs.get();
-        lib.med.Gruppost.fd grup=p8921.medgrup.get();
-        lib.med.Overpost.fd over=p8921.medover.get();
--- a/server.src/prg/med/K474expk.java
-    private lib.bas.Beho beho=new lib.bas.Beho(K474expk.this);
-    private lib.med.Datab da=new lib.med.Datab(K474expk.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(K474expk.this, webpara, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field beskr = new Field("XXX");
-    private Field fran = new Field("99V99");
-    private Field till = new Field("99V99");
--- a/server.src/prg/med/K474kund.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(K474kund.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(K474kund.this);
-    private Field tmpHel = new Field("9(9)");
-        lib.med.Gruppost.fd grup=p8921.medgrup.get();
-        lib.med.Overpost.fd over=p8921.medover.get();
--- a/server.src/prg/med/K474tidn.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(K474tidn.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(K474tidn.this);
-    private Field tmpHel = new Field("9(9)");
-        lib.bas.Ftgspost.fd ftgs=basftgs.get();
-        lib.med.Gruppost.fd grup=p8921.medgrup.get();
-        lib.med.Overpost.fd over=p8921.medover.get();
--- a/server.src/prg/med/K501cog.java
--- a/server.src/prg/med/K501cogm.java
--- a/server.src/prg/med/K501cogp.java
--- a/server.src/prg/med/K501kra.java
--- a/server.src/prg/med/K501krap.java
--- a/server.src/prg/med/K519annk.java
--- a/server.src/prg/med/K519cent.java
--- a/server.src/prg/med/K519per.java
--- a/server.src/prg/med/K519per5.java
--- a/server.src/prg/med/K910apme.java
--- a/server.src/prg/med/Mindxml.java
--- a/server.src/prg/med/Msfmkop.java
--- a/server.src/prg/med/Ntiseord.java
--- a/server.src/prg/med/Omddmkop.java
--- a/server.src/prg/med/Omdfmkop.java
--- a/server.src/prg/med/Omdnmkop.java
--- a/server.src/prg/med/Omdrsync.java
--- a/server.src/prg/med/Ostatus.java
--- a/server.src/prg/med/P8900501.java
--- a/server.src/prg/med/P8900502.java
--- a/server.src/prg/med/P8900503.java
--- a/server.src/prg/med/P8900504.java
--- a/server.src/prg/med/P8900505.java
--- a/server.src/prg/med/P8900506.java
--- a/server.src/prg/med/P8kredba.java
--- a/server.src/prg/med/Pmimkop.java
--- a/server.src/prg/med/Pmixmlm2.java
--- a/server.src/prg/med/Pmixmlm3.java
--- a/server.src/prg/med/Rctxml.java
--- a/server.src/prg/med/Toinsync.java
--- a/server.src/prg/med/Webaco.java
--- a/server.src/prg/med/Webavst.java
--- a/server.src/prg/med/Webbavr.java
--- a/server.src/prg/med/Webdaff.java
--- a/server.src/prg/med/Webeplut.java
--- a/server.src/prg/med/Webfaav.java
--- a/server.src/prg/med/Webfrg.java
--- a/server.src/prg/med/Webgraf.java
--- a/server.src/prg/med/Webkorri.java
--- a/server.src/prg/med/Webkred.java
--- a/server.src/prg/med/Webmefak.java
--- a/server.src/prg/med/Webmrap.java
--- a/server.src/prg/med/Weboue.java
--- a/server.src/prg/med/Webpehu.java
--- a/server.src/prg/med/Webplan.java
--- a/server.src/prg/med/Webplexp.java
--- a/server.src/prg/med/Webpur.java
--- a/server.src/prg/med/Webskafv.java
--- a/server.src/prg/med/Webslist.java
--- a/server.src/prg/med/Webtvfak.java
--- a/server.src/prg/med/Whord.java
--- a/server.src/prg/med/Workflow.java
--- a/server.src/prg/med/Xgrou07.java
--- a/server.src/prg/med/Xgrou108.java
--- a/server.src/prg/med/Xgrou109.java
--- a/server.src/prg/med/Xgrou110.java
--- a/server.src/prg/med/Xgrou112.java
--- a/server.src/prg/med/Xgrou12.java
--- a/server.src/prg/med/Xgrou123.java
--- a/server.src/prg/med/Xgrou124.java
--- a/server.src/prg/med/Xgrou125.java
--- a/server.src/prg/med/Xgrou129.java
--- a/server.src/prg/med/Xgrou13.java
--- a/server.src/prg/med/Xgrou130.java
--- a/server.src/prg/med/Xgrou23.java
--- a/server.src/prg/med/Xgrou25.java
--- a/server.src/prg/med/Xgrou28.java
--- a/server.src/prg/med/Xgrou29.java
--- a/server.src/prg/med/Xgrou35.java
--- a/server.src/prg/med/Xgrou41.java
--- a/server.src/prg/med/Xgrou42.java
--- a/server.src/prg/med/Xgrou45.java
--- a/server.src/prg/med/Xgrou56.java
--- a/server.src/prg/med/Xgrou57.java
--- a/server.src/prg/med/Xgrou61.java
--- a/server.src/prg/med/Xgrou62.java
--- a/server.src/prg/med/Xgrou63.java
--- a/server.src/prg/med/Xgrou64.java
--- a/server.src/prg/med/Xgrou65.java
--- a/server.src/prg/med/Xgrou66.java
--- a/server.src/prg/med/Xgrou69.java
--- a/server.src/prg/med/Xgrou70.java
--- a/server.src/prg/med/Xgrou76.java
--- a/server.src/prg/med/Xgrou79.java
--- a/server.src/prg/med/Xgrou92.java
--- a/server.src/prg/med/Xgrou93.java
--- a/server.src/prg/med/Xgrou95.java
--- a/server.src/prg/med/Xgrou99.java
--- a/server.src/prg/med/Xkase07.java
--- a/server.src/prg/med/Xkase09.java
-    private Field proFil1Data = proFil1Post.extend("X(7019)");
-    private Field proFil2Data = proFil2Post.extend("X(5000)");
-    private Field proFil21Data = proFil21Post.extend("X(698)");
-    private lib.gem.Bsynpost gembsyn=new lib.gem.Bsynpost(Xkase09.this, pa);
-    private lib.pro.Forepost profore=new lib.pro.Forepost(Xkase09.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Xkase09.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Xkase09.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Xkase09.this, pa);
-    private lib.pro.Textpost protext=new lib.pro.Textpost(Xkase09.this, pa);
-    private lib.pro.Calepost procale=new lib.pro.Calepost(Xkase09.this, pa);
-    private lib.pro.Almapost proalma=new lib.pro.Almapost(Xkase09.this, pa);
-    private lib.pro.Lexipost prolexi=new lib.pro.Lexipost(Xkase09.this, pa);
-    private lib.pro.Peripost properi=new lib.pro.Peripost(Xkase09.this, pa);
-    private lib.pro.Pestpost propest=new lib.pro.Pestpost(Xkase09.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Xkase09.this);
-    private lib.med.Datab da=new lib.med.Datab(Xkase09.this);
-    private Field wsSparaFilnamnAp = new Field("X(50)");
-        private void proFil1OpenIo() {
-            proFilhantInit();
-            proFil1Init();
-            proFilhantExit();
-        }
-
-        private void proFil1OpenI() {
-            proFilhantInit();
-            if (proFil1Open.equals("J") && !(proFil1OpenFtg.equals(pa.bkstvftg))) {
-                proFil1Close();
-            }
-            if (!(proFil1Open.equals("J"))) {
-                proFil1Filnamn.set(SPACE);
-                proFil1Filnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-1"));
-                proFil1.open("INPUT");
-                if (!((p04921Dasvar.equals("00")))) {
-                    proFil1.close();
-                    proFil1.open("I-O");
-                    proCheck00();
-                    proFil1.close();
-                    proCheck00();
-                    proFil1.open("INPUT");
-                    proCheck00();
-                }
-                proFil1Open.set("J");
-                proFil1OpenFtg.set(pa.bkstvftg);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil1Read() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.read();
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFil1ReadKl() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proFil1.readWithLock();
-            proCheck0023();
-            proFilhantExit();
-        private void proFil1Readnext() {
-            proFil1Init();
-            proFil1.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start(">", "pro_fil_1_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readNext();
-                }
-            proCheck0010();
-        private void proFil1ReadnextK2() {
-            proFil1.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start(">", "pro_fil_1_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readNext();
-                }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proFil1ReadnextK3() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start(">", "pro_fil_1_key3");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readNext();
-                }
-            proCheck000210();
-            proFilhantExit();
-        private void proFil1ReadnextK4() {
-            proFil1Init();
-            proFil1.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start(">", "pro_fil_1_key4");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readNext();
-                }
-            }
-            proCheck000210();
-        private void proFil1ReadnextK5() {
-            proFil1Init();
-            proFil1.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start(">", "pro_fil_1_key5");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readNext();
-                }
-            proCheck000210();
-        private void proFil1ReadnextK6() {
-            proFil1Init();
-            proFil1.readNext();
-                proFil1.start(">", "pro_fil_1_key6");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readNext();
-                }
-            proCheck000210();
-        private void proFil1ReadnextK7() {
-            proFil1Init();
-            proFil1.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                proFil1.start(">", "pro_fil_1_key7");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readNext();
-                }
-            proCheck000210();
-        private void proFil1Readprev() {
-            proFil1Init();
-            proFil1.readPrevious();
-                proFil1.start("<", "pro_fil_1_key");
-                    proFil1.readPrevious();
-        private void proFil1ReadprevK2() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("<", "pro_fil_1_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proFil1.readPrevious();
-                }
-            }
-            proCheck000210();
-            proFilhantExit();
-        }
-
-        private void proFil1ReadprevK3() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.readPrevious();
-                proFil1.start("<", "pro_fil_1_key3");
-                    proFil1.readPrevious();
-        private void proFil1ReadprevK4() {
-            proFil1Init();
-            proFil1.readPrevious();
-                proFil1.start("<", "pro_fil_1_key4");
-                    proFil1.readPrevious();
-        private void proFil1ReadprevK5() {
-            proFil1Init();
-            proFil1.readPrevious();
-                proFil1.start("<", "pro_fil_1_key5");
-                    proFil1.readPrevious();
-            proCheck000210();
-        private void proFil1ReadprevK6() {
-            proFil1Init();
-            proFil1.readPrevious();
-                proFil1.start("<", "pro_fil_1_key6");
-                    proFil1.readPrevious();
-        private void proFil1ReadprevK7() {
-            proFil1Init();
-            proFil1.readPrevious();
-                proFil1.start("<", "pro_fil_1_key7");
-                    proFil1.readPrevious();
-        private void proFil1Rewrite() {
-            proFil1Init();
-            proFil1Post.rewrite();
-                call("prg.med.bibinc", pa.paraArea, proFil1OpenFtg, pa.bfar, "PRO", p04921Record, "U", proFil1Post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil1Write() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1Post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1Post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFil1OpenFtg, pa.bfar, "PRO", p04921Record, "N", proFil1Post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil1Delete() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFil1OpenFtg, pa.bfar, "PRO", p04921Record, "D", proFil1Post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil1StartEg() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT<", "pro_fil_1_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT<", "pro_fil_1_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFil1StartEgK2() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT<", "pro_fil_1_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT<", "pro_fil_1_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil1StartEgK3() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT<", "pro_fil_1_key3");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT<", "pro_fil_1_key3");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil1StartEgK4() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT<", "pro_fil_1_key4");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT<", "pro_fil_1_key4");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil1StartEgK5() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT<", "pro_fil_1_key5");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT<", "pro_fil_1_key5");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil1StartEgK6() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT<", "pro_fil_1_key6");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT<", "pro_fil_1_key6");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil1StartEgK7() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT<", "pro_fil_1_key7");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT<", "pro_fil_1_key7");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil1StartprevEg() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT>", "pro_fil_1_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT>", "pro_fil_1_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFil1StartprevEgK2() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT>", "pro_fil_1_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT>", "pro_fil_1_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil1StartprevEgK3() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT>", "pro_fil_1_key3");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT>", "pro_fil_1_key3");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil1StartprevEgK4() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT>", "pro_fil_1_key4");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT>", "pro_fil_1_key4");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil1StartprevEgK5() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT>", "pro_fil_1_key5");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT>", "pro_fil_1_key5");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil1StartprevEgK6() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT>", "pro_fil_1_key6");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT>", "pro_fil_1_key6");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil1StartprevEgK7() {
-            proFilhantInit();
-            proFil1Init();
-            proFil1.start("NOT>", "pro_fil_1_key7");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil1.start("NOT>", "pro_fil_1_key7");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proForeOpenIo() {
-            p04921Record.set("FORE");
-            p04921Action.set("OPEN-IO");
-            proFil1OpenIo();
-        }
-
-        private void proForeOpenI() {
-            p04921Record.set("FORE");
-            p04921Action.set("OPEN-I");
-            proFil1OpenI();
-        }
-
-        private void proForeClose() {
-            p04921Record.set("FORE");
-            p04921Action.set("CLOSE");
-            proFil1Close();
-        }
-
-        private void proForeRead() {
-            p04921Record.set("FORE");
-            p04921Action.set("READ");
-            proFil1Post.set(profore.get().post);
-            proFil1Read();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadKl() {
-            p04921Record.set("FORE");
-            p04921Action.set("READ-KL");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadKl();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadnext() {
-            p04921Record.set("FORE");
-            p04921Action.set("READNEXT");
-            proFil1Post.set(profore.get().post);
-            proFil1Readnext();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadnextK2() {
-            p04921Record.set("FORE");
-            p04921Action.set("READNEXT-K2");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadnextK2();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadnextK3() {
-            p04921Record.set("FORE");
-            p04921Action.set("READNEXT-K3");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadnextK3();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadnextK4() {
-            p04921Record.set("FORE");
-            p04921Action.set("READNEXT-K4");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadnextK4();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadnextK5() {
-            p04921Record.set("FORE");
-            p04921Action.set("READNEXT-K5");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadnextK5();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadnextK6() {
-            p04921Record.set("FORE");
-            p04921Action.set("READNEXT-K6");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadnextK6();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadnextK7() {
-            p04921Record.set("FORE");
-            p04921Action.set("READNEXT-K7");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadnextK7();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadprev() {
-            p04921Record.set("FORE");
-            p04921Action.set("READPREV");
-            proFil1Post.set(profore.get().post);
-            proFil1Readprev();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadprevK2() {
-            p04921Record.set("FORE");
-            p04921Action.set("READPREV-K2");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadprevK2();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadprevK3() {
-            p04921Record.set("FORE");
-            p04921Action.set("READPREV-K3");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadprevK3();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadprevK4() {
-            p04921Record.set("FORE");
-            p04921Action.set("READPREV-K4");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadprevK4();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadprevK5() {
-            p04921Record.set("FORE");
-            p04921Action.set("READPREV-K5");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadprevK5();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadprevK6() {
-            p04921Record.set("FORE");
-            p04921Action.set("READPREV-K6");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadprevK6();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeReadprevK7() {
-            p04921Record.set("FORE");
-            p04921Action.set("READPREV-K7");
-            proFil1Post.set(profore.get().post);
-            proFil1ReadprevK7();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeRewrite() {
-            p04921Record.set("FORE");
-            p04921Action.set("REWRITE");
-            proFil1Post.set(profore.get().post);
-            proFil1Rewrite();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeWrite() {
-            p04921Record.set("FORE");
-            p04921Action.set("WRITE");
-            proFil1Post.set(profore.get().post);
-            proFil1Write();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeDelete() {
-            p04921Record.set("FORE");
-            p04921Action.set("DELETE");
-            proFil1Post.set(profore.get().post);
-            proFil1Delete();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartEg() {
-            p04921Record.set("FORE");
-            p04921Action.set("START-EG");
-            proFil1Post.set(profore.get().post);
-            proFil1StartEg();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartEgK2() {
-            p04921Record.set("FORE");
-            p04921Action.set("START-EG-K2");
-            proFil1Post.set(profore.get().post);
-            proFil1StartEgK2();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartEgK3() {
-            p04921Record.set("FORE");
-            p04921Action.set("START-EG-K3");
-            proFil1Post.set(profore.get().post);
-            proFil1StartEgK3();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartEgK4() {
-            p04921Record.set("FORE");
-            p04921Action.set("START-EG-K4");
-            proFil1Post.set(profore.get().post);
-            proFil1StartEgK4();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartEgK5() {
-            p04921Record.set("FORE");
-            p04921Action.set("START-EG-K5");
-            proFil1Post.set(profore.get().post);
-            proFil1StartEgK5();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartEgK6() {
-            p04921Record.set("FORE");
-            p04921Action.set("START-EG-K6");
-            proFil1Post.set(profore.get().post);
-            proFil1StartEgK6();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartEgK7() {
-            p04921Record.set("FORE");
-            p04921Action.set("START-EG-K7");
-            proFil1Post.set(profore.get().post);
-            proFil1StartEgK7();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartprevEg() {
-            p04921Record.set("FORE");
-            p04921Action.set("STARTPREV-EG");
-            proFil1Post.set(profore.get().post);
-            proFil1StartprevEg();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartprevEgK2() {
-            p04921Record.set("FORE");
-            p04921Action.set("STARTPREV-EG-K2");
-            proFil1Post.set(profore.get().post);
-            proFil1StartprevEgK2();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartprevEgK3() {
-            p04921Record.set("FORE");
-            p04921Action.set("STARTPREV-EG-K3");
-            proFil1Post.set(profore.get().post);
-            proFil1StartprevEgK3();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartprevEgK4() {
-            p04921Record.set("FORE");
-            p04921Action.set("STARTPREV-EG-K4");
-            proFil1Post.set(profore.get().post);
-            proFil1StartprevEgK4();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartprevEgK5() {
-            p04921Record.set("FORE");
-            p04921Action.set("STARTPREV-EG-K5");
-            proFil1Post.set(profore.get().post);
-            proFil1StartprevEgK5();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartprevEgK6() {
-            p04921Record.set("FORE");
-            p04921Action.set("STARTPREV-EG-K6");
-            proFil1Post.set(profore.get().post);
-            proFil1StartprevEgK6();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proForeStartprevEgK7() {
-            p04921Record.set("FORE");
-            p04921Action.set("STARTPREV-EG-K7");
-            proFil1Post.set(profore.get().post);
-            proFil1StartprevEgK7();
-            profore.get().post.set(proFil1Post);
-        }
-
-        private void proKundOpenIo() {
-            p04921Record.set("KUND");
-            p04921Action.set("OPEN-IO");
-            proFil1OpenIo();
-        }
-
-        private void proKundOpenI() {
-            p04921Record.set("KUND");
-            p04921Action.set("OPEN-I");
-            proFil1OpenI();
-        }
-
-        private void proKundClose() {
-            p04921Record.set("KUND");
-            p04921Action.set("CLOSE");
-            proFil1Close();
-        }
-
-        private void proKundRead() {
-            p04921Record.set("KUND");
-            p04921Action.set("READ");
-            proFil1Post.set(prokund.get().post);
-            proFil1Read();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadKl() {
-            p04921Record.set("KUND");
-            p04921Action.set("READ-KL");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadKl();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadnext() {
-            p04921Record.set("KUND");
-            p04921Action.set("READNEXT");
-            proFil1Post.set(prokund.get().post);
-            proFil1Readnext();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadnextK2() {
-            p04921Record.set("KUND");
-            p04921Action.set("READNEXT-K2");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadnextK2();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadnextK3() {
-            p04921Record.set("KUND");
-            p04921Action.set("READNEXT-K3");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadnextK3();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadnextK4() {
-            p04921Record.set("KUND");
-            p04921Action.set("READNEXT-K4");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadnextK4();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadnextK5() {
-            p04921Record.set("KUND");
-            p04921Action.set("READNEXT-K5");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadnextK5();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadnextK6() {
-            p04921Record.set("KUND");
-            p04921Action.set("READNEXT-K6");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadnextK6();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadnextK7() {
-            p04921Record.set("KUND");
-            p04921Action.set("READNEXT-K7");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadnextK7();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadprev() {
-            p04921Record.set("KUND");
-            p04921Action.set("READPREV");
-            proFil1Post.set(prokund.get().post);
-            proFil1Readprev();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadprevK2() {
-            p04921Record.set("KUND");
-            p04921Action.set("READPREV-K2");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadprevK2();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadprevK3() {
-            p04921Record.set("KUND");
-            p04921Action.set("READPREV-K3");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadprevK3();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadprevK4() {
-            p04921Record.set("KUND");
-            p04921Action.set("READPREV-K4");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadprevK4();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadprevK5() {
-            p04921Record.set("KUND");
-            p04921Action.set("READPREV-K5");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadprevK5();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadprevK6() {
-            p04921Record.set("KUND");
-            p04921Action.set("READPREV-K6");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadprevK6();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundReadprevK7() {
-            p04921Record.set("KUND");
-            p04921Action.set("READPREV-K7");
-            proFil1Post.set(prokund.get().post);
-            proFil1ReadprevK7();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundRewrite() {
-            p04921Record.set("KUND");
-            p04921Action.set("REWRITE");
-            proFil1Post.set(prokund.get().post);
-            proFil1Rewrite();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundWrite() {
-            p04921Record.set("KUND");
-            p04921Action.set("WRITE");
-            proFil1Post.set(prokund.get().post);
-            proFil1Write();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundDelete() {
-            p04921Record.set("KUND");
-            p04921Action.set("DELETE");
-            proFil1Post.set(prokund.get().post);
-            proFil1Delete();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartEg() {
-            p04921Record.set("KUND");
-            p04921Action.set("START-EG");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartEg();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartEgK2() {
-            p04921Record.set("KUND");
-            p04921Action.set("START-EG-K2");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartEgK2();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartEgK3() {
-            p04921Record.set("KUND");
-            p04921Action.set("START-EG-K3");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartEgK3();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartEgK4() {
-            p04921Record.set("KUND");
-            p04921Action.set("START-EG-K4");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartEgK4();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartEgK5() {
-            p04921Record.set("KUND");
-            p04921Action.set("START-EG-K5");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartEgK5();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartEgK6() {
-            p04921Record.set("KUND");
-            p04921Action.set("START-EG-K6");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartEgK6();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartEgK7() {
-            p04921Record.set("KUND");
-            p04921Action.set("START-EG-K7");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartEgK7();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartprevEg() {
-            p04921Record.set("KUND");
-            p04921Action.set("STARTPREV-EG");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartprevEg();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartprevEgK2() {
-            p04921Record.set("KUND");
-            p04921Action.set("STARTPREV-EG-K2");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartprevEgK2();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartprevEgK3() {
-            p04921Record.set("KUND");
-            p04921Action.set("STARTPREV-EG-K3");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartprevEgK3();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartprevEgK4() {
-            p04921Record.set("KUND");
-            p04921Action.set("STARTPREV-EG-K4");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartprevEgK4();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartprevEgK5() {
-            p04921Record.set("KUND");
-            p04921Action.set("STARTPREV-EG-K5");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartprevEgK5();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartprevEgK6() {
-            p04921Record.set("KUND");
-            p04921Action.set("STARTPREV-EG-K6");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartprevEgK6();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proKundStartprevEgK7() {
-            p04921Record.set("KUND");
-            p04921Action.set("STARTPREV-EG-K7");
-            proFil1Post.set(prokund.get().post);
-            proFil1StartprevEgK7();
-            prokund.get().post.set(proFil1Post);
-        }
-
-        private void proProjOpenIo() {
-            p04921Record.set("PROJ");
-            p04921Action.set("OPEN-IO");
-            proFil1OpenIo();
-        }
-
-        private void proProjOpenI() {
-            p04921Record.set("PROJ");
-            p04921Action.set("OPEN-I");
-            proFil1OpenI();
-        }
-
-        private void proProjClose() {
-            p04921Record.set("PROJ");
-            p04921Action.set("CLOSE");
-            proFil1Close();
-        }
-
-        private void proProjRead() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READ");
-            proFil1Post.set(proproj.get().post);
-            proFil1Read();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadKl() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READ-KL");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadKl();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadnext() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READNEXT");
-            proFil1Post.set(proproj.get().post);
-            proFil1Readnext();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadnextK2() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READNEXT-K2");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadnextK2();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadnextK3() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READNEXT-K3");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadnextK3();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadnextK4() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READNEXT-K4");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadnextK4();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadnextK5() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READNEXT-K5");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadnextK5();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadnextK6() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READNEXT-K6");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadnextK6();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadnextK7() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READNEXT-K7");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadnextK7();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadprev() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READPREV");
-            proFil1Post.set(proproj.get().post);
-            proFil1Readprev();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadprevK2() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READPREV-K2");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadprevK2();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadprevK3() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READPREV-K3");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadprevK3();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadprevK4() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READPREV-K4");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadprevK4();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadprevK5() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READPREV-K5");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadprevK5();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadprevK6() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READPREV-K6");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadprevK6();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjReadprevK7() {
-            p04921Record.set("PROJ");
-            p04921Action.set("READPREV-K7");
-            proFil1Post.set(proproj.get().post);
-            proFil1ReadprevK7();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjRewrite() {
-            p04921Record.set("PROJ");
-            p04921Action.set("REWRITE");
-            proFil1Post.set(proproj.get().post);
-            proFil1Rewrite();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjWrite() {
-            p04921Record.set("PROJ");
-            p04921Action.set("WRITE");
-            proFil1Post.set(proproj.get().post);
-            proFil1Write();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjDelete() {
-            p04921Record.set("PROJ");
-            p04921Action.set("DELETE");
-            proFil1Post.set(proproj.get().post);
-            proFil1Delete();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartEg() {
-            p04921Record.set("PROJ");
-            p04921Action.set("START-EG");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartEg();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartEgK2() {
-            p04921Record.set("PROJ");
-            p04921Action.set("START-EG-K2");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartEgK2();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartEgK3() {
-            p04921Record.set("PROJ");
-            p04921Action.set("START-EG-K3");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartEgK3();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartEgK4() {
-            p04921Record.set("PROJ");
-            p04921Action.set("START-EG-K4");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartEgK4();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartEgK5() {
-            p04921Record.set("PROJ");
-            p04921Action.set("START-EG-K5");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartEgK5();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartEgK6() {
-            p04921Record.set("PROJ");
-            p04921Action.set("START-EG-K6");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartEgK6();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartEgK7() {
-            p04921Record.set("PROJ");
-            p04921Action.set("START-EG-K7");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartEgK7();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartprevEg() {
-            p04921Record.set("PROJ");
-            p04921Action.set("STARTPREV-EG");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartprevEg();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartprevEgK2() {
-            p04921Record.set("PROJ");
-            p04921Action.set("STARTPREV-EG-K2");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartprevEgK2();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartprevEgK3() {
-            p04921Record.set("PROJ");
-            p04921Action.set("STARTPREV-EG-K3");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartprevEgK3();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartprevEgK4() {
-            p04921Record.set("PROJ");
-            p04921Action.set("STARTPREV-EG-K4");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartprevEgK4();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartprevEgK5() {
-            p04921Record.set("PROJ");
-            p04921Action.set("STARTPREV-EG-K5");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartprevEgK5();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartprevEgK6() {
-            p04921Record.set("PROJ");
-            p04921Action.set("STARTPREV-EG-K6");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartprevEgK6();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proProjStartprevEgK7() {
-            p04921Record.set("PROJ");
-            p04921Action.set("STARTPREV-EG-K7");
-            proFil1Post.set(proproj.get().post);
-            proFil1StartprevEgK7();
-            proproj.get().post.set(proFil1Post);
-        }
-
-        private void proFil2Init() {
-            if (proFil2Open.equals("J") && !(proFil2OpenFtg.equals(pa.bkstvftg))) {
-                proFil2Close();
-            }
-            if (!(proFil2Open.equals("J"))) {
-                proFil2Filnamn.set(SPACE);
-                proFil2Filnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-2"));
-                proFil2.open("I-O");
-                proCheck00();
-                proFil2Open.set("J");
-                proFil2OpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proFil2OpenIo() {
-            proFilhantInit();
-            proFil2Init();
-            proFilhantExit();
-        }
-
-        private void proFil2OpenI() {
-            proFilhantInit();
-            if (proFil2Open.equals("J") && !(proFil2OpenFtg.equals(pa.bkstvftg))) {
-                proFil2Close();
-            }
-            if (!(proFil2Open.equals("J"))) {
-                proFil2Filnamn.set(SPACE);
-                proFil2Filnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-2"));
-                proFil2.open("INPUT");
-                if (!((p04921Dasvar.equals("00")))) {
-                    proFil2.close();
-                    proFil2.open("I-O");
-                    proCheck00();
-                    proFil2.close();
-                    proCheck00();
-                    proFil2.open("INPUT");
-                    proCheck00();
-                }
-                proFil2Open.set("J");
-                proFil2OpenFtg.set(pa.bkstvftg);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil2Close() {
-            proFilhantInit();
-            if (proFil2Open.equals("J")) {
-                proFil2.close();
-                proCheck00();
-                proFil2Open.set("N");
-                proFil2OpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil2Read() {
-            proFilhantInit();
-            proFil2Init();
-            proFil2.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil2.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFil2ReadKl() {
-            proFilhantInit();
-            proFil2Init();
-            proFil2.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proFil2.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFil2Readnext() {
-            proFilhantInit();
-            proFil2Init();
-            proFil2.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil2.start(">", "pro_fil_2_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFil2.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proFil2Readprev() {
-            proFilhantInit();
-            proFil2Init();
-            proFil2.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil2.start("<", "pro_fil_2_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFil2.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proFil2Rewrite() {
-            proFilhantInit();
-            proFil2Init();
-            proFil2Post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFil2OpenFtg, pa.bfar, "PRO", p04921Record, "U", proFil2Post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil2Write() {
-            proFilhantInit();
-            proFil2Init();
-            proFil2Post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil2Post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFil2OpenFtg, pa.bfar, "PRO", p04921Record, "N", proFil2Post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil2Delete() {
-            proFilhantInit();
-            proFil2Init();
-            proFil2.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil2.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFil2OpenFtg, pa.bfar, "PRO", p04921Record, "D", proFil2Post);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil2StartEg() {
-            proFilhantInit();
-            proFil2Init();
-            proFil2.start("NOT<", "pro_fil_2_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil2.start("NOT<", "pro_fil_2_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFil2StartprevEg() {
-            proFilhantInit();
-            proFil2Init();
-            proFil2.start("NOT>", "pro_fil_2_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil2.start("NOT>", "pro_fil_2_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proMedaOpenIo() {
-            p04921Record.set("MEDA");
-            p04921Action.set("OPEN-IO");
-            proFil2OpenIo();
-        }
-
-        private void proMedaOpenI() {
-            p04921Record.set("MEDA");
-            p04921Action.set("OPEN-I");
-            proFil2OpenI();
-        }
-
-        private void proMedaClose() {
-            p04921Record.set("MEDA");
-            p04921Action.set("CLOSE");
-            proFil2Close();
-        }
-
-        private void proMedaRead() {
-            p04921Record.set("MEDA");
-            p04921Action.set("READ");
-            proFil2Post.set(promeda.get().post);
-            proFil2Read();
-            promeda.get().post.set(proFil2Post);
-        }
-
-        private void proMedaReadKl() {
-            p04921Record.set("MEDA");
-            p04921Action.set("READ-KL");
-            proFil2Post.set(promeda.get().post);
-            proFil2ReadKl();
-            promeda.get().post.set(proFil2Post);
-        }
-
-        private void proMedaReadnext() {
-            p04921Record.set("MEDA");
-            p04921Action.set("READNEXT");
-            proFil2Post.set(promeda.get().post);
-            proFil2Readnext();
-            promeda.get().post.set(proFil2Post);
-        }
-
-        private void proMedaReadprev() {
-            p04921Record.set("MEDA");
-            p04921Action.set("READPREV");
-            proFil2Post.set(promeda.get().post);
-            proFil2Readprev();
-            promeda.get().post.set(proFil2Post);
-        }
-
-        private void proMedaRewrite() {
-            p04921Record.set("MEDA");
-            p04921Action.set("REWRITE");
-            proFil2Post.set(promeda.get().post);
-            proFil2Rewrite();
-            promeda.get().post.set(proFil2Post);
-        }
-
-        private void proMedaWrite() {
-            p04921Record.set("MEDA");
-            p04921Action.set("WRITE");
-            proFil2Post.set(promeda.get().post);
-            proFil2Write();
-            promeda.get().post.set(proFil2Post);
-        }
-
-        private void proMedaDelete() {
-            p04921Record.set("MEDA");
-            p04921Action.set("DELETE");
-            proFil2Post.set(promeda.get().post);
-            proFil2Delete();
-            promeda.get().post.set(proFil2Post);
-        }
-
-        private void proMedaStartEg() {
-            p04921Record.set("MEDA");
-            p04921Action.set("START-EG");
-            proFil2Post.set(promeda.get().post);
-            proFil2StartEg();
-            promeda.get().post.set(proFil2Post);
-        }
-
-        private void proMedaStartprevEg() {
-            p04921Record.set("MEDA");
-            p04921Action.set("STARTPREV-EG");
-            proFil2Post.set(promeda.get().post);
-            proFil2StartprevEg();
-            promeda.get().post.set(proFil2Post);
-        }
-
-        private void proTextOpenIo() {
-            p04921Record.set("TEXT");
-            p04921Action.set("OPEN-IO");
-            proFil2OpenIo();
-        }
-
-        private void proTextOpenI() {
-            p04921Record.set("TEXT");
-            p04921Action.set("OPEN-I");
-            proFil2OpenI();
-        }
-
-        private void proTextClose() {
-            p04921Record.set("TEXT");
-            p04921Action.set("CLOSE");
-            proFil2Close();
-        }
-
-        private void proTextRead() {
-            p04921Record.set("TEXT");
-            p04921Action.set("READ");
-            proFil2Post.set(protext.get().post);
-            proFil2Read();
-            protext.get().post.set(proFil2Post);
-        }
-
-        private void proTextReadKl() {
-            p04921Record.set("TEXT");
-            p04921Action.set("READ-KL");
-            proFil2Post.set(protext.get().post);
-            proFil2ReadKl();
-            protext.get().post.set(proFil2Post);
-        }
-
-        private void proTextReadnext() {
-            p04921Record.set("TEXT");
-            p04921Action.set("READNEXT");
-            proFil2Post.set(protext.get().post);
-            proFil2Readnext();
-            protext.get().post.set(proFil2Post);
-        }
-
-        private void proTextReadprev() {
-            p04921Record.set("TEXT");
-            p04921Action.set("READPREV");
-            proFil2Post.set(protext.get().post);
-            proFil2Readprev();
-            protext.get().post.set(proFil2Post);
-        }
-
-        private void proTextRewrite() {
-            p04921Record.set("TEXT");
-            p04921Action.set("REWRITE");
-            proFil2Post.set(protext.get().post);
-            proFil2Rewrite();
-            protext.get().post.set(proFil2Post);
-        }
-
-        private void proTextWrite() {
-            p04921Record.set("TEXT");
-            p04921Action.set("WRITE");
-            proFil2Post.set(protext.get().post);
-            proFil2Write();
-            protext.get().post.set(proFil2Post);
-        }
-
-        private void proTextDelete() {
-            p04921Record.set("TEXT");
-            p04921Action.set("DELETE");
-            proFil2Post.set(protext.get().post);
-            proFil2Delete();
-            protext.get().post.set(proFil2Post);
-        }
-
-        private void proTextStartEg() {
-            p04921Record.set("TEXT");
-            p04921Action.set("START-EG");
-            proFil2Post.set(protext.get().post);
-            proFil2StartEg();
-            protext.get().post.set(proFil2Post);
-        }
-
-        private void proTextStartprevEg() {
-            p04921Record.set("TEXT");
-            p04921Action.set("STARTPREV-EG");
-            proFil2Post.set(protext.get().post);
-            proFil2StartprevEg();
-            protext.get().post.set(proFil2Post);
-        }
-
-        private void proCaleOpenIo() {
-            p04921Record.set("CALE");
-            p04921Action.set("OPEN-IO");
-            proFil2OpenIo();
-        }
-
-        private void proCaleOpenI() {
-            p04921Record.set("CALE");
-            p04921Action.set("OPEN-I");
-            proFil2OpenI();
-        }
-
-        private void proCaleClose() {
-            p04921Record.set("CALE");
-            p04921Action.set("CLOSE");
-            proFil2Close();
-        }
-
-        private void proCaleRead() {
-            p04921Record.set("CALE");
-            p04921Action.set("READ");
-            proFil2Post.set(procale.get().post);
-            proFil2Read();
-            procale.get().post.set(proFil2Post);
-        }
-
-        private void proCaleReadKl() {
-            p04921Record.set("CALE");
-            p04921Action.set("READ-KL");
-            proFil2Post.set(procale.get().post);
-            proFil2ReadKl();
-            procale.get().post.set(proFil2Post);
-        }
-
-        private void proCaleReadnext() {
-            p04921Record.set("CALE");
-            p04921Action.set("READNEXT");
-            proFil2Post.set(procale.get().post);
-            proFil2Readnext();
-            procale.get().post.set(proFil2Post);
-        }
-
-        private void proCaleReadprev() {
-            p04921Record.set("CALE");
-            p04921Action.set("READPREV");
-            proFil2Post.set(procale.get().post);
-            proFil2Readprev();
-            procale.get().post.set(proFil2Post);
-        }
-
-        private void proCaleRewrite() {
-            p04921Record.set("CALE");
-            p04921Action.set("REWRITE");
-            proFil2Post.set(procale.get().post);
-            proFil2Rewrite();
-            procale.get().post.set(proFil2Post);
-        }
-
-        private void proCaleWrite() {
-            p04921Record.set("CALE");
-            p04921Action.set("WRITE");
-            proFil2Post.set(procale.get().post);
-            proFil2Write();
-            procale.get().post.set(proFil2Post);
-        }
-
-        private void proCaleDelete() {
-            p04921Record.set("CALE");
-            p04921Action.set("DELETE");
-            proFil2Post.set(procale.get().post);
-            proFil2Delete();
-            procale.get().post.set(proFil2Post);
-        }
-
-        private void proCaleStartEg() {
-            p04921Record.set("CALE");
-            p04921Action.set("START-EG");
-            proFil2Post.set(procale.get().post);
-            proFil2StartEg();
-            procale.get().post.set(proFil2Post);
-        }
-
-        private void proCaleStartprevEg() {
-            p04921Record.set("CALE");
-            p04921Action.set("STARTPREV-EG");
-            proFil2Post.set(procale.get().post);
-            proFil2StartprevEg();
-            procale.get().post.set(proFil2Post);
-        }
-
-        private void proAlmaOpenIo() {
-            p04921Record.set("ALMA");
-            p04921Action.set("OPEN-IO");
-            proFil2OpenIo();
-        }
-
-        private void proAlmaOpenI() {
-            p04921Record.set("ALMA");
-            p04921Action.set("OPEN-I");
-            proFil2OpenI();
-        }
-
-        private void proAlmaClose() {
-            p04921Record.set("ALMA");
-            p04921Action.set("CLOSE");
-            proFil2Close();
-        }
-
-        private void proAlmaRead() {
-            p04921Record.set("ALMA");
-            p04921Action.set("READ");
-            proFil2Post.set(proalma.get().post);
-            proFil2Read();
-            proalma.get().post.set(proFil2Post);
-        }
-
-        private void proAlmaReadKl() {
-            p04921Record.set("ALMA");
-            p04921Action.set("READ-KL");
-            proFil2Post.set(proalma.get().post);
-            proFil2ReadKl();
-            proalma.get().post.set(proFil2Post);
-        }
-
-        private void proAlmaReadnext() {
-            p04921Record.set("ALMA");
-            p04921Action.set("READNEXT");
-            proFil2Post.set(proalma.get().post);
-            proFil2Readnext();
-            proalma.get().post.set(proFil2Post);
-        }
-
-        private void proAlmaReadprev() {
-            p04921Record.set("ALMA");
-            p04921Action.set("READPREV");
-            proFil2Post.set(proalma.get().post);
-            proFil2Readprev();
-            proalma.get().post.set(proFil2Post);
-        }
-
-        private void proAlmaRewrite() {
-            p04921Record.set("ALMA");
-            p04921Action.set("REWRITE");
-            proFil2Post.set(proalma.get().post);
-            proFil2Rewrite();
-            proalma.get().post.set(proFil2Post);
-        }
-
-        private void proAlmaWrite() {
-            p04921Record.set("ALMA");
-            p04921Action.set("WRITE");
-            proFil2Post.set(proalma.get().post);
-            proFil2Write();
-            proalma.get().post.set(proFil2Post);
-        }
-
-        private void proAlmaDelete() {
-            p04921Record.set("ALMA");
-            p04921Action.set("DELETE");
-            proFil2Post.set(proalma.get().post);
-            proFil2Delete();
-            proalma.get().post.set(proFil2Post);
-        }
-
-        private void proAlmaStartEg() {
-            p04921Record.set("ALMA");
-            p04921Action.set("START-EG");
-            proFil2Post.set(proalma.get().post);
-            proFil2StartEg();
-            proalma.get().post.set(proFil2Post);
-        }
-
-        private void proAlmaStartprevEg() {
-            p04921Record.set("ALMA");
-            p04921Action.set("STARTPREV-EG");
-            proFil2Post.set(proalma.get().post);
-            proFil2StartprevEg();
-            proalma.get().post.set(proFil2Post);
-        }
-
-        private void proLexiOpenIo() {
-            p04921Record.set("LEXI");
-            p04921Action.set("OPEN-IO");
-            proFil2OpenIo();
-        }
-
-        private void proLexiOpenI() {
-            p04921Record.set("LEXI");
-            p04921Action.set("OPEN-I");
-            proFil2OpenI();
-        }
-
-        private void proLexiClose() {
-            p04921Record.set("LEXI");
-            p04921Action.set("CLOSE");
-            proFil2Close();
-        }
-
-        private void proLexiRead() {
-            p04921Record.set("LEXI");
-            p04921Action.set("READ");
-            proFil2Post.set(prolexi.get().post);
-            proFil2Read();
-            prolexi.get().post.set(proFil2Post);
-        }
-
-        private void proLexiReadKl() {
-            p04921Record.set("LEXI");
-            p04921Action.set("READ-KL");
-            proFil2Post.set(prolexi.get().post);
-            proFil2ReadKl();
-            prolexi.get().post.set(proFil2Post);
-        }
-
-        private void proLexiReadnext() {
-            p04921Record.set("LEXI");
-            p04921Action.set("READNEXT");
-            proFil2Post.set(prolexi.get().post);
-            proFil2Readnext();
-            prolexi.get().post.set(proFil2Post);
-        }
-
-        private void proLexiReadprev() {
-            p04921Record.set("LEXI");
-            p04921Action.set("READPREV");
-            proFil2Post.set(prolexi.get().post);
-            proFil2Readprev();
-            prolexi.get().post.set(proFil2Post);
-        }
-
-        private void proLexiRewrite() {
-            p04921Record.set("LEXI");
-            p04921Action.set("REWRITE");
-            proFil2Post.set(prolexi.get().post);
-            proFil2Rewrite();
-            prolexi.get().post.set(proFil2Post);
-        }
-
-        private void proLexiWrite() {
-            p04921Record.set("LEXI");
-            p04921Action.set("WRITE");
-            proFil2Post.set(prolexi.get().post);
-            proFil2Write();
-            prolexi.get().post.set(proFil2Post);
-        }
-
-        private void proLexiDelete() {
-            p04921Record.set("LEXI");
-            p04921Action.set("DELETE");
-            proFil2Post.set(prolexi.get().post);
-            proFil2Delete();
-            prolexi.get().post.set(proFil2Post);
-        }
-
-        private void proLexiStartEg() {
-            p04921Record.set("LEXI");
-            p04921Action.set("START-EG");
-            proFil2Post.set(prolexi.get().post);
-            proFil2StartEg();
-            prolexi.get().post.set(proFil2Post);
-        }
-
-        private void proLexiStartprevEg() {
-            p04921Record.set("LEXI");
-            p04921Action.set("STARTPREV-EG");
-            proFil2Post.set(prolexi.get().post);
-            proFil2StartprevEg();
-            prolexi.get().post.set(proFil2Post);
-        }
-
-        private void proPeriOpenIo() {
-            p04921Record.set("PERI");
-            p04921Action.set("OPEN-IO");
-            proFil2OpenIo();
-        }
-
-        private void proPeriOpenI() {
-            p04921Record.set("PERI");
-            p04921Action.set("OPEN-I");
-            proFil2OpenI();
-        }
-
-        private void proPeriClose() {
-            p04921Record.set("PERI");
-            p04921Action.set("CLOSE");
-            proFil2Close();
-        }
-
-        private void proPeriRead() {
-            p04921Record.set("PERI");
-            p04921Action.set("READ");
-            proFil2Post.set(properi.get().post);
-            proFil2Read();
-            properi.get().post.set(proFil2Post);
-        }
-
-        private void proPeriReadKl() {
-            p04921Record.set("PERI");
-            p04921Action.set("READ-KL");
-            proFil2Post.set(properi.get().post);
-            proFil2ReadKl();
-            properi.get().post.set(proFil2Post);
-        }
-
-        private void proPeriReadnext() {
-            p04921Record.set("PERI");
-            p04921Action.set("READNEXT");
-            proFil2Post.set(properi.get().post);
-            proFil2Readnext();
-            properi.get().post.set(proFil2Post);
-        }
-
-        private void proPeriReadprev() {
-            p04921Record.set("PERI");
-            p04921Action.set("READPREV");
-            proFil2Post.set(properi.get().post);
-            proFil2Readprev();
-            properi.get().post.set(proFil2Post);
-        }
-
-        private void proPeriRewrite() {
-            p04921Record.set("PERI");
-            p04921Action.set("REWRITE");
-            proFil2Post.set(properi.get().post);
-            proFil2Rewrite();
-            properi.get().post.set(proFil2Post);
-        }
-
-        private void proPeriWrite() {
-            p04921Record.set("PERI");
-            p04921Action.set("WRITE");
-            proFil2Post.set(properi.get().post);
-            proFil2Write();
-            properi.get().post.set(proFil2Post);
-        }
-
-        private void proPeriDelete() {
-            p04921Record.set("PERI");
-            p04921Action.set("DELETE");
-            proFil2Post.set(properi.get().post);
-            proFil2Delete();
-            properi.get().post.set(proFil2Post);
-        }
-
-        private void proPeriStartEg() {
-            p04921Record.set("PERI");
-            p04921Action.set("START-EG");
-            proFil2Post.set(properi.get().post);
-            proFil2StartEg();
-            properi.get().post.set(proFil2Post);
-        }
-
-        private void proPeriStartprevEg() {
-            p04921Record.set("PERI");
-            p04921Action.set("STARTPREV-EG");
-            proFil2Post.set(properi.get().post);
-            proFil2StartprevEg();
-            properi.get().post.set(proFil2Post);
-        }
-
-        private void proPestOpenIo() {
-            p04921Record.set("PEST");
-            p04921Action.set("OPEN-IO");
-            proFil2OpenIo();
-        }
-
-        private void proPestOpenI() {
-            p04921Record.set("PEST");
-            p04921Action.set("OPEN-I");
-            proFil2OpenI();
-        }
-
-        private void proPestClose() {
-            p04921Record.set("PEST");
-            p04921Action.set("CLOSE");
-            proFil2Close();
-        }
-
-        private void proPestRead() {
-            p04921Record.set("PEST");
-            p04921Action.set("READ");
-            proFil2Post.set(propest.get().post);
-            proFil2Read();
-            propest.get().post.set(proFil2Post);
-        }
-
-        private void proPestReadKl() {
-            p04921Record.set("PEST");
-            p04921Action.set("READ-KL");
-            proFil2Post.set(propest.get().post);
-            proFil2ReadKl();
-            propest.get().post.set(proFil2Post);
-        }
-
-        private void proPestReadnext() {
-            p04921Record.set("PEST");
-            p04921Action.set("READNEXT");
-            proFil2Post.set(propest.get().post);
-            proFil2Readnext();
-            propest.get().post.set(proFil2Post);
-        }
-
-        private void proPestReadprev() {
-            p04921Record.set("PEST");
-            p04921Action.set("READPREV");
-            proFil2Post.set(propest.get().post);
-            proFil2Readprev();
-            propest.get().post.set(proFil2Post);
-        }
-
-        private void proPestRewrite() {
-            p04921Record.set("PEST");
-            p04921Action.set("REWRITE");
-            proFil2Post.set(propest.get().post);
-            proFil2Rewrite();
-            propest.get().post.set(proFil2Post);
-        }
-
-        private void proPestWrite() {
-            p04921Record.set("PEST");
-            p04921Action.set("WRITE");
-            proFil2Post.set(propest.get().post);
-            proFil2Write();
-            propest.get().post.set(proFil2Post);
-        }
-
-        private void proPestDelete() {
-            p04921Record.set("PEST");
-            p04921Action.set("DELETE");
-            proFil2Post.set(propest.get().post);
-            proFil2Delete();
-            propest.get().post.set(proFil2Post);
-        }
-
-        private void proPestStartEg() {
-            p04921Record.set("PEST");
-            p04921Action.set("START-EG");
-            proFil2Post.set(propest.get().post);
-            proFil2StartEg();
-            propest.get().post.set(proFil2Post);
-        }
-
-        private void proPestStartprevEg() {
-            p04921Record.set("PEST");
-            p04921Action.set("STARTPREV-EG");
-            proFil2Post.set(propest.get().post);
-            proFil2StartprevEg();
-            propest.get().post.set(proFil2Post);
-        }
-
-        private void proFil21Init() {
-            if (proFil21Open.equals("J") && !(proFil21OpenFtg.equals(pa.bkstvftg))) {
-                proFil21Close();
-            }
-            if (!(proFil21Open.equals("J"))) {
-                proFil21Filnamn.set(SPACE);
-                proFil21Filnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-21"));
-                proFil21.open("I-O");
-                proCheck00();
-                proFil21Open.set("J");
-                proFil21OpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proFil21OpenIo() {
-            proFilhantInit();
-            proFil21Init();
-            proFilhantExit();
-        }
-
-        private void proFil21OpenI() {
-            proFilhantInit();
-            if (proFil21Open.equals("J") && !(proFil21OpenFtg.equals(pa.bkstvftg))) {
-                proFil21Close();
-            }
-            if (!(proFil21Open.equals("J"))) {
-                proFil21Filnamn.set(SPACE);
-                proFil21Filnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-21"));
-                proFil21.open("INPUT");
-                if (!((p04921Dasvar.equals("00")))) {
-                    proFil21.close();
-                    proFil21.open("I-O");
-                    proCheck00();
-                    proFil21.close();
-                    proCheck00();
-                    proFil21.open("INPUT");
-                    proCheck00();
-                }
-                proFil21Open.set("J");
-                proFil21OpenFtg.set(pa.bkstvftg);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil21Close() {
-            proFilhantInit();
-            if (proFil21Open.equals("J")) {
-                proFil21.close();
-                proCheck00();
-                proFil21Open.set("N");
-                proFil21OpenFtg.set(SPACE);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil21Read() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.read();
-            }
-            proCheck0023();
-            proPrevFil21Post.set(proFil21Post);
-            proFilhantExit();
-        }
-
-        private void proFil21ReadKl() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proFil21.readWithLock();
-            }
-            proCheck0023();
-            proPrevFil21Post.set(proFil21Post);
-            proFilhantExit();
-        }
-
-        private void proFil21Readnext() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start(">", "pro_fil_21_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFil21.readNext();
-                }
-            }
-            proCheck0010();
-            proPrevFil21Post.set(proFil21Post);
-            proFilhantExit();
-        }
-
-        private void proFil21ReadnextK2() {
-            proFil21.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start(">", "pro_fil_21_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proFil21.readNext();
-                }
-            }
-            proCheck000210();
-            proPrevFil21Post.set(proFil21Post);
-            proFilhantExit();
-        }
-
-        private void proFil21ReadnextK3() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start(">", "pro_fil_21_key3");
-                if (p04921Dasvar.equals("00")) {
-                    proFil21.readNext();
-                }
-            }
-            proCheck000210();
-            proPrevFil21Post.set(proFil21Post);
-            proFilhantExit();
-        }
-
-        private void proFil21Readprev() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start("<", "pro_fil_21_key");
-                if (p04921Dasvar.equals("00")) {
-                    proFil21.readPrevious();
-                }
-            }
-            proCheck0010();
-            proPrevFil21Post.set(proFil21Post);
-            proFilhantExit();
-        }
-
-        private void proFil21ReadprevK2() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start("<", "pro_fil_21_key2");
-                if (p04921Dasvar.equals("00")) {
-                    proFil21.readPrevious();
-                }
-            }
-            proCheck000210();
-            proPrevFil21Post.set(proFil21Post);
-            proFilhantExit();
-        }
-
-        private void proFil21ReadprevK3() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start("<", "pro_fil_21_key3");
-                if (p04921Dasvar.equals("00")) {
-                    proFil21.readPrevious();
-                }
-            }
-            proCheck000210();
-            proPrevFil21Post.set(proFil21Post);
-            proFilhantExit();
-        }
-
-        private void proFil21Rewrite() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21Post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFil21OpenFtg, pa.bfar, "PRO", p04921Record, "U", proFil21Post);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparFil21Post.set(proFil21Post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                if (proFil21Post.ref(1,1).equals("J")) {
-                    proinkt.get().post.set(proPrevFil21Post);
-                    prosata.get().post.init();
-                    prosata.get().projidG.set(proinkt.get().projidG);
-                    if (proinkt.get().bfdat.ref(1,6).isNumeric()) {
-                        prosata.get().bfper.ref(1,6).set(proinkt.get().bfdat.ref(1,6));
-                    }
-                    proSataRead();
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        prosata.get().data.init();
-                    }
-                    prosata.get().inkRegKost.decrement(proinkt.get().prisink);
-                    prosata.get().inkRegBel.decrement(proinkt.get().utpris);
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataWrite();
-                        }
-                    }
-                    else {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataRewrite();
-                        }
-                        else {
-                            proSataDelete();
-                        }
-                    }
-                    proinkt.get().post.set(proSparFil21Post);
-                    prosata.get().post.init();
-                    prosata.get().projidG.set(proinkt.get().projidG);
-                    if (proinkt.get().bfdat.ref(1,6).isNumeric()) {
-                        prosata.get().bfper.ref(1,6).set(proinkt.get().bfdat.ref(1,6));
-                    }
-                    proSataRead();
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        prosata.get().data.init();
-                    }
-                    prosata.get().inkRegKost.increment(proinkt.get().prisink);
-                    prosata.get().inkRegBel.increment(proinkt.get().utpris);
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataWrite();
-                        }
-                    }
-                    else {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataRewrite();
-                        }
-                        else {
-                            proSataDelete();
-                        }
-                    }
-                }
-                if (proFil21Post.ref(1,1).equals("N")) {
-                    pronatt.get().post.set(proPrevFil21Post);
-                    prosata.get().post.init();
-                    prosata.get().projidG.set(pronatt.get().projidG);
-                    if (pronatt.get().bfdat.ref(1,6).isNumeric()) {
-                        prosata.get().bfper.ref(1,6).set(pronatt.get().bfdat.ref(1,6));
-                    }
-                    proSataRead();
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        prosata.get().data.init();
-                    }
-                    prosata.get().ovrRegKost.decrement(pronatt.get().kalkost);
-                    prosata.get().ovrRegBel.decrement(pronatt.get().utpris);
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataWrite();
-                        }
-                    }
-                    else {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataRewrite();
-                        }
-                        else {
-                            proSataDelete();
-                        }
-                    }
-                    pronatt.get().post.set(proSparFil21Post);
-                    prosata.get().post.init();
-                    prosata.get().projidG.set(pronatt.get().projidG);
-                    if (pronatt.get().bfdat.ref(1,6).isNumeric()) {
-                        prosata.get().bfper.ref(1,6).set(pronatt.get().bfdat.ref(1,6));
-                    }
-                    proSataRead();
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        prosata.get().data.init();
-                    }
-                    prosata.get().ovrRegKost.increment(pronatt.get().kalkost);
-                    prosata.get().ovrRegBel.increment(pronatt.get().utpris);
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataWrite();
-                        }
-                    }
-                    else {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataRewrite();
-                        }
-                        else {
-                            proSataDelete();
-                        }
-                    }
-                }
-                proFil21Post.set(proSparFil21Post);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil21Write() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21Post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21Post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFil21OpenFtg, pa.bfar, "PRO", p04921Record, "N", proFil21Post);
-            }
-            if (p04921Dasvar.ref(1,1).equals("0")) {
-                proSparFil21Post.set(proFil21Post);
-                p04921SparDasvar.set(p04921Dasvar);
-                p04921SparRecord.set(p04921Record);
-                p04921SparAction.set(p04921Action);
-                if (proFil21Post.ref(1,1).equals("J")) {
-                    proinkt.get().post.set(proSparFil21Post);
-                    prosata.get().post.init();
-                    prosata.get().projidG.set(proinkt.get().projidG);
-                    if (proinkt.get().bfdat.ref(1,6).isNumeric()) {
-                        prosata.get().bfper.ref(1,6).set(proinkt.get().bfdat.ref(1,6));
-                    }
-                    proSataRead();
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        prosata.get().data.init();
-                    }
-                    prosata.get().inkRegKost.increment(proinkt.get().prisink);
-                    prosata.get().inkRegBel.increment(proinkt.get().utpris);
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataWrite();
-                        }
-                    }
-                    else {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataRewrite();
-                        }
-                        else {
-                            proSataDelete();
-                        }
-                    }
-                }
-                if (proFil21Post.ref(1,1).equals("N")) {
-                    pronatt.get().post.set(proSparFil21Post);
-                    prosata.get().post.init();
-                    prosata.get().projidG.set(pronatt.get().projidG);
-                    if (pronatt.get().bfdat.ref(1,6).isNumeric()) {
-                        prosata.get().bfper.ref(1,6).set(pronatt.get().bfdat.ref(1,6));
-                    }
-                    proSataRead();
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        prosata.get().data.init();
-                    }
-                    prosata.get().ovrRegKost.increment(pronatt.get().kalkost);
-                    prosata.get().ovrRegBel.increment(pronatt.get().utpris);
-                    if (!(p04921Dasvar.ref(1,1).equals("0"))) {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataWrite();
-                        }
-                    }
-                    else {
-                        if (!(prosata.get().arvRegKost.equals(ZERO)) || !(prosata.get().arvRegAnt.equals(ZERO)) || !(prosata.get().arvRegBel.equals(ZERO)) || !(prosata.get().arvJustAnt.equals(ZERO)) || !(prosata.get().arvJustBel.equals(ZERO)) || !(prosata.get().arvFaktKost.equals(ZERO)) || !(prosata.get().arvFaktAnt.equals(ZERO)) || !(prosata.get().arvFaktBel.equals(ZERO)) || !(prosata.get().inkRegKost.equals(ZERO)) || !(prosata.get().inkRegBel.equals(ZERO)) || !(prosata.get().inkJustBel.equals(ZERO)) || !(prosata.get().inkFaktKost.equals(ZERO)) || !(prosata.get().inkFaktBel.equals(ZERO)) || !(prosata.get().ovrRegKost.equals(ZERO)) || !(prosata.get().ovrRegBel.equals(ZERO)) || !(prosata.get().ovrJustBel.equals(ZERO)) || !(prosata.get().ovrFaktKost.equals(ZERO)) || !(prosata.get().ovrFaktBel.equals(ZERO))) {
-                            proSataRewrite();
-                        }
-                        else {
-                            proSataDelete();
-                        }
-                    }
-                }
-                proFil21Post.set(proSparFil21Post);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil21Delete() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proFil21OpenFtg, pa.bfar, "PRO", p04921Record, "D", proFil21Post);
-                    proinkt.get().post.set(proSparFil21Post);
-                }
-                if (proFil21Post.ref(1,1).equals("N")) {
-                    pronatt.get().post.set(proSparFil21Post);
-                    prosata.get().projidG.set(pronatt.get().projidG);
-                    if (pronatt.get().bfdat.ref(1,6).isNumeric()) {
-                        prosata.get().bfper.ref(1,6).set(pronatt.get().bfdat.ref(1,6));
-                    prosata.get().ovrRegKost.decrement(pronatt.get().kalkost);
-                    prosata.get().ovrRegBel.decrement(pronatt.get().utpris);
-                proFil21Post.set(proSparFil21Post);
-                p04921Dasvar.set(p04921SparDasvar);
-                p04921Record.set(p04921SparRecord);
-                p04921Action.set(p04921SparAction);
-            }
-            proFilhantExit();
-        }
-
-        private void proFil21StartEg() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.start("NOT<", "pro_fil_21_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start("NOT<", "pro_fil_21_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFil21StartEgK2() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.start("NOT<", "pro_fil_21_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start("NOT<", "pro_fil_21_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil21StartEgK3() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.start("NOT<", "pro_fil_21_key3");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start("NOT<", "pro_fil_21_key3");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil21StartprevEg() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.start("NOT>", "pro_fil_21_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start("NOT>", "pro_fil_21_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proFil21StartprevEgK2() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.start("NOT>", "pro_fil_21_key2");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start("NOT>", "pro_fil_21_key2");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proFil21StartprevEgK3() {
-            proFilhantInit();
-            proFil21Init();
-            proFil21.start("NOT>", "pro_fil_21_key3");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proFil21.start("NOT>", "pro_fil_21_key3");
-            }
-            proCheck000223();
-            proFilhantExit();
-        }
-
-        private void proInktOpenIo() {
-            p04921Record.set("INKT");
-            p04921Action.set("OPEN-IO");
-            proFil21OpenIo();
-        }
-
-        private void proInktOpenI() {
-            p04921Record.set("INKT");
-            p04921Action.set("OPEN-I");
-            proFil21OpenI();
-        }
-
-        private void proInktClose() {
-            p04921Record.set("INKT");
-            p04921Action.set("CLOSE");
-            proFil21Close();
-        }
-
-        private void proInktRead() {
-            p04921Record.set("INKT");
-            p04921Action.set("READ");
-            proFil21Post.set(proinkt.get().post);
-            proFil21Read();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktReadKl() {
-            p04921Record.set("INKT");
-            p04921Action.set("READ-KL");
-            proFil21Post.set(proinkt.get().post);
-            proFil21ReadKl();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktReadnext() {
-            p04921Record.set("INKT");
-            p04921Action.set("READNEXT");
-            proFil21Post.set(proinkt.get().post);
-            proFil21Readnext();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktReadnextK2() {
-            p04921Record.set("INKT");
-            p04921Action.set("READNEXT-K2");
-            proFil21Post.set(proinkt.get().post);
-            proFil21ReadnextK2();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktReadnextK3() {
-            p04921Record.set("INKT");
-            p04921Action.set("READNEXT-K3");
-            proFil21Post.set(proinkt.get().post);
-            proFil21ReadnextK3();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktReadprev() {
-            p04921Record.set("INKT");
-            p04921Action.set("READPREV");
-            proFil21Post.set(proinkt.get().post);
-            proFil21Readprev();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktReadprevK2() {
-            p04921Record.set("INKT");
-            p04921Action.set("READPREV-K2");
-            proFil21Post.set(proinkt.get().post);
-            proFil21ReadprevK2();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktReadprevK3() {
-            p04921Record.set("INKT");
-            p04921Action.set("READPREV-K3");
-            proFil21Post.set(proinkt.get().post);
-            proFil21ReadprevK3();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktRewrite() {
-            p04921Record.set("INKT");
-            p04921Action.set("REWRITE");
-            proFil21Post.set(proinkt.get().post);
-            proFil21Rewrite();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktWrite() {
-            p04921Record.set("INKT");
-            p04921Action.set("WRITE");
-            proFil21Post.set(proinkt.get().post);
-            proFil21Write();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktDelete() {
-            p04921Record.set("INKT");
-            p04921Action.set("DELETE");
-            proFil21Post.set(proinkt.get().post);
-            proFil21Delete();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktStartEg() {
-            p04921Record.set("INKT");
-            p04921Action.set("START-EG");
-            proFil21Post.set(proinkt.get().post);
-            proFil21StartEg();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktStartEgK2() {
-            p04921Record.set("INKT");
-            p04921Action.set("START-EG-K2");
-            proFil21Post.set(proinkt.get().post);
-            proFil21StartEgK2();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktStartEgK3() {
-            p04921Record.set("INKT");
-            p04921Action.set("START-EG-K3");
-            proFil21Post.set(proinkt.get().post);
-            proFil21StartEgK3();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktStartprevEg() {
-            p04921Record.set("INKT");
-            p04921Action.set("STARTPREV-EG");
-            proFil21Post.set(proinkt.get().post);
-            proFil21StartprevEg();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktStartprevEgK2() {
-            p04921Record.set("INKT");
-            p04921Action.set("STARTPREV-EG-K2");
-            proFil21Post.set(proinkt.get().post);
-            proFil21StartprevEgK2();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proInktStartprevEgK3() {
-            p04921Record.set("INKT");
-            p04921Action.set("STARTPREV-EG-K3");
-            proFil21Post.set(proinkt.get().post);
-            proFil21StartprevEgK3();
-            proinkt.get().post.set(proFil21Post);
-        }
-
-        private void proNattOpenIo() {
-            p04921Record.set("NATT");
-            p04921Action.set("OPEN-IO");
-            proFil21OpenIo();
-        }
-
-        private void proNattOpenI() {
-            p04921Record.set("NATT");
-            p04921Action.set("OPEN-I");
-            proFil21OpenI();
-        }
-
-        private void proNattClose() {
-            p04921Record.set("NATT");
-            p04921Action.set("CLOSE");
-            proFil21Close();
-        }
-
-        private void proNattRead() {
-            p04921Record.set("NATT");
-            p04921Action.set("READ");
-            proFil21Post.set(pronatt.get().post);
-            proFil21Read();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattReadKl() {
-            p04921Record.set("NATT");
-            p04921Action.set("READ-KL");
-            proFil21Post.set(pronatt.get().post);
-            proFil21ReadKl();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattReadnext() {
-            p04921Record.set("NATT");
-            p04921Action.set("READNEXT");
-            proFil21Post.set(pronatt.get().post);
-            proFil21Readnext();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattReadnextK2() {
-            p04921Record.set("NATT");
-            p04921Action.set("READNEXT-K2");
-            proFil21Post.set(pronatt.get().post);
-            proFil21ReadnextK2();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattReadnextK3() {
-            p04921Record.set("NATT");
-            p04921Action.set("READNEXT-K3");
-            proFil21Post.set(pronatt.get().post);
-            proFil21ReadnextK3();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattReadprev() {
-            p04921Record.set("NATT");
-            p04921Action.set("READPREV");
-            proFil21Post.set(pronatt.get().post);
-            proFil21Readprev();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattReadprevK2() {
-            p04921Record.set("NATT");
-            p04921Action.set("READPREV-K2");
-            proFil21Post.set(pronatt.get().post);
-            proFil21ReadprevK2();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattReadprevK3() {
-            p04921Record.set("NATT");
-            p04921Action.set("READPREV-K3");
-            proFil21Post.set(pronatt.get().post);
-            proFil21ReadprevK3();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattRewrite() {
-            p04921Record.set("NATT");
-            p04921Action.set("REWRITE");
-            proFil21Post.set(pronatt.get().post);
-            proFil21Rewrite();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattWrite() {
-            p04921Record.set("NATT");
-            p04921Action.set("WRITE");
-            proFil21Post.set(pronatt.get().post);
-            proFil21Write();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattDelete() {
-            p04921Record.set("NATT");
-            p04921Action.set("DELETE");
-            proFil21Post.set(pronatt.get().post);
-            proFil21Delete();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattStartEg() {
-            p04921Record.set("NATT");
-            p04921Action.set("START-EG");
-            proFil21Post.set(pronatt.get().post);
-            proFil21StartEg();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattStartEgK2() {
-            p04921Record.set("NATT");
-            p04921Action.set("START-EG-K2");
-            proFil21Post.set(pronatt.get().post);
-            proFil21StartEgK2();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattStartEgK3() {
-            p04921Record.set("NATT");
-            p04921Action.set("START-EG-K3");
-            proFil21Post.set(pronatt.get().post);
-            proFil21StartEgK3();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattStartprevEg() {
-            p04921Record.set("NATT");
-            p04921Action.set("STARTPREV-EG");
-            proFil21Post.set(pronatt.get().post);
-            proFil21StartprevEg();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattStartprevEgK2() {
-            p04921Record.set("NATT");
-            p04921Action.set("STARTPREV-EG-K2");
-            proFil21Post.set(pronatt.get().post);
-            proFil21StartprevEgK2();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proNattStartprevEgK3() {
-            p04921Record.set("NATT");
-            p04921Action.set("STARTPREV-EG-K3");
-            proFil21Post.set(pronatt.get().post);
-            proFil21StartprevEgK3();
-            pronatt.get().post.set(proFil21Post);
-        }
-
-        private void proDefkInit() {
-            if (proDefkOpen.equals("J") && !(proDefkOpenFtg.equals(pa.bkstvftg))) {
-                proDefkClose();
-            }
-            if (!(proDefkOpen.equals("J"))) {
-                proDefkFilnamn.set(SPACE);
-                proDefkFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-5"));
-                proDefk.open("I-O");
-                proCheck00();
-                proDefkOpen.set("J");
-                proDefkOpenFtg.set(pa.bkstvftg);
-        private void proDefkRead() {
-            p04921Record.set("DEFK");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proDefkInit();
-            proDefk.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proDefk.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proDefkReadKl() {
-            p04921Record.set("DEFK");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proDefkInit();
-            proDefk.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proDefk.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proDefkReadnext() {
-            p04921Record.set("DEFK");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proDefkInit();
-            proDefk.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proDefk.start(">", "pro_defk_key");
-                if (p04921Dasvar.equals("00")) {
-                    proDefk.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proDefkReadprev() {
-            p04921Record.set("DEFK");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proDefkInit();
-            proDefk.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proDefk.start("<", "pro_defk_key");
-                if (p04921Dasvar.equals("00")) {
-                    proDefk.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proDefkRewrite() {
-            p04921Record.set("DEFK");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proDefkInit();
-            prodefk.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proDefkOpenFtg, pa.bfar, "PRO", p04921Record, "U", prodefk.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proDefkWrite() {
-            p04921Record.set("DEFK");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proDefkInit();
-            prodefk.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                prodefk.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proDefkOpenFtg, pa.bfar, "PRO", p04921Record, "N", prodefk.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proDefkDelete() {
-            p04921Record.set("DEFK");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proDefkInit();
-            proDefk.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proDefk.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proDefkOpenFtg, pa.bfar, "PRO", p04921Record, "D", prodefk.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proDefkStartEg() {
-            p04921Record.set("DEFK");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proDefkInit();
-            proDefk.start("NOT<", "pro_defk_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proDefk.start("NOT<", "pro_defk_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proDefkStartprevEg() {
-            p04921Record.set("DEFK");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proDefkInit();
-            proDefk.start("NOT>", "pro_defk_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proDefk.start("NOT>", "pro_defk_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidrInit() {
-            if (proTidrOpen.equals("J") && !(proTidrOpenFtg.equals(pa.bkstvftg))) {
-                proTidrClose();
-            }
-            if (!(proTidrOpen.equals("J"))) {
-                proTidrFilnamn.set(SPACE);
-                proTidrFilnamn.set(concat("DTA/",limit(pa.bkstvftg,SPACE),"/PRO/FIL-6"));
-                proTidr.open("I-O");
-                proCheck00();
-                proTidrOpen.set("J");
-                proTidrOpenFtg.set(pa.bkstvftg);
-            }
-        }
-
-        private void proTidrRead() {
-            p04921Record.set("TIDR");
-            p04921Action.set("READ");
-            proFilhantInit();
-            proTidrInit();
-            proTidr.read();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidr.read();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidrReadKl() {
-            p04921Record.set("TIDR");
-            p04921Action.set("READ-KL");
-            proFilhantInit();
-            proTidrInit();
-            proTidr.readWithLock();
-            while ((p04921Dasvar.equalsEither("99", "9C"))) {
-                c_sleep("1");
-                proTidr.readWithLock();
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidrReadnext() {
-            p04921Record.set("TIDR");
-            p04921Action.set("READNEXT");
-            proFilhantInit();
-            proTidrInit();
-            proTidr.readNext();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidr.start(">", "pro_tidr_key");
-                if (p04921Dasvar.equals("00")) {
-                    proTidr.readNext();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proTidrReadprev() {
-            p04921Record.set("TIDR");
-            p04921Action.set("READPREV");
-            proFilhantInit();
-            proTidrInit();
-            proTidr.readPrevious();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidr.start("<", "pro_tidr_key");
-                if (p04921Dasvar.equals("00")) {
-                    proTidr.readPrevious();
-                }
-            }
-            proCheck0010();
-            proFilhantExit();
-        }
-
-        private void proTidrRewrite() {
-            p04921Record.set("TIDR");
-            p04921Action.set("REWRITE");
-            proFilhantInit();
-            proTidrInit();
-            protidr.get().post.rewrite();
-            proCheck000223();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTidrOpenFtg, pa.bfar, "PRO", p04921Record, "U", protidr.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidrWrite() {
-            p04921Record.set("TIDR");
-            p04921Action.set("WRITE");
-            proFilhantInit();
-            proTidrInit();
-            protidr.get().post.write();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                protidr.get().post.write();
-            }
-            proCheck000222();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTidrOpenFtg, pa.bfar, "PRO", p04921Record, "N", protidr.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidrDelete() {
-            p04921Record.set("TIDR");
-            p04921Action.set("DELETE");
-            proFilhantInit();
-            proTidrInit();
-            proTidr.delete();
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidr.delete();
-            }
-            proCheck0023();
-            if (p04921Bi.equals("J") && p04921Dasvar.ref(1,1).equals("0")) {
-                call("prg.med.bibinc", pa.paraArea, proTidrOpenFtg, pa.bfar, "PRO", p04921Record, "D", protidr.get().post);
-            }
-            proFilhantExit();
-        }
-
-        private void proTidrStartEg() {
-            p04921Record.set("TIDR");
-            p04921Action.set("START-EG");
-            proFilhantInit();
-            proTidrInit();
-            proTidr.start("NOT<", "pro_tidr_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidr.start("NOT<", "pro_tidr_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
-        private void proTidrStartprevEg() {
-            p04921Record.set("TIDR");
-            p04921Action.set("STARTPREV-EG");
-            proFilhantInit();
-            proTidrInit();
-            proTidr.start("NOT>", "pro_tidr_key");
-            while ((p04921Dasvar.equals("99"))) {
-                c_sleep("1");
-                proTidr.start("NOT>", "pro_tidr_key");
-            }
-            proCheck0023();
-            proFilhantExit();
-        }
-
--- a/server.src/prg/med/Xkase11.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xkase11.this);
-    private lib.med.Datab da=new lib.med.Datab(Xkase11.this);
-    private lib.med.P8calc p8calc=new lib.med.P8calc(Xkase11.this);
-    private Field fsortEof = new Field("X", "N");
--- a/server.src/prg/med/Xkase13.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xkase13.this);
-    private lib.med.Datab da=new lib.med.Datab(Xkase13.this);
-    private lib.med.P8calc p8calc=new lib.med.P8calc(Xkase13.this);
--- a/server.src/prg/med/Xkase14.java
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(Xkase14.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Xkase14.this);
-    private lib.med.Datab da=new lib.med.Datab(Xkase14.this);
-    private lib.med.P8calc p8calc=new lib.med.P8calc(Xkase14.this);
--- a/server.src/prg/med/Xkase15.java
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(Xkase15.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Xkase15.this);
-    private lib.med.Datab da=new lib.med.Datab(Xkase15.this);
-    private lib.med.P8calc p8calc=new lib.med.P8calc(Xkase15.this);
--- a/server.src/prg/med/Xkoll01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xkoll01.this);
-    private lib.med.Datab da=new lib.med.Datab(Xkoll01.this);
--- a/server.src/prg/med/Xkoll02.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Xkoll02.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Xkoll02.this);
-    private lib.med.Datab da=new lib.med.Datab(Xkoll02.this);
-    private Field x = new Field("S9(9)");
-    private Field sbKundFinns = new Field("X");
--- a/server.src/prg/med/Xmeta01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xmeta01.this);
-    private lib.med.Datab da=new lib.med.Datab(Xmeta01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xmeta01.this);
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
--- a/server.src/prg/med/Xmeta02.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xmeta02.this);
-    private lib.med.Datab da=new lib.med.Datab(Xmeta02.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xmeta02.this);
-    private Field kurs = new Field("999999V9999");
-    private Field kursAntal = new Field("999999");
-    private Field infilField2 = new Field("X(200)");
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field overNamn = new Field("X(50)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equals(".") || infilField.ref(infilFieldPek,1).equals(",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/med/Xmeta03.java
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(Xmeta03.this, pa);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Xmeta03.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Xmeta03.this);
-    private lib.med.Datab da=new lib.med.Datab(Xmeta03.this);
-    private Field x = new Field("S9(9)");
--- a/server.src/prg/med/Xmeta04.java
-    private Field finibData = finibPost.extend();
-    private Field finibTextdata = finibData.extend();
-    private Field finibKompletterad = finibTextdata.extend("X");
-    private Field finibNamn = finibTextdata.extend("X(25)");
-    private Field finibBeskr = finibTextdata.extend("X(25)");
-    private Field finibMasterItyp = finibTextdata.extend("X(4)");
-    private Field finibMasterNr = finibTextdata.extend("9(6)");
-    private Field finibMasterUnr = finibTextdata.extend("99");
-    private Field finibSerienr = finibTextdata.extend("X(25)");
-    private Field finibLevNr = finibTextdata.extend("X(10)");
-    private Field finibLevNamn = finibTextdata.extend("X(25)");
-    private Field finibPtyp = finibTextdata.extend("XX");
-    private Field finibVernr = finibTextdata.extend("9(6)");
-    private Field finibPlac = finibTextdata.extend("X(25)");
-    private Field finibAnskDat = finibTextdata.extend("9(8)");
-    private Field finibBfDat = finibTextdata.extend("9(8)");
-    private Field finibKst = finibTextdata.extend("X(6)");
-    private Field finibKbr = finibTextdata.extend("X(6)");
-    private Field finibAvskrFrom = finibTextdata.extend("9(6)");
-    private Field finibAvskrAntal = finibTextdata.extend("999");
-    private Field finibKomm1 = finibTextdata.extend("X(80)");
-    private Field finibKomm2 = finibTextdata.extend("X(80)");
-    private Field finibAnskPris = finibData.extend("S9(9)");
-    private Field finibAvskrPris = finibData.extend("S9(9)");
-    private lib.in2.Invepost in2inve=new lib.in2.Invepost(Xmeta04.this, pa);
-    private lib.in2.Ityppost in2ityp=new lib.in2.Ityppost(Xmeta04.this, pa);
-    private lib.in2.Parapost in2para=new lib.in2.Parapost(Xmeta04.this, pa);
-    private lib.in2.Avskpost in2avsk=new lib.in2.Avskpost(Xmeta04.this, pa);
-    private lib.gem.Bsynpost gembsyn=new lib.gem.Bsynpost(Xmeta04.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Xmeta04.this);
-    private lib.med.Datab da=new lib.med.Datab(Xmeta04.this);
-    private Field tiItyp = new Field("X(4)");
--- a/server.src/prg/med/Xomd01.java
-    private lib.kun.Faktpost kunfakt=new lib.kun.Faktpost(Xomd01.this, pa);
-    private lib.bas.Beho beho=new lib.bas.Beho(Xomd01.this);
-    private lib.med.Datab da=new lib.med.Datab(Xomd01.this);
-    private lib.med.P8calc p8calc=new lib.med.P8calc(Xomd01.this);
--- a/server.src/prg/med/Xomdr02.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xomdr02.this);
-    private lib.med.Datab da=new lib.med.Datab(Xomdr02.this);
-    private lib.med.P8calc p8calc=new lib.med.P8calc(Xomdr02.this);
-    private Field antal = new Field("S9(9)");
--- a/server.src/prg/med/Xscr01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xscr01.this);
-    private lib.med.Datab da=new lib.med.Datab(Xscr01.this);
-    private Field bfdat = new Field("9(8)", new Constant("20141231"));
-    private Field infilField2 = new Field("X(200)");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field tmpBeloppD = new Field("--------9.99");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
--- a/server.src/prg/med/Xscr03.java
-    private lib.gem.Bsynpost gembsyn=new lib.gem.Bsynpost(Xscr03.this, pa);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Xscr03.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Xscr03.this);
-    private lib.med.Datab da=new lib.med.Datab(Xscr03.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xscr03.this);
--- a/server.src/prg/med/Xsign01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xsign01.this);
-    private lib.med.Datab da=new lib.med.Datab(Xsign01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xsign01.this);
-    private Field kurs = new Field("999999V9999");
-    private Field kursAntal = new Field("999999");
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field overNamn = new Field("X(50)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpTidn = new Field("X(4)");
-    private Field tmpKund = new Field("X(4)");
-    private Field tmpBelopp = new Field("S9(9)V99");
-    private Field tmpBeloppD = new Field("--------9.99");
-    private Field tmpKomm = new Field("X(70)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/med/Xsign02.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xsign02.this);
-    private lib.med.Datab da=new lib.med.Datab(Xsign02.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xsign02.this);
-    private Field kurs = new Field("999999V9999");
-    private Field kursAntal = new Field("999999");
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field overNamn = new Field("X(50)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpTidn = new Field("X(4)");
-    private Field tmpKund = new Field("X(4)");
-    private Field tmpBelopp = new Field("S9(9)V99");
-    private Field tmpBeloppD = new Field("--------9.99");
-    private Field tmpKomm = new Field("X(70)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/med/Xsign03.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xsign03.this);
-    private lib.med.Datab da=new lib.med.Datab(Xsign03.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Xsign03.this);
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equals(".") || infilField.ref(infilFieldPek,1).equals(",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/med/Xsign04.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xsign04.this);
-    private lib.med.Datab da=new lib.med.Datab(Xsign04.this);
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field tmpBeloppD = new Field("--------9.99");

--- a/server.src/prg/med/Xtoin01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xtoin01.this);
-    private lib.med.Datab da=new lib.med.Datab(Xtoin01.this);
-    private lib.med.P8calc p8calc=new lib.med.P8calc(Xtoin01.this);
--- a/server.src/prg/med/Xtoin02.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xtoin02.this);
-    private lib.med.Datab da=new lib.med.Datab(Xtoin02.this);
-    private Field bfdat = new Field("9(8)", new Constant("20141231"));
-    private Field infilField2 = new Field("X(200)");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field tmpBeloppD = new Field("--------9.99");

-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
--- a/server.src/prg/med/Xwhyd01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Xwhyd01.this);
-    private lib.med.Datab da=new lib.med.Datab(Xwhyd01.this);
-    private Field bfdat = new Field("9(8)", new Constant("20140630"));
-    private Field infilField2 = new Field("X(200)");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field tmpBeloppD = new Field("--------9.99");

-    private Field infilNamn = new Field("X(50)");
-    private Field infilFs1 = infilFs.extend("X");
-    private Field infilFs2 = infilFs.extend("X");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
--- a/server.src/prg/med/Yadmax.java
-    private lib.bas.Bapipost basbapi=new lib.bas.Bapipost(Yadmax.this);
-    private lib.med.Datab da=new lib.med.Datab(Yadmax.this);
-    private lib.pro.Fatepost profate=new lib.pro.Fatepost(Yadmax.this, pa);
-    private lib.pro.Faanpost profaan=new lib.pro.Faanpost(Yadmax.this, pa);
-    private Field orderLnr = new Field("9(6)");
-    private Field orderInfLnr = new Field("9(6)");
-    private Field orderPriceLnr = new Field("9(6)");
-    private Field orderCommentLnr = new Field("9(6)");
-    private Field orderPek = new Field("S9(9)");
-    private Field tidnok = new Field("X");
-    private Field tmpKey = new Field("X(100)");
-    private Field tmpKey2 = new Field("X(100)");
-    private Field slutdat = new Field("9(8)");
-    private Field tmpFormers = new Field("9(9)V99");
-    private Field tmpInfoers = new Field("9(9)V99");
-    private Field tmpBetgar = new Field("9(9)V99");
-    private Field tmpMaters = new Field("9(9)V99");
-    private Field tmpMatersMm = new Field("9(9)V99");
-    private Field tmpKassarab = new Field("9(9)V99");
-    private Field tmpKrabnet = new Field("9(9)V99");
-    private Field tmpProvTyp = new Field("X");
-    private Field pctD = new Field("X(25)");
-    private Field planPek = new Field("S9(9)");
-    private Field approved = new Field("X(100)");
-    private Field mailann = new Field("X(100)");
-                                  filterMtypLista[i] = filterMtypO.extend("X(100)");
-                              }}}
-    private Field filterActive = new Field("X(100)");
-    private Field tmp = new Field("X(100)");
--- a/server.src/prg/med/Yblaco.java
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(Yblaco.this);
-    private lib.pri.Tidnpost prisPritidn=new lib.pri.Tidnpost(Yblaco.this);
-    private lib.pri.Sektpost prisekt=new lib.pri.Sektpost(Yblaco.this);
-    private lib.pri.Prispost pripris=new lib.pri.Prispost(Yblaco.this);
-    private lib.pri.Tugdpost pritugd=new lib.pri.Tugdpost(Yblaco.this);
-    private lib.pri.Madapost primada=new lib.pri.Madapost(Yblaco.this);
-    private lib.pri.Ugfdpost priugfd=new lib.pri.Ugfdpost(Yblaco.this);
-    private lib.med.Vduram vduram=new lib.med.Vduram(Yblaco.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Yblaco.this);
-    private lib.med.P8calc p8calc=new lib.med.P8calc(Yblaco.this);
-    private Field blaclnrOpen = new Field("X");







-    private Field stdVal = new Field("9");
-    private Field stdKey = new Field("999");
-    private Field komm = new Field("X(100)");
-    private Field xmlIn = new Field("X(50)");
-    private Field xmlUt = new Field("X(50)");
-    private Field lnr = new Field("999");
-    private Field fileExists = new Field("S9(9)");
-    private Field paInfLopnr = new Field("9(9)");
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisakod.set("F");
-        stddata.stdVisakod.ref(2).set(pa.txtnr.ref(1));
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisakod);
-    }
-
-    private void z05BlankaMeddelande() {
-        call("prg.bas.visa", pa.paraArea, "F000");
-        pa.txtnr.set(ZERO);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdFunk, stddata.stdKom);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            call("prg.bas.visa", pa.paraArea, "F902");
-        }
-    }
-
-    private void z21Upshift() {
-        z21Konv.toUpper();
-    }
-
--- a/server.src/prg/med/Yblacws.java
-    private lib.bas.Bapipost basbapi=new lib.bas.Bapipost(Yblacws.this);
-    private lib.med.Datab da=new lib.med.Datab(Yblacws.this);
-    private lib.pro.Fatepost profate=new lib.pro.Fatepost(Yblacws.this, pa);
-    private lib.pro.Faanpost profaan=new lib.pro.Faanpost(Yblacws.this, pa);
-    private Field orderLnr = new Field("9(6)");
-    private Field orderInfLnr = new Field("9(6)");
-    private Field orderPriceLnr = new Field("9(6)");
-    private Field orderCommentLnr = new Field("9(6)");
-    private Field orderPek = new Field("S9(9)");
-    private Field pctD = new Field("X(25)");
-    private Field planPek = new Field("S9(9)");
-    private Field tmp = new Field("X(100)");
--- a/server.src/prg/med/Ycarnmrab.java
-    private lib.med.Stddata stddata=new lib.med.Stddata(Ycarnmrab.this);
-    private lib.med.Datab da=new lib.med.Datab(Ycarnmrab.this);







-    private Field stdVal = new Field("9");
-    private Field stdKey = new Field("999");
-                                  ftg[i] = ftgR.extend("X(4)");
-                              }}}
-    private Field ftgPek = new Field("S9(9)");
-    private Field oldBkstvftg = new Field("X(4)");
-    private Field tmpMrabData = new Field("X(65000)");
-    private void z04Meddela() {
-        stddata.stdVisakod.set("F");
-        stddata.stdVisakod.ref(2).set(pa.txtnr.ref(1));
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisakod);
-    }
-
-    private void z05BlankaMeddelande() {
-        call("prg.bas.visa", pa.paraArea, "F000");
-        pa.txtnr.set(ZERO);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdFunk, stddata.stdKom);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            call("prg.bas.visa", pa.paraArea, "F902");
-        }
-    }
-
-    private void z21Upshift() {
-        z21Konv.toUpper();
-    }
-
--- a/server.src/prg/med/Yiumws.java
-    private lib.bas.Bapipost basbapi=new lib.bas.Bapipost(Yiumws.this);
-    private lib.med.Datab da=new lib.med.Datab(Yiumws.this);
-    private lib.pro.Fatepost profate=new lib.pro.Fatepost(Yiumws.this, pa);
-    private lib.pro.Faanpost profaan=new lib.pro.Faanpost(Yiumws.this, pa);
-    private Field orderLnr = new Field("9(6)");
-    private Field orderInfLnr = new Field("9(6)");
-    private Field orderPriceLnr = new Field("9(6)");
-    private Field orderCommentLnr = new Field("9(6)");
-    private Field orderPek = new Field("S9(9)");
-    private Field hojd = new Field("999");
-    private Field minHojd = new Field("999");
-    private Field prMinPrice = new Field("S9(10)V99");
-    private Field prMinPriceModule = new Field("XXX");
-    private Field tmpPrimKey = new Field("X(100)");
-    private Field pctD = new Field("X(25)");
-    private Field planPek = new Field("S9(9)");
-    private Field tmp = new Field("X(100)");
--- a/server.src/prg/med/Ymetasky.java
-    private lib.bas.Bapipost basbapi=new lib.bas.Bapipost(Ymetasky.this);
-    private lib.med.Datab da=new lib.med.Datab(Ymetasky.this);
-    private Field tmpPassword = new Field("X(100)");
-    private Field tmpPrimKey = new Field("X(100)");
-    private Field tmpSprak = new Field("XX");
-    private Field sprakNr = new Field("S9(11)");
-    private Field adWidth = new Field("S9(9)");
-    private Field minHojd = new Field("999");
-    private Field getInvoiceUnixCommand = new Field("X(200)");
-    private Field invoiceNumber = new Field("X(25)");
-    private Field watermarkCopy = new Field("X(25)");
-    private Field orderLnr = new Field("9(6)");
-    private Field orderInfLnr = new Field("9(6)");
-    private Field orderPriceLnr = new Field("9(6)");
-    private Field orderCommentLnr = new Field("9(6)");
-    private Field orderPek = new Field("S9(9)");
-    private Field orderExorLnr = orderO.extend("9(6)");
-    private Field orderUnit = orderO.extend("X(10)");
-    private Field orderWidth = orderO.extend("X(10)");
-    private Field orderFormat = orderO.extend("X(100)");
-    private Field webpurPlannr = new Field("X(200)");
-    private Field webpurLista = new Field("X(2000)");
-    private Field webpurFrDat = new Field("9(8)");
-    private Field webpurTiDat = new Field("9(8)");
-    private Field webpurListtyp = new Field("X");
-    private Field webpurMtyp = new Field("XX");
-    private Field webpurInklPrel = new Field("X");
-    private Field y = new Field("S9(9)");
--- a/server.src/prg/med/Ysignkund.java
-    private lib.med.Datab da=new lib.med.Datab(Ysignkund.this);
--- a/server.src/prg/med/Yssdaexp.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Yssdaexp.this);
-    private lib.med.Datab da=new lib.med.Datab(Yssdaexp.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field filutRad2 = new Field("X(200)");
--- a/server.src/prg/med/Zavde546.java
-                                avFaktMail[i] = avFaktMailO.extend("X(50)");
-                            }}}
--- a/server.src/prg/med/Zfrad545.java
--- a/server.src/prg/pri/Impuppl.java
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Impuppl.this);
-    private lib.ksd.Datab da=new lib.ksd.Datab(Impuppl.this);
-    private Field infilEof = new Field("X");
--- a/server.src/prg/pro/Ader01.java
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Ader01.this, pa);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(Ader01.this, pa);
-    private lib.pro.Nattpost pronatt=new lib.pro.Nattpost(Ader01.this, pa);
-    private Field kol1 = new Field("X(200)");
-    private Field kol2 = new Field("X(200)");
-    private Field kol3 = new Field("X(200)");
-    private Field kol4 = new Field("X(200)");
-    private Field kol5 = new Field("X(200)");
-    private Field kol6 = new Field("X(200)");
-    private Field kol7 = new Field("X(200)");
-    private Field kol8 = new Field("X(200)");
-    private Field kol9 = new Field("X(200)");
-    private Field kol10 = new Field("X(200)");
-    private Field kol11 = new Field("X(200)");
-    private Field kol12 = new Field("X(200)");
-    private Field levtotuD = new Field("---------9");
-    private Field levtotuSt = new Field("S9(9)");
-    private Field levmomsuD = new Field("---------9");
-    private Field levmomsuSt = new Field("S9(9)");
-    private Field levtotsD = new Field("---------9");
-    private Field levtotsSt = new Field("S9(9)");
-    private Field levbetD = new Field("---------9");
-    private Field levbetSt = new Field("S9(9)");
-    private Field utprisD = new Field("---------9");
-    private Field utprisSt = new Field("S9(9)");
-    private Field proinprisD = new Field("---------9");
-    private Field proinprisSt = new Field("S9(9)");
-    private Field inlager = new Field("S9(9)");
-    private Field inlagerD = new Field("---------9");
-    private Field inlagerSt = new Field("S9(9)");
-    private Field z13TknG = new Field("X(10)");
--- a/server.src/prg/pro/Aegfexp.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Aegfexp.this);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Aegfexp.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Aegfexp.this);
-    private Field radnr = new Field("S9(9)");
-    private Field rad = new Field("X(1000)");
-    private Field x = new Field("S9(9)");
-    private Field field = new Field("X(25)");
-    private Field start2 = new Field("S9(9)");
-    private Field len2 = new Field("S9(9)");
-    private Field projNy = new Field("X");
-    private Field textNy = new Field("X");
-    private Field antal = new Field("S9(9)");
-    private Field hours = new Field("S9(9)V99");
-    private Field hoursD = new Field("X(100)");
-    private Field statuskod = new Field("X(50)");
-    private Field lastKund = new Field("X(4)");
-    private Field jobCategoryPek = new Field("S9(9)");
-    private Field specialInvoiceTextPek = new Field("S9(9)");
-    private Field keyTidw = new Field("X");
-    private Field tmpTidwPost = new Field("X(10000)");
-    private Field ejSlutford = new Field("X");
-    private Field grpNamn = new Field("X(50)");
-    private Field perskatNamn = new Field("X(50)");
--- a/server.src/prg/pro/Astatus.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Astatus.this);
-    private lib.pro.Forepost profore=new lib.pro.Forepost(Astatus.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Astatus.this);
--- a/server.src/prg/pro/Dobetid.java
-    private lib.bas.Maxipost basmaxi=new lib.bas.Maxipost(Dobetid.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Dobetid.this);
-    private Field tmpTecken = new Field("X(100)");
--- a/server.src/prg/pro/Expafl.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Expafl.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Expafl.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Expafl.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Expafl.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Expafl.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Expafl.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Expafl.this);
-    private lib.pro.Pfripost propfri=new lib.pro.Pfripost(Expafl.this, pa);
-    private lib.pro.Prfrpost proprfr=new lib.pro.Prfrpost(Expafl.this, pa);
-    private lib.pro.Ifakpost proifak=new lib.pro.Ifakpost(Expafl.this, pa);
-    private lib.pro.Ifabpost proifab=new lib.pro.Ifabpost(Expafl.this, pa);
-    private lib.pro.Overpost proover=new lib.pro.Overpost(Expafl.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field akoder = new Field("X(200)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel2 = new Field("S9(10)");
-    private Field tmpHel3 = new Field("S9(10)");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field tmpPer2 = new Field("9(6)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field tmpKey = new Field("X(1000)");
-    private Field oldKod = new Field("XXX");
-    private Field ejutskr = new Field("X");
-    private Field sumIfak = new Field("S9(9)");
-    private Field sumIfaka = new Field("S9(9)");
-    private Field sumMarkup = new Field("S9(9)");
-    private Field sumA8 = new Field("S9(9)");
-    private Field sumI12 = new Field("S9(9)");
-    private Field sumFinal = new Field("S9(9)");
-    private Field grossHel = new Field("S9(9)");
-    private Field medaIndex= new Field("9(9)");
-    private Field postrubrik = new Field("X(200)");
-    private Field caleTim = new Field("S9(9)V99");
-    private Field sumTim = new Field("S9(9)V99");
-    private void uppdFsort() {
-        lib.pro.Tidgpost.fd tidg=protidg.get();
-        fsortData.init();
-        fsort.read();
-        fsortBel[0].increment(tidg.belakt);
-        if (fsortFs.equals("00")) {
-            fsortPost.rewrite();
-        }
-        else {
-            fsortPost.write();
-        }
-    }
-
-    private void submm() {
-        tmpPerMm.decrement(1);
-        if (tmpPerMm.equals(0)) {
-            tmpPerAa.decrement(1);
-            tmpPerMm.set(12);
-        }
-    }
-
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Expbudw.java
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Expbudw.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Expbudw.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Expbudw.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Expbudw.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Expbudw.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Expbudw.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmp100 = new Field("X(100)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p0 = new Field("X(50)");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field ptrl2 = new Field("99999");
-    private Field ptrl3 = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field uppdlag = new Field("X");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field flagga1 = new Field("X");






-    private Field opened = new Field("X");
-    private Field selDatfr = new Field("9(8)");
-    private Field selDatti = new Field("9(8)");
-    private Field selRegdatfr = new Field("9(8)");
-    private Field selRegdatti = new Field("9(8)");
-    private Field selTidwRegdatfr = new Field("9(8)");
-    private Field selTidwRegdatti = new Field("9(8)");
-    private Field selStoppdatfr = new Field("9(8)");
-    private Field selStoppdatti = new Field("9(8)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field antal1 = new Field("99999");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field ti = new Field("99999");
-    private Field lnr = new Field("999");
-    private Field felkod = new Field("999");
-    private Field valuta = new Field("XXX");
-    private Field mvaluta = new Field("XXX");
-    private Field ordPris = new Field("9(5)");
-    private Field avvPris = new Field("9(5)");
-    private Field tmpPris = new Field("9(5)");
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Expifsg.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Expifsg.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Expifsg.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Expifsg.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Expifsg.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Expifsg.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Expifsg.this);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Expifsg.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field akoder = new Field("X(200)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel = new Field("S9(10)");
-    private Field tmpHel2 = new Field("S9(10)");
-    private Field tmpHel3 = new Field("S9(10)");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field tmpPer2 = new Field("9(6)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field tmpN = new Field("999999");
-    private Field selN = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field tmpKey = new Field("X(1000)");
-    private Field oldKod = new Field("XXX");
-    private Field ejutskr = new Field("X");
-    private Field sumIfak = new Field("S9(9)");
-    private Field sumIfaka = new Field("S9(9)");
-    private Field sumMarkup = new Field("S9(9)");
-    private Field sumA8 = new Field("S9(9)");
-    private Field sumI12 = new Field("S9(9)");
-    private Field sumFinal = new Field("S9(9)");
-    private Field grossHel = new Field("S9(9)");
-    private Field medaIndex= new Field("9(9)");
-    private Field postrubrik = new Field("X(200)");
-    private Field caleTim = new Field("S9(9)V99");
-    private Field sumTim = new Field("S9(9)V99");
-    private Field tmpSaldotyp = new Field("X");
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Expprognos.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Expprognos.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Expprognos.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Expprognos.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Expprognos.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Expprognos.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Expprognos.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Expprognos.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field akoder = new Field("X(200)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel2 = new Field("S9(10)");
-    private Field tmpHel3 = new Field("S9(10)");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field tmpN = new Field("999999");
-    private Field selN = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field selPtype = new Field("X");
-    private Field selPtypg = new Field("X");
-    private Field selPtypi = new Field("X");
-    private Field selPtypj = new Field("X");
-    private Field selPtyp9 = new Field("X");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field tmpKey = new Field("X(1000)");
-    private Field oldKod = new Field("XXX");
-    private Field ejutskr = new Field("X");
-    private Field sumIfak = new Field("S9(9)");
-    private Field sumIfaka = new Field("S9(9)");
-    private Field sumMarkup = new Field("S9(9)");
-    private Field sumA8 = new Field("S9(9)");
-    private Field sumI12 = new Field("S9(9)");
-    private Field sumFinal = new Field("S9(9)");
-    private Field grossHel = new Field("S9(9)");
-    private Field medaIndex= new Field("9(9)");
-    private Field postrubrik = new Field("X(200)");
-    private Field caleTim = new Field("S9(9)V99");
-    private Field sumTim = new Field("S9(9)V99");
-    private Field tmpSaldotyp = new Field("X");
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Expprognosd.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Expprognosd.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Expprognosd.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Expprognosd.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Expprognosd.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Expprognosd.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Expprognosd.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field akoder = new Field("X(200)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel2 = new Field("S9(10)");
-    private Field tmpHel3 = new Field("S9(10)");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field tmpN = new Field("999999");
-    private Field selN = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field selPtype = new Field("X");
-    private Field selPtypg = new Field("X");
-    private Field selPtypi = new Field("X");
-    private Field selPtypj = new Field("X");
-    private Field selPtyp9 = new Field("X");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field tmpKey = new Field("X(1000)");
-    private Field oldKod = new Field("XXX");
-    private Field ejutskr = new Field("X");
-    private Field sumIfak = new Field("S9(9)");
-    private Field sumIfaka = new Field("S9(9)");
-    private Field sumMarkup = new Field("S9(9)");
-    private Field sumA8 = new Field("S9(9)");
-    private Field sumI12 = new Field("S9(9)");
-    private Field sumFinal = new Field("S9(9)");
-    private Field grossHel = new Field("S9(9)");
-    private Field medaIndex= new Field("9(9)");
-    private Field postrubrik = new Field("X(200)");
-    private Field caleTim = new Field("S9(9)V99");
-    private Field sumTim = new Field("S9(9)V99");
-    private Field tmpSaldotyp = new Field("X");
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Expprogproj.java
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Expprogproj.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Expprogproj.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Expprogproj.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Expprogproj.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Expprogproj.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Expprogproj.this, pa);
-    private lib.pro.Budapost probuda=new lib.pro.Budapost(Expprogproj.this, pa);
-    private lib.pro.Budipost probudi=new lib.pro.Budipost(Expprogproj.this, pa);
-    private lib.pro.Budopost probudo=new lib.pro.Budopost(Expprogproj.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmp100 = new Field("X(100)");
-    private Field post = new Field("X(1000)");
-    private Field frame = new Field("X");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field p0 = new Field("X(50)");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field ptrl2 = new Field("99999");
-    private Field ptrl3 = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field uppdlag = new Field("X");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field flagga1 = new Field("X");






-    private Field opened = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selPerfr = new Field("9(6)");
-    private Field selPerti = new Field("9(6)");
-    private Field selDatfr = new Field("9(8)");
-    private Field selDatti = new Field("9(8)");
-    private Field selRegdatfr = new Field("9(8)");
-    private Field selRegdatti = new Field("9(8)");
-    private Field selTidwRegdatfr = new Field("9(8)");
-    private Field selTidwRegdatti = new Field("9(8)");
-    private Field selStoppdatfr = new Field("9(8)");
-    private Field selStoppdatti = new Field("9(8)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sumArv = new Field("S9(10)");
-    private Field sumInk = new Field("S9(10)");
-    private Field sumOvr = new Field("S9(10)V99");
-    private Field antal1 = new Field("99999");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field ti = new Field("99999");
-    private Field lnr = new Field("999");
-    private Field felkod = new Field("999");
-    private Field valuta = new Field("XXX");
-    private Field mvaluta = new Field("XXX");
-    private Field ordPris = new Field("9(5)");
-    private Field avvPris = new Field("9(5)");
-    private Field tmpPris = new Field("9(5)");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Exptidg.java
-    private lib.bas.Std std=new lib.bas.Std(Exptidg.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Exptidg.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Exptidg.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Exptidg.this);
-    private lib.pro.Tidrpost protidr=new lib.pro.Tidrpost(Exptidg.this, pa);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(Exptidg.this, pa);
-    private lib.pro.Tidfpost protidf=new lib.pro.Tidfpost(Exptidg.this, pa);
-    private lib.pro.Peripost properi=new lib.pro.Peripost(Exptidg.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmp100 = new Field("X(100)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p0 = new Field("X(50)");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl3 = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field uppdlag = new Field("X");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field flagga1 = new Field("X");






-    private Field opened = new Field("X");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum1c = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field ti = new Field("99999");
-    private Field lnr = new Field("999");
-    private Field felkod = new Field("999");
-    private Field mvaluta = new Field("XXX");
-    private Field ordPris = new Field("9(5)");
-    private Field avvPris = new Field("9(5)");
-    private Field tmpPris = new Field("9(5)");
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
-    private void z15Peridatum() {
-        lib.pro.Peripost.fd peri=properi.get();
-        wsDagDatum.set(std.stdToday);
-        wsBfForsl.set(wsDagDatum);
-        wsPerStart.set(ZERO);
-        wsPerSlut.set(wsBfForsl);
-        fore.foreid.set("00000000");
-        prorecarea.recArea.set(fore.post);
-        pa.recid.set(da.fore);
-        pa.action.set(da.read);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        fore.post.set(prorecarea.recArea);
-        if (pa.ok() && fore.periodTab.equals("J")) {
-            wsBfStart.set(new Constant("99999999"));
-            wsBfSlut.set(new Constant("99999999"));
-            peri.typ.ref(1,1).set("Y");
-            if (wsPerTab.equals("A")) {
-                peri.typ.ref(2,1).set(fore.tabA);
-            }
-            else if (wsPerTab.equals("I")) {
-                peri.typ.ref(2,1).set(fore.tabI);
-            }
-            else if (wsPerTab.equals("M")) {
-                peri.typ.ref(2,1).set(fore.tabM);
-            }
-            else if (wsPerTab.equals("J")) {
-                peri.typ.ref(2,1).set(fore.tabJ);
-            }
-            else {
-                peri.typ.ref(2,1).set(fore.tabF);
-            }
-            peri.space.set(SPACE);
-            peri.periid.set(1900);
-            prorecarea.recArea.set(peri.post);
-            pa.recid.set(da.peri);
-            pa.action.set(da.startEg);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            if (pa.ok()) {
-                pa.recid.set(da.peri);
-                pa.action.set(da.readnext);
-                call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                peri.post.set(prorecarea.recArea);
-                while ((pa.ok() && peri.typ.ref(1,1).equals("Y") && ((wsPerTab.equals("A") && peri.typ.ref(2,1).equals(fore.tabA)) || 
-                                (wsPerTab.equals("I") && peri.typ.ref(2,1).equals(fore.tabI)) || 
-                                (wsPerTab.equals("M") && peri.typ.ref(2,1).equals(fore.tabM)) || 
-                                (wsPerTab.equals("J") && peri.typ.ref(2,1).equals(fore.tabJ)) || 
-                                (wsPerTab.equals("F") && peri.typ.ref(2,1).equals(fore.tabF))))) {
-                    wsPerX.set(1);
-                    while (!(wsPerX.compareTo(12)>0)) {
-                        if (peri.status[wsPerX.getInt()-1].equals("J")) {
-                            z03Ar.set(peri.aa);
-                            z03Man.set(wsPerX);
-                            if (z03Man.equalsEither(4, 6, 9, 11)) {
-                                z03Dag.set(30);
-                            }
-                            else if (z03Man.equals(2) && (z03Ar.equalsEither(1980, 1984, 1988, 1992, 1996, 2000, 2004, 2008, 2012, 2016))) {
-                                z03Dag.set(29);
-                            }
-                            else if (z03Man.equals(2)) {
-                                z03Dag.set(28);
-                            }
-                            else {
-                                z03Dag.set(31);
-                            }
-                            wsPerSlut.set(peri.slut[wsPerX.getInt()-1]);
-                            wsBfSlut.set(z03Datum);
-                            if (wsBfStart.equals(new Constant("99999999"))) {
-                                if (z03Datum.compareTo(wsBfForsl)<0) {
-                                    wsBfForsl.set(z03Datum);
-                                }
-                                wsPerStart.set(peri.start[wsPerX.getInt()-1]);
-                                z03Dag.set(1);
-                                wsBfStart.set(z03Datum);
-                            }
-                        }
-                        wsPerX.increment(1);
-                    }
-                    pa.recid.set(da.peri);
-                    pa.action.set(da.readnext);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    peri.post.set(prorecarea.recArea);
-                }
-                acceptFrom(" FROM  ENVIRONMENT ","KUNDID",wsBfKundid);
-                if (wsBfKundid.equalsEither("49", "999")) {
-                    wsBfStart.set(wsPerStart);
-                    wsBfSlut.set(wsPerSlut);
-                    wsBfForsl.set(wsDagDatum);
-                    if (wsBfForsl.compareTo(wsBfSlut)>0) {
-                        wsBfForsl.set(wsBfSlut);
-                    }
-                    if (wsBfForsl.compareTo(wsBfStart)<0) {
-                        wsBfForsl.set(wsBfStart);
-                    }
-                }
-                if (fore.fdatStort.equals("N")) {
-                    if (wsBfSlut.compareTo(wsDagDatum)>0) {
-                        wsBfSlut.set(wsDagDatum);
-                    }
-                    if (wsPerSlut.compareTo(wsDagDatum)>0) {
-                        wsPerSlut.set(wsDagDatum);
-                    }
-                }
-            }
-        }
-        else {
-            wsBfStart.set(ZERO);
-            wsBfSlut.set(wsBfForsl);
-            if (fore.fdatStort.equals("J")) {
-                wsBfSlut.set(new Constant("99999999"));
-                wsPerSlut.set(new Constant("99999999"));
-            }
-        }
-    }
-
-    private void ouppvarn() {
-        lib.pro.Tidrpost.fd tidr=protidr.get();
-        tidr.post.init();
-        call("prg.pro.p4io", pa.paraArea, da.tidr, da.startEg, tidr.post);
-        if (pa.ok()) {
-            call("prg.pro.p4io", pa.paraArea, da.tidr, da.readnext, tidr.post);
-        }
-        if (pa.ok()) {
-            call(webpara.webut, "%m %m!", "OBS", "EUF");
-        }
-    }
-
--- a/server.src/prg/pro/Faktut.java
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Faktut.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Faktut.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Faktut.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Faktut.this);
-    private lib.pro.Skripost proskri=new lib.pro.Skripost(Faktut.this, pa);
-    private Field tmp = new Field("X(100)");



-    private Field backlnr = new Field("9999");
-    private Field urval = new Field("9");
-    private Field scTkn = new Field("X");
-    private Field scTknNr = new Field("999");
-    private Field totMoms = new Field("S9(9)V99");
-    private Field oldCrtpos = new Field("9(4)");
-    private Field tmpBkstvftg = new Field("X(4)");
-    private Field tmpWindow = new Field("X(10)");
-    private Field tmpBitmap = new Field("9(9)");
-    private Field tmp80 = new Field("X(80)");
-    private Field lstBel = new Field("--B---B--9,99");
-    private Field lstHel = new Field("--B---B--9");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");
-    private Field fskrivNamn = new Field("X(50)");
-    private Field tmpNamn = new Field("X(50)");
-    private Field tid = new Field("9(8)");
-    private Field tmpBlankett = new Field("X(8)");
-    private Field tmpBlankettPara = new Field("X(4)");
-    private Field kopia = new Field("X");
-    private Field wsMomspro = new Field("99V99");
-    private Field wsMomsdec = new Field("X");
-    private void colorBakgrund() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (std.stdHasColor.equals("Y")) {
-            if (std.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-    //     COPY "SRC/PRO/LIB/Z04MED.PD". 
-    //     COPY "SRC/PRO/LIB/Z17EXIT.PD". 
-
--- a/server.src/prg/pro/Fixafakt.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Fixafakt.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Fixafakt.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Fixafakt.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Fixafakt.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Fixafakt.this, pa);
-    private Field post = new Field("X(2000)");
-    private Field oldPost = new Field("X(2000)");
-    private Field tmp = new Field("X(100)");
--- a/server.src/prg/pro/Fixagcp.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Fixagcp.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Fixagcp.this);
--- a/server.src/prg/pro/Forepgem.java
-    private lib.gem.Pgrupost gempgru=new lib.gem.Pgrupost(Forepgem.this, pa);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Forepgem.this);
-    private lib.bas.Std std=new lib.bas.Std(Forepgem.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Forepgem.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Forepgem.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Forepgem.this);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Forepgem.this, pa);
-    private lib.pro.Vandpost provand=new lib.pro.Vandpost(Forepgem.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Forepgem.this, pa);
-    private lib.pro.Nattpost pronatt=new lib.pro.Nattpost(Forepgem.this, pa);
-    private lib.pro.Bokfpost probokf=new lib.pro.Bokfpost(Forepgem.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Forepgem.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Forepgem.this, pa);
-    private lib.pro.Fkunpost profkun=new lib.pro.Fkunpost(Forepgem.this, pa);
-    private lib.bok.Dim dim=new lib.bok.Dim(Forepgem.this);
-    private Field pgm = new Field("X(10)", "04FOREPGEM");
--- a/server.src/prg/pro/Groutid.java
-    private lib.bas.Maxipost basmaxi=new lib.bas.Maxipost(Groutid.this);
--- a/server.src/prg/pro/Inittest.java
-    private lib.bas.Std std=new lib.bas.Std(Inittest.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Inittest.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Inittest.this);
-    private Field pgm = new Field("X(11)", "INITTEST");
-    private Field fileOpened = new Field("X", "N");
-    private Field retursvar = new Field("999", 1);
-    private Field i = new Field("99999");
--- a/server.src/prg/pro/K00201.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K00201.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K00201.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K00201.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K00201.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K00201.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K00201.this);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(K00201.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(K00201.this, pa);
-    private lib.pro.Vandpost provand=new lib.pro.Vandpost(K00201.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(K00201.this, pa);
-    private lib.pro.Pfripost propfri=new lib.pro.Pfripost(K00201.this, pa);
-    private lib.pro.Prfrpost proprfr=new lib.pro.Prfrpost(K00201.this, pa);
-    private lib.pro.Ifakpost proifak=new lib.pro.Ifakpost(K00201.this, pa);
-    private lib.pro.Ifabpost proifab=new lib.pro.Ifabpost(K00201.this, pa);
-    private lib.pro.Overpost proover=new lib.pro.Overpost(K00201.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field akoder = new Field("X(200)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel = new Field("S9(10)");
-    private Field tmpHel2 = new Field("S9(10)");
-    private Field tmpHel3 = new Field("S9(10)");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field sel = new Field("X(1000)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field tmpKey = new Field("X(1000)");
-    private Field oldKod = new Field("XXX");
-    private Field ejutskr = new Field("X");
-    private Field sumIfak = new Field("S9(9)");
-    private Field sumIfaka = new Field("S9(9)");
-    private Field sumMarkup = new Field("S9(9)");
-    private Field sumA8 = new Field("S9(9)");
-    private Field sumI12 = new Field("S9(9)");
-    private Field sumFinal = new Field("S9(9)");
-    private Field grossHel = new Field("S9(9)");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/K12ip.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K12ip.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K12ip.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K12ip.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K12ip.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K12ip.this);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(K12ip.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(K12ip.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(K12ip.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K12ip.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K12ip.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp1 = new Field("X(300)");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field filNamn = new Field("X(100)");
-    private Field filNamn2 = new Field("X(100)");
-    private Field post30 = new Field("X(30000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel = new Field("S9(10)");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selPeriod = new Field("9(6)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field ejSlutford = new Field("X");
-    private Field tmpKey = new Field("X(1000)");
-    private Field oldKey = new Field("X(12)");
--- a/server.src/prg/pro/K132texp.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K132texp.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K132texp.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K132texp.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K132texp.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K132texp.this);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(K132texp.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(K132texp.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K132texp.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K132texp.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel = new Field("S9(10)");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(10000)");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/K29tid.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K29tid.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K29tid.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K29tid.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K29tid.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K29tid.this);
-    private lib.bas.Std std=new lib.bas.Std(K29tid.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K29tid.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K29tid.this);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(K29tid.this, pa);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(K29tid.this);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(K29tid.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel = new Field("S9(10)");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(10000)");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field tmpKod = new Field("XXX");
-    private Field tmpSort = new Field("X");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/K2bfstat.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K2bfstat.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(K2bfstat.this, pa);
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(K2bfstat.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(K2bfstat.this);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(K2bfstat.this, pa);
-    private lib.pro.Tidfpost protidf=new lib.pro.Tidfpost(K2bfstat.this, pa);
-    private lib.pro.Avtppost proavtp=new lib.pro.Avtppost(K2bfstat.this, pa);
-    private Field bfstatEof = new Field("X");
-    private Field tmp = new Field("X(300)");
-    private Field x = new Field("99");
-    private Field i = new Field("99");
--- a/server.src/prg/pro/K2faha.java
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(K2faha.this);
-    private lib.med.P8921 p8921=new lib.med.P8921(K2faha.this, pa, medrecarea);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K2faha.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K2faha.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K2faha.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K2faha.this);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(K2faha.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(K2faha.this);
-    private lib.bas.Maxipost basmaxi=new lib.bas.Maxipost(K2faha.this);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(K2faha.this, pa);
-    private lib.kun.Kundpost kunkund=new lib.kun.Kundpost(K2faha.this, pa);
-    private lib.kun.Faktpost kunfakt=new lib.kun.Faktpost(K2faha.this, pa);
-    private lib.dfa.Fhuvpost dfafhuv=new lib.dfa.Fhuvpost(K2faha.this, pa);
-    private lib.gem.Pgempost gempgem=new lib.gem.Pgempost(K2faha.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K2faha.this);
-    private lib.med.Datab da=new lib.med.Datab(K2faha.this);
-    private lib.bas.Std std=new lib.bas.Std(K2faha.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K2faha.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K2faha.this);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(K2faha.this, pa);
-    private Field tmp80 = new Field("X(80)");



-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field a = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field forsta = new Field("X");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field flagga1 = new Field("X");
-    private Field flagga2 = new Field("X");
-    private Field selPro = new Field("X");
-    private Field selMed = new Field("X");
-    private Field selDfa = new Field("X");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field paFaknr8 = new Field("9(8)");
-    private Field tmpMail = new Field("X(50)");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field fskrivNamn = new Field("X(50)");
-    private Field fskrivcNamn = new Field("X(50)");
-    private Field fskrivcEfalofpNamn = new Field("X(50)");
-    private Field fskrivcEfalofpPdf = new Field("X(50)");
-    private Field fskrivcEfasvefNamn = new Field("X(50)");
-    private Field fskrivcEfafmakNamn = new Field("X(50)");
-    private Field fskrivcEfamaraNamn = new Field("X(50)");
-    private Field fskrivcEfaehffNamn = new Field("X(50)");
-    private Field fskrivcFpNamn = new Field("X(50)");
-    private Field fskrivcIcdnNamn = new Field("X(50)");
-    private Field fskrivcIconNamn = new Field("X(50)");
-    private Field fpdfNamn = new Field("X(50)");
-    private Field fskriv3Namn = new Field("X(50)");
-    private Field tmpFilnamn = new Field("X(50)");
-    private Field tmpFilnamn2 = new Field("X(50)");
-    private Field tmpFilnamnPdf = new Field("X(50)");
-    private Field tmpBlankett = new Field("X(8)");
-    private Field exitStatus = new Field("999");
-    private Field ediMottagare = new Field("XXXX");
-    private Field ediPartyidEget = new Field("X(25)");
-    private Field ediMail = new Field("X(50)");
-    private Field ediTest = new Field("X");
-    private Field ediposter = new Field("X");
-    private Field ediposterEfalofp = new Field("99999");
-    private Field ediposterEfasvef = new Field("99999");
-    private Field ediposterEfafmak = new Field("99999");
-    private Field ediposterFp = new Field("X");
-    private Field ediposterIcdn = new Field("X");
-    private Field ediposterIcon = new Field("X");
-    private Field edinr = new Field("99999");
-    private Field edifel = new Field("X");
-    private Field edifelEfalofp = new Field("X");
-    private Field edifelEfasvef = new Field("X");
-    private Field edifelEfafmak = new Field("X");
-    private Field edifelEfamara = new Field("X");
-    private Field edifelFp = new Field("X");
-    private Field edifelIcdn = new Field("X");
-    private Field edifelIcon = new Field("X");
-    private Field edifelMail = new Field("X");
-    private Field forstafakIcdn = new Field("9(7)");
-    private Field forstafakIcon = new Field("9(7)");
-    private Field antalfakIcdn = new Field("9(6)");
-    private Field antalfakIcon = new Field("9(6)");
-    private Field xmlfel = new Field("99");
-    private Field tmpTeckentabell = new Field("X(20)");
-    private Field mailrubrik = new Field("X(200)");
-    private Field tmpMailrubrik = new Field("X(200)");
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/K2faha2.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K2faha2.this);
-    private lib.pro.Forepost profore=new lib.pro.Forepost(K2faha2.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(K2faha2.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(K2faha2.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(K2faha2.this, pa);
-    private Field tempfilEof = new Field("X");
-    private Field fvaluta = new Field("XXX");
--- a/server.src/prg/pro/K397sfi.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K397sfi.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K397sfi.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K397sfi.this);
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(K397sfi.this, pa);
-    private lib.bok.Botrpost bokbotr=new lib.bok.Botrpost(K397sfi.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(K397sfi.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(K397sfi.this, pa);
-    private lib.gem.Pgempost gempgem=new lib.gem.Pgempost(K397sfi.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K397sfi.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K397sfi.this);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(K397sfi.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(K397sfi.this, pa);
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(K397sfi.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(K397sfi.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(K397sfi.this, pa);
-    private lib.pro.Vandpost provand=new lib.pro.Vandpost(K397sfi.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(K397sfi.this, pa);
-    private lib.pro.Pfripost propfri=new lib.pro.Pfripost(K397sfi.this, pa);
-    private lib.pro.Prfrpost proprfr=new lib.pro.Prfrpost(K397sfi.this, pa);
-    private lib.pro.Overpost proover=new lib.pro.Overpost(K397sfi.this, pa);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(K397sfi.this, pa);
-    private lib.pro.Pma2post propma2=new lib.pro.Pma2post(K397sfi.this, pa);
-    private Field akoder = new Field("X(200)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel = new Field("S9(10)");
-    private Field tmpHel2 = new Field("S9(10)");
-    private Field tmpHel3 = new Field("S9(10)");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum1m = new Field("S9(10)");
-    private Field sum2m = new Field("S9(10)");
-    private Field aconto = new Field("S9(10)");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field bfdat = new Field("9(8)");
-    private Field bfper = new Field("99");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selKund = new Field("XXXX");
-    private Field selMast = new Field("XXXX9999");
-    private Field selPled = new Field("XXXX");
-    private Field selIkod = new Field("999");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antalposter = new Field("99999");
-    private Field tmpKey = new Field("X(1000)");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field tmpFilnamn = new Field("X(100)");
-    private Field tmpFilnamn2 = new Field("X(100)");
-    private Field expnr = new Field("99999");
-    private Field oldKod = new Field("XXX");
-    private Field sumIfak = new Field("S9(9)");
-    private Field sumIfaka = new Field("S9(9)");
-    private Field sumMarkup = new Field("S9(9)");
-    private Field sumA8 = new Field("S9(9)");
-    private Field sumI12 = new Field("S9(9)");
-    private Field sumFinal = new Field("S9(9)");
-    private Field postrubrik = new Field("X(200)");
-    private Field caleTim = new Field("S9(9)V99");
-    private Field sumTim = new Field("S9(9)V99");
-    private Field locid = new Field("X(200)");
-    private Field oldSort = new Field("X(10)");
-    private Field inforubrik = new Field("X(20)");
-    private Field sprakBak = new Field("XX");
-    private Field fel = new Field("X");
-    private void behormeda() {
-        lib.pro.Projpost.fd proj=proproj.get();
-        fi.set("N");
-        if (fore.mtidEndEgenGrupp.equals("J") && !(proj.grptht.equals(webpara.mgrptht)) && !(webpara.mtidOpenall.equals("J"))) {
-            return;
-        }
-        if ((webpara.mebeho4.compareTo(fore.sekrNiv)>=0 || webpara.medarb.equalsEither(proj.projans, proj.prodled, proj.kundans, "SYAD") || (proj.katBeho.equals(1) && proj.sekret.equals("N")))) {
-            call("prg.pro.p4kunb", pa.paraArea, proj.kundid, webpara.medarb, fi);
-            return;
-        }
-        i.set(1);
-        while (!(i.compareTo(50)>0)) {
-            if (proj.katMeda[i.getInt()-1].equals(webpara.medarb)) {
-                call("prg.pro.p4kunb", pa.paraArea, proj.kundid, webpara.medarb, fi);
-            }
-            i.increment(1);
-        }
-    }
-
-    private void cbrnParam() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        para.f9800OpenInput();
-        para.f9800P.set(10);
-        para.f9800Read();
-        if (para.f9800Eof.equals("N") && !(para.bookparam.equals(SPACE))) {
-            pa.centralKont.set(para.bookparam);
-        }
-        else {
-            pa.centralKont.set(pa.bkstvftg);
-        }
-        para.f9800Close();
-    }
-
-    private void hittabfar() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        pa.bfar.set(ftgs.fominar);
-        while (!(pa.bfar.compareTo(ftgs.fomaxar)>0)) {
-            para.f9800OpenInput();
-            para.f9800P.set(1);
-            para.f9800Read();
-            para.f9800Close();
-            para.f9801OpenInput();
-            para.f9801Read();
-            para.f9801Close();
-            i.set(1);
-            for (int _t=para.bookparamNum.getInt(); _t>0; _t--) //           IF NOT BOOKPER-SPARR(I) = "J" 
-            {
-                if (bfdat.compareTo(para.bookperMin[i.getInt()-1])>=0 && bfdat.compareTo(para.bookperMax[i.getInt()-1])<=0) {
-                    return;
-                }
-                //           END-IF 
-                i.increment(1);
-            }
-            pa.bfar.increment(1);
-        }
-        pa.bfar.set(ZERO);
-    }
-
-    private void hittabfper() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        para.f9800P.set(1);
-        para.f9800Read();
-        para.f9801Read();
-        bfper.set(1);
-        for (int _t=para.bookparamNum.getInt(); _t>0; _t--) {
-            if (bfdat.compareTo(para.bookperMin[bfper.getInt()-1])>=0 && bfdat.compareTo(para.bookperMax[bfper.getInt()-1])<=0) {
-                return;
-            }
-            bfper.increment(1);
-        }
-        bfper.set(0);
-    }
-
--- a/server.src/prg/pro/K474expk.java
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(K474expk.this);
-    private lib.bas.Webut webut=new lib.bas.Webut(K474expk.this, webpara, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field beskr = new Field("XXX");
-    private Field fran = new Field("99V99");
-    private Field till = new Field("99V99");
--- a/server.src/prg/pro/K510plkv.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K510plkv.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K510plkv.this);
-    private lib.pro.Skripost proskri=new lib.pro.Skripost(K510plkv.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K510plkv.this);
-    private lib.pro.Budopost probudo=new lib.pro.Budopost(K510plkv.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp = new Field("X(300)");
--- a/server.src/prg/pro/K51401.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K51401.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K51401.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K51401.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K51401.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K51401.this);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(K51401.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field tmpKey = new Field("X(1000)");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/K51402.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K51402.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K51402.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K51402.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K51402.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K51402.this);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(K51402.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field sel = new Field("X(1000)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field ptr = new Field("99999");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/K519ink.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K519ink.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K519ink.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K519ink.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field rubAltKonto = new Field("X(20)");
-    private Field sumAltKontoStart = new Field("S9(9)");
-    private Field sumAltKontoSlut = new Field("S9(9)");
-    private Field tmpHel = new Field("S9(10)");
-    private Field sel = new Field("X(1000)");
-    private Field selFtg = new Field("XXXX");
-    private Field startper = new Field("99");
-    private Field slutper = new Field("99");
-    private Field per = new Field("99");
--- a/server.src/prg/pro/K6impfakt.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(K6impfakt.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K6impfakt.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K6impfakt.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K6impfakt.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K6impfakt.this);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(K6impfakt.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(K6impfakt.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(K6impfakt.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K6impfakt.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp1 = new Field("X(300)");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field filNamn = new Field("X(100)");
-    private Field filNamn2 = new Field("X(100)");
-    private Field post30 = new Field("X(30000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selPeriod = new Field("9(6)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field ejSlutford = new Field("X");
-    private Field tmpKey = new Field("X(1000)");
-    private Field oldKey = new Field("X(12)");
-    private Field flnr = new Field("999999");
--- a/server.src/prg/pro/K849rap1.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K849rap1.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K849rap1.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K849rap1.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K849rap1.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K849rap1.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K849rap1.this);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(K849rap1.this, pa);
-    private Field p6 = new Field("X");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
--- a/server.src/prg/pro/K849rap2.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K849rap2.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K849rap2.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K849rap2.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K849rap2.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K849rap2.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K849rap2.this);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(K849rap2.this, pa);
-    private Field p6 = new Field("X");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
--- a/server.src/prg/pro/K849rap3.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(K849rap3.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(K849rap3.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(K849rap3.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(K849rap3.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(K849rap3.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(K849rap3.this);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(K849rap3.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(K849rap3.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(K849rap3.this, pa);
-    private Field p6 = new Field("X");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field num = new Field("S9(9)V99");
--- a/server.src/prg/pro/Kasetid.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Kasetid.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field visakod = new Field("XXX");
-    private Field tmpSprak = new Field("XX");
-    private Field antalInlogg = new Field("S9(9)");
--- a/server.src/prg/pro/Kasetlg.java
-    private lib.pro.Datab da=new lib.pro.Datab(Kasetlg.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Kasetlg.this);
-    private Field behoPrg = new Field("X(20)");
-    private Field behoFunk = new Field("X");
-    private Field xmlPassword = new Field("X(100)");
-    private Field kundnamn = new Field("X(50)");
-    private Field tidSek = new Field("S9(9)");
-    private Field tidTimDec = new Field("S9(9)V99");
-    private Field tidTim = new Field("S9(9)");
-    private Field tidMin = new Field("S9(9)");
-    private void marathonSamtidigAnv() {
-        acceptFrom(" FROM  ENVIRONMENT ","REMOTE_ADDR",webpara.loggr);
-        std.stationId2.set(SPACE);
-        std.stationId2.set(concat(limit(webpara.userid,SPACE),limit("@",SPACE),limit(webpara.loggr,SPACE)));
-        call("prg.bas.tzdat", std.stdToday);
-        behoPrg.set("WEBAT");
-        webpara.returv.set(getCall("prg.bas.beho", pa.paraArea, 99, behoPrg, "00", "S"));
-        cancel("prg.bas.beho");
-    }
-
--- a/server.src/prg/pro/Kaseutl.java
-    private lib.bas.Bebepost basbebe=new lib.bas.Bebepost(Kaseutl.this);
-    private lib.lev.Ankfpost levankf=new lib.lev.Ankfpost(Kaseutl.this, pa);
-    private lib.lev.Ankapost levanka=new lib.lev.Ankapost(Kaseutl.this, pa);
-    private lib.lev.Ankrpost levankr=new lib.lev.Ankrpost(Kaseutl.this, pa);
-    private lib.lev.Anktpost levankt=new lib.lev.Anktpost(Kaseutl.this, pa);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(Kaseutl.this, pa);
-    private lib.lev.Parapost levpara=new lib.lev.Parapost(Kaseutl.this, pa);
-    private lib.bok.Autopost bokauto=new lib.bok.Autopost(Kaseutl.this, pa);
-    private lib.in2.Ityppost in2ityp=new lib.in2.Ityppost(Kaseutl.this, pa);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(Kaseutl.this, pa);
-    private lib.pro.Tidmpost protidm=new lib.pro.Tidmpost(Kaseutl.this, pa);
-    private lib.pro.Replpost prorepl=new lib.pro.Replpost(Kaseutl.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Kaseutl.this, pa);
-    private lib.pro.Rekv rekv=new lib.pro.Rekv(Kaseutl.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Kaseutl.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field behoFunk = new Field("X");
-    private Field xmlPassword = new Field("X(100)");
-    private Field anvands = new Field("X");
-    private Field udatum = new Field("9(8)");
-    private Field commentStart = new Field("S9(9)");
-    private Field commentPek = new Field("S9(9)");
-    private Field basvaluta = new Field("XXX");
-    private Field tmpUrraLnr = new Field("9(6)");
-    private Field tmpKvittonr = new Field("9(6)");
-    private Field antalInlogg = new Field("S9(9)");
-    private Field sessionid = new Field("9(15)");
-    private Field tid = new Field("9(8)");
-    private Field datum = new Field("9(8)");
-    private Field datum2 = new Field("9(8)");
-    private Field veckodag = new Field("9(6)");
-    private Field reported = new Field("S9(9)V99");
-    private Field reportedAck = new Field("S9(9)V99");
-    private Field reportedD = new Field("X(100)");
-    private Field contracted = new Field("S9(9)V99");
-    private Field contractedAck = new Field("S9(9)V99");
-    private Field contractedD = new Field("X(100)");
-    private Field contractedH = new Field("S9(9)");
-    private Field contractedM = new Field("S9(9)");
-    private Field contractedMonthId = new Field("XXX");
-    private Field contractedMonth = new Field("X(100)");
-    private Field onHold = new Field("X(100)");
-    private Field finished = new Field("X(100)");
-    private Field locked = new Field("X(100)");
-    private Field errorline = new Field("X(100)");
-    private Field tmpColour = new Field("X(100)");
-    private Field tmpTidwLnr = new Field("999");
-    private Field tmpTidwTyp = new Field("X");
-    private Field tmpTidwKey = new Field("X(100)");
-    private Field kundkod = new Field("X(4)");
-    private Field kundnamn = new Field("X(50)");
-    private Field projben = new Field("X(70)");
-    private Field hours = new Field("S9(9)V99");
-    private Field nastaLnr = new Field("999");
-    private Field earlierDate = new Field("9(8)");
-    private Field switches = new Field("X(100)");
-    private Field textD = new Field("X(100)");
-    private Field textComment = new Field("X(100)");
-    private Field timereportId = new Field("X(4)");
-    private Field perkto = new Field("X(6)");
-    private Field bi = new Field("S9(9)");
-    private Field attestLnr = new Field("9(6)");
-    private Field attestAnkrI = new Field("S9(9)V99");
-    private Field attestAnkrO = new Field("S9(9)V99");
-    private Field attestMax = new Field("S9(9)V99");

-    private Field tidSek = new Field("S9(9)");
-    private Field tidTimDec = new Field("S9(9)V99");
-    private Field tidTim = new Field("S9(9)");
-    private Field tidMin = new Field("S9(9)");
-    private Field timerFields = new Field("X(100)");
-    private Field timerStatus = new Field("X(100)");
-    private Field timerHours = new Field("X(100)");
-    private Field timerTot = new Field("X(100)");
-    private Field approveId = new Field("X(100)");
-    private Field approveStatus = new Field("X(100)");
-    private Field approveDuedate = new Field("X(100)");
-    private Field approveDuedateText = new Field("X(100)");
-    private Field approveAmount = new Field("S9(9)V99");
-    private Field approveMarkup = new Field("S9(9)V99");
-    private Field approveMarkupD = new Field("X(100)");
-    private Field approveSalesPrice = new Field("S9(9)V99");
-    private Field approveSalesPriceD = new Field("X(100)");
-    private Field approveBookedFrom = new Field("9(8)");
-    private Field dagnr1 = new Field("9(6)");
-    private Field dagnr2 = new Field("9(6)");
-    private Field dagar = new Field("9(6)");
-    private Field dagarD = new Field("ZZZ9");
-    private Field approveProcNrD = new Field("X(25)");
-    private Field approveProcNr = new Field("9(15)");
-    private Field approveFilenames = new Field("X(30000)");
-    private Field approveFilenamesPek = new Field("S9(9)");
-    private Field approveFilename = new Field("X(200)");
-    private Field approveLnrMax = new Field("S9(9)");
-    private Field approveLnr = new Field("S9(9)");
-    private Field approveCommentPek = new Field("S9(9)");
-    private Field moklFinns = new Field("X");
-    private Field invFinns = new Field("X");
-    private Field invVersion = new Field("X");
-    private Field perFr = new Field("X(100)");
-    private Field perTi = new Field("X(100)");
-    private Field accountCostCentre = new Field("X(100)");
-    private Field accountCostObject = new Field("X(100)");
-    private Field vatClass = new Field("X(100)");
-    private Field inventory = new Field("X(100)");
-    private Field exitStatus = new Field("999");
--- a/server.src/prg/pro/Kexp132k.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Kexp132k.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Kexp132k.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Kexp132k.this);
-    private lib.bok.Botrpost bokbotr=new lib.bok.Botrpost(Kexp132k.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(Kexp132k.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Kexp132k.this, pa);
-    private lib.gem.Pgempost gempgem=new lib.gem.Pgempost(Kexp132k.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Kexp132k.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Kexp132k.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Kexp132k.this);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(Kexp132k.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Kexp132k.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Kexp132k.this, pa);
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Kexp132k.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Kexp132k.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Kexp132k.this, pa);
-    private lib.pro.Vandpost provand=new lib.pro.Vandpost(Kexp132k.this, pa);
-    private lib.pro.Pfripost propfri=new lib.pro.Pfripost(Kexp132k.this, pa);
-    private lib.pro.Prfrpost proprfr=new lib.pro.Prfrpost(Kexp132k.this, pa);
-    private lib.pro.Ifakpost proifak=new lib.pro.Ifakpost(Kexp132k.this, pa);
-    private lib.pro.Ifabpost proifab=new lib.pro.Ifabpost(Kexp132k.this, pa);
-    private lib.pro.Overpost proover=new lib.pro.Overpost(Kexp132k.this, pa);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Kexp132k.this, pa);
-    private lib.pro.Pma2post propma2=new lib.pro.Pma2post(Kexp132k.this, pa);
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field akoder = new Field("X(200)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel = new Field("S9(10)");
-    private Field tmpHel2 = new Field("S9(10)");
-    private Field tmpHel3 = new Field("S9(10)");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum1m = new Field("S9(10)");
-    private Field sum2m = new Field("S9(10)");
-    private Field aconto = new Field("S9(10)");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field bfdat = new Field("9(8)");
-    private Field bfper = new Field("99");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selKund = new Field("XXXX");
-    private Field selMast = new Field("XXXX9999");
-    private Field selProj = new Field("XXXX9999");
-    private Field selPled = new Field("XXXX");
-    private Field selBfdatfr = new Field("9(8)");
-    private Field selBfdatti = new Field("9(8)");
-    private Field selIkod = new Field("999");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antalposter = new Field("99999");
-    private Field tmpKey = new Field("X(1000)");
-    private Field tmpFilnamn = new Field("X(100)");
-    private Field tmpFilnamn2 = new Field("X(100)");
-    private Field expnr = new Field("99999");
-    private Field oldKod = new Field("XXX");
-    private Field sumIfak = new Field("S9(9)");
-    private Field sumIfaka = new Field("S9(9)");
-    private Field sumMarkup = new Field("S9(9)");
-    private Field sumA8 = new Field("S9(9)");
-    private Field sumI12 = new Field("S9(9)");
-    private Field sumFinal = new Field("S9(9)");
-    private Field postrubrik = new Field("X(200)");
-    private Field caleTim = new Field("S9(9)V99");
-    private Field sumTim = new Field("S9(9)V99");
-    private Field locid = new Field("X(200)");
-    private Field oldSort = new Field("X(10)");
-    private Field inforubrik = new Field("X(20)");
-    private Field sprakBak = new Field("XX");
-    private Field fel = new Field("X");
-    private Field sakn7 = new Field("X");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
-    private void behormeda() {
-        lib.pro.Projpost.fd proj=proproj.get();
-        fi.set("N");
-        if (fore.mtidEndEgenGrupp.equals("J") && !(proj.grptht.equals(webpara.mgrptht)) && !(webpara.mtidOpenall.equals("J"))) {
-            return;
-        }
-        if ((webpara.mebeho4.compareTo(fore.sekrNiv)>=0 || webpara.medarb.equalsEither(proj.projans, proj.prodled, proj.kundans, "SYAD") || (proj.katBeho.equals(1) && proj.sekret.equals("N")))) {
-            call("prg.pro.p4kunb", pa.paraArea, proj.kundid, webpara.medarb, fi);
-            return;
-        }
-        i.set(1);
-        while (!(i.compareTo(50)>0)) {
-            if (proj.katMeda[i.getInt()-1].equals(webpara.medarb)) {
-                call("prg.pro.p4kunb", pa.paraArea, proj.kundid, webpara.medarb, fi);
-            }
-            i.increment(1);
-        }
-    }
-
-    private void cbrnParam() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        para.f9800OpenInput();
-        para.f9800P.set(10);
-        para.f9800Read();
-        if (para.f9800Eof.equals("N") && !(para.bookparam.equals(SPACE))) {
-            pa.centralKont.set(para.bookparam);
-        }
-        else {
-            pa.centralKont.set(pa.bkstvftg);
-        }
-        para.f9800Close();
-    }
-
-    private void hittabfar() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        pa.bfar.set(ftgs.fominar);
-        while (!(pa.bfar.compareTo(ftgs.fomaxar)>0)) {
-            para.f9800OpenInput();
-            para.f9800P.set(1);
-            para.f9800Read();
-            para.f9800Close();
-            para.f9801OpenInput();
-            para.f9801Read();
-            para.f9801Close();
-            i.set(1);
-            for (int _t=para.bookparamNum.getInt(); _t>0; _t--) //           IF NOT BOOKPER-SPARR(I) = "J" 
-            {
-                if (bfdat.compareTo(para.bookperMin[i.getInt()-1])>=0 && bfdat.compareTo(para.bookperMax[i.getInt()-1])<=0) {
-                    return;
-                }
-                //           END-IF 
-                i.increment(1);
-            }
-            pa.bfar.increment(1);
-        }
-        pa.bfar.set(ZERO);
-    }
-
-    private void hittabfper() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        para.f9800P.set(1);
-        para.f9800Read();
-        para.f9801Read();
-        bfper.set(1);
-        for (int _t=para.bookparamNum.getInt(); _t>0; _t--) {
-            if (bfdat.compareTo(para.bookperMin[bfper.getInt()-1])>=0 && bfdat.compareTo(para.bookperMax[bfper.getInt()-1])<=0) {
-                return;
-            }
-            bfper.increment(1);
-        }
-        bfper.set(0);
-    }
-
--- a/server.src/prg/pro/Kexp522a.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Kexp522a.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Kexp522a.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Kexp522a.this);
-    private lib.bok.Hbokpost bokhbok=new lib.bok.Hbokpost(Kexp522a.this, pa);
-    private lib.bok.Botrpost bokbotr=new lib.bok.Botrpost(Kexp522a.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(Kexp522a.this, pa);
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Kexp522a.this, pa);
-    private lib.gem.Pgempost gempgem=new lib.gem.Pgempost(Kexp522a.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Kexp522a.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Kexp522a.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Kexp522a.this);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(Kexp522a.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Kexp522a.this, pa);
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Kexp522a.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Kexp522a.this, pa);
-    private lib.pro.Vandpost provand=new lib.pro.Vandpost(Kexp522a.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Kexp522a.this, pa);
-    private lib.pro.Pfripost propfri=new lib.pro.Pfripost(Kexp522a.this, pa);
-    private lib.pro.Prfrpost proprfr=new lib.pro.Prfrpost(Kexp522a.this, pa);
-    private lib.pro.Ifakpost proifak=new lib.pro.Ifakpost(Kexp522a.this, pa);
-    private lib.pro.Ifabpost proifab=new lib.pro.Ifabpost(Kexp522a.this, pa);
-    private lib.pro.Overpost proover=new lib.pro.Overpost(Kexp522a.this, pa);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Kexp522a.this, pa);
-    private lib.pro.Pma2post propma2=new lib.pro.Pma2post(Kexp522a.this, pa);
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field akoder = new Field("X(200)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel2 = new Field("S9(10)");
-    private Field tmpHel3 = new Field("S9(10)");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field bfdat = new Field("9(8)");
-    private Field bfper = new Field("99");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antalposter = new Field("99999");
-    private Field tmpKey = new Field("X(1000)");
-    private Field tmpFilnamn = new Field("X(100)");
-    private Field tmpFilnamn2 = new Field("X(100)");
-    private Field expnr = new Field("99999");
-    private Field oldKod = new Field("XXX");
-    private Field sumIfak = new Field("S9(9)");
-    private Field sumIfaka = new Field("S9(9)");
-    private Field sumMarkup = new Field("S9(9)");
-    private Field sumA8 = new Field("S9(9)");
-    private Field sumI12 = new Field("S9(9)");
-    private Field sumFinal = new Field("S9(9)");
-    private Field postrubrik = new Field("X(200)");
-    private Field caleTim = new Field("S9(9)V99");
-    private Field sumTim = new Field("S9(9)V99");
-    private Field locid = new Field("X(200)");
-    private Field oldSort = new Field("X(10)");
-    private Field inforubrik = new Field("X(20)");
-    private Field sprakBak = new Field("XX");
-    private Field fel = new Field("X");
-    private Field sakn7 = new Field("X");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
-    private void cbrnParam() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        para.f9800OpenInput();
-        para.f9800P.set(10);
-        para.f9800Read();
-        if (para.f9800Eof.equals("N") && !(para.bookparam.equals(SPACE))) {
-            pa.centralKont.set(para.bookparam);
-        }
-        else {
-            pa.centralKont.set(pa.bkstvftg);
-        }
-        para.f9800Close();
-    }
-
-    private void hittabfar() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        pa.bfar.set(ftgs.fominar);
-        while (!(pa.bfar.compareTo(ftgs.fomaxar)>0)) {
-            para.f9800OpenInput();
-            para.f9800P.set(1);
-            para.f9800Read();
-            para.f9800Close();
-            para.f9801OpenInput();
-            para.f9801Read();
-            para.f9801Close();
-            i.set(1);
-            for (int _t=para.bookparamNum.getInt(); _t>0; _t--) //           IF NOT BOOKPER-SPARR(I) = "J" 
-            {
-                if (bfdat.compareTo(para.bookperMin[i.getInt()-1])>=0 && bfdat.compareTo(para.bookperMax[i.getInt()-1])<=0) {
-                    return;
-                }
-                //           END-IF 
-                i.increment(1);
-            }
-            pa.bfar.increment(1);
-        }
-        pa.bfar.set(ZERO);
-    }
-
-    private void hittabfper() {
-        lib.bok.Parapost.fd para=bokpara.get();
-        para.f9800P.set(1);
-        para.f9800Read();
-        para.f9801Read();
-        bfper.set(1);
-        for (int _t=para.bookparamNum.getInt(); _t>0; _t--) {
-            if (bfdat.compareTo(para.bookperMin[bfper.getInt()-1])>=0 && bfdat.compareTo(para.bookperMax[bfper.getInt()-1])<=0) {
-                return;
-            }
-            bfper.increment(1);
-        }
-        bfper.set(0);
-    }
-
--- a/server.src/prg/pro/Kexpgcp.java
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Kexpgcp.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Kexpgcp.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Kexpgcp.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Kexpgcp.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Kexpgcp.this);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(Kexpgcp.this, pa);
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Kexpgcp.this, pa);
-    private lib.pro.Vandpost provand=new lib.pro.Vandpost(Kexpgcp.this, pa);
-    private lib.pro.Pfripost propfri=new lib.pro.Pfripost(Kexpgcp.this, pa);
-    private lib.pro.Prfrpost proprfr=new lib.pro.Prfrpost(Kexpgcp.this, pa);
-    private lib.pro.Ifakpost proifak=new lib.pro.Ifakpost(Kexpgcp.this, pa);
-    private lib.pro.Ifabpost proifab=new lib.pro.Ifabpost(Kexpgcp.this, pa);
-    private lib.pro.Agrppost proagrp=new lib.pro.Agrppost(Kexpgcp.this, pa);
-    private lib.med.Datab da=new lib.med.Datab(Kexpgcp.this);
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field akoder = new Field("X(200)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel2 = new Field("S9(10)");
-    private Field tmpHel3 = new Field("S9(10)");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field selGrp = new Field("XXXX");
-    private Field selDatfr = new Field("9(8)");
-    private Field selDatti = new Field("9(8)");
-    private Field selRniv = new Field("X");
-    private Field selPtyper = new Field("X");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field tmpKey = new Field("X(1000)");
-    private Field oldKod = new Field("XXX");
-    private Field sumIfak = new Field("S9(9)");
-    private Field sumIfaka = new Field("S9(9)");
-    private Field sumMarkup = new Field("S9(9)");
-    private Field sumA8 = new Field("S9(9)");
-    private Field sumI12 = new Field("S9(9)");
-    private Field sumFinal = new Field("S9(9)");
-    private Field postrubrik = new Field("X(200)");
-    private Field sumTim = new Field("S9(9)V99");
-    private void testProj() {
-        lib.pro.Projpost.fd proj=proproj.get();
-        testOk.set("N");
-        if (!((selPtyper.equals("E") && (proj.projtyp.equalsEither("E", "G")) || selPtyper.equals("I") && (proj.projtyp.equalsEither("I", "9")) || selPtyper.equals("B")))) {
-            return;
-        }
-        testOk.set("J");
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
-    private void behormeda() {
-        lib.pro.Projpost.fd proj=proproj.get();
-        fi.set("N");
-        if ((webpara.mebeho4.compareTo(pro_fore.sekrNiv)>=0 || webpara.medarb.equalsEither(proj.projans, proj.prodled, proj.kundans, "SYAD") || (proj.katBeho.equals(1) && proj.sekret.equals("N")))) {
-            fi.set("J");
-            return;
-        }
-        i.set(1);
-        while (!(i.compareTo(50)>0)) {
-            if (proj.katMeda[i.getInt()-1].equals(webpara.medarb)) {
-                fi.set("J");
-            }
-            i.increment(1);
-        }
-    }
-
--- a/server.src/prg/pro/Konvmoms.java
-    private lib.kun.Kundpost kunkund=new lib.kun.Kundpost(Konvmoms.this, pa);
-    private lib.kun.Faktpost kunfakt=new lib.kun.Faktpost(Konvmoms.this, pa);
-    private lib.kun.Fakbpost kunfakb=new lib.kun.Fakbpost(Konvmoms.this, pa);
-    private lib.kun.Kravpost kunkrav=new lib.kun.Kravpost(Konvmoms.this, pa);
-    private lib.kun.Kutrpost kunkutr=new lib.kun.Kutrpost(Konvmoms.this, pa);
-    private lib.kun.Rantpost kunrant=new lib.kun.Rantpost(Konvmoms.this, pa);
-    private lib.kun.Selepost kunsele=new lib.kun.Selepost(Konvmoms.this, pa);
-    private lib.pro.Fkunpost profkun=new lib.pro.Fkunpost(Konvmoms.this, pa);
-    private lib.pro.Prfrpost proprfr=new lib.pro.Prfrpost(Konvmoms.this, pa);
-    private Field z13TknG = new Field("X(10)");
--- a/server.src/prg/pro/Kredktrl.java
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(Kredktrl.this);
-    private lib.kun.Faktpost kunfakt=new lib.kun.Faktpost(Kredktrl.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Kredktrl.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Kredktrl.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Kredktrl.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp = new Field("X(100)");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(50)");
-    private Field p4 = new Field("X(50)");
-    private Field poster = new Field("99999");
-    private Field i = new Field("99999");
-    private Field j = new Field("99999");
-    private Field x = new Field("999999");
-    private Field tmpDatum = new Field("9(8)");
-    private Field kund = new Field("X(8)");
-    private Field kreditFaktBet = new Field("S9(9)");
-    private Field kreditFaktObet = new Field("S9(9)");
-    private Field kreditPlan = new Field("S9(9)");
-    private Field kreditOrder = new Field("S9(9)");
-    private Field kreditObet = new Field("S9(9)");
-    private Field kreditTot = new Field("S9(9)");
-    private Field kreditLimit = new Field("S9(9)");
-    private Field kreditKvar = new Field("S9(9)");
-    private Field kreditKund = new Field("X(8)");
-    private Field kreditOver = new Field("X(4)");
-    private Field kreditOverTop = new Field("X(4)");
-    private Field kreditOverTop2 = new Field("X(4)");
-    private Field kreditPlanPek = new Field("99999");
-    private Field kreditFordPek = new Field("S9(9)");
-    private Field kreditFordBelopp = new Field("S9(9)");
-    private Field kreditToday = new Field("9(8)");
-    private Field kreditDgrToday = new Field("9(6)");
-    private Field kreditDgrInf = new Field("9(6)");
-    private Field kreditKolla = new Field("X");
-    private Field kreditKunFinns = new Field("X");
-    private Field kreditObetKund = new Field("X(8)");
--- a/server.src/prg/pro/Ktrlmoms.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Ktrlmoms.this);
--- a/server.src/prg/pro/Kundkat.java
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Kundkat.this);
-    private lib.med.Datab da=new lib.med.Datab(Kundkat.this);
-    private lib.med.Stddata stddata=new lib.med.Stddata(Kundkat.this);
-    private Field tmp = new Field("X(200)");
--- a/server.src/prg/pro/Marakat.java
-    private Field z13TknG = new Field("X(10)");
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
--- a/server.src/prg/pro/Marakat2.java
-    private Field tabfilP3 = new Field("X(80)");
-    private Field tabfilP4 = new Field("X(80)");
-    private Field tabfilP5 = new Field("X(80)");
-    private Field tabfilP6 = new Field("X(80)");
-    private Field tabfilP7 = new Field("X(80)");
-    private Field hel = new Field("S9(9)");
-    private Field bel = new Field("S9(9)V99");
-    private Field z13TknG = new Field("X(10)");
-    private void tabfilLeftP1() {
-        tabfilP.set(tabfilP1);
-        tabfilLeft();
-        tabfilP1.set(tabfilP);
-    }
-
-    private void tabfilLeftP2() {
-        tabfilP.set(tabfilP2);
-        tabfilLeft();
-        tabfilP2.set(tabfilP);
-    }
-
-    private void tabfilLeftP3() {
-        tabfilP.set(tabfilP3);
-        tabfilLeft();
-        tabfilP3.set(tabfilP);
-    }
-
-    private void tabfilLeftP4() {
-        tabfilP.set(tabfilP4);
-        tabfilLeft();
-        tabfilP4.set(tabfilP);
-    }
-
-    private void tabfilLeftP5() {
-        tabfilP.set(tabfilP5);
-        tabfilLeft();
-        tabfilP5.set(tabfilP);
-    }
-
-    private void tabfilLeftP6() {
-        tabfilP.set(tabfilP6);
-        tabfilLeft();
-        tabfilP6.set(tabfilP);
-    }
-
-    private void tabfilLeftP7() {
-        tabfilP.set(tabfilP7);
-        tabfilLeft();
-        tabfilP7.set(tabfilP);
-    }
-
-    private void tabfilLeft() {
-        if (!(tabfilP.equals(SPACE))) {
-            for (tabfilPek.set(1);(!((!(tabfilP.ref(tabfilPek,1).equals(SPACE)) && !(tabfilP.ref(tabfilPek,1).equals("0"))) || 
-                            (tabfilPek.compareTo(25)>0)));tabfilPek.increment(1)) {
-            }
-            tabfilTmpRad.set(tabfilP.ref(tabfilPek));
-            tabfilP.set(tabfilTmpRad);
-        }
-    }
-
-    private void tabfilTalP2() {
-        tabfilTal();
-        tabfilP2.set(tabfilP);
-    }
-
-    private void tabfilTalP3() {
-        tabfilTal();
-        tabfilP3.set(tabfilP);
-    }
-
-    private void tabfilTalP4() {
-        tabfilTal();
-        tabfilP4.set(tabfilP);
-    }
-
-    private void tabfilTalP5() {
-        tabfilTal();
-        tabfilP5.set(tabfilP);
-    }
-
-    private void tabfilTalP6() {
-        tabfilTal();
-        tabfilP6.set(tabfilP);
-    }
-
-    private void tabfilTalP7() {
-        tabfilTal();
-        tabfilP7.set(tabfilP);
-    }
-
-    private void tabfilKonvP3() {
-        tabfilP.set(tabfilP3);
-        tabfilKonv();
-        tabfilP3.set(tabfilP);
-    }
-
-    private void tabfilKonvP4() {
-        tabfilP.set(tabfilP4);
-        tabfilKonv();
-        tabfilP4.set(tabfilP);
-    }
-
-    private void tabfilKonvP5() {
-        tabfilP.set(tabfilP5);
-        tabfilKonv();
-        tabfilP5.set(tabfilP);
-    }
-
-    private void tabfilKonvP6() {
-        tabfilP.set(tabfilP6);
-        tabfilKonv();
-        tabfilP6.set(tabfilP);
-    }
-
-    private void tabfilKonvP7() {
-        tabfilP.set(tabfilP7);
-        tabfilKonv();
-        tabfilP7.set(tabfilP);
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
--- a/server.src/prg/pro/Marakat3.java
-    private Field tabfilP3 = new Field("X(80)");
-    private Field tabfilP4 = new Field("X(80)");
-    private Field tabfilP5 = new Field("X(80)");
-    private Field tabfilP6 = new Field("X(80)");
-    private Field tabfilP7 = new Field("X(80)");
-    private Field hel = new Field("S9(9)");
-    private Field bel = new Field("S9(9)V99");
-    private Field z13TknG = new Field("X(10)");
-    private void tabfilLeftP1() {
-        tabfilP.set(tabfilP1);
-        tabfilLeft();
-        tabfilP1.set(tabfilP);
-    }
-
-    private void tabfilLeftP2() {
-        tabfilP.set(tabfilP2);
-        tabfilLeft();
-        tabfilP2.set(tabfilP);
-    }
-
-    private void tabfilLeftP3() {
-        tabfilP.set(tabfilP3);
-        tabfilLeft();
-        tabfilP3.set(tabfilP);
-    }
-
-    private void tabfilLeftP4() {
-        tabfilP.set(tabfilP4);
-        tabfilLeft();
-        tabfilP4.set(tabfilP);
-    }
-
-    private void tabfilLeftP5() {
-        tabfilP.set(tabfilP5);
-        tabfilLeft();
-        tabfilP5.set(tabfilP);
-    }
-
-    private void tabfilLeftP6() {
-        tabfilP.set(tabfilP6);
-        tabfilLeft();
-        tabfilP6.set(tabfilP);
-    }
-
-    private void tabfilLeftP7() {
-        tabfilP.set(tabfilP7);
-        tabfilLeft();
-        tabfilP7.set(tabfilP);
-    }
-
-    private void tabfilLeft() {
-        if (!(tabfilP.equals(SPACE))) {
-            for (tabfilPek.set(1);(!((!(tabfilP.ref(tabfilPek,1).equals(SPACE)) && !(tabfilP.ref(tabfilPek,1).equals("0"))) || 
-                            (tabfilPek.compareTo(25)>0)));tabfilPek.increment(1)) {
-            }
-            tabfilTmpRad.set(tabfilP.ref(tabfilPek));
-            tabfilP.set(tabfilTmpRad);
-        }
-    }
-
-    private void tabfilTalP2() {
-        tabfilTal();
-        tabfilP2.set(tabfilP);
-    }
-
-    private void tabfilTalP3() {
-        tabfilTal();
-        tabfilP3.set(tabfilP);
-    }
-
-    private void tabfilTalP4() {
-        tabfilTal();
-        tabfilP4.set(tabfilP);
-    }
-
-    private void tabfilTalP5() {
-        tabfilTal();
-        tabfilP5.set(tabfilP);
-    }
-
-    private void tabfilTalP6() {
-        tabfilTal();
-        tabfilP6.set(tabfilP);
-    }
-
-    private void tabfilTalP7() {
-        tabfilTal();
-        tabfilP7.set(tabfilP);
-    }
-
-    private void tabfilKonvP3() {
-        tabfilP.set(tabfilP3);
-        tabfilKonv();
-        tabfilP3.set(tabfilP);
-    }
-
-    private void tabfilKonvP4() {
-        tabfilP.set(tabfilP4);
-        tabfilKonv();
-        tabfilP4.set(tabfilP);
-    }
-
-    private void tabfilKonvP5() {
-        tabfilP.set(tabfilP5);
-        tabfilKonv();
-        tabfilP5.set(tabfilP);
-    }
-
-    private void tabfilKonvP6() {
-        tabfilP.set(tabfilP6);
-        tabfilKonv();
-        tabfilP6.set(tabfilP);
-    }
-
-    private void tabfilKonvP7() {
-        tabfilP.set(tabfilP7);
-        tabfilKonv();
-        tabfilP7.set(tabfilP);
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
--- a/server.src/prg/pro/Maraproj.java
-    private Field skriFilnamnUppd = new Field("X(50)");
-    private void fsortOpenOutput() {
-        fsort.open("OUTPUT");
-    }
-
-    private void fsortOpenInput() {
-        fsort.open("INPUT");
-    }
-
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-        if (fsortFs.equals("9D")) {
-            c_sleep("1");
-            fsortRead();
-            return;
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_id");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortReadprev() {
-        fsortEof.set("N");
-        fsort.readPrevious();
-        if (fsort.atEnd()) {
-            fsortEof.set("J");
-        }
-        if (fsortFs.equals("99")) {
-            fsort.start("<", "fsort_id");
-            c_sleep("1");
-            fsortReadprev();
-            return;
-        }
-    }
-
-    private void fsortDelete() {
-        fsort.delete();
-    }
-
--- a/server.src/prg/pro/Margtid.java
-    private lib.bas.Maxipost basmaxi=new lib.bas.Maxipost(Margtid.this);
--- a/server.src/prg/pro/Mkfstat.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Mkfstat.this);
-    private lib.bas.Std std=new lib.bas.Std(Mkfstat.this);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(Mkfstat.this, pa);
-    private lib.pro.Tidfpost protidf=new lib.pro.Tidfpost(Mkfstat.this, pa);
-    private lib.pro.Avtppost proavtp=new lib.pro.Avtppost(Mkfstat.this, pa);
-    private Field tmp = new Field("X(300)");
-    private Field x = new Field("99");
-    private Field i = new Field("99");
--- a/server.src/prg/pro/Mobstat.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Mobstat.this);
--- a/server.src/prg/pro/P41092.java
-    private Field sc1Funk = new Field("9");
-    private Field sc1PosFunk = new Field("9999");
-    private Field bryt = new Field("X");
-    private Field saknas = new Field("X(80)");
-    private Field summaInpris = new Field("S9(9)");
-    private Field summaUtpris = new Field("S9(9)");
-    private Field dataAntal = new Field("S9(9)", 120);
-    private Field dataLines = new Field("S9(9)", 12);
-    private Field dataStart = new Field("S9(9)", 7);
-    private Field dataTop = new Field("S9(9)");
-    private Field dataPosY = new Field("S9(9)");
-    private Field dataFelTop = new Field("S9(9)");
-    private Field dataFelPosY = new Field("S9(9)");
-    private Field z13TknG = new Field("X(10)");
--- a/server.src/prg/pro/P41093.java
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(P41093.this, pa);
-    private lib.pro.Avtppost proavtp=new lib.pro.Avtppost(P41093.this, pa);
-    private Field sc1Funk = new Field("9");
-    private Field sc1PosFunk = new Field("9999");
-    private Field bryt = new Field("X");
-    private Field saknas = new Field("X(80)");
-    private Field ib = new Field("X(80)");
-    private Field insumma = new Field("S9(9)");
-    private Field utsumma = new Field("S9(9)");
-    private Field palagg = new Field("S9(9)V99");
-    private Field timant = new Field("S9(4)V99");
-    private Field timpris = new Field("S9(5)");
-    private Field timprisA = new Field("S9(5)");
-    private Field altTimpris = new Field("X");
-    private Field dataAntal = new Field("S9(9)", 120);
-    private Field dataLines = new Field("S9(9)", 12);
-    private Field dataStart = new Field("S9(9)", 7);
-    private Field dataTop = new Field("S9(9)");
-    private Field dataPosY = new Field("S9(9)");
-    private Field dataFelTop = new Field("S9(9)");
-    private Field dataFelPosY = new Field("S9(9)");
-    private Field z13TknG = new Field("X(10)");
--- a/server.src/prg/pro/P41094.java
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(P41094.this, pa);
-    private lib.pro.Jinkpost projink=new lib.pro.Jinkpost(P41094.this, pa);
-    private lib.pro.Avtppost proavtp=new lib.pro.Avtppost(P41094.this, pa);
-    private Field sc1Funk = new Field("9");
-    private Field sc1PosFunk = new Field("9999");
-    private Field bryt = new Field("X");
-    private Field saknas = new Field("X(80)");
-    private Field ib = new Field("X(80)");
-    private Field utsumma = new Field("S9(9)");
-    private Field systemfel = new Field("X(50)");
-    private Field dataAntal = new Field("S9(9)", 120);
-    private Field dataLines = new Field("S9(9)", 12);
-    private Field dataStart = new Field("S9(9)", 7);
-    private Field dataTop = new Field("S9(9)");
-    private Field dataPosY = new Field("S9(9)");
-    private Field dataFelTop = new Field("S9(9)");
-    private Field dataFelPosY = new Field("S9(9)");
-    private Field z13TknG = new Field("X(10)");
--- a/server.src/prg/pro/P42150.java
-    private void d1Koll() {
-        if (!((sc1Bekrefta.equalsEither("J", "N")))) {
-            pa.txtnr.set(35);
-            z04Meddela();
-            colorInmOpen();
-            acceptControl.set(1);
-            controlValue.set(1);
-        }
-        else {
-            z05BlankaMeddelande();
-        }
-        if (sc1Bekrefta.equals("N")) {
-            call("prg.bas.visa", pa.paraArea, "B002");
-            sc1Prot.set(ZERO);
-        }
-        else {
-            call("prg.bas.visa", pa.paraArea, "B003");
-            if (stddata.stdHasColor.equals("Y")) {
-                getcolBakgrund();
-                sc1Prot.set(new Constant("32768").add(z16Bg.divide(32)).add(z16Bg));
-            }
-            else {
-                sc1Prot.set(new Constant("32768"));
-            }
-        }
-        colorInmOpen();
-        /*scSc1Del1*/
-    }
-
-    private void d2Koll() {
-        lib.pro.Kundpost.fd kund=prokund.get();
-        if (!(sc1Kundid.equals(SPACE))) {
-            if (pa.konv.equals("J")) {
-                z13TknG.set(sc1Kundid);
-                z13ToUpper();
-                sc1Kundid.set(z13TknG);
-                colorInmOpen();
-                /*scSc1Del1*/
-            }
-            if (!(sc1Kundid2.equals("*"))) {
-                kund.kundid.set(sc1Kundid);
-                kund.noll.set(ZERO);
-                prorecarea.recArea.set(kund.post);
-                pa.recid.set(da.kund);
-                pa.action.set(da.read);
-                call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                if (!(pa.ok()) || sc1Kundid.equals("0000")) {
-                    pa.txtnr.set(16);
-                    z04Meddela();
-                    colorInmOpen();
-                    acceptControl.set(1);
-                    controlValue.set(2);
-                }
-                else {
-                    z05BlankaMeddelande();
-                    colorInmOpen();
-                }
-            }
-            else {
-                kund.kundid.set(sc1Kundid1);
-                kund.noll.set(ZERO);
-                prorecarea.recArea.set(kund.post);
-                pa.recid.set(da.kund);
-                pa.action.set(da.startEg);
-                call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                if (pa.ok()) {
-                    pa.action.set(da.readnext);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    kund.post.set(prorecarea.recArea);
-                }
-                if (!(pa.ok()) || !(kund.kundid.ref(1,3).equals(sc1Kundid1))) {
-                    pa.txtnr.set(16);
-                    z04Meddela();
-                    colorInmOpen();
-                    acceptControl.set(1);
-                    controlValue.set(2);
-                }
-                else {
-                    z05BlankaMeddelande();
-                    colorInmOpen();
-                }
-            }
-        }
-    }
-
-    private void d3Koll() {
-        lib.pro.Projpost.fd proj=proproj.get();
-        if (!(sc1Projlnr.equals(ZERO))) {
-            if (sc1Kundid.equals(SPACE) || sc1Kundid2.equals("*")) {
-                pa.txtnr.set(44);
-                z04Meddela();
-                colorInmOpen();
-                acceptControl.set(1);
-                controlValue.set(3);
-            }
-            else {
-                proj.projidG.set(sc1ProjidG);
-                prorecarea.recArea.set(proj.post);
-                pa.recid.set(da.proj);
-                pa.action.set(da.read);
-                call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                proj.post.set(prorecarea.recArea);
-                if (!(pa.ok())) {
-                    pa.txtnr.set(16);
-                    z04Meddela();
-                    colorInmOpen();
-                    acceptControl.set(1);
-                    controlValue.set(3);
-                }
-                else {
-                    z05BlankaMeddelande();
-                    colorInmOpen();
-                }
-            }
-        }
-    }
-
-    private void d4Koll() {
-        lib.pro.Medapost.fd pro_meda=promeda.get();
-        if (!(sc1Kundans.equals(SPACE))) {
-            if (pa.konv.equals("J")) {
-                z13TknG.set(sc1Kundans);
-                z13ToUpper();
-                sc1Kundans.set(z13TknG);
-                colorInmOpen();
-                /*scSc1Del1*/
-            }
-            pro_meda.medaridG.set(SPACE);
-            pro_meda.medarid.set(sc1Kundans);
-            prorecarea.recArea.set(pro_meda.post);
-            pa.recid.set(da.meda);
-            pa.action.set(da.read);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            if (!(pa.ok())) {
-                pa.txtnr.set(16);
-                z04Meddela();
-                colorInmOpen();
-                acceptControl.set(1);
-                controlValue.set(4);
-            }
-            else {
-                z05BlankaMeddelande();
-                colorInmOpen();
-            }
-        }
-    }
-
-    private void d5Koll() {
-        lib.pro.Medapost.fd pro_meda=promeda.get();
-        if (!(sc1Projans.equals(SPACE))) {
-            if (pa.konv.equals("J")) {
-                z13TknG.set(sc1Projans);
-                z13ToUpper();
-                sc1Projans.set(z13TknG);
-                colorInmOpen();
-                /*scSc1Del1*/
-            }
-            pro_meda.medaridG.set(SPACE);
-            pro_meda.medarid.set(sc1Projans);
-            prorecarea.recArea.set(pro_meda.post);
-            pa.recid.set(da.meda);
-            pa.action.set(da.read);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            if (!(pa.ok())) {
-                pa.txtnr.set(16);
-                z04Meddela();
-                colorInmOpen();
-                acceptControl.set(1);
-                controlValue.set(5);
-            }
-            else {
-                z05BlankaMeddelande();
-                colorInmOpen();
-            }
-        }
-    }
-
-    private void d6Koll() {
-        call("prg.bas.std1920", sc1UpplagdF);
-        if (!(sc1UpplagdF.equals(ZERO))) {
-            stddata.stdSvar.set(ZERO);
-            call("prg.bas.stddat", "K", sc1UpplagdF);
-            if (!(returnCode.equals(ZERO))) {
-                pa.txtnr.set(901);
-                z04Meddela();
-                colorInmOpen();
-                acceptControl.set(1);
-                controlValue.set(6);
-            }
-            else {
-                z05BlankaMeddelande();
-                colorInmOpen();
-            }
-        }
-    }
-
-    private void d7Koll() {
-        call("prg.bas.std1920", sc1UpplagdT);
-        if (!(sc1UpplagdT.equals(new Constant("99999999")))) {
-            stddata.stdSvar.set(ZERO);
-            call("prg.bas.stddat", "K", sc1UpplagdT);
-            if (!(returnCode.equals(ZERO))) {
-                pa.txtnr.set(901);
-                z04Meddela();
-                colorInmOpen();
-                acceptControl.set(1);
-                controlValue.set(7);
-            }
-            else {
-                z05BlankaMeddelande();
-                colorInmOpen();
-            }
-        }
-    }
-
-    private void d8Koll() {
-        lib.pro.Skripost.fd skri=proskri.get();
-        if (pa.konv.equals("J")) {
-            z13TknG.set(sc1SkriF);
-            z13ToUpper();
-            sc1SkriF.set(z13TknG);
-            colorInmOpen();
-            /*scSc1Del1*/
-        }
-        if (sc1SkriF.equals(SPACE)) {
-            pa.txtnr.set(36);
-            z04Meddela();
-            colorInmOpen();
-            acceptControl.set(1);
-            controlValue.set(8);
-        }
-        else {
-            skri.kod.set(sc1SkriF);
-            z12ReadSkrireg();
-            if (!(pa.ok())) {
-                pa.txtnr.set(16);
-                z04Meddela();
-                colorInmOpen();
-                acceptControl.set(1);
-                controlValue.set(8);
-            }
-            else {
-                z05BlankaMeddelande();
-                colorInmOpen();
-            }
-        }
-    }
-
-    private void d9Koll() {
-        if (sc1Antal.equals(ZERO)) {
-            pa.txtnr.set(47);
-            z04Meddela();
-            colorInmOpen();
-            acceptControl.set(1);
-            controlValue.set(9);
-        }
-        else {
-            z05BlankaMeddelande();
-            colorInmOpen();
-        }
-    }
-
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z12SkrivListaSaknas() {
-        lib.pro.Skripost.fd skri=proskri.get();
-        ulFilnamn.set(z12NamnD);
-        call("prg.bas.stdutskr", pa.paraArea, ulFilnamn, sc1Antal, skri.post);
-        cancel("prg.bas.stdutskr");
-    }
-
-    private void z12OpenListaD() {
-        lib.pro.Skripost.fd skri=proskri.get();
-        ulFilnamn.set(z12NamnD);
-        lista.open("OUTPUT");
-        stddata.stdListStatus.set(ZERO);
-        stddata.stdSidStatus.set(1);
-        pa.txtnr.set(903);
-        z04Meddela();
-        listrad.printAfter(0,skri.st10cpi);
-        listrad.printAfter(0,skri.st72rad);
-    }
-
-    private void z12OpenListaW() {
-        lib.pro.Skripost.fd skri=proskri.get();
-        ulFilnamn.set(z12NamnW);
-        lista.open("OUTPUT");
-        stddata.stdListStatus.set(ZERO);
-        stddata.stdSidStatus.set(1);
-        pa.txtnr.set(903);
-        z04Meddela();
-        listrad.printAfter(0,skri.st10cpi);
-        listrad.printAfter(0,skri.st72rad);
-    }
-
-    private void z12Abort() {
-        c_rerr(pa.syfel, stddata.stdText1, stddata.stdText2, stddata.stdText3, stddata.stdText4);
-        stddata.stdText1.set(99);
-        stddata.stdText2.set(SPACE);
-        stddata.stdText3.set(SPACE);
-        stddata.stdText4.set(pa.syfel);
-        call("prg.bas.visa", pa.paraArea, "F904", stddata.stdText1, stddata.stdText2, stddata.stdText3, stddata.stdText4);
-        dasvar.set(99);
-    }
-
-    private void getcolRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAD1");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RUB ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAM ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FUNK");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RA24");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("MEDD");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("LEDT");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMO");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMC");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FONS");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("HALV");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void z99Funk() {
-        if (stddata.stdKey.compareTo(400)>=0) {
-            call("prg.bas.toolexec", pa.paraArea, stddata.stdKey);
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-            }
-            else {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-        }
-        else {
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-            }
-            if (stddata.stdKey.equalsEither(81, 83)) {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-            if (stddata.stdKey.equals(8)) {
-                stddata.z99Oldftg.set(pa.bkstvftg);
-                call("prg.bas.byt", pa.paraArea);
-                cancel("prg.bas.byt");
-                if (!(pa.bkstvftg.equals(stddata.z99Oldftg))) {
-                    stddata.z99Newftg.set(pa.bkstvftg);
-                    pa.bkstvftg.set(stddata.z99Oldftg);
-                    pa.recid.set(da.file);
-                    pa.action.set(da.closeAll);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    cancel("prg.pro.p4921");
-                    cancel("prg.pro.p4900");
-                    pa.bkstvftg.set(stddata.z99Newftg);
-                    pa.action.set(da.open);
-                    call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-                    if (!(pa.ok())) {
-                        pa.txtnr.set(908);
-                        z04Meddela();
-                        throw exit;
-                    }
-                }
-                pa.projidG.init();
-                stddata.stdKey.set(7);
-            }
-        }
-    }
-
-    private void z99FunkSc1() {
-        if (stddata.stdKey.compareTo(400)>=0) {
-            call("prg.bas.toolexec", pa.paraArea, stddata.stdKey);
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-                stddata.stdKey.set(ZERO);
-                sc1Funk.set(ZERO);
-            }
-            else {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-        }
-        else {
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-                stddata.stdKey.set(ZERO);
-                sc1Funk.set(ZERO);
-            }
-            if (stddata.stdKey.equalsEither(81, 83)) {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-            if (stddata.stdKey.equals(8)) {
-                stddata.z99Oldftg.set(pa.bkstvftg);
-                call("prg.bas.byt", pa.paraArea);
-                cancel("prg.bas.byt");
-                if (!(pa.bkstvftg.equals(stddata.z99Oldftg))) {
-                    stddata.z99Newftg.set(pa.bkstvftg);
-                    pa.bkstvftg.set(stddata.z99Oldftg);
-                    pa.recid.set(da.file);
-                    pa.action.set(da.closeAll);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    cancel("prg.pro.p4921");
-                    cancel("prg.pro.p4900");
-                    pa.bkstvftg.set(stddata.z99Newftg);
-                    pa.action.set(da.open);
-                    call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-                    if (!(pa.ok())) {
-                        pa.txtnr.set(908);
-                        z04Meddela();
-                        throw exit;
-                    }
-                }
-                pa.projidG.init();
-                stddata.stdKey.set(7);
-            }
-        }
-    }
-
-    private void z99LasTkn() {
-        c_keymap(stddata.saveKeymap);
-        setEnv("KEYSTROKE","Exception=67 kP");
-        if ((stddata.stdKey.compareTo(0)>0 && stddata.stdKey.compareTo(9)<0) || 
-                (stddata.stdKey.compareTo(400)>=0)) {
-            z99Funk();
-        }
-        else {
-            stddata.stdVal.set(ZERO);
-        }
-        c_keymap(stddata.restoreKeymap);
-    }
-
--- a/server.src/prg/pro/P436f.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(P436f.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P436f.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(P436f.this);
-    private Field tmp = new Field("X(300)");
-    private Field tmp2 = new Field("X(50)");
-    private Field massPost = new Field("X(1000)");
-    private Field lag = new Field("S9(9)");
-    private Field tb = new Field("S9(9)");
-    private Field fkodKat = new Field("99");
-    private Field fkodKod = new Field("999");
-    private Field fkodEof = new Field("X");
-    private Field ffaktEof = new Field("X");
-    private Field tmpPfak = new Field("--9.99");
-    private Field tmpBel = new Field("S9(8)V99");
-    private Field tmpHel = new Field("S9(8)");
-    private Field lstTim = new Field("----9,99");
-    private Field lstMat = new Field("-----9,99");
-    private Field s1 = new Field("S9(9)V99");
-    private Field s2 = new Field("S9(9)V99");
-    private Field f = new Field("X");
-    private Field f2 = new Field("X");
-    private Field massDatum = new Field("9(8)");
-    private Field massrad = new Field("X(300)");
-    private Field oKat = new Field("XX");
-    private Field i = new Field("999");
-    private Field ptr = new Field("99999");
-    private Field x = new Field("9999");
-    private Field y = new Field("9999");
--- a/server.src/prg/pro/P44030a.java
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z12SkrivListaSaknas() {
-        ulFilnamn.set(z12NamnD);
-        call("prg.bas.stdutskr", pa.paraArea, ulFilnamn, sc1Antal, skri.post);
-        cancel("prg.bas.stdutskr");
-    }
-
-    private void z12OpenListaD() {
-        ulFilnamn.set(z12NamnD);
-        lista.open("OUTPUT");
-        stddata.stdListStatus.set(ZERO);
-        stddata.stdSidStatus.set(1);
-        pa.txtnr.set(903);
-        z04Meddela();
-        listrad.printAfter(0,skri.st10cpi);
-        listrad.printAfter(0,skri.st72rad);
-    }
-
-    private void z12OpenListaW() {
-        ulFilnamn.set(z12NamnW);
-        lista.open("OUTPUT");
-        stddata.stdListStatus.set(ZERO);
-        stddata.stdSidStatus.set(1);
-        pa.txtnr.set(903);
-        z04Meddela();
-        listrad.printAfter(0,skri.st10cpi);
-        listrad.printAfter(0,skri.st72rad);
-    }
-
-    private void z12Abort() {
-        c_rerr(pa.syfel, stddata.stdText1, stddata.stdText2, stddata.stdText3, stddata.stdText4);
-        stddata.stdText1.set(99);
-        stddata.stdText2.set(SPACE);
-        stddata.stdText3.set(SPACE);
-        stddata.stdText4.set(pa.syfel);
-        call("prg.bas.visa", pa.paraArea, "F904", stddata.stdText1, stddata.stdText2, stddata.stdText3, stddata.stdText4);
-        dasvar.set(99);
-    }
-
-    private void z99FunkSc1() {
-        if (stddata.stdKey.compareTo(400)>=0) {
-            call("prg.bas.toolexec", pa.paraArea, stddata.stdKey);
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-                stddata.stdKey.set(ZERO);
-                sc1Funk.set(ZERO);
-            }
-            else {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-        }
-        else {
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-                stddata.stdKey.set(ZERO);
-                sc1Funk.set(ZERO);
-            }
-            if (stddata.stdKey.equalsEither(81, 83)) {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-            if (stddata.stdKey.equals(8)) {
-                stddata.z99Oldftg.set(pa.bkstvftg);
-                call("prg.bas.byt", pa.paraArea);
-                cancel("prg.bas.byt");
-                if (!(pa.bkstvftg.equals(stddata.z99Oldftg))) {
-                    stddata.z99Newftg.set(pa.bkstvftg);
-                    pa.bkstvftg.set(stddata.z99Oldftg);
-                    pa.recid.set(da.file);
-                    pa.action.set(da.closeAll);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    cancel("prg.pro.p4921");
-                    cancel("prg.pro.p4900");
-                    pa.bkstvftg.set(stddata.z99Newftg);
-                    pa.action.set(da.open);
-                    call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-                    if (!(pa.ok())) {
-                        pa.txtnr.set(908);
-                        z04Meddela();
-                        throw exit;
-                    }
-                }
-                pa.projidG.init();
-                stddata.stdKey.set(7);
-            }
-        }
-    }
-
-    private void z99LasTkn() {
-        c_keymap(stddata.saveKeymap);
-        setEnv("KEYSTROKE","Exception=67 kP");
-        if ((stddata.stdKey.compareTo(0)>0 && stddata.stdKey.compareTo(9)<0) || 
-                (stddata.stdKey.compareTo(400)>=0)) {
-            z99Funk();
-        }
-        else {
-            stddata.stdVal.set(ZERO);
-        }
-        c_keymap(stddata.restoreKeymap);
-    }
-
--- a/server.src/prg/pro/P44150.java
-    private lib.pro.Benkpost probenk=new lib.pro.Benkpost(P44150.this, pa);
-    private Field proCentralRapp = new Field("X(4)");
-    private Field proCentralKont = new Field("X(4)");
-    private Field proCentralBfri = new Field("X(4)");
-    private Field proDelsystem = new Field("X(99)");
-    private Field bxSvar = new Field("99");
-    private Field wsSumred = new Field("-B---B---B--9");
-    private Field wsBelred = new Field("-B---B---B---");
-    private Field wsFfKey2 = new Field("X(14)");
-    private Field wsWindowDirekt = new Field("X(10)");
-    private Field vb118Tom = new Field("X(60)", SPACE);
-    private Field wsBlkvar = new Field("X(80)", SPACE);
-    private Field wsBtDag = new Field("9(6)");
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z12SkrivListaSaknas() {
-        ulFilnamn.set(z12NamnD);
-        call("prg.bas.stdutskr", pa.paraArea, ulFilnamn, sc1Antal, skri.post);
-        cancel("prg.bas.stdutskr");
-    }
-
-    private void getcolRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAD1");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RUB ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAM ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FUNK");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RA24");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("MEDD");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("LEDT");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMO");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMC");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FONS");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void z99Funk() {
-        if (stddata.stdKey.compareTo(400)>=0) {
-            call("prg.bas.toolexec", pa.paraArea, stddata.stdKey);
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-            }
-            else {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-        }
-        else {
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-            }
-            if (stddata.stdKey.equalsEither(81, 83)) {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-            if (stddata.stdKey.equals(8)) {
-                stddata.z99Oldftg.set(pa.bkstvftg);
-                call("prg.bas.byt", pa.paraArea);
-                cancel("prg.bas.byt");
-                if (!(pa.bkstvftg.equals(stddata.z99Oldftg))) {
-                    stddata.z99Newftg.set(pa.bkstvftg);
-                    pa.bkstvftg.set(stddata.z99Oldftg);
-                    pa.recid.set(da.file);
-                    pa.action.set(da.closeAll);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    cancel("prg.pro.p4921");
-                    cancel("prg.pro.p4900");
-                    pa.bkstvftg.set(stddata.z99Newftg);
-                    pa.action.set(da.open);
-                    call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-                    if (!(pa.ok())) {
-                        pa.txtnr.set(908);
-                        z04Meddela();
-                        throw exit;
-                    }
-                }
-                pa.projidG.init();
-                stddata.stdKey.set(7);
-            }
-        }
-    }
-
-    private void z99FunkSc1() {
-        if (stddata.stdKey.compareTo(400)>=0) {
-            call("prg.bas.toolexec", pa.paraArea, stddata.stdKey);
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-                stddata.stdKey.set(ZERO);
-                sc1Funk.set(ZERO);
-            }
-            else {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-        }
-        else {
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-                stddata.stdKey.set(ZERO);
-                sc1Funk.set(ZERO);
-            }
-            if (stddata.stdKey.equalsEither(81, 83)) {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-            if (stddata.stdKey.equals(8)) {
-                stddata.z99Oldftg.set(pa.bkstvftg);
-                call("prg.bas.byt", pa.paraArea);
-                cancel("prg.bas.byt");
-                if (!(pa.bkstvftg.equals(stddata.z99Oldftg))) {
-                    stddata.z99Newftg.set(pa.bkstvftg);
-                    pa.bkstvftg.set(stddata.z99Oldftg);
-                    pa.recid.set(da.file);
-                    pa.action.set(da.closeAll);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    cancel("prg.pro.p4921");
-                    cancel("prg.pro.p4900");
-                    pa.bkstvftg.set(stddata.z99Newftg);
-                    pa.action.set(da.open);
-                    call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-                    if (!(pa.ok())) {
-                        pa.txtnr.set(908);
-                        z04Meddela();
-                        throw exit;
-                    }
-                }
-                pa.projidG.init();
-                stddata.stdKey.set(7);
-            }
-        }
-    }
-
-    private void z99LasTkn() {
-        c_keymap(stddata.saveKeymap);
-        setEnv("KEYSTROKE","Exception=67 kP");
-        if ((stddata.stdKey.compareTo(0)>0 && stddata.stdKey.compareTo(9)<0) || 
-                (stddata.stdKey.compareTo(400)>=0)) {
-            z99Funk();
-        }
-        else {
-            stddata.stdVal.set(ZERO);
-        }
-        c_keymap(stddata.restoreKeymap);
-    }
-
--- a/server.src/prg/pro/P44150a.java
-    private void cRubProj() {
-        frad.text.set(SPACE);
-        frad.typ.set("T");
-        frad.nrKatKod.set(SPACE);
-        s05SkrivFil18();
-    }
-
-    private void iFnivarv2O() {
-        lib.pro.Statpost.fd stat=prostat.get();
-        lib.pro.Defkpost.fd defk=prodefk.get();
-        lib.pro.Benkpost.fd benk=probenk.get();
-        lib.pro.Lexipost.fd lexi=prolexi.get();
-        wsBelffak.set(ZERO);
-        wsKatffak.set(ZERO);
-        stat.key.init();
-        stat.projidG.set(proj.projidG);
-        stat.saldotyp.set("C");
-        prorecarea.recArea.set(stat.post);
-        pa.recid.set(da.stat);
-        pa.action.set(da.startEg);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.ok()) {
-            pa.recid.set(da.stat);
-            pa.action.set(da.readnext);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            stat.post.set(prorecarea.recArea);
-            if (lsBruttNett.equals("N")) {
-                stat.belfak.set(ZERO);
-                stat.timfak.set(ZERO);
-            }
-        }
-        while (!(!(pa.ok()) || !(stat.projidG.equals(proj.projidG)) || !(stat.saldotyp.equals("C")) || !(stat.belffak.equals(ZERO)) || !(stat.belfak.equals(ZERO)) || (proj.antalFak.equals("J") && (!(stat.timffak.equals(ZERO)) || !(stat.timfak.equals(ZERO)))))) {
-            pa.recid.set(da.stat);
-            pa.action.set(da.readnext);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            stat.post.set(prorecarea.recArea);
-            if (lsBruttNett.equals("N")) {
-                stat.belfak.set(ZERO);
-                stat.timfak.set(ZERO);
-            }
-        }
-        if (pa.ok() && stat.projidG.equals(proj.projidG) && stat.saldotyp.equals("C")) {
-            s01Rub();
-            s02RubA();
-            while (!(!(pa.ok()) || !(stat.projidG.equals(proj.projidG)) || !(stat.saldotyp.equals("C")))) {
-                wsKat.set(stat.kat);
-                if (fore.katRubA.equals("J")) {
-                    defk.post.init();
-                    defk.typkk.set("A");
-                    defk.kat.set(stat.kat);
-                    prorecarea.recArea.set(defk.post);
-                    pa.recid.set(da.defk);
-                    pa.action.set(da.read);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    if (pa.ok()) {
-                        defk.post.set(prorecarea.recArea);
-                    }
-                    frad.nrKatKod.set(stat.kat);
-                    if (lsKatKod.equals("J")) {
-                        frad.text.ref(1,2).set(stat.kat);
-                        frad.text.ref(6,65).set(defk.benkk[lsSprakNr.getInt()-1]);
-                    }
-                    else {
-                        frad.text.ref(3,68).set(defk.benkk[lsSprakNr.getInt()-1]);
-                    }
-                    frad.typ.set("R");
-                    s05SkrivFil18();
-                }
-                while (!(!(pa.ok()) || !(stat.projidG.equals(proj.projidG)) || !(stat.saldotyp.equals("C")) || !(stat.kat.equals(wsKat)))) {
-                    if (!(stat.belffak.equals(ZERO)) || !(stat.belfak.equals(ZERO)) || (proj.antalFak.equals("J") && (!(stat.timffak.equals(ZERO)) || !(stat.timfak.equals(ZERO))))) {
-                        if (proj.antalFak.equals("J")) {
-                            wsTimffak.set(stat.timffak.add(stat.timfak));
-                            wsTimfak.increment(stat.timfak);
-                            frad.text.ref(48,9).set(wsTimffak);
-                        }
-                        defk.post.init();
-                        defk.typkk.set("B");
-                        defk.kod.set(stat.kod);
-                        prorecarea.recArea.set(defk.post);
-                        pa.recid.set(da.defk);
-                        pa.action.set(da.read);
-                        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                        if (pa.ok()) {
-                            defk.post.set(prorecarea.recArea);
-                        }
-                        benk.bkProjidG.set(proj.projidG);
-                        benk.bkTyp.set("A");
-                        benk.bkKat.set(ZERO);
-                        benk.bkKod.set(stat.kod);
-                        pa.recid.set(da.benk);
-                        pa.action.set(da.read);
-                        prorecarea.recArea.set(benk.post);
-                        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                        if (pa.ok()) {
-                            benk.post.set(prorecarea.recArea);
-                            defk.benkk[lsSprakNr.getInt()-1].set(benk.bkBenkk[0]);
-                        }
-                        frad.nrKatKod.set(stat.kod);
-                        if (lsKatKod.equals("J")) {
-                            frad.text.ref(1,3).set(stat.kod);
-                            frad.text.ref(7,35).set(defk.benkk[lsSprakNr.getInt()-1]);
-                        }
-                        else if (fore.katRubA.equals("J")) {
-                            frad.text.ref(4,35).set(defk.benkk[lsSprakNr.getInt()-1]);
-                        }
-                        else {
-                            frad.text.ref(3,36).set(defk.benkk[lsSprakNr.getInt()-1]);
-                        }
-                        if (stat.belffak.equals(ZERO) && stat.belfak.equals(ZERO)) {
-                            frad.belffak.set(SPACE);
-                            frad.text.ref(69,1).set("0");
-                            frad.typ.set("T");
-                        }
-                        else {
-                            frad.belffak.set(stat.belffak.add(stat.belfak));
-                            frad.typ.set("B");
-                        }
-                        s05SkrivFil18();
-                        lsBelffak.increment(stat.belffak);
-                        wsBelffak.increment(stat.belffak);
-                        wsKatffak.increment(stat.belffak);
-                        wsBelfak.increment(stat.belfak);
-                        wsBelffak.increment(stat.belfak);
-                        wsKatffak.increment(stat.belfak);
-                        if (proj.momskod.equals("J")) {
-                            lsBelofmp.increment(stat.belffak);
-                        }
-                    }
-                    pa.recid.set(da.stat);
-                    pa.action.set(da.readnext);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    stat.post.set(prorecarea.recArea);
-                    if (lsBruttNett.equals("N")) {
-                        stat.belfak.set(ZERO);
-                        stat.timfak.set(ZERO);
-                    }
-                    while (!(!(pa.ok()) || !(stat.projidG.equals(proj.projidG)) || !(stat.saldotyp.equals("C")) || !(stat.belffak.equals(ZERO)) || !(stat.belfak.equals(ZERO)))) {
-                        pa.recid.set(da.stat);
-                        pa.action.set(da.readnext);
-                        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                        stat.post.set(prorecarea.recArea);
-                        if (lsBruttNett.equals("N")) {
-                            stat.belfak.set(ZERO);
-                            stat.timfak.set(ZERO);
-                        }
-                    }
-                }
-                if (fore.katSumA.equals("J")) {
-                    frad.text.ref(62,9).set("---------");
-                    frad.typ.set("+");
-                    frad.nrKatKod.set(SPACE);
-                    s05SkrivFil18();
-                    frad.belffak.set(wsKatffak);
-                    frad.typ.set("D");
-                    lsDelsum.increment(1);
-                    frad.nrKatKod.set(SPACE);
-                    s05SkrivFil18();
-                    wsKatffak.set(ZERO);
-                }
-            }
-            if (fore.visaDelsf.equals("J")) {
-                frad.text.ref(62,9).set("---------");
-                frad.typ.set("+");
-                frad.nrKatKod.set(SPACE);
-                s05SkrivFil18();
-                if (fore.visaRubsf.equals("J")) {
-                    lexi.key.init();
-                    lexi.begrepp.set(6);
-                    prorecarea.recArea.set(lexi.post);
-                    pa.recid.set(da.lexi);
-                    pa.action.set(da.read);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    if (pa.ok()) {
-                        lexi.post.set(prorecarea.recArea);
-                        frad.text.ref(30,10).set(lexi.sprak2[lsSprakNr.getInt()-1]);
-                    }
-                    stddata.x.set(39);
-                    while (!(stddata.x.compareTo(30)<0 || !(frad.text.ref(stddata.x,1).equals(SPACE)))) {
-                        stddata.x.decrement(1);
-                    }
-                    stddata.x.increment(2);
-                    lexi.key.init();
-                    lexi.begrepp.set(1);
-                    prorecarea.recArea.set(lexi.post);
-                    pa.recid.set(da.lexi);
-                    pa.action.set(da.read);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    if (pa.ok()) {
-                        lexi.post.set(prorecarea.recArea);
-                        frad.text.ref(stddata.x,17).set(lexi.sprak1[lsSprakNr.getInt()-1]);
-                    }
-                    stddata.x.increment(16);
-                    while (!(stddata.x.compareTo(30)<0 || !(frad.text.ref(stddata.x,1).equals(SPACE)))) {
-                        stddata.x.decrement(1);
-                    }
-                    if (frad.text.ref(stddata.x,1).equals(":")) {
-                        frad.text.ref(stddata.x,1).set(SPACE);
-                    }
-                }
-                frad.belffak.set(wsBelffak);
-                frad.typ.set("D");
-                lsDelsum.increment(1);
-                frad.nrKatKod.set(SPACE);
-                s05SkrivFil18();
-            }
-        }
-    }
-
-    private void iFnivarv2aTimpris() {
-        lib.pro.Benkpost.fd benk=probenk.get();
-        workFil.deleteFile();
-        workFil.open("I-O");
-        if (!(dasvar.equals("00"))) {
-            pa.action.set(da.open);
-            s88Filfel();
-        }
-        stat.saldotyp.set("C");
-        while (!(!(pa.ok()) || !(stat.projidG.equals(proj.projidG)) || !(stat.saldotyp.equals("C")))) {
-            if (!(stat.belffak.equals(ZERO)) || !(stat.belfak.equals(ZERO)) || (proj.antalFak.equals("J") && (!(stat.timffak.equals(ZERO)) || !(stat.timfak.equals(ZERO))))) {
-                if (!(defk.typkk.equals("A")) || !(defk.kod.equals(stat.kod))) {
-                    defk.post.init();
-                    defk.typkk.set("B");
-                    defk.kod.set(stat.kod);
-                    pa.recid.set(da.defk);
-                    pa.action.set(da.read);
-                    prorecarea.recArea.set(defk.post);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    defk.post.set(prorecarea.recArea);
-                }
-                workSaldotyp.set("C");
-                if (!(defk.katFak.equals(ZERO))) {
-                    workKat.set(defk.katFak);
-                }
-                else {
-                    workKat.set(stat.kat);
-                }
-                workKod.set(stat.kod);
-                workFil.read();
-                if (!(dasvar.equals("00"))) {
-                    workData.init();
-                }
-                workBelffak.increment(stat.belffak);
-                workBelfak.increment(stat.belfak);
-                workTimffak.increment(stat.timffak);
-                workTimfak.increment(stat.timfak);
-                workPost.write();
-                if (workPost.invalidKey()) {
-                    workPost.rewrite();
-                }
-            }
-            pa.recid.set(da.stat);
-            pa.action.set(da.readnext);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            stat.post.set(prorecarea.recArea);
-            if (lsBruttNett.equals("N")) {
-                stat.belfak.set(ZERO);
-                stat.timfak.set(ZERO);
-            }
-        }
-        wsBelffak.set(ZERO);
-        wsKatffak.set(ZERO);
-        workKey.init();
-        workFil.start("NOT<", "work_key");
-        if (!((dasvar.equalsEither("00", "23")))) {
-            pa.action.set(da.startEg);
-            s88Filfel();
-        }
-        if (dasvar.equals("00")) {
-            workFil.readNext();
-            if (!((dasvar.equalsEither("00", "10")))) {
-                pa.action.set(da.readnext);
-                s88Filfel();
-            }
-        }
-        if (dasvar.equals("00")) //         PERFORM S01-RUB 
-        {
-            lexi.key.init();
-            lexi.begrepp.set(12);
-            prorecarea.recArea.set(lexi.post);
-            pa.recid.set(da.lexi);
-            pa.action.set(da.read);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            lexi.post.set(prorecarea.recArea);
-            if (!(pa.ok())) {
-                lexi.post.init();
-            }
-            if (proj.antalFak.equals("J") || antalovrigtfniv1.equals("J")) {
-                frad.text.ref(36,13).set(lexi.sprak1[lsSprakNr.getInt()-1]);
-                frad.text.ref(57,14).set(lexi.sprak2[lsSprakNr.getInt()-1]);
-            }
-            else {
-                frad.text.ref(57,14).set(lexi.sprak2[lsSprakNr.getInt()-1]);
-            }
-            lexi.key.init();
-            lexi.begrepp.set(23);
-            prorecarea.recArea.set(lexi.post);
-            pa.recid.set(da.lexi);
-            pa.action.set(da.read);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            lexi.post.set(prorecarea.recArea);
-            if (!(pa.ok())) {
-                lexi.post.init();
-            }
-            frad.text.ref(49,13).set(lexi.sprak2[lsSprakNr.getInt()-1]);
-            frad.typ.set("R");
-            frad.nrKatKod.set(SPACE);
-            s05SkrivFil18();
-            s02RubA();
-            while (!(!(dasvar.equals("00")))) {
-                wsKat.set(workKat);
-                if (fore.katRubA.equals("J")) {
-                    defk.post.init();
-                    defk.typkk.set("A");
-                    defk.kat.set(workKat);
-                    prorecarea.recArea.set(defk.post);
-                    pa.recid.set(da.defk);
-                    pa.action.set(da.read);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    if (pa.ok()) {
-                        defk.post.set(prorecarea.recArea);
-                    }
-                    frad.nrKatKod.set(workKat);
-                    if (lsKatKod.equals("J")) {
-                        frad.text.ref(1,2).set(workKat);
-                        frad.text.ref(6,65).set(defk.benkk[lsSprakNr.getInt()-1]);
-                    }
-                    else {
-                        frad.text.ref(3,68).set(defk.benkk[lsSprakNr.getInt()-1]);
-                    }
-                    frad.typ.set("R");
-                    s05SkrivFil18();
-                }
-                while (!(!(dasvar.equals("00")) || !(workKat.equals(wsKat)))) {
-                    wsFval.set(workBelffak);
-                    zFval();
-                    workBelffak.set(wsFval);
-                    wsFval.set(workBelfak);
-                    zFval();
-                    workBelfak.set(wsFval);
-                    if (proj.antalFak.equals("J")) {
-                        wsTimffak.set(workTimffak.add(workTimfak));
-                        wsTimfak.increment(workTimfak);
-                        frad.text.ref(40,9).set(wsTimffak);
-                    }
-                    wsTimpris.set(workBelffak.add(workBelfak).divide(workTimffak.add(workTimfak)), ROUND_HALF_UP);
-                    wsTimprisD.set(wsTimpris);
-                    frad.text.ref(50,7).set(wsTimprisD);
-                    defk.post.init();
-                    defk.typkk.set("B");
-                    defk.kod.set(workKod);
-                    prorecarea.recArea.set(defk.post);
-                    pa.recid.set(da.defk);
-                    pa.action.set(da.read);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    if (pa.ok()) {
-                        defk.post.set(prorecarea.recArea);
-                    }
-                    benk.bkProjidG.set(proj.projidG);
-                    benk.bkTyp.set("A");
-                    benk.bkKat.set(ZERO);
-                    benk.bkKod.set(workKod);
-                    pa.recid.set(da.benk);
-                    pa.action.set(da.read);
-                    prorecarea.recArea.set(benk.post);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    if (pa.ok()) {
-                        benk.post.set(prorecarea.recArea);
-                        defk.benkk[lsSprakNr.getInt()-1].set(benk.bkBenkk[0]);
-                    }
-                    frad.nrKatKod.set(workKod);
-                    if (lsKatKod.equals("J")) {
-                        frad.text.ref(1,3).set(workKod);
-                        frad.text.ref(7,35).set(defk.benkk[lsSprakNr.getInt()-1]);
-                    }
-                    else if (fore.katRubA.equals("J")) {
-                        frad.text.ref(4,35).set(defk.benkk[lsSprakNr.getInt()-1]);
-                    }
-                    else {
-                        frad.text.ref(3,36).set(defk.benkk[lsSprakNr.getInt()-1]);
-                    }
-                    if (workBelffak.equals(ZERO) && workBelfak.equals(ZERO)) {
-                        frad.belffak.set(SPACE);
-                        frad.text.ref(69,1).set("0");
-                        frad.typ.set("T");
-                    }
-                    else {
-                        frad.belffak.set(workBelffak.add(workBelfak));
-                        frad.typ.set("B");
-                    }
-                    s05SkrivFil18();
-                    lsBelffak.increment(workBelffak);
-                    wsBelffak.increment(workBelffak);
-                    wsKatffak.increment(workBelffak);
-                    wsBelfak.increment(workBelfak);
-                    wsBelffak.increment(workBelfak);
-                    wsKatffak.increment(workBelfak);
-                    if (proj.momskod.equals("J")) {
-                        lsBelofmp.increment(workBelffak);
-                    }
-                    workFil.readNext();
-                    if (!((dasvar.equalsEither("00", "10")))) {
-                        pa.action.set(da.readnext);
-                        s88Filfel();
-                    }
-                }
-                if (fore.katSumA.equals("J")) {
-                    frad.text.ref(62,9).set("---------");
-                    frad.typ.set("+");
-                    frad.nrKatKod.set(SPACE);
-                    s05SkrivFil18();
-                    frad.belffak.set(wsKatffak);
-                    frad.typ.set("D");
-                    lsDelsum.increment(1);
-                    frad.nrKatKod.set(SPACE);
-                    s05SkrivFil18();
-                    wsKatffak.set(ZERO);
-                }
-            }
-            if (fore.visaDelsf.equals("J")) {
-                frad.text.ref(62,9).set("---------");
-                frad.typ.set("+");
-                frad.nrKatKod.set(SPACE);
-                s05SkrivFil18();
-                if (fore.visaRubsf.equals("J")) {
-                    lexi.key.init();
-                    lexi.begrepp.set(6);
-                    prorecarea.recArea.set(lexi.post);
-                    pa.recid.set(da.lexi);
-                    pa.action.set(da.read);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    if (pa.ok()) {
-                        lexi.post.set(prorecarea.recArea);
-                        frad.text.ref(30,10).set(lexi.sprak2[lsSprakNr.getInt()-1]);
-                    }
-                    stddata.x.set(39);
-                    while (!(stddata.x.compareTo(30)<0 || !(frad.text.ref(stddata.x,1).equals(SPACE)))) {
-                        stddata.x.decrement(1);
-                    }
-                    stddata.x.increment(2);
-                    lexi.key.init();
-                    lexi.begrepp.set(1);
-                    prorecarea.recArea.set(lexi.post);
-                    pa.recid.set(da.lexi);
-                    pa.action.set(da.read);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    if (pa.ok()) {
-                        lexi.post.set(prorecarea.recArea);
-                        frad.text.ref(stddata.x,17).set(lexi.sprak1[lsSprakNr.getInt()-1]);
-                    }
-                    stddata.x.increment(16);
-                    while (!(stddata.x.compareTo(30)<0 || !(frad.text.ref(stddata.x,1).equals(SPACE)))) {
-                        stddata.x.decrement(1);
-                    }
-                    if (frad.text.ref(stddata.x,1).equals(":")) {
-                        frad.text.ref(stddata.x,1).set(SPACE);
-                    }
-                }
-                frad.belffak.set(wsBelffak);
-                frad.typ.set("D");
-                lsDelsum.increment(1);
-                frad.nrKatKod.set(SPACE);
-                s05SkrivFil18();
-            }
-        }
-        workFil.close();
-        if (!(dasvar.equals("00"))) {
-            pa.action.set(da.close);
-            s88Filfel();
-        }
-    }
-
-    private void iFnivarv2b() {
-        lib.pro.Statpost.fd stat=prostat.get();
-        lib.pro.Medapost.fd meda=promeda.get();
-        lib.pro.Benkpost.fd benk=probenk.get();
-        lib.pro.Defkpost.fd defk=prodefk.get();
-        lib.pro.Lexipost.fd lexi=prolexi.get();
-        wsBelffak.set(ZERO);
-        stat.key.init();
-        stat.projidG.set(proj.projidG);
-        stat.saldotyp.set("B");
-        prorecarea.recArea.set(stat.post);
-        pa.recid.set(da.stat);
-        pa.action.set(da.startEg);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.ok()) {
-            pa.recid.set(da.stat);
-            pa.action.set(da.readnext);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            stat.post.set(prorecarea.recArea);
-            if (lsBruttNett.equals("N")) {
-                stat.belfak.set(ZERO);
-                stat.timfak.set(ZERO);
-            }
-        }
-        while (!(!(pa.ok()) || !(stat.projidG.equals(proj.projidG)) || !(stat.saldotyp.equals("B")) || !(stat.belffak.equals(ZERO)) || !(stat.belfak.equals(ZERO)) || (proj.antalFak.equals("J") && (!(stat.timffak.equals(ZERO)) || !(stat.timfak.equals(ZERO)))))) {
-    private void mFnivink2O() {
-        wsBelffak.set(ZERO);
-        wsKatffak.set(ZERO);
-        while (!(!(pa.ok()) || !(stat.projidG.equals(proj.projidG)) || !(stat.saldotyp.equals("I")) || !(stat.belffak.equals(ZERO)) || !(stat.belfak.equals(ZERO)))) {
-            pa.recid.set(da.stat);
-            pa.action.set(da.readnext);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            stat.post.set(prorecarea.recArea);
-            if (lsBruttNett.equals("N")) {
-                stat.belfak.set(ZERO);
-            }
-        }
-        if (pa.ok() && stat.projidG.equals(proj.projidG) && stat.saldotyp.equals("I")) {
-            s01Rub();
-            s03RubI();
-            while (!(!(pa.ok()) || !(stat.projidG.equals(proj.projidG)) || !(stat.saldotyp.equals("I")))) {
-                wsKat.set(stat.kat);
-                if (fore.katRubA.equals("J")) {
-                    defk.typkk.set("I");
-                    defk.kat.set(stat.kat);
-                    prorecarea.recArea.set(defk.post);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    if (pa.ok()) {
-                        defk.post.set(prorecarea.recArea);
-                    }
-                    if (lsKatKod.equals("J")) {
-                        frad.text.ref(1,2).set(stat.kat);
-                        frad.text.ref(6,65).set(defk.benkk[lsSprakNr.getInt()-1]);
-                    }
-                    else {
-                        frad.text.ref(3,68).set(defk.benkk[lsSprakNr.getInt()-1]);
-                    }
-                    frad.typ.set("R");
-                    frad.nrKatKod.set(stat.kat);
-                    s05SkrivFil18();
-                }
-                while (!(!(pa.ok()) || !(stat.projidG.equals(proj.projidG)) || !(stat.saldotyp.equals("I")) || !(stat.kat.equals(wsKat)))) {
-                    if (!(stat.belffak.equals(ZERO)) || !(stat.belfak.equals(ZERO))) {
-                        defk.post.init();
-                        defk.typkk.set("J");
-                        defk.kod.set(stat.kod);
-                        prorecarea.recArea.set(defk.post);
-                        pa.recid.set(da.defk);
-                        pa.action.set(da.read);
-                        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                        if (pa.ok()) {
-                            defk.post.set(prorecarea.recArea);
-                        }
-                        frad.belffak.set(stat.belffak.add(stat.belfak));
-                        if (lsKatKod.equals("J")) {
-                            frad.text.ref(1,3).set(stat.kod);
-                            frad.text.ref(7,35).set(defk.benkk[lsSprakNr.getInt()-1]);
-                        }
-                        else if (fore.katRubA.equals("J")) {
-                            frad.text.ref(4,35).set(defk.benkk[lsSprakNr.getInt()-1]);
-                        }
-                        else {
-                            frad.text.ref(3,36).set(defk.benkk[lsSprakNr.getInt()-1]);
-                        }
-                        frad.typ.set("B");
-                        frad.nrKatKod.set(stat.kod);
-                        s05SkrivFil18();
-                        lsBelffak.increment(stat.belffak);
-                        wsBelffak.increment(stat.belffak);
-                        wsKatffak.increment(stat.belffak);
-                        wsBelfak.increment(stat.belfak);
-                        wsBelffak.increment(stat.belfak);
-                        wsKatffak.increment(stat.belfak);
-                        lsBelofmp.increment(stat.belofmp);
-                    }
-                    pa.recid.set(da.stat);
-                    pa.action.set(da.readnext);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    stat.post.set(prorecarea.recArea);
-                    if (lsBruttNett.equals("N")) {
-                        stat.belfak.set(ZERO);
-                    }
-                    while (!(!(pa.ok()) || !(stat.projidG.equals(proj.projidG)) || !(stat.saldotyp.equals("I")) || !(stat.belffak.equals(ZERO)) || !(stat.belfak.equals(ZERO)))) {
-                        pa.recid.set(da.stat);
-                        pa.action.set(da.readnext);
-                        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                        stat.post.set(prorecarea.recArea);
-                        if (lsBruttNett.equals("N")) {
-                            stat.belfak.set(ZERO);
-                        }
-                    }
-                }
-                if (fore.katSumA.equals("J")) {
-                    frad.text.ref(62,9).set("---------");
-                    frad.typ.set("+");
-                    frad.nrKatKod.set(SPACE);
-                    s05SkrivFil18();
-                    frad.belffak.set(wsKatffak);
-                    frad.typ.set("D");
-                    lsDelsum.increment(1);
-                    frad.nrKatKod.set(SPACE);
-                    s05SkrivFil18();
-                    wsKatffak.set(ZERO);
-                }
-            }
-            if (fore.visaDelsf.equals("J")) {
-                frad.text.ref(62,9).set("---------");
-                frad.typ.set("+");
-                frad.nrKatKod.set(SPACE);
-                s05SkrivFil18();
-                if (fore.visaRubsf.equals("J")) {
-                    lexi.key.init();
-                    lexi.begrepp.set(6);
-                    prorecarea.recArea.set(lexi.post);
-                    pa.recid.set(da.lexi);
-                    pa.action.set(da.read);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    if (pa.ok()) {
-                        lexi.post.set(prorecarea.recArea);
-                        frad.text.ref(30,10).set(lexi.sprak2[lsSprakNr.getInt()-1]);
-                    }
-                    stddata.x.set(39);
-                    while (!(stddata.x.compareTo(30)<0 || !(frad.text.ref(stddata.x,1).equals(SPACE)))) {
-                        stddata.x.decrement(1);
-                    }
-                    stddata.x.increment(2);
-                    lexi.key.init();
-                    lexi.begrepp.set(1);
-                    prorecarea.recArea.set(lexi.post);
-                    pa.recid.set(da.lexi);
-                    pa.action.set(da.read);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    if (pa.ok()) {
-                        lexi.post.set(prorecarea.recArea);
-                        frad.text.ref(stddata.x,17).set(lexi.sprak2[lsSprakNr.getInt()-1]);
-                    }
-                    stddata.x.increment(16);
-                    while (!(stddata.x.compareTo(30)<0 || !(frad.text.ref(stddata.x,1).equals(SPACE)))) {
-                        stddata.x.decrement(1);
-                    }
-                    if (frad.text.ref(stddata.x,1).equals(":")) {
-                        frad.text.ref(stddata.x,1).set(SPACE);
-                    }
-                }
-                frad.belffak.set(wsBelffak);
-                frad.typ.set("D");
-                lsDelsum.increment(1);
-                frad.nrKatKod.set(SPACE);
-                s05SkrivFil18();
-            }
-        }
-    }
-
-    private void mFnivink2() {
-        lib.pro.Statpost.fd stat=prostat.get();
-        lib.pro.Defkpost.fd defk=prodefk.get();
-        lib.pro.Lexipost.fd lexi=prolexi.get();
-        workFil.deleteFile();
-        workFil.open("I-O");
-        if (!(dasvar.equals("00"))) {
-            pa.action.set(da.open);
-            s88Filfel();
-        }
-        stat.key.init();
-        stat.projidG.set(proj.projidG);
-        stat.saldotyp.set("I");
-        prorecarea.recArea.set(stat.post);
-        pa.recid.set(da.stat);
-        pa.action.set(da.startEg);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.ok()) {
-            pa.recid.set(da.stat);
-            pa.action.set(da.readnext);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            stat.post.set(prorecarea.recArea);
-            if (lsBruttNett.equals("N")) {
-                stat.belfak.set(ZERO);
-            }
-        }
-        while (!(!(pa.ok()) || !(stat.projidG.equals(proj.projidG)) || !(stat.saldotyp.equals("I")))) {
-            if (!(stat.belffak.equals(ZERO)) || !(stat.belfak.equals(ZERO))) {
-                if (!(defk.typkk.equals("J")) || !(defk.kod.equals(stat.kod))) {
-                    defk.post.init();
-                    defk.typkk.set("J");
-                    defk.kod.set(stat.kod);
-                    pa.recid.set(da.defk);
-                    pa.action.set(da.read);
-                    prorecarea.recArea.set(defk.post);
-    private void qFnivmat2O() {
-        lib.pro.Statpost.fd stat=prostat.get();
-        lib.pro.Defkpost.fd defk=prodefk.get();
-        lib.pro.Lexipost.fd lexi=prolexi.get();
-        wsBelffak.set(ZERO);
-        wsKatffak.set(ZERO);
-        stat.key.init();
-        stat.projidG.set(proj.projidG);
-        stat.saldotyp.set("M");
-        prorecarea.recArea.set(stat.post);
-        pa.recid.set(da.stat);
-        pa.action.set(da.startEg);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.ok()) {
-            pa.recid.set(da.stat);
-            pa.action.set(da.readnext);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            stat.post.set(prorecarea.recArea);
-            if (lsBruttNett.equals("N")) {
-                stat.belfak.set(ZERO);
-            }
-        }
-        while (!(!(pa.ok()) || !(stat.projidG.equals(proj.projidG)) || !(stat.saldotyp.equals("M")) || !(stat.belffak.equals(ZERO)) || !(stat.belfak.equals(ZERO)))) {
-            pa.recid.set(da.stat);
-            pa.action.set(da.readnext);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            stat.post.set(prorecarea.recArea);
-            if (lsBruttNett.equals("N")) {
-                stat.belfak.set(ZERO);
-            }
-        }
-        if (pa.ok() && stat.projidG.equals(proj.projidG) && stat.saldotyp.equals("M")) {
-            s01Rub();
-            s04RubM();
-            while (!(!(pa.ok()) || !(stat.projidG.equals(proj.projidG)) || !(stat.saldotyp.equals("M")))) {
-                wsKat.set(stat.kat);
-                if (fore.katRubA.equals("J")) {
-                    defk.post.init();
-                    defk.typkk.set("M");
-                    defk.kat.set(stat.kat);
-                    prorecarea.recArea.set(defk.post);
-                    pa.recid.set(da.defk);
-                    pa.action.set(da.read);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    if (pa.ok()) {
-                        defk.post.set(prorecarea.recArea);
-                    }
-                    if (lsKatKod.equals("J")) {
-                        frad.text.ref(1,2).set(stat.kat);
-                        frad.text.ref(6,65).set(defk.benkk[lsSprakNr.getInt()-1]);
-                    }
-                    else {
-                        frad.text.ref(3,68).set(defk.benkk[lsSprakNr.getInt()-1]);
-                    }
-                    frad.typ.set("R");
-                    frad.nrKatKod.set(stat.kat);
-                    s05SkrivFil18();
-                }
-                while (!(!(pa.ok()) || !(stat.projidG.equals(proj.projidG)) || !(stat.saldotyp.equals("M")) || !(stat.kat.equals(wsKat)))) {
-                    if (!(stat.belffak.equals(ZERO)) || !(stat.belfak.equals(ZERO))) {
-                        defk.post.init();
-                        defk.typkk.set("N");
-                        defk.kod.set(stat.kod);
-                        prorecarea.recArea.set(defk.post);
-                        pa.recid.set(da.defk);
-                        pa.action.set(da.read);
-                        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                        if (pa.ok()) {
-                            defk.post.set(prorecarea.recArea);
-                        }
-                        frad.belffak.set(stat.belffak.add(stat.belfak));
-                        if (lsKatKod.equals("J")) {
-                            frad.text.ref(1,3).set(stat.kod);
-                            frad.text.ref(7,35).set(defk.benkk[lsSprakNr.getInt()-1]);
-                        }
-                        else if (fore.katRubA.equals("J")) {
-                            frad.text.ref(4,35).set(defk.benkk[lsSprakNr.getInt()-1]);
-                        }
-                        else {
-                            frad.text.ref(3,36).set(defk.benkk[lsSprakNr.getInt()-1]);
-                        }
-                        frad.typ.set("B");
-                        frad.nrKatKod.set(stat.kod);
-                        s05SkrivFil18();
-                        lsBelffak.increment(stat.belffak);
-                        wsBelffak.increment(stat.belffak);
-                        wsKatffak.increment(stat.belffak);
-                        wsBelfak.increment(stat.belfak);
-                        wsBelffak.increment(stat.belfak);
-                        wsKatffak.increment(stat.belfak);
-                        lsBelofmp.increment(stat.belofmp);
-                    }
-                    pa.recid.set(da.stat);
-                    pa.action.set(da.readnext);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    stat.post.set(prorecarea.recArea);
-                    if (lsBruttNett.equals("N")) {
-                        stat.belfak.set(ZERO);
-                    }
-                    while (!(!(pa.ok()) || !(stat.projidG.equals(proj.projidG)) || !(stat.saldotyp.equals("M")) || !(stat.belffak.equals(ZERO)) || !(stat.belfak.equals(ZERO)))) {
-                        pa.recid.set(da.stat);
-                        pa.action.set(da.readnext);
-                        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                        stat.post.set(prorecarea.recArea);
-                        if (lsBruttNett.equals("N")) {
-                            stat.belfak.set(ZERO);
-                        }
-                    }
-                }
-                if (fore.katSumA.equals("J")) {
-                    frad.text.ref(62,9).set("---------");
-                    frad.typ.set("+");
-                    frad.nrKatKod.set(SPACE);
-                    s05SkrivFil18();
-                    frad.belffak.set(wsKatffak);
-                    frad.typ.set("D");
-                    lsDelsum.increment(1);
-                    frad.nrKatKod.set(SPACE);
-                    s05SkrivFil18();
-                    wsKatffak.set(ZERO);
-                }
-            }
-            if (fore.visaDelsf.equals("J")) {
-                frad.text.ref(62,9).set("---------");
-                frad.typ.set("+");
-                frad.nrKatKod.set(SPACE);
-                s05SkrivFil18();
-                if (fore.visaRubsf.equals("J")) {
-                    lexi.key.init();
-                    lexi.begrepp.set(6);
-                    prorecarea.recArea.set(lexi.post);
-                    pa.recid.set(da.lexi);
-                    pa.action.set(da.read);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    if (pa.ok()) {
-                        lexi.post.set(prorecarea.recArea);
-                        frad.text.ref(30,10).set(lexi.sprak2[lsSprakNr.getInt()-1]);
-                    }
-                    stddata.x.set(39);
-                    while (!(stddata.x.compareTo(30)<0 || !(frad.text.ref(stddata.x,1).equals(SPACE)))) {
-                        stddata.x.decrement(1);
-                    }
-                    stddata.x.increment(2);
-                    lexi.key.init();
-                    lexi.begrepp.set(2);
-                    prorecarea.recArea.set(lexi.post);
-                    pa.recid.set(da.lexi);
-                    pa.action.set(da.read);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    if (pa.ok()) {
-                        lexi.post.set(prorecarea.recArea);
-                        frad.text.ref(stddata.x,17).set(lexi.sprak1[lsSprakNr.getInt()-1]);
-                    }
-                    stddata.x.increment(16);
-                    while (!(stddata.x.compareTo(30)<0 || !(frad.text.ref(stddata.x,1).equals(SPACE)))) {
-                        stddata.x.decrement(1);
-                    }
-                    if (frad.text.ref(stddata.x,1).equals(":")) {
-                        frad.text.ref(stddata.x,1).set(SPACE);
-                    }
-                }
-                frad.belffak.set(wsBelffak);
-                frad.typ.set("D");
-                lsDelsum.increment(1);
-                frad.nrKatKod.set(SPACE);
-                s05SkrivFil18();
-            }
-        }
-    }
-
-    private void sAvrAconto() {
-        lib.pro.Lexipost.fd lexi=prolexi.get();
-        lsBelffak.increment(proj.aconffak);
-        if (fore.momskdc.equals("J") && (proj.momskod.equalsEither("J", "A"))) {
-            lsBelofmp.increment(proj.aconffak);
-        }
-        frad.typ.set("T");
-        frad.nrKatKod.set(SPACE);
-        s05SkrivFil18();
-        lexi.key.init();
-        lexi.begrepp.set(2);
-        prorecarea.recArea.set(lexi.post);
-        pa.recid.set(da.lexi);
-        pa.action.set(da.read);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.ok()) {
-            lexi.post.set(prorecarea.recArea);
-            frad.text.set(lexi.sprak2[lsSprakNr.getInt()-1]);
-        }
-        frad.belffak.set(proj.aconffak);
-        frad.typ.set("B");
-        frad.nrKatKod.set(SPACE);
-        s05SkrivFil18();
-    }
-
--- a/server.src/prg/pro/P44150f.java
-    private void hRedText() {
-        lsRad.set(SPACE);
-        stddata.x.set(lsPos41);
-        if (!(stddata.x.compareTo(78)>0)) {
-            stddata.z.set(new Constant("101").subtract(stddata.x));
-            lsRad.ref(stddata.x,stddata.z).set(red);
-            if (fore.propFakt.equals("J")) {
-                lsProp[prop.getInt()-1].set(stddata.x);
-                lsSpace[prop.getInt()-1].set(stddata.x.multiply(fore.koeffPos));
-                prop.increment(1);
-                lsProp[prop.getInt()-1].set(101);
-            }
-        }
-        rr.increment(1);
-        rr41.increment(1);
-    }
-
--- a/server.src/prg/pro/P44150s.java
-    private void hRedText() {
-        lsRad.set(SPACE);
-        stddata.x.set(lsPos41);
-        if (!(stddata.x.compareTo(78)>0)) {
-            stddata.z.set(new Constant("101").subtract(stddata.x));
-            lsRad.ref(stddata.x,stddata.z).set(red);
-            if (fore.propFakt.equals("J")) {
-                lsProp[prop.getInt()-1].set(stddata.x);
-                lsSpace[prop.getInt()-1].set(stddata.x.multiply(fore.koeffPos));
-                prop.increment(1);
-                lsProp[prop.getInt()-1].set(101);
-            }
-        }
-        rr.increment(1);
-        rr41.increment(1);
-    }
-
-    private void s03EditKorta() {
-        stddata.x.increment(3);
-        stddata.z.set(3);
-        if (!(stddata.x.compareTo(80)>0) && arb.ref(stddata.x,1).equals(SPACE)) {
-            while (!(stddata.x.compareTo(80)>0 || !(arb.ref(stddata.x,1).equals(SPACE)))) {
-                stddata.z.increment(1);
-                stddata.x.increment(1);
-            }
-            stddata.z.decrement(1);
-            stddata.x.decrement(1);
-        }
-        if (stddata.y.add(stddata.z).compareTo(101)>0) {
-            stddata.z.set(new Constant("101").subtract(stddata.y));
-        }
-        lsRad.ref(stddata.y,stddata.z).set(red);
-        if (fore.propFakt.equals("J")) {
-            lsProp[prop.getInt()-1].set(stddata.y);
-            lsSpace[prop.getInt()-1].set(stddata.y.multiply(fore.koeffPos).subtract(stddata.t.multiply(fore.koeffPos)));
-            prop.increment(1);
-            lsProp[prop.getInt()-1].set(101);
-        }
-        stddata.y.increment(stddata.z);
-    }
-
--- a/server.src/prg/pro/P44151f.java
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z12SkrivListaSaknas() {
-        ulFilnamn.set(z12NamnD);
-        call("prg.bas.stdutskr", pa.paraArea, ulFilnamn, sc1Antal, skri.post);
-        cancel("prg.bas.stdutskr");
-    }
-
-    private void z12OpenListaW() {
-        ulFilnamn.set(z12NamnW);
-        lista.open("OUTPUT");
-        stddata.stdListStatus.set(ZERO);
-        stddata.stdSidStatus.set(1);
-        pa.txtnr.set(903);
-        z04Meddela();
-        listrad.printAfter(0,skri.st10cpi);
-        listrad.printAfter(0,skri.st72rad);
-    }
-
-    private void z12Abort() {
-        c_rerr(pa.syfel, stddata.stdText1, stddata.stdText2, stddata.stdText3, stddata.stdText4);
-        stddata.stdText1.set(99);
-        stddata.stdText2.set(SPACE);
-        stddata.stdText3.set(SPACE);
-        stddata.stdText4.set(pa.syfel);
-        call("prg.bas.visa", pa.paraArea, "F904", stddata.stdText1, stddata.stdText2, stddata.stdText3, stddata.stdText4);
-        dasvar.set(99);
-    }
-
--- a/server.src/prg/pro/P44151n.java
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z11OpenListaN() {
-        z11Rr.set(50);
-        z11OpenCpi();
-    }
-
-    private void z11Abort() {
-        c_rerr(pa.syfel);
-        stddata.stdText1.set(99);
-        stddata.stdText2.set(SPACE);
-        stddata.stdText3.set(SPACE);
-        stddata.stdText4.set(pa.syfel);
-        call("prg.bas.visa", pa.paraArea, "F904", stddata.stdText1, stddata.stdText2, stddata.stdText3, stddata.stdText4);
-        dasvar.set(99);
-    }
-
--- a/server.src/prg/pro/P44190b.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(P44190b.this, pa);
-    private Field kurs = new Field("999999V9999");
-    private Field kursAntal = new Field("999999");
--- a/server.src/prg/pro/P44190fa.java
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z12SkrivListaSaknas() {
-        lib.pro.Skripost.fd skri=proskri.get();
-        ulFilnamn.set(z12NamnD);
-        call("prg.bas.stdutskr", pa.paraArea, ulFilnamn, sc1Antal, skri.post);
-        cancel("prg.bas.stdutskr");
-    }
-
-    private void z12OpenListaW() {
-        lib.pro.Skripost.fd skri=proskri.get();
-        ulFilnamn.set(z12NamnW);
-        lista.open("OUTPUT");
-        stddata.stdListStatus.set(ZERO);
-        stddata.stdSidStatus.set(1);
-        pa.txtnr.set(903);
-        z04Meddela();
-        listrad.printAfter(0,skri.st10cpi);
-        listrad.printAfter(0,skri.st72rad);
-    }
-
-    private void z12Abort() {
-        c_rerr(pa.syfel, stddata.stdText1, stddata.stdText2, stddata.stdText3, stddata.stdText4);
-        stddata.stdText1.set(99);
-        stddata.stdText2.set(SPACE);
-        stddata.stdText3.set(SPACE);
-        stddata.stdText4.set(pa.syfel);
-        call("prg.bas.visa", pa.paraArea, "F904", stddata.stdText1, stddata.stdText2, stddata.stdText3, stddata.stdText4);
-        dasvar.set(99);
-    }
-
--- a/server.src/prg/pro/P44190fb.java
--- a/server.src/prg/pro/P44190n.java
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z11OpenListaN() {
-        z11Rr.set(50);
-        z11OpenCpi();
-    }
-
-    private void z11Abort() {
-        c_rerr(pa.syfel);
-        stddata.stdText1.set(99);
-        stddata.stdText2.set(SPACE);
-        stddata.stdText3.set(SPACE);
-        stddata.stdText4.set(pa.syfel);
-        call("prg.bas.visa", pa.paraArea, "F904", stddata.stdText1, stddata.stdText2, stddata.stdText3, stddata.stdText4);
-        dasvar.set(99);
-    }
-
--- a/server.src/prg/pro/P44190sa.java
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z12SkrivListaSaknas() {
-        lib.pro.Skripost.fd skri=proskri.get();
-        ulFilnamn.set(z12NamnD);
-        call("prg.bas.stdutskr", pa.paraArea, ulFilnamn, sc1Antal, skri.post);
-        cancel("prg.bas.stdutskr");
-    }
-
-    private void z12OpenListaW() {
-        lib.pro.Skripost.fd skri=proskri.get();
-        ulFilnamn.set(z12NamnW);
-        lista.open("OUTPUT");
-        stddata.stdListStatus.set(ZERO);
-        stddata.stdSidStatus.set(1);
-        pa.txtnr.set(903);
-        z04Meddela();
-        listrad.printAfter(0,skri.st10cpi);
-        listrad.printAfter(0,skri.st72rad);
-    }
-
-    private void z12Abort() {
-        c_rerr(pa.syfel, stddata.stdText1, stddata.stdText2, stddata.stdText3, stddata.stdText4);
-        stddata.stdText1.set(99);
-        stddata.stdText2.set(SPACE);
-        stddata.stdText3.set(SPACE);
-        stddata.stdText4.set(pa.syfel);
-        call("prg.bas.visa", pa.paraArea, "F904", stddata.stdText1, stddata.stdText2, stddata.stdText3, stddata.stdText4);
-        dasvar.set(99);
-    }
-
--- a/server.src/prg/pro/P44350aa.java
-    private Field wsBlank = new Field("X(78)", SPACE);
--- a/server.src/prg/pro/P45001.java
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
-    private void z99Funk() {
-        if (stddata.stdKey.compareTo(400)>=0) {
-            call("prg.bas.toolexec", pa.paraArea, stddata.stdKey);
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-            }
-            else {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-        }
-        else {
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-            }
-            if (stddata.stdKey.equalsEither(81, 83)) {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-            if (stddata.stdKey.equals(8)) {
-                stddata.z99Oldftg.set(pa.bkstvftg);
-                call("prg.bas.byt", pa.paraArea);
-                cancel("prg.bas.byt");
-                if (!(pa.bkstvftg.equals(stddata.z99Oldftg))) {
-                    stddata.z99Newftg.set(pa.bkstvftg);
-                    pa.bkstvftg.set(stddata.z99Oldftg);
-                    pa.recid.set(da.file);
-                    pa.action.set(da.closeAll);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    cancel("prg.pro.p4921");
-                    cancel("prg.pro.p4900");
-                    pa.bkstvftg.set(stddata.z99Newftg);
-                    pa.action.set(da.open);
-                    call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-                    if (!(pa.ok())) {
-                        pa.txtnr.set(908);
-                        z04Meddela();
-                        throw exit;
-                    }
-                }
-                pa.projidG.init();
-                stddata.stdKey.set(7);
-            }
-        }
-    }
-
-    private void z99FunkSc1() {
-        if (stddata.stdKey.compareTo(400)>=0) {
-            call("prg.bas.toolexec", pa.paraArea, stddata.stdKey);
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-                stddata.stdKey.set(ZERO);
-                sc1Funk.set(ZERO);
-            }
-            else {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-        }
-        else {
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-                stddata.stdKey.set(ZERO);
-                sc1Funk.set(ZERO);
-            }
-            if (stddata.stdKey.equalsEither(81, 83)) {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-            if (stddata.stdKey.equals(8)) {
-                stddata.z99Oldftg.set(pa.bkstvftg);
-                call("prg.bas.byt", pa.paraArea);
-                cancel("prg.bas.byt");
-                if (!(pa.bkstvftg.equals(stddata.z99Oldftg))) {
-                    stddata.z99Newftg.set(pa.bkstvftg);
-                    pa.bkstvftg.set(stddata.z99Oldftg);
-                    pa.recid.set(da.file);
-                    pa.action.set(da.closeAll);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    cancel("prg.pro.p4921");
-                    cancel("prg.pro.p4900");
-                    pa.bkstvftg.set(stddata.z99Newftg);
-                    pa.action.set(da.open);
-                    call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-                    if (!(pa.ok())) {
-                        pa.txtnr.set(908);
-                        z04Meddela();
-                        throw exit;
-                    }
-                }
-                pa.projidG.init();
-                stddata.stdKey.set(7);
-            }
-        }
-    }
-
-    private void z99LasTkn() {
-        c_keymap(stddata.saveKeymap);
-        setEnv("KEYSTROKE","Exception=67 kP");
-        if ((stddata.stdKey.compareTo(0)>0 && stddata.stdKey.compareTo(9)<0) || 
-                (stddata.stdKey.compareTo(400)>=0)) {
-            z99Funk();
-        }
-        else {
-            stddata.stdVal.set(ZERO);
-        }
-        c_keymap(stddata.restoreKeymap);
-    }
-
--- a/server.src/prg/pro/P45041.java
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
--- a/server.src/prg/pro/P45042.java
-    private Field tomrad = new Field("X(76)", SPACE);
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
--- a/server.src/prg/pro/P4900.java
--- a/server.src/prg/pro/P4921std.java
-    private Field bilcOpen = new Field("X");
-    private Field proFil5OpenFtg = new Field("X(4)");
-    private Field sparPgm = new Field("X(12)");
-    private Field wsWindow = new Field("X(10)");
-    private Field oldFtg = new Field("XXXX");
-    private Field svar = new Field("999");
--- a/server.src/prg/pro/P4beho.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(P4beho.this);
-    private lib.pro.Kunbpost prokunb=new lib.pro.Kunbpost(P4beho.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(P4beho.this, pa);
--- a/server.src/prg/pro/P4bet.java
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
--- a/server.src/prg/pro/P4bytkod.java
-    private lib.pro.Calepost procale=new lib.pro.Calepost(P4bytkod.this, pa);
-    private lib.pro.Almapost proalma=new lib.pro.Almapost(P4bytkod.this, pa);
-    private lib.pro.Ofhupost proofhu=new lib.pro.Ofhupost(P4bytkod.this, pa);
-    private lib.pro.Ofprpost proofpr=new lib.pro.Ofprpost(P4bytkod.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P4bytkod.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(P4bytkod.this);
-    private lib.pro.Pma1post propma1=new lib.pro.Pma1post(P4bytkod.this, pa);
-    private lib.pro.Pma2post propma2=new lib.pro.Pma2post(P4bytkod.this, pa);
-    private lib.pro.Lexipost prolexi=new lib.pro.Lexipost(P4bytkod.this, pa);
-    private lib.pro.Budwpost probudw=new lib.pro.Budwpost(P4bytkod.this, pa);
-    private lib.pro.Rekv rekv=new lib.pro.Rekv(P4bytkod.this);
-    private lib.pro.Trek trek=new lib.pro.Trek(P4bytkod.this);
-    private lib.pro.Rtxt rtxt=new lib.pro.Rtxt(P4bytkod.this);
-    private lib.pro.Mbek mbek=new lib.pro.Mbek(P4bytkod.this);
-    private lib.pro.Mrek mrek=new lib.pro.Mrek(P4bytkod.this);
-    private lib.pro.Mfak mfak=new lib.pro.Mfak(P4bytkod.this);
-    private lib.pro.Msam msam=new lib.pro.Msam(P4bytkod.this);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(P4bytkod.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(P4bytkod.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(P4bytkod.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(P4bytkod.this);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(P4bytkod.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(P4bytkod.this, pa);
-    private lib.pro.Fkunpost profkun=new lib.pro.Fkunpost(P4bytkod.this, pa);
-    private lib.pro.Laprpost prolapr=new lib.pro.Laprpost(P4bytkod.this, pa);
-    private lib.pro.Pnotpost propnot=new lib.pro.Pnotpost(P4bytkod.this, pa);
-    private lib.pro.Agrppost proagrp=new lib.pro.Agrppost(P4bytkod.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(P4bytkod.this, pa);
-    private lib.pro.Pfripost propfri=new lib.pro.Pfripost(P4bytkod.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(P4bytkod.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P4bytkod.this);
--- a/server.src/prg/pro/P4cale.java
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
--- a/server.src/prg/pro/P4deltst.java
-    private lib.pro.Almapost proalma=new lib.pro.Almapost(P4deltst.this, pa);
-    private lib.pro.Ofrapost proofra=new lib.pro.Ofrapost(P4deltst.this, pa);
-    private lib.pro.Ofprpost proofpr=new lib.pro.Ofprpost(P4deltst.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P4deltst.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(P4deltst.this);
-    private lib.pro.Pma1post propma1=new lib.pro.Pma1post(P4deltst.this, pa);
-    private lib.pro.Pma2post propma2=new lib.pro.Pma2post(P4deltst.this, pa);
-    private lib.pro.Lexipost prolexi=new lib.pro.Lexipost(P4deltst.this, pa);
-    private lib.pro.Budwpost probudw=new lib.pro.Budwpost(P4deltst.this, pa);
-    private lib.pro.Rekv rekv=new lib.pro.Rekv(P4deltst.this);
-    private lib.pro.Trek trek=new lib.pro.Trek(P4deltst.this);
-    private lib.pro.Rtxt rtxt=new lib.pro.Rtxt(P4deltst.this);
-    private lib.pro.Mbek mbek=new lib.pro.Mbek(P4deltst.this);
-    private lib.pro.Mrek mrek=new lib.pro.Mrek(P4deltst.this);
-    private lib.pro.Mfak mfak=new lib.pro.Mfak(P4deltst.this);
-    private lib.pro.Msam msam=new lib.pro.Msam(P4deltst.this);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(P4deltst.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(P4deltst.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(P4deltst.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(P4deltst.this);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(P4deltst.this, pa);
-    private lib.bok.Kontpost bokkont=new lib.bok.Kontpost(P4deltst.this, pa);
-    private lib.pro.Fkunpost profkun=new lib.pro.Fkunpost(P4deltst.this, pa);
-    private lib.pro.Lahupost prolahu=new lib.pro.Lahupost(P4deltst.this, pa);
-    private lib.pro.Laprpost prolapr=new lib.pro.Laprpost(P4deltst.this, pa);
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(P4deltst.this, pa);
-    private lib.pro.Pnotpost propnot=new lib.pro.Pnotpost(P4deltst.this, pa);
-    private lib.pro.Agrppost proagrp=new lib.pro.Agrppost(P4deltst.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(P4deltst.this, pa);
-    private lib.pro.Pfripost propfri=new lib.pro.Pfripost(P4deltst.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(P4deltst.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(P4deltst.this);
--- a/server.src/prg/pro/P4fakkun.java
-    private lib.bas.Beho beho=new lib.bas.Beho(P4fakkun.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P4fakkun.this);
-    private Field pgm = new Field("X(11)", "04FAKKUN");
-    private Field kundid = new Field("X(10)");
-    private void fkontClose() {
-        fkont.close();
-    }
-
--- a/server.src/prg/pro/P4fakt.java
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(P4fakt.this);
-    private Field z13TknG = new Field("X(10)");
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
-    private void getcolBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("BAK ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAD1");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RUB ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAM ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FUNK");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RA24");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("MEDD");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("LEDT");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMO");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMC");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FONS");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("HALV");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/P4fakts.java
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(P4fakts.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(P4fakts.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P4fakts.this);
-    private void dummy1() {
-    }
-
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/P4fama01.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(P4fama01.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P4fama01.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(P4fama01.this);
-    private Field lag = new Field("S9(9)");
-    private Field tb = new Field("S9(9)");
-    private Field fkodKat = new Field("99");
-    private Field fkodKod = new Field("999");
-    private Field fkodEof = new Field("X");
-    private Field ffaktEof = new Field("X");
-    private Field tmpPfak = new Field("--9.99");
-    private Field tmpBel = new Field("S9(8)V99");
-    private Field tmpHel = new Field("S9(8)");
-    private Field lstMat = new Field("-----9,99");
-    private Field s1 = new Field("S9(9)V99");
-    private Field s2 = new Field("S9(9)V99");
-    private Field f = new Field("X");
-    private Field f2 = new Field("X");
-    private Field massDatum = new Field("9(8)");
-    private Field massrad = new Field("X(300)");
-    private Field oKat = new Field("XX");
-    private Field i = new Field("999");
-    private Field ptr = new Field("99999");
-    private Field x = new Field("9999");
-    private Field y = new Field("9999");
-    private Field getFel = new Field("X");
-    private Field getNamn = new Field("X(50)");
-    private Field fel = new Field("99");
-    private Field stanna = new Field("X", "N");
-    private Field timK = new Field("9(4)V99");
-    private Field wsCale = new Field("S9(9)V99");
-    private void raknaGra() {
-        lib.pro.Tidwpost.fd tidw=protidw.get();
-        lib.pro.Defkpost.fd defk=prodefk.get();
-        tidw.post.init();
-        tidw.meda.set(webpara.medarb);
-        tidw.dat.set(datum);
-        tidw.typ.set("1");
-        tidw.lnr.set(new Constant("000"));
-        pa.recid.set(da.tidw);
-        pa.action.set(da.startEg);
-        prorecarea.recArea.set(tidw.post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.ok()) {
-            pa.action.set(da.readnext);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            tidw.post.set(prorecarea.recArea);
-        }
-        while ((pa.ok() && webpara.medarb.equals(tidw.meda) && tidw.dat.equals(datum) && tidw.typ.equals("1"))) {
-            ejtom.set("J");
-            defk.key.init();
-            defk.typkk.set("B");
-            defk.kod.set(tidw.kod);
-            pa.action.set(da.read);
-            pa.recid.set(da.defk);
-            prorecarea.recArea.set(defk.post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            defk.post.set(prorecarea.recArea);
-            if (defk.kattillh.compareTo(99)<0) {
-                sumTim.increment(tidw.tim);
-            }
-            if (defk.kattillh.compareTo(98)<0) {
-                sumTim1.increment(tidw.tim);
-            }
-            if (defk.kattillh.compareTo(93)<0) {
-                sumTim2.increment(tidw.tim);
-            }
-            pa.recid.set(da.tidw);
-            pa.action.set(da.readnext);
-            prorecarea.recArea.set(tidw.post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            tidw.post.set(prorecarea.recArea);
-        }
-    }
-
--- a/server.src/prg/pro/P4ffarv.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(P4ffarv.this);
-    private lib.bas.Momspost basmoms=new lib.bas.Momspost(P4ffarv.this);
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
-    private void atergang() {
-        throw exit;
-    }
-
--- a/server.src/prg/pro/P4ffink.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(P4ffink.this);
-    private lib.bas.Momspost basmoms=new lib.bas.Momspost(P4ffink.this);
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
-    private void atergang() {
-        throw exit;
-    }
-
--- a/server.src/prg/pro/P4ffovr.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(P4ffovr.this);
-    private lib.bas.Momspost basmoms=new lib.bas.Momspost(P4ffovr.this);
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
--- a/server.src/prg/pro/P4fil24.java
--- a/server.src/prg/pro/P4fil25.java
--- a/server.src/prg/pro/P4fil26.java
--- a/server.src/prg/pro/P4fil27.java
--- a/server.src/prg/pro/P4fil28.java
--- a/server.src/prg/pro/P4fil29.java
--- a/server.src/prg/pro/P4fil30.java
--- a/server.src/prg/pro/P4fil31.java
--- a/server.src/prg/pro/P4fil32.java
--- a/server.src/prg/pro/P4fmal.java
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(P4fmal.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(P4fmal.this);
-    private Field pgm = new Field("X(12)", "04FMAL");
-    private Field textfilPrefix = new Field("X(100)");
-    private Field textfilKod = new Field("X(100)");
-    private Field textfilTmp = new Field("X(100)");
-    private Field textfilBel = new Field("S9(9)");
-    private Field subject = new Field("X(50)");
-    private Field ordePek = new Field("S9(9)");
-    private Field ordernrSt = new Field("S9(9)");
-    private Field vandSt = new Field("S9(9)");
-    private Field wftexBeloppD = new Field("---B---B--9");
-    private Field wftexBeloppSt = new Field("S9(9)");
-    private Field tmp = new Field("X(10000)");
-    private Field tmpFilnamn = new Field("X(200)");
--- a/server.src/prg/pro/P4fxml.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(P4fxml.this);
-    private Field xmlfil2Filnamn = new Field("X(50)");
-    private Field futgId = new Field("X(50)");
-    private Field frevId = new Field("X(50)");
-    private void xmlfilLeftP2() {
-        xmlfilP.set(xmlfilP2);
-        xmlfilLeft();
-        xmlfilP2.set(xmlfilP);
-    }
-
-    private void xmlfilLeftP3() {
-        xmlfilP.set(xmlfilP3);
-        xmlfilLeft();
-        xmlfilP3.set(xmlfilP);
-    }
-
-    private void xmlfilLeftP4() {
-        xmlfilP.set(xmlfilP4);
-        xmlfilLeft();
-        xmlfilP4.set(xmlfilP);
-    }
-
-    private void xmlfilLeftP5() {
-        xmlfilP.set(xmlfilP5);
-        xmlfilLeft();
-        xmlfilP5.set(xmlfilP);
-    }
-
-    private void xmlfilLeftP6() {
-        xmlfilP.set(xmlfilP6);
-        xmlfilLeft();
-        xmlfilP6.set(xmlfilP);
-    }
-
-    private void xmlfilLeftP7() {
-        xmlfilP.set(xmlfilP7);
-        xmlfilLeft();
-        xmlfilP7.set(xmlfilP);
-    }
-
--- a/server.src/prg/pro/P4init.java
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(P4init.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(P4init.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(P4init.this, pa);
-    private lib.pro.Textpost protext=new lib.pro.Textpost(P4init.this, pa);
-    private lib.pro.Calepost procale=new lib.pro.Calepost(P4init.this, pa);
-    private lib.pro.Almapost proalma=new lib.pro.Almapost(P4init.this, pa);
-    private lib.pro.Lexipost prolexi=new lib.pro.Lexipost(P4init.this, pa);
-    private lib.pro.Peripost properi=new lib.pro.Peripost(P4init.this, pa);
-    private lib.pro.Pestpost propest=new lib.pro.Pestpost(P4init.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(P4init.this, pa);
-    private lib.pro.Nattpost pronatt=new lib.pro.Nattpost(P4init.this, pa);
-    private lib.pro.Rapppost prorapp=new lib.pro.Rapppost(P4init.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(P4init.this);
-    private void skapaFil2() {
-        lib.pro.Lexipost.fd lexi=prolexi.get();
-        sparPgm.set(stddata.stdPgm);
-        stddata.stdPgm.set("04INIT");
-        lexi.post.init();
-        lexi.begrepp.set(1);
-        call("prg.bas.visa", pa.paraArea, "H051", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H052", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(2);
-        call("prg.bas.visa", pa.paraArea, "H053", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H054", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(3);
-        call("prg.bas.visa", pa.paraArea, "H055", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H056", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(4);
-        call("prg.bas.visa", pa.paraArea, "H057", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H058", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(5);
-        call("prg.bas.visa", pa.paraArea, "H059", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H060", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(6);
-        call("prg.bas.visa", pa.paraArea, "H061", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H062", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(7);
-        call("prg.bas.visa", pa.paraArea, "H063", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H064", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(8);
-        call("prg.bas.visa", pa.paraArea, "H065", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H066", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(9);
-        call("prg.bas.visa", pa.paraArea, "H067", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H068", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(10);
-        call("prg.bas.visa", pa.paraArea, "H069", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H070", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(11);
-        call("prg.bas.visa", pa.paraArea, "H071", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H072", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(12);
-        call("prg.bas.visa", pa.paraArea, "H073", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H074", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(13);
-        call("prg.bas.visa", pa.paraArea, "H075", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H076", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(14);
-        call("prg.bas.visa", pa.paraArea, "H077", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H078", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(15);
-        call("prg.bas.visa", pa.paraArea, "H079", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H080", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(16);
-        call("prg.bas.visa", pa.paraArea, "H081", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H082", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(17);
-        call("prg.bas.visa", pa.paraArea, "H083", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H084", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(18);
-        call("prg.bas.visa", pa.paraArea, "H085", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H086", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(19);
-        call("prg.bas.visa", pa.paraArea, "H087", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H088", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(20);
-        call("prg.bas.visa", pa.paraArea, "H089", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H140", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(21);
-        call("prg.bas.visa", pa.paraArea, "H141", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H142", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(22);
-        call("prg.bas.visa", pa.paraArea, "H143", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H144", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        lexi.post.init();
-        lexi.begrepp.set(23);
-        call("prg.bas.visa", pa.paraArea, "H145", stddata.stdText);
-        lexi.sprak1[0].set(stddata.stdText);
-        call("prg.bas.visa", pa.paraArea, "H146", stddata.stdText);
-        lexi.sprak2[0].set(stddata.stdText);
-        fil2Post.write(lexi.post);
-        stddata.stdPgm.set(sparPgm);
-    }
-
-    private void prd() {
-    }
-
--- a/server.src/prg/pro/P4io.java
-    private lib.pro.Datab da=new lib.pro.Datab(P4io.this);
-    private Field paRecidR = new Field("999");
-    private Field paActionR = new Field("999");
-    private Field paRecord = new Field("X(30000)");
--- a/server.src/prg/pro/P4iostd.java
-    private lib.pro.Datab da=new lib.pro.Datab(P4iostd.this);
-    private Field paRecidR = new Field("999");
-    private Field paActionR = new Field("999");
-    private Field paRecord = new Field("X(30000)");
--- a/server.src/prg/pro/P4jbr01.java
-    private Field projkatKod = new Field("X(50)");
-    private Field projkatBen = new Field("X(50)");
-    private Field overkundKod = new Field("X(50)");
-    private Field overkundBen = new Field("X(50)");
-    private Field kundBen = new Field("X(50)");
-    private Field slagBen = new Field("X(50)");
-    private Field katKod = new Field("X(50)");
-    private Field katBen = new Field("X(50)");
-    private Field kodBen = new Field("X(50)");
-    private Field z13TknG = new Field("X(10)");
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/P4krea10.java
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z11OpenListaN() {
-        z11Rr.set(50);
-        z11OpenCpi();
-    }
-
-    private void z99Funk() {
-        if (stddata.stdKey.compareTo(400)>=0) {
-            call("prg.bas.toolexec", pa.paraArea, stddata.stdKey);
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-            }
-            else {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-        }
-        else {
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-            }
-            if (stddata.stdKey.equalsEither(81, 83)) {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-            if (stddata.stdKey.equals(8)) {
-                stddata.z99Oldftg.set(pa.bkstvftg);
-                call("prg.bas.byt", pa.paraArea);
-                cancel("prg.bas.byt");
-                if (!(pa.bkstvftg.equals(stddata.z99Oldftg))) {
-                    stddata.z99Newftg.set(pa.bkstvftg);
-                    pa.bkstvftg.set(stddata.z99Oldftg);
-                    pa.recid.set(da.file);
-                    pa.action.set(da.closeAll);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    cancel("prg.pro.p4921");
-                    cancel("prg.pro.p4900");
-                    pa.bkstvftg.set(stddata.z99Newftg);
-                    pa.action.set(da.open);
-                    call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-                    if (!(pa.ok())) {
-                        pa.txtnr.set(908);
-                        z04Meddela();
-                        throw exit;
-                    }
-                }
-                pa.projidG.init();
-                stddata.stdKey.set(7);
-            }
-        }
-    }
-
-    private void z99FunkSc1() {
-        if (stddata.stdKey.compareTo(400)>=0) {
-            call("prg.bas.toolexec", pa.paraArea, stddata.stdKey);
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-                stddata.stdKey.set(ZERO);
-                sc1Funk.set(ZERO);
-            }
-            else {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-        }
-        else {
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-                stddata.stdKey.set(ZERO);
-                sc1Funk.set(ZERO);
-            }
-            if (stddata.stdKey.equalsEither(81, 83)) {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-            if (stddata.stdKey.equals(8)) {
-                stddata.z99Oldftg.set(pa.bkstvftg);
-                call("prg.bas.byt", pa.paraArea);
-                cancel("prg.bas.byt");
-                if (!(pa.bkstvftg.equals(stddata.z99Oldftg))) {
-                    stddata.z99Newftg.set(pa.bkstvftg);
-                    pa.bkstvftg.set(stddata.z99Oldftg);
-                    pa.recid.set(da.file);
-                    pa.action.set(da.closeAll);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    cancel("prg.pro.p4921");
-                    cancel("prg.pro.p4900");
-                    pa.bkstvftg.set(stddata.z99Newftg);
-                    pa.action.set(da.open);
-                    call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-                    if (!(pa.ok())) {
-                        pa.txtnr.set(908);
-                        z04Meddela();
-                        throw exit;
-                    }
-                }
-                pa.projidG.init();
-                stddata.stdKey.set(7);
-            }
-        }
-    }
-
-    private void z99LasTkn() {
-        c_keymap(stddata.saveKeymap);
-        setEnv("KEYSTROKE","Exception=67 kP");
-        if ((stddata.stdKey.compareTo(0)>0 && stddata.stdKey.compareTo(9)<0) || 
-                (stddata.stdKey.compareTo(400)>=0)) {
-            z99Funk();
-        }
-        else {
-            stddata.stdVal.set(ZERO);
-        }
-        c_keymap(stddata.restoreKeymap);
-    }
-
--- a/server.src/prg/pro/P4kredba.java
-    private lib.pro.Nattpost pronatt=new lib.pro.Nattpost(P4kredba.this, pa);
-    private Field fkredEof = new Field("X", "N");
--- a/server.src/prg/pro/P4kredit.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(P4kredit.this);
-    private Field z13TknG = new Field("X(10)");
-    private Field fsortEof = new Field("X", "N");
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/P4kunb.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(P4kunb.this);
-    private lib.pro.Forepost profore=new lib.pro.Forepost(P4kunb.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(P4kunb.this, pa);
--- a/server.src/prg/pro/P4kunmed.java
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(P4kunmed.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(P4kunmed.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(P4kunmed.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(P4kunmed.this);
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
--- a/server.src/prg/pro/P4kunovr.java
-    private lib.pro.Forepost profore=new lib.pro.Forepost(P4kunovr.this, pa);
-    private lib.pro.Stddata stddata=new lib.pro.Stddata(P4kunovr.this);
-    private Field foverEof = new Field("X");
-    private Field fover2Eof = new Field("X");
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/P4pfakt.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(P4pfakt.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(P4pfakt.this);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(P4pfakt.this, pa);
-    private lib.pro.Fradpost profrad=new lib.pro.Fradpost(P4pfakt.this, pa);
-    private lib.pro.Lexipost prolexi=new lib.pro.Lexipost(P4pfakt.this, pa);
-    private Field udFilnamnXl = new Field("X(50)");
-    private Field fvaluta = new Field("XXX");
-    private Field aconto = new Field("S9(9)");
-    private Field wsBruttNett = new Field("X");
-    private Field wsFnivarv = new Field("9");
-    private Field wsFnivink = new Field("9");
-    private Field wsFnivmat = new Field("9");
-    private Field wsIMoms = new Field("S9(9)V99");
-    private Field wsUFfak = new Field("S9(9)");
-    private Field wsUMp = new Field("S9(9)");
-    private Field wsUMoms = new Field("S9(9)V99");
-    private Field blankSidnr = new Field("S9(9)");
-    private Field listaFilnamn = new Field("X(50)");
--- a/server.src/prg/pro/P4pris.java
-    private lib.pro.Forepost profore=new lib.pro.Forepost(P4pris.this, pa);
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
--- a/server.src/prg/pro/P4proj.java
-    private Field medNamnftg = new Field("X(25)");
--- a/server.src/prg/pro/P4sub.java
-    private lib.pro.Forepost profore=new lib.pro.Forepost(P4sub.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(P4sub.this);
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
--- a/server.src/prg/pro/P4uinkt.java
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(P4uinkt.this, pa);
-    private lib.pro.Skripost proskri=new lib.pro.Skripost(P4uinkt.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P4uinkt.this);
-    private Field z13TknG = new Field("X(10)");
-    private Field z16Typ = z16Colkoder.extend("X(4)");
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
-    private void getcolBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("BAK ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAD1");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RUB ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAM ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FUNK");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RA24");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("MEDD");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("LEDT");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMO");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMC");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FONS");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("HALV");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/P4unatt.java
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(P4unatt.this, pa);
-    private lib.pro.Skripost proskri=new lib.pro.Skripost(P4unatt.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P4unatt.this);
-    private Field z13TknG = new Field("X(10)");
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
-    private void getcolBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("BAK ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAD1");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RUB ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAM ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FUNK");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RA24");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("MEDD");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("LEDT");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMO");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMC");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FONS");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("HALV");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/P4utidr.java
-    private lib.pro.Skripost proskri=new lib.pro.Skripost(P4utidr.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P4utidr.this);
-    private Field z13TknG = new Field("X(10)");
-    private Field z16Typ = z16Colkoder.extend("X(4)");
-    private Field ulFilnamn = new Field("X(50)", SPACE);
-    private Field udFilnamnXl = new Field("X(50)", SPACE);
-    private Field udFilnamnW1 = new Field("X(50)", SPACE);
-    private Field udFilnamnW2 = new Field("X(50)", SPACE);
-    private Field udFilnamnW3 = new Field("X(50)", SPACE);
-    private Field udFilnamnW4 = new Field("X(50)", SPACE);
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
-    private void getcolBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("BAK ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAD1");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RUB ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAM ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FUNK");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RA24");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("MEDD");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("LEDT");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMO");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMC");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FONS");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("HALV");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/P4utidw.java
-    private lib.pro.Tidrpost bakProtidr=new lib.pro.Tidrpost(P4utidw.this, pa);
-    private lib.pro.Skripost proskri=new lib.pro.Skripost(P4utidw.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(P4utidw.this);
-    private Field z13TknG = new Field("X(10)");
-    private Field ulFilnamn = new Field("X(50)", SPACE);
-    private Field udFilnamnXl = new Field("X(50)", SPACE);
-    private Field udFilnamnW1 = new Field("X(50)", SPACE);
-    private Field udFilnamnW2 = new Field("X(50)", SPACE);
-    private Field udFilnamnW3 = new Field("X(50)", SPACE);
-    private Field udFilnamnW4 = new Field("X(50)", SPACE);
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
-    private void getcolBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("BAK ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAD1");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RUB ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAM ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FUNK");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RA24");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("MEDD");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("LEDT");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMO");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMC");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FONS");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("HALV");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/P4wfakt.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(P4wfakt.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(P4wfakt.this);
-    private lib.pro.Fradpost profrad=new lib.pro.Fradpost(P4wfakt.this, pa);
-    private lib.pro.Lexipost prolexi=new lib.pro.Lexipost(P4wfakt.this, pa);
-    private lib.pro.Skripost proskri=new lib.pro.Skripost(P4wfakt.this, pa);
-    private Field num = new Field("S9(9)V99");
--- a/server.src/prg/pro/P4wfaktm.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(P4wfaktm.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(P4wfaktm.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(P4wfaktm.this, pa);
-    private Field tmpBkstvftg = new Field("X(4)");
-    private Field tmpPort = new Field("X(12)");
-    private Field tmpAnvid = new Field("X(4)");
--- a/server.src/prg/pro/P4wjust.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(P4wjust.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(P4wjust.this);
-    private lib.pro.Lexipost prolexi=new lib.pro.Lexipost(P4wjust.this, pa);
-    private Field medGrptht = new Field("X(4)");
-    private Field proGrptht = new Field("X(4)");
-    private Field projPek = new Field("S9(9)");
-    private Field projLast = new Field("S9(9)");
-    private Field basvaluta = new Field("XXX");
-    private Field fvaluta = new Field("XXX");
-    private Field momspro = new Field("99V99");
-    private Field momsdec = new Field("X");
-    private Field momskto = new Field("X(6)");
-    private Field momssatskod = new Field("X(4)");
-    private Field totExklMoms = new Field("S9(9)V99");
-    private Field totMomspl = new Field("S9(9)V99");
-    private Field totMoms = new Field("S9(9)V99");
-    private Field totTot = new Field("S9(9)V99");
-    private Field totUExklMoms = new Field("S9(9)V99");
-    private Field totUMomspl = new Field("S9(9)V99");
-    private Field totUMoms = new Field("S9(9)V99");
-    private Field totUTot = new Field("S9(9)V99");
-    private Field projExklMoms = new Field("S9(9)V99");
-    private Field projMomspl = new Field("S9(9)V99");
-    private Field projMoms = new Field("S9(9)V99");
-    private Field projTot = new Field("S9(9)V99");
-    private Field projUExklMoms = new Field("S9(9)V99");
-    private Field projUMomspl = new Field("S9(9)V99");
-    private Field projUMoms = new Field("S9(9)V99");
-    private Field projUTot = new Field("S9(9)V99");
-    private Field projsumExklMoms = new Field("S9(9)V99");
-    private Field projsumMomspl = new Field("S9(9)V99");
-    private Field projsumMoms = new Field("S9(9)V99");
-    private Field projsumTot = new Field("S9(9)V99");
-    private Field projsumUExklMoms = new Field("S9(9)V99");
-    private Field projsumUMomspl = new Field("S9(9)V99");
-    private Field projsumUMoms = new Field("S9(9)V99");
-    private Field projsumUTot = new Field("S9(9)V99");
-    private Field utfak = new Field("S9(9)");
-    private Field utfakForfakt = new Field("S9(9)");
-    private Field infak = new Field("S9(9)");
-    private Field utlager = new Field("S9(9)");
-    private Field inlager = new Field("S9(9)");
-    private Field acontoArv = new Field("S9(9)");
-    private Field acontoInk = new Field("S9(9)");
-    private Field acontoOvr = new Field("S9(9)");
-    private Field acontoTot = new Field("S9(9)");
-    private Field acontoAnt = new Field("S9(9)");
-    private Field fsgKto = new Field("X(6)");
-    private Field fsgKst = new Field("X(6)");
-    private Field kostKto = new Field("X(6)");
-    private Field kostKst = new Field("X(6)");
-    private Field kontKto = new Field("X(6)");
-    private Field kontKst = new Field("X(6)");
-    private Field kontKbr = new Field("X(6)");
-    private Field kontBel = new Field("S9(9)");
-    private Field btDagDagar = new Field("9(6)");
-    private Field hel = new Field("S9(9)");
-    private Field num = new Field("S9(9)V99");
-    private Field belD = new Field("ZZZBZZZBZZZ-");
-    private Field sid = new Field("S9(9)");
-    private Field rad = new Field("S9(9)");
-    private Field wsFaknr = new Field("9(7)");
-    private Field wsFfdat = new Field("9(8)");
--- a/server.src/prg/pro/P4wvand.java
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(P4wvand.this, pa);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(P4wvand.this);
--- a/server.src/prg/pro/Pefows.java
-    private lib.bas.Maxipost basmaxi=new lib.bas.Maxipost(Pefows.this);
-    private Field tmpTecken = new Field("X(100)");
--- a/server.src/prg/pro/Pmiprip.java
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Pmiprip.this);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Pmiprip.this, pa);
-    private Field start2 = new Field("S9(9)");
-    private Field len2 = new Field("S9(9)");
-    private Field amountAntal = new Field("S9(9)");
-    private Field amountPek = new Field("S9(9)");
-    private Field friPek = new Field("S9(9)");
-    private Field xmlOk = new Field("X");
-    private Field xmlP3 = new Field("X(80)");
-    private Field xmlBelD = new Field("--------9.99");
-    private void xmlLeftP1() {
-        xmlP.set(xmlP1);
-        xmlLeft();
-        xmlP1.set(xmlP);
-    }
-
-    private void xmlLeftP2() {
-        xmlP.set(xmlP2);
-        xmlLeft();
-        xmlP2.set(xmlP);
-    }
-
-    private void xmlLeftP3() {
-        xmlP.set(xmlP3);
-        xmlLeft();
-        xmlP3.set(xmlP);
-    }
-
-    private void xmlLeft() {
-        if (!(xmlP.equals(SPACE))) {
-            for (xmlPek.set(1);(!((!(xmlP.ref(xmlPek,1).equals(SPACE)) && !(xmlP.ref(xmlPek,1).equals("0"))) || 
-                            (xmlPek.compareTo(25)>0)));xmlPek.increment(1)) {
-            }
-            xmlTmpRad.set(xmlP.ref(xmlPek));
-            xmlP.set(xmlTmpRad);
-        }
-    }
-
-    private void xmlTalP1() {
-        xmlTal();
-        xmlP1.set(xmlP);
-    }
-
-    private void xmlTalP2() {
-        xmlTal();
-        xmlP2.set(xmlP);
-    }
-
-    private void xmlTalP3() {
-        xmlTal();
-        xmlP3.set(xmlP);
-    }
-
-    private void xmlTal() {
-        xmlBelD.ref(10,1).set(",");
-        if (xmlBelD.ref(11,2).equals("00")) {
-            xmlBelD.ref(10).set(SPACE);
-        }
-        if (xmlBelD.ref(12,1).equals("0")) {
-            xmlBelD.ref(12).set(SPACE);
-        }
-        xmlP.set(xmlBelD.ref(1));
-    }
-
-    private void xmlKonvP3() {
-        xmlP.set(xmlP3);
-        xmlKonv();
-        xmlP3.set(xmlP);
-    }
-
--- a/server.src/prg/pro/Pmiprop.java
-    private lib.pro.Forepost profore=new lib.pro.Forepost(Pmiprop.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Pmiprop.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Pmiprop.this);
-    private Field fsortEof = new Field("X");
-    private Field lnrTid = new Field("9(6)");
-    private Field hel = new Field("S9(9)");
-    private Field bel = new Field("S9(9)V99");
-    private Field bel4D = new Field("--------9.9999");
-    private Field bel4St = new Field("S9(9)");
-    private void tabfilLeftP1() {
-        tabfilP.set(tabfilP1);
-        tabfilLeft();
-        tabfilP1.set(tabfilP);
-    }
-
-    private void tabfilLeftP2() {
-        tabfilP.set(tabfilP2);
-        tabfilLeft();
-        tabfilP2.set(tabfilP);
-    }
-
-    private void tabfilLeftP3() {
-        tabfilP.set(tabfilP3);
-        tabfilLeft();
-        tabfilP3.set(tabfilP);
-    }
-
-    private void tabfilLeftP4() {
-        tabfilP.set(tabfilP4);
-        tabfilLeft();
-        tabfilP4.set(tabfilP);
-    }
-
-    private void tabfilLeftP5() {
-        tabfilP.set(tabfilP5);
-        tabfilLeft();
-        tabfilP5.set(tabfilP);
-    }
-
-    private void tabfilLeftP6() {
-        tabfilP.set(tabfilP6);
-        tabfilLeft();
-        tabfilP6.set(tabfilP);
-    }
-
-    private void tabfilLeftP7() {
-        tabfilP.set(tabfilP7);
-        tabfilLeft();
-        tabfilP7.set(tabfilP);
-    }
-
-    private void tabfilLeftP8() {
-        tabfilP.set(tabfilP8);
-        tabfilLeft();
-        tabfilP8.set(tabfilP);
-    }
-
-    private void tabfilLeftP9() {
-        tabfilP.set(tabfilP9);
-        tabfilLeft();
-        tabfilP9.set(tabfilP);
-    }
-
-    private void tabfilLeftP10() {
-        tabfilP.set(tabfilP10);
-        tabfilLeft();
-        tabfilP10.set(tabfilP);
-    }
-
-    private void tabfilLeft() {
-        if (!(tabfilP.equals(SPACE))) {
-            for (tabfilPek.set(1);(!((!(tabfilP.ref(tabfilPek,1).equals(SPACE)) && !(tabfilP.ref(tabfilPek,1).equals("0"))) || 
-                            (tabfilPek.compareTo(25)>0)));tabfilPek.increment(1)) {
-            }
-            tabfilTmpRad.set(tabfilP.ref(tabfilPek));
-            tabfilP.set(tabfilTmpRad);
-        }
-    }
-
-    private void tabfilTalP5() {
-        tabfilTal();
-        tabfilP5.set(tabfilP);
-    }
-
-    private void tabfilTalP6() {
-        tabfilTal();
-        tabfilP6.set(tabfilP);
-    }
-
-    private void tabfilTalP7() {
-        tabfilTal();
-        tabfilP7.set(tabfilP);
-    }
-
-    private void tabfilTalP8() {
-        tabfilTal();
-        tabfilP8.set(tabfilP);
-    }
-
-    private void tabfilTalP9() {
-        tabfilTal();
-        tabfilP9.set(tabfilP);
-    }
-
-    private void tabfilTalP10() {
-        tabfilTal();
-        tabfilP10.set(tabfilP);
-    }
-
-    private void tabfilTal4P1() {
-        tabfilTal4();
-        tabfilP1.set(tabfilP);
-    }
-
-    private void tabfilTal4P2() {
-        tabfilTal4();
-        tabfilP2.set(tabfilP);
-    }
-
-    private void tabfilTal4P3() {
-        tabfilTal4();
-        tabfilP3.set(tabfilP);
-    }
-
-    private void tabfilTal4() {
-        bel4D.ref(10,1).set(",");
-        if (bel4D.ref(11,4).equals("0000")) {
-            bel4D.ref(10).set(SPACE);
-        }
-        if (bel4D.ref(12,3).equals("000")) {
-            bel4D.ref(12).set(SPACE);
-        }
-        if (bel4D.ref(13,2).equals("00")) {
-            bel4D.ref(13).set(SPACE);
-        }
-        if (bel4D.ref(14,1).equals("0")) {
-            bel4D.ref(14).set(SPACE);
-        }
-        for (bel4St.set(1);(!(!(bel4D.ref(bel4St,1).equals(SPACE))));bel4St.increment(1)) {
-        }
-        tabfilP.set(bel4D.ref(bel4St));
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/Pmiprop2.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Pmiprop2.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Pmiprop2.this);
-    private Field paTidFrom = new Field("9(8)");
-    private Field xmlOk = new Field("X");
-    private Field xmlMessage = new Field("X(100)");
-    private void xmlLeftP1() {
-        xmlP.set(xmlP1);
-        xmlLeft();
-        xmlP1.set(xmlP);
-    }
-
-    private void xmlLeftP2() {
-        xmlP.set(xmlP2);
-        xmlLeft();
-        xmlP2.set(xmlP);
-    }
-
-    private void xmlLeftP3() {
-        xmlP.set(xmlP3);
-        xmlLeft();
-        xmlP3.set(xmlP);
-    }
-
-    private void xmlLeftP4() {
-        xmlP.set(xmlP4);
-        xmlLeft();
-        xmlP4.set(xmlP);
-    }
-
-    private void xmlLeftP5() {
-        xmlP.set(xmlP5);
-        xmlLeft();
-        xmlP5.set(xmlP);
-    }
-
-    private void xmlLeftP6() {
-        xmlP.set(xmlP6);
-        xmlLeft();
-        xmlP6.set(xmlP);
-    }
-
-    private void xmlLeftP7() {
-        xmlP.set(xmlP7);
-        xmlLeft();
-        xmlP7.set(xmlP);
-    }
-
-    private void xmlLeftP8() {
-        xmlP.set(xmlP8);
-        xmlLeft();
-        xmlP8.set(xmlP);
-    }
-
-    private void xmlLeftP9() {
-        xmlP.set(xmlP9);
-        xmlLeft();
-        xmlP9.set(xmlP);
-    }
-
-    private void xmlLeftP10() {
-        xmlP.set(xmlP10);
-        xmlLeft();
-        xmlP10.set(xmlP);
-    }
-
-    private void xmlLeft() {
-        if (!(xmlP.equals(SPACE))) {
-            for (xmlPek.set(1);(!((!xmlP.ref(xmlPek,1).equalsEither(SPACE, "0")) || 
-                            (xmlPek.compareTo(25)>0)));xmlPek.increment(1)) {
-            }
-            xmlTmpRad.set(xmlP.ref(xmlPek));
-            xmlP.set(xmlTmpRad);
-        }
-    }
-
-    private void xmlTalP4() {
-        xmlTal();
-        xmlP4.set(xmlP);
-    }
-
-    private void xmlTalP5() {
-        xmlTal();
-        xmlP5.set(xmlP);
-    }
-
-    private void xmlTalP6() {
-        xmlTal();
-        xmlP6.set(xmlP);
-    }
-
-    private void xmlTalP7() {
-        xmlTal();
-        xmlP7.set(xmlP);
-    }
-
-    private void xmlTalP8() {
-        xmlTal();
-        xmlP8.set(xmlP);
-    }
-
-    private void xmlTalP9() {
-        xmlTal();
-        xmlP9.set(xmlP);
-    }
-
-    private void xmlTalP10() {
-        xmlTal();
-        xmlP10.set(xmlP);
-    }
-
-    private void xmlKonvFrXml() {
-        xmlTmpP.set(SPACE);
-        xmlTmpPPek.set(1);
-        xmlPPek.set(1);
-        while (!(xmlPPek.compareTo(80)>0)) {
-            if (xmlP.ref(xmlPPek,5).equals("&amp;")) {
-                if (xmlTmpPPek.compareTo(100)<=0) {
-                    xmlTmpP.ref(xmlTmpPPek,1).set("&");
-                    xmlTmpPPek.increment(1);
-                }
-                xmlPPek.increment(5);
-            }
-            else if (xmlP.ref(xmlPPek,4).equals("&lt;")) {
-                if (xmlTmpPPek.compareTo(100)<=0) {
-                    xmlTmpP.ref(xmlTmpPPek,1).set("<");
-                    xmlTmpPPek.increment(1);
-                }
-                xmlPPek.increment(4);
-            }
-            else if (xmlP.ref(xmlPPek,4).equals("&gt;")) {
-                if (xmlTmpPPek.compareTo(100)<=0) {
-                    xmlTmpP.ref(xmlTmpPPek,1).set(">");
-                    xmlTmpPPek.increment(1);
-                }
-                xmlPPek.increment(4);
-            }
-            else if (xmlP.ref(xmlPPek,6).equals("&quot;")) {
-                if (xmlTmpPPek.compareTo(100)<=0) {
-                    xmlTmpP.ref(xmlTmpPPek,1).set("\"");
-                    xmlTmpPPek.increment(1);
-                }
-                xmlPPek.increment(6);
-            }
-            else {
-                if (xmlTmpPPek.compareTo(100)<=0) {
-                    xmlTmpP.ref(xmlTmpPPek,1).set(xmlP.ref(xmlPPek,1));
-                    xmlTmpPPek.increment(1);
-                }
-                xmlPPek.increment(1);
-            }
-        }
-        xmlP.set(xmlTmpP);
-    }
-
--- a/server.src/prg/pro/Pmiprot.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Pmiprot.this);
-    private lib.bas.Webpara webpara=new lib.bas.Webpara(Pmiprot.this);
--- a/server.src/prg/pro/Pmiprows.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Pmiprows.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Pmiprows.this);
-    private lib.bas.Maxipost basmaxi=new lib.bas.Maxipost(Pmiprows.this);
-    private lib.gem.Favopost gemfavo=new lib.gem.Favopost(Pmiprows.this, pa);
-    private lib.pro.Forepost profore=new lib.pro.Forepost(Pmiprows.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Pmiprows.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Pmiprows.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Pmiprows.this);
--- a/server.src/prg/pro/Projstop.java
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Projstop.this, pa);
-    private lib.pro.Faanpost profaan=new lib.pro.Faanpost(Projstop.this, pa);
-    private Field z13TknG = new Field("X(10)");
--- a/server.src/prg/pro/Shadxml.java
-    private Field svarfilP1 = new Field("X(80)");
-    private Field svarfilP2 = new Field("X(80)");
-    private Field svarfilP3 = new Field("X(80)");
-    private Field svarfilP4 = new Field("X(80)");
-    private Field svarfilP5 = new Field("X(80)");
-    private Field svarfilP6 = new Field("X(80)");
-    private Field svarfilP = new Field("X(100)");
-    private Field svarfilPPek = new Field("S9(9)");
-    private Field svarfilTmpP = new Field("X(100)");
-    private Field svarfilTmpPPek = new Field("S9(9)");
-    private Field xmlRad = new Field("X(512)");
-    private Field xmlPek = new Field("S9(9)");
-    private Field xmlTmpRad = new Field("X(512)");
-    private Field xmlTmpPek = new Field("S9(9)");
-    private Field xmlAmp = new Field("S9(9)");
-    private Field xmlP1 = new Field("X(80)");
-    private Field xmlP2 = new Field("X(80)");
-    private Field xmlP3 = new Field("X(80)");
-    private Field xmlP = new Field("X(100)");
-    private Field xmlPPek = new Field("S9(9)");
-    private Field xmlTmpP = new Field("X(100)");
-    private Field xmlTmpPPek = new Field("S9(9)");
-    private Field xmlBelD = new Field("--------9.99");
-    private Field stringStart = new Field("S9(9)");
-    private Field stringEnd = new Field("S9(9)");
-    private Field stringLen = new Field("S9(9)");
-    private Field stringData = new Field("X(200)");
-    private Field fieldPek = new Field("S9(9)");
-    private Field fieldPekSt = new Field("S9(9)");
-    private Field fieldHel = new Field("S9(9)");
-    private void xmlLeftP1() {
-        xmlP.set(xmlP1);
-        xmlLeft();
-        xmlP1.set(xmlP);
-    }
-
-    private void xmlLeftP2() {
-        xmlP.set(xmlP2);
-        xmlLeft();
-        xmlP2.set(xmlP);
-    }
-
-    private void xmlLeftP3() {
-        xmlP.set(xmlP3);
-        xmlLeft();
-        xmlP3.set(xmlP);
-    }
-
-    private void xmlLeft() {
-        if (!(xmlP.equals(SPACE))) {
-            for (xmlPek.set(1);(!((!(xmlP.ref(xmlPek,1).equals(SPACE)) && !(xmlP.ref(xmlPek,1).equals("0"))) || 
-                            (xmlPek.compareTo(25)>0)));xmlPek.increment(1)) {
-            }
-            xmlTmpRad.set(xmlP.ref(xmlPek));
-            xmlP.set(xmlTmpRad);
-        }
-    }
-
-    private void xmlWrite() {
-        xmlAmp.set(ZERO);
-        xmlAmp.increment(xmlRad.count("&"));
-        if (xmlAmp.compareTo(ZERO)>0) {
-            xmlTmpRad.set(SPACE);
-            xmlTmpPek.set(1);
-            xmlPek.set(1);
-            while (!(xmlPek.compareTo(512)>0)) {
-                if (xmlRad.ref(xmlPek,1).equals("&") && xmlPek.compareTo(500)<0) {
-                    if (xmlRad.ref(xmlPek,9).equals("&xmlquot;")) {
-                        if (xmlTmpPek.compareTo(512)<=0) {
-                            xmlTmpRad.ref(xmlTmpPek,1).set("\"");
-                            xmlTmpPek.increment(1);
-                        }
-                        xmlPek.increment(9);
-                    }
-                    else {
-                        if (xmlTmpPek.compareTo(512)<=0) {
-                            xmlTmpRad.ref(xmlTmpPek,1).set(xmlRad.ref(xmlPek,1));
-                            xmlTmpPek.increment(1);
-                        }
-                        xmlPek.increment(1);
-                    }
-                }
-                else {
-                    if (xmlTmpPek.compareTo(512)<=0) {
-                        xmlTmpRad.ref(xmlTmpPek,1).set(xmlRad.ref(xmlPek,1));
-                        xmlTmpPek.increment(1);
-                    }
-                    xmlPek.increment(1);
-                }
-            }
-            xmlRad.set(xmlTmpRad);
-        }
-        display("UPONSYSOUT",xmlRad,"\n");
-    }
-
-    private void xmlTalP1() {
-        xmlTal();
-        xmlP1.set(xmlP);
-    }
-
-    private void xmlTalP2() {
-        xmlTal();
-        xmlP2.set(xmlP);
-    }
-
-    private void xmlTalP3() {
-        xmlTal();
-        xmlP3.set(xmlP);
-    }
-
-    private void xmlTal() {
-        xmlBelD.ref(10,1).set(",");
-        if (xmlBelD.ref(11,2).equals("00")) {
-            xmlBelD.ref(10).set(SPACE);
-        }
-        if (xmlBelD.ref(12,1).equals("0")) {
-            xmlBelD.ref(12).set(SPACE);
-        }
-        xmlP.set(xmlBelD.ref(1));
-    }
-
-    private void xmlKonvP1() {
-        xmlP.set(xmlP1);
-        xmlKonv();
-        xmlP1.set(xmlP);
-    }
-
-    private void xmlKonvP2() {
-        xmlP.set(xmlP2);
-        xmlKonv();
-        xmlP2.set(xmlP);
-    }
-
-    private void xmlKonvP3() {
-        xmlP.set(xmlP3);
-        xmlKonv();
-        xmlP3.set(xmlP);
-    }
-
-    private void xmlKonv() {
-        xmlTmpP.set(SPACE);
-        xmlTmpPPek.set(1);
-        xmlPPek.set(1);
-        while (!(xmlPPek.compareTo(80)>0)) {
-            switch (xmlP.ref(xmlPPek,1).getStringValue()) {
-                case "&":
-                    if (xmlTmpPPek.compareTo(96)<=0) {
-                        xmlTmpP.ref(xmlTmpPPek,5).set("&amp;");
-                        xmlTmpPPek.increment(5);
-                    }
-                    break;
-                case "<":
-                    if (xmlTmpPPek.compareTo(97)<=0) {
-                        xmlTmpP.ref(xmlTmpPPek,4).set("&lt;");
-                        xmlTmpPPek.increment(4);
-                    }
-                    break;
-                case ">":
-                    if (xmlTmpPPek.compareTo(97)<=0) {
-                        xmlTmpP.ref(xmlTmpPPek,4).set("&gt;");
-                        xmlTmpPPek.increment(4);
-                    }
-                    break;
-                case "\"":
-                    if (xmlTmpPPek.compareTo(95)<=0) {
-                        xmlTmpP.ref(xmlTmpPPek,6).set("&quot;");
-                        xmlTmpPPek.increment(6);
-                    }
-                    break;
-                default:
-                    if (xmlTmpPPek.compareTo(100)<=0) {
-                        xmlTmpP.ref(xmlTmpPPek,1).set(xmlP.ref(xmlPPek,1));
-                        xmlTmpPPek.increment(1);
-                    }
-            }
-            xmlPPek.increment(1);
-        }
-        xmlP.set(xmlTmpP);
-    }
-
-    private void xmlKonvFrXml() {
-        xmlTmpP.set(SPACE);
-        xmlTmpPPek.set(1);
-        xmlPPek.set(1);
-        while (!(xmlPPek.compareTo(80)>0)) {
-            if (xmlP.ref(xmlPPek,5).equals("&amp;")) {
-                if (xmlTmpPPek.compareTo(100)<=0) {
-                    xmlTmpP.ref(xmlTmpPPek,1).set("&");
-                    xmlTmpPPek.increment(1);
-                }
-                xmlPPek.increment(5);
-            }
-            else if (xmlP.ref(xmlPPek,4).equals("&lt;")) {
-                if (xmlTmpPPek.compareTo(100)<=0) {
-                    xmlTmpP.ref(xmlTmpPPek,1).set("<");
-                    xmlTmpPPek.increment(1);
-                }
-                xmlPPek.increment(4);
-            }
-            else if (xmlP.ref(xmlPPek,4).equals("&gt;")) {
-                if (xmlTmpPPek.compareTo(100)<=0) {
-                    xmlTmpP.ref(xmlTmpPPek,1).set(">");
-                    xmlTmpPPek.increment(1);
-                }
-                xmlPPek.increment(4);
-            }
-            else if (xmlP.ref(xmlPPek,6).equals("&quot;")) {
-                if (xmlTmpPPek.compareTo(100)<=0) {
-                    xmlTmpP.ref(xmlTmpPPek,1).set("\"");
-                    xmlTmpPPek.increment(1);
-                }
-                xmlPPek.increment(6);
-            }
-            else {
-                if (xmlTmpPPek.compareTo(100)<=0) {
-                    xmlTmpP.ref(xmlTmpPPek,1).set(xmlP.ref(xmlPPek,1));
-                    xmlTmpPPek.increment(1);
-                }
-                xmlPPek.increment(1);
-            }
-        }
-        xmlP.set(xmlTmpP);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/Skapaproj.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Skapaproj.this);
-    private void blankaKtkpers() {
-        lib.pro.Projpost.fd proj=proproj.get();
-        proj.post.init();
-        call("prg.pro.p4io", pa.paraArea, da.proj, da.startEg, proj.post);
-        if (pa.ok()) {
-            call("prg.pro.p4io", pa.paraArea, da.proj, da.readnext, prorecarea.recArea);
-        }
-        if (pa.ok()) {
-            call("prg.pro.p4io", pa.paraArea, da.proj, da.readnext, prorecarea.recArea);
-        }
-        proj.post.set(prorecarea.recArea);
-        while (pa.ok()) {
-            if (proj.projlnr.equals(5000)) {
-                proj.ktkpers.set(SPACE);
-                call("prg.pro.p4io", pa.paraArea, da.proj, da.rewrite, proj.post);
-            }
-            call("prg.pro.p4io", pa.paraArea, da.proj, da.readnext, prorecarea.recArea);
-            proj.post.set(prorecarea.recArea);
-        }
-    }
-
-    private void sattUpplagd() {
-        lib.pro.Projpost.fd proj=proproj.get();
-        proj.post.init();
-        call("prg.pro.p4io", pa.paraArea, da.proj, da.startEg, proj.post);
-        if (pa.ok()) {
-            call("prg.pro.p4io", pa.paraArea, da.proj, da.readnext, prorecarea.recArea);
-        }
-        if (pa.ok()) {
-            call("prg.pro.p4io", pa.paraArea, da.proj, da.readnext, prorecarea.recArea);
-        }
-        proj.post.set(prorecarea.recArea);
-        while (pa.ok()) {
-            if (proj.projlnr.equals(5000) && proj.upplagd.compareTo(ZERO)<=0) {
-                proj.upplagd.set(new Constant("20161020"));
-                call("prg.pro.p4io", pa.paraArea, da.proj, da.rewrite, proj.post);
-            }
-            call("prg.pro.p4io", pa.paraArea, da.proj, da.readnext, prorecarea.recArea);
-            proj.post.set(prorecarea.recArea);
-        }
-    }
-
--- a/server.src/prg/pro/Stenxml.java
-    private lib.pro.Textpost protext=new lib.pro.Textpost(Stenxml.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Stenxml.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Stenxml.this, pa);
-    private lib.pro.Avtppost proavtp=new lib.pro.Avtppost(Stenxml.this, pa);
-    private Field projNy = new Field("X");
-    private Field textNy = new Field("X");
-    private Field hours = new Field("S9(9)V99");
-    private Field hoursD = new Field("X(100)");
-    private Field statuskod = new Field("X(50)");
-    private Field lastKund = new Field("X(4)");
-    private Field jobCategoryPek = new Field("S9(9)");
-    private Field specialInvoiceTextPek = new Field("S9(9)");
-    private Field xmlP2 = new Field("X(200)");
-    private Field xmlP3 = new Field("X(200)");
-    private Field xmlP4 = new Field("X(200)");
-    private Field xmlP5 = new Field("X(200)");
-    private Field xmlP6 = new Field("X(200)");
-    private Field xmlP7 = new Field("X(200)");
-    private Field xmlP8 = new Field("X(200)");
-    private Field xmlP9 = new Field("X(200)");
-    private Field xmlBel = new Field("S9(9)V99");
-    private void doProjectlistGet() {
-        lib.bas.Ftgspost.fd ftgs=basftgs.get();
-        lib.pro.Projpost.fd proj=proproj.get();
-        lib.pro.Kundpost.fd kund=prokund.get();
-        xmlFel.set(SPACE);
-        if (xmlFel.equals(SPACE)) {
-            ftgs.f9904OpenIO();
-            ftgs.fokod.set(xmlCompanyId);
-            ftgs.f9904Read();
-            if (ftgs.f9904Eof.equals("J") || !(ftgs.fomoduler.ref(4,1).equals("J"))) {
-                xmlFel.set("Angivet företag saknas eller har ej projektredovisning aktiverat!");
-            }
-            ftgs.f9904Close();
-        }
-        pa.bkstvftg.set(xmlCompanyId);
-        xmlRad.set("<?xml version=&xmlquot;1.0&xmlquot; encoding=&xmlquot;ISO-8859-1&xmlquot; ?>");
-        xmlWrite();
-        xmlRad.set("<marathon type=&xmlquot;projectlist_get_response&xmlquot;>");
-        xmlWrite();
-        if (!(xmlFel.equals(SPACE))) {
-            xmlRad.set("  <status>ERROR</status>");
-            xmlWrite();
-            xmlP1.set(xmlFel);
-            xmlKonvP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <errormessage>",limit(xmlP1,"          "),"</errormessage>"));
-            xmlWrite();
-        }
-        else {
-            xmlRad.set("  <status>OK</status>");
-            xmlWrite();
-            lastKund.set(SPACE);
-            proj.projidG.init();
-            call("prg.pro.p4io", pa.paraArea, da.proj, da.startEg, proj.post);
-            if (pa.ok()) {
-                call("prg.pro.p4io", pa.paraArea, da.proj, da.readnext, proj.post);
-            }
-            while (pa.ok()) {
-                if (proj.projidG.equals("00000000")) {
-                }
-                else if (proj.projlnr.equals(ZERO)) {
-                    kund.post.set(proj.post);
-                }
-                else {
-                    if (proj.projstat.equalsEither(8, 9)) {
-                        statuskod.set("false");
-                    }
-                    else {
-                        statuskod.set("true");
-                    }
-                    if ((xmlClientId.equalsEither(SPACE, "#saknas", proj.kundid)) && 
-                            (xmlStatus.equalsEither(SPACE, "#saknas", statuskod)) && 
-                            (xmlJobCategory[0].equalsEither(SPACE, "#saknas", proj.arbtyp1, proj.arbtyp2, proj.arbtyp3)) && 
-                            (xmlProjectLeader.equalsEither(SPACE, "#saknas", proj.projans)) && 
-                            (xmlFromDate.equalsEither(SPACE, "#saknas", proj.upplagd)) && 
-                            (xmlToDate.equalsEither(SPACE, "#saknas", proj.upplagd))) {
-                        if (!(lastKund.equals(proj.kundid))) {
-                            xmlP1.set(kund.kundid);
-                            xmlKonvP1();
-                            xmlP2.set(kund.namnkun);
-                            xmlKonvP2();
-                            xmlP3.set(statuskod);
-                            xmlKonvP3();
-                            xmlRad.set(SPACE);
-                            xmlRad.set(concat("  <client id=&xmlquot;",limit(xmlP1,"          "),"&xmlquot; name=&xmlquot;",limit(xmlP2,"          "),"&xmlquot; active=&xmlquot;",limit(xmlP3,"          "),"&xmlquot;/>"));
-                            xmlWrite();
-                            lastKund.set(proj.kundid);
-                        }
-                        xmlP1.set(proj.projidG);
-                        xmlKonvP1();
-                        xmlP2.set(proj.projben);
-                        xmlKonvP2();
-                        xmlP3.set(statuskod);
-                        xmlKonvP3();
-                        xmlP4.set(proj.kundid);
-                        xmlKonvP4();
-                        xmlP5.set(proj.arbtyp1);
-                        xmlKonvP5();
-                        xmlP6.set(proj.arbtyp2);
-                        xmlKonvP6();
-                        xmlP7.set(proj.arbtyp3);
-                        xmlKonvP7();
-                        xmlP8.set(proj.projans);
-                        xmlKonvP8();
-                        xmlP9.set(proj.upplagd.ref(1,4));
-                        xmlP9.ref(5,1).set("-");
-                        xmlP9.ref(6,2).set(proj.upplagd.ref(5,2));
-                        xmlP9.ref(8,1).set("-");
-                        xmlP9.ref(9,2).set(proj.upplagd.ref(7,2));
-                        xmlKonvP9();
-                        xmlRad.set(SPACE);
-                        xmlRad.set(concat("  <project id=&xmlquot;",limit(xmlP1,"          "),"&xmlquot; name=&xmlquot;",limit(xmlP2,"          "),"&xmlquot; active=&xmlquot;",limit(xmlP3,"          "),"&xmlquot; client_id=&xmlquot;",limit(xmlP4,"          "),"&xmlquot; job_category_1=&xmlquot;",limit(xmlP5,"          "),"&xmlquot; job_category_2=&xmlquot;",limit(xmlP6,"          "),"&xmlquot; job_category_3=&xmlquot;",limit(xmlP7,"          "),"&xmlquot; project_leader=&xmlquot;",limit(xmlP8,"          "),"&xmlquot; creation_date=&xmlquot;",limit(xmlP9,"          "),"&xmlquot;/>"));
-                        xmlWrite();
-                    }
-                }
-                call("prg.pro.p4io", pa.paraArea, da.proj, da.readnext, proj.post);
-            }
-        }
-        xmlRad.set("</marathon>");
-        xmlWrite();
-    }
-
-    private void doProjectGet() {
-        lib.bas.Ftgspost.fd ftgs=basftgs.get();
-        lib.pro.Projpost.fd proj=proproj.get();
-        lib.pro.Kundpost.fd kund=prokund.get();
-        lib.pro.Textpost.fd text=protext.get();
-        lib.pro.Faktpost.fd fakt=profakt.get();
-        lib.pro.Inktpost.fd inkt=proinkt.get();
-        xmlFel.set(SPACE);
-        if (xmlFel.equals(SPACE)) {
-            ftgs.f9904OpenIO();
-            ftgs.fokod.set(xmlCompanyId);
-            ftgs.f9904Read();
-            if (ftgs.f9904Eof.equals("J") || !(ftgs.fomoduler.ref(4,1).equals("J"))) {
-                xmlFel.set("Angivet företag saknas eller har ej projektredovisning aktiverat!");
-            }
-            ftgs.f9904Close();
-        }
-        pa.bkstvftg.set(xmlCompanyId);
-        if (xmlFel.equals(SPACE)) {
-            proj.projidG.set(xmlProjectId);
-            call("prg.pro.p4io", pa.paraArea, da.proj, da.read, proj.post);
-            if (!(pa.ok())) {
-                xmlFel.set("Projekt saknas!");
-            }
-        }
-        xmlRad.set("<?xml version=&xmlquot;1.0&xmlquot; encoding=&xmlquot;ISO-8859-1&xmlquot; ?>");
-        xmlWrite();
-        xmlRad.set("<marathon type=&xmlquot;project_get_response&xmlquot;>");
-        xmlWrite();
-        if (!(xmlFel.equals(SPACE))) {
-            xmlRad.set("  <status>ERROR</status>");
-            xmlWrite();
-            xmlP1.set(xmlFel);
-            xmlKonvP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <errormessage>",limit(xmlP1,"          "),"</errormessage>"));
-            xmlWrite();
-        }
-        else {
-            kund.kundid.set(proj.kundid);
-            kund.noll.set(ZERO);
-            call("prg.pro.p4io", pa.paraArea, da.kund, da.read, kund.post);
-            text.texttyp.set("S");
-            text.projidG.set(proj.projidG);
-            call("prg.pro.p4io", pa.paraArea, da.text, da.read, text.post);
-            if (!(pa.ok())) {
-                text.post.init();
-            }
-            xmlRad.set("  <status>OK</status>");
-            xmlWrite();
-            xmlP1.set(xmlCompanyId);
-            xmlKonvP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <company_id>",limit(xmlP1,"          "),"</company_id>"));
-            xmlWrite();
-            xmlP1.set(xmlProjectId);
-            xmlKonvP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <project_id>",limit(xmlP1,"          "),"</project_id>"));
-            xmlWrite();
-            xmlP1.set(proj.projben);
-            xmlKonvP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <project_name>",limit(xmlP1,"          "),"</project_name>"));
-            xmlWrite();
-            xmlP1.set(proj.kundid);
-            xmlKonvP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <client_id>",limit(xmlP1,"          "),"</client_id>"));
-            xmlWrite();
-            xmlP1.set(kund.namnkun);
-            xmlKonvP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <client_name>",limit(xmlP1,"          "),"</client_name>"));
-            xmlWrite();
-            xmlP1.set(proj.projans);
-            xmlKonvP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <project_leader>",limit(xmlP1,"          "),"</project_leader>"));
-            xmlWrite();
-            xmlP1.set(proj.arbtyp1);
-            xmlKonvP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <job_category>",limit(xmlP1,"          "),"</job_category>"));
-            xmlWrite();
-            xmlP1.set(proj.arbtyp2);
-            xmlKonvP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <job_category>",limit(xmlP1,"          "),"</job_category>"));
-            xmlWrite();
-            xmlP1.set(proj.arbtyp3);
-            xmlKonvP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <job_category>",limit(xmlP1,"          "),"</job_category>"));
-            xmlWrite();
-            xmlP1.set(proj.projtyp);
-            xmlKonvP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <project_type>",limit(xmlP1,"          "),"</project_type>"));
-            xmlWrite();
-            xmlP1.set(text.text1);
-            xmlKonvP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <special_invoice_text>",limit(xmlP1,"          "),"</special_invoice_text>"));
-            xmlWrite();
-            xmlP1.set(text.text2);
-            xmlKonvP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <special_invoice_text>",limit(xmlP1,"          "),"</special_invoice_text>"));
-            xmlWrite();
-            xmlP1.set(text.text3);
-            xmlKonvP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <special_invoice_text>",limit(xmlP1,"          "),"</special_invoice_text>"));
-            xmlWrite();
-            xmlP1.set(text.text4);
-            xmlKonvP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <special_invoice_text>",limit(xmlP1,"          "),"</special_invoice_text>"));
-            xmlWrite();
-            xmlP1.set(text.text5);
-            xmlKonvP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <special_invoice_text>",limit(xmlP1,"          "),"</special_invoice_text>"));
-            xmlWrite();
-            xmlBelD.set(proj.fxprarv);
-            xmlTalP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <fixed_price_fee>",limit(xmlP1,"          "),"</fixed_price_fee>"));
-            xmlWrite();
-            xmlBelD.set(proj.fxprink);
-            xmlTalP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <fixed_price_purchase>",limit(xmlP1,"          "),"</fixed_price_purchase>"));
-            xmlWrite();
-            xmlBelD.set(proj.fxprmat);
-            xmlTalP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <fixed_price_other>",limit(xmlP1,"          "),"</fixed_price_other>"));
-            xmlWrite();
-            xmlBel.set(proj.fxprarv.add(proj.fxprink).add(proj.fxprmat), ROUND_HALF_UP);
-            xmlBelD.set(xmlBel);
-            xmlTalP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <fixed_price_total>",limit(xmlP1,"          "),"</fixed_price_total>"));
-            xmlWrite();
-            xmlP1.set(proj.ktkpers);
-            xmlKonvP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <contact>",limit(xmlP1,"          "),"</contact>"));
-            xmlWrite();
-            fakt.key.init();
-            fakt.projidG.set(xmlProjectId);
-            call("prg.pro.p4io", pa.paraArea, da.fakt, da.startEg, fakt.post);
-            if (pa.ok()) {
-                call("prg.pro.p4io", pa.paraArea, da.fakt, da.readnext, fakt.post);
-            }
-            while (!(!(pa.ok()) || !(fakt.projidG.equals(xmlProjectId)))) {
-                xmlRad.set("  <invoice>");
-                xmlWrite();
-                xmlBelD.set(fakt.faknr);
-                xmlTalP1();
-                xmlRad.set(SPACE);
-                xmlRad.set(concat("    <number>",limit(xmlP1,"          "),"</number>"));
-                xmlWrite();
-                xmlP1.set(fakt.fakdat.ref(1,4));
-                xmlP1.ref(5,1).set("-");
-                xmlP1.ref(6,2).set(fakt.fakdat.ref(5,2));
-                xmlP1.ref(8,1).set("-");
-                xmlP1.ref(9,2).set(fakt.fakdat.ref(7,2));
-                xmlKonvP1();
-                xmlRad.set(SPACE);
-                xmlRad.set(concat("    <date>",limit(xmlP1,"          "),"</date>"));
-                xmlWrite();
-                xmlBelD.set(fakt.fakarv);
-                xmlTalP1();
-                xmlRad.set(SPACE);
-                xmlRad.set(concat("    <fee>",limit(xmlP1,"          "),"</fee>"));
-                xmlWrite();
-                xmlBelD.set(fakt.fakink);
-                xmlTalP1();
-                xmlRad.set(SPACE);
-                xmlRad.set(concat("    <purchase>",limit(xmlP1,"          "),"</purchase>"));
-                xmlWrite();
-                xmlBelD.set(fakt.fakmat);
-                xmlTalP1();
-                xmlRad.set(SPACE);
-                xmlRad.set(concat("    <other>",limit(xmlP1,"          "),"</other>"));
-                xmlWrite();
-                xmlBelD.set(fakt.fakaco);
-                xmlTalP1();
-                xmlRad.set(SPACE);
-                xmlRad.set(concat("    <prepaid>",limit(xmlP1,"          "),"</prepaid>"));
-                xmlWrite();
-                xmlBel.set(fakt.fakarv.add(fakt.fakink).add(fakt.fakmat).add(fakt.fakaco), ROUND_HALF_UP);
-                xmlBelD.set(xmlBel);
-                xmlTalP1();
-                xmlRad.set(SPACE);
-                xmlRad.set(concat("    <sum_excl_vat>",limit(xmlP1,"          "),"</sum_excl_vat>"));
-                xmlWrite();
-                xmlBelD.set(fakt.fakmoms);
-                xmlTalP1();
-                xmlRad.set(SPACE);
-                xmlRad.set(concat("    <vat>",limit(xmlP1,"          "),"</vat>"));
-                xmlWrite();
-                xmlBel.set(fakt.fakarv.add(fakt.fakink).add(fakt.fakmat).add(fakt.fakaco).add(fakt.fakmoms), ROUND_HALF_UP);
-                xmlBelD.set(xmlBel);
-                xmlTalP1();
-                xmlRad.set(SPACE);
-                xmlRad.set(concat("    <sum_incl_vat>",limit(xmlP1,"          "),"</sum_incl_vat>"));
-                xmlWrite();
-                xmlRad.set("  </invoice>");
-                xmlWrite();
-                call("prg.pro.p4io", pa.paraArea, da.fakt, da.readnext, fakt.post);
-            }
-            inkt.key.init();
-            inkt.trantyp1.set("J");
-            inkt.projidG.set(xmlProjectId);
-            call("prg.pro.p4io", pa.paraArea, da.inkt, da.startEg, inkt.post);
-            if (pa.ok()) {
-                call("prg.pro.p4io", pa.paraArea, da.inkt, da.readnext, inkt.post);
-            }
-            while (!(!(pa.ok()) || !(inkt.projidG.equals(xmlProjectId)))) {
-                xmlRad.set("  <purchase>");
-                xmlWrite();
-                xmlP1.set(inkt.datink.ref(1,4));
-                xmlP1.ref(5,1).set("-");
-                xmlP1.ref(6,2).set(inkt.datink.ref(5,2));
-                xmlP1.ref(8,1).set("-");
-                xmlP1.ref(9,2).set(inkt.datink.ref(7,2));
-                xmlKonvP1();
-                xmlRad.set(SPACE);
-                xmlRad.set(concat("    <date>",limit(xmlP1,"          "),"</date>"));
-                xmlWrite();
-                xmlBelD.set(inkt.antal);
-                xmlTalP1();
-                xmlRad.set(SPACE);
-                xmlRad.set(concat("    <quantity>",limit(xmlP1,"          "),"</quantity>"));
-                xmlWrite();
-                xmlBelD.set(inkt.prisink);
-                xmlTalP1();
-                xmlRad.set(SPACE);
-                xmlRad.set(concat("    <purchase_price>",limit(xmlP1,"          "),"</purchase_price>"));
-                xmlWrite();
-                xmlBelD.set(inkt.palgpro);
-                xmlTalP1();
-                xmlRad.set(SPACE);
-                xmlRad.set(concat("    <markup>",limit(xmlP1,"          "),"</markup>"));
-                xmlWrite();
-                xmlBelD.set(inkt.utpris);
-                xmlTalP1();
-                xmlRad.set(SPACE);
-                xmlRad.set(concat("    <actual>",limit(xmlP1,"          "),"</actual>"));
-                xmlWrite();
-                xmlBelD.set(inkt.beljust);
-                xmlTalP1();
-                xmlRad.set(SPACE);
-                xmlRad.set(concat("    <adjusted>",limit(xmlP1,"          "),"</adjusted>"));
-                xmlWrite();
-                xmlBelD.set(inkt.belfak);
-                xmlTalP1();
-                xmlRad.set(SPACE);
-                xmlRad.set(concat("    <invoiced>",limit(xmlP1,"          "),"</invoiced>"));
-                xmlWrite();
-                xmlBel.set(inkt.utpris.add(inkt.beljust).subtract(inkt.belfak), ROUND_HALF_UP);
-                xmlBelD.set(xmlBel);
-                xmlTalP1();
-                xmlRad.set(SPACE);
-                xmlRad.set(concat("    <WIP>",limit(xmlP1,"          "),"</WIP>"));
-                xmlWrite();
-                xmlRad.set("  </purchase>");
-                xmlWrite();
-                call("prg.pro.p4io", pa.paraArea, da.inkt, da.readnext, inkt.post);
-            }
-        }
-        xmlRad.set("</marathon>");
-        xmlWrite();
-    }
-
-    private void doProjectPut() {
-        lib.bas.Ftgspost.fd ftgs=basftgs.get();
-        lib.pro.Kundpost.fd kund=prokund.get();
-        lib.pro.Projpost.fd proj=proproj.get();
-        lib.pro.Medapost.fd meda=promeda.get();
-        lib.pro.Defkpost.fd defk=prodefk.get();
-        lib.pro.Avtppost.fd avtp=proavtp.get();
-        lib.pro.Textpost.fd text=protext.get();
-        xmlFel.set(SPACE);
-        if (xmlFel.equals(SPACE)) {
-            ftgs.f9904OpenIO();
-            ftgs.fokod.set(xmlCompanyId);
-            ftgs.f9904Read();
-            if (ftgs.f9904Eof.equals("J") || !(ftgs.fomoduler.ref(4,1).equals("J"))) {
-                xmlFel.set("Angivet företag saknas eller har ej projektredovisning aktiverat!");
-            }
-            ftgs.f9904Close();
-        }
-        pa.bkstvftg.set(xmlCompanyId);
-        if (xmlFel.equals(SPACE)) {
-            kund.kundid.set(xmlProjectId.ref(1,4));
-            kund.noll.set(ZERO);
-            call("prg.pro.p4io", pa.paraArea, da.kund, da.read, kund.post);
-            if (!(pa.ok())) {
-                xmlFel.set("Kund saknas!");
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            proj.projidG.set(xmlProjectId);
-            call("prg.pro.p4io", pa.paraArea, da.proj, da.read, proj.post);
-            if (!(pa.ok())) {
-                projNy.set("J");
-                if (xmlFel.equals(SPACE)) {
-                    if ((xmlProjectType.equalsEither("#saknas", SPACE)) && 
-                            (kund.projtyp.equals(SPACE))) {
-                        xmlFel.set("Projekttyp saknas på kunden och måste därför anges i indatat!");
-                    }
-                    else if ((xmlJobCategory[0].equalsEither("#saknas", SPACE)) && 
-                            (kund.arbtyp1.equals(SPACE))) {
-                        xmlFel.set("Arbetstyp saknas på kunden och måste därför anges i indatat!");
-                    }
-                }
-            }
-            else {
-                projNy.set("N");
-                if (xmlFel.equals(SPACE)) {
-                    if (!xmlProjectType.equalsEither("#saknas", proj.projtyp)) {
-                        xmlFel.set("Projekttyp får ej bytas!");
-                    }
-                }
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            if (!(xmlProjectLeader.equals("#saknas"))) {
-                meda.medaridG.init();
-                meda.medarid.set(xmlProjectLeader);
-                call("prg.pro.p4io", pa.paraArea, da.meda, da.read, meda.post);
-                if (!(pa.ok())) {
-                    xmlFel.set("Projektledare saknas!");
-                }
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            if (xmlJobCategoryAntal.compareTo(3)>0) {
-                xmlFel.set("Max tre arbetstyper får anges!");
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            for (jobCategoryPek.set(1);(!(jobCategoryPek.compareTo(3)>0));jobCategoryPek.increment(1)) {
-                if (!(xmlJobCategory[jobCategoryPek.getInt()-1].equals("#saknas"))) {
-                    defk.key.set(SPACE);
-                    defk.typkk.set("T");
-                    defk.arbtyp.set(xmlJobCategory[jobCategoryPek.getInt()-1]);
-                    call("prg.pro.p4io", pa.paraArea, da.defk, da.read, defk.post);
-                    if (!(pa.ok())) {
-                        xmlFel.set("Arbetstyp saknas!");
-                    }
-                }
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            if (!xmlProjectType.equalsEither("#saknas", "E", "G", "I", "J", "9")) {
-                xmlFel.set("Otillåten projekttyp!");
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            if (xmlSpecialInvoiceTextAntal.compareTo(5)>0) {
-                xmlFel.set("Max fem rader med fakturatext får anges!");
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            for (specialInvoiceTextPek.set(1);(!(specialInvoiceTextPek.compareTo(5)>0));specialInvoiceTextPek.increment(1)) {
-                if (!(xmlSpecialInvoiceText[specialInvoiceTextPek.getInt()-1].ref(58).equals(SPACE))) {
-                    xmlFel.set("Max 57 tecken per fakturatextrad får anges!");
-                }
-            }
-        }
-        xmlRad.set("<?xml version=&xmlquot;1.0&xmlquot; encoding=&xmlquot;ISO-8859-1&xmlquot; ?>");
-        xmlWrite();
-        xmlRad.set("<marathon type=&xmlquot;project_put_response&xmlquot;>");
-        xmlWrite();
-        if (!(xmlFel.equals(SPACE))) {
-            xmlRad.set("  <status>ERROR</status>");
-            xmlWrite();
-            xmlP1.set(xmlFel);
-            xmlKonvP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <errormessage>",limit(xmlP1,"          "),"</errormessage>"));
-            xmlWrite();
-        }
-        else {
-            xmlRad.set("  <status>OK</status>");
-            xmlWrite();
-            if (projNy.equals("J")) {
-                proj.post.init();
-                proj.projidG.set(xmlProjectId);
-                proj.projstat.set(0);
-                proj.projidG2.set(xmlProjectId);
-                proj.projlnr3.ref(1,4).set(xmlProjectId.ref(5,4));
-                proj.projans.set(kund.kundans);
-                proj.projidG4.set(xmlProjectId);
-                proj.arknr.set(ZERO);
-                proj.kortnamn.set(kund.kortnamn);
-                proj.projidM.set(xmlProjectId);
-                //  ALLM UPPG 
-                proj.projben.set(SPACE);
-                if (!(kund.projtyp.equals(SPACE))) {
-                    proj.projtyp.set(kund.projtyp);
-                }
-                else {
-                    proj.projtyp.set("E");
-                }
-                proj.arbtyp.set(kund.arbtyp);
-                proj.projmark1.set(SPACE);
-                proj.projmark2.set(SPACE);
-                proj.kundans.set(kund.kundans);
-                proj.prodled.set(SPACE);
-                proj.projbenForts.set(SPACE);
-                //  PRISSÄTTN 
-                proj.fxprarv.set(0);
-                proj.fxprink.set(0);
-                proj.fxprmat.set(0);
-                proj.pfakarv.set(kund.pfakarv);
-                proj.pfakink.set(kund.pfakink);
-                proj.pfakmat.set(kund.pfakmat);
-                proj.avtp.set(kund.avtp);
-                proj.debtyp.set(kund.debtyp);
-                proj.palaggNr.set(kund.palaggNr);
-                proj.altTimpris.set(kund.altTimpris);
-                proj.kkost.set(kund.kkost);
-                proj.autMtrl.set(kund.autMtrl);
-                proj.otidEnkel.set(kund.otidEnkel);
-                proj.otidKval.set(kund.otidKval);
-                proj.faktavg.set(kund.faktavg);
-                proj.fxford.set("N");
-                proj.fxfr.set(ZERO);
-                proj.fxti.set(ZERO);
-                proj.prisOvrO.set(kund.prisOvrO);
-                //  FAKTURERING 
-                proj.fnivarv.set(kund.fnivarv);
-                proj.fnivink.set(kund.fnivink);
-                proj.fnivmat.set(kund.fnivmat);
-                proj.fnivarv2.set(SPACE);
-                proj.visaNiva2.set(kund.visaNiva2);
-                proj.fvaluta.set(kund.fvaluta);
-                proj.momskod.set(kund.momskod);
-                proj.btDag.set(kund.btDag);
-                proj.btDagLopande.set(kund.btDagLopande);
-                proj.bruttNett.set(kund.bruttNett);
-                proj.antalFak.set(kund.antalFak);
-                proj.timprisFak.set(kund.timprisFak);
-                proj.tidPFak.set(kund.tidPFak);
-                proj.tidPFakU.set(kund.tidPFakU);
-                proj.samFakt.set(kund.samFakt);
-                proj.faktMail.set(kund.faktMail);
-                proj.momssats.set(kund.momssats);
-                //  NAMN & ADR 
-                proj.kundnr.set(kund.kundnr);
-                proj.namnkun.set(kund.namnkun);
-                proj.uadr1ku.set(kund.uadr1ku);
-                proj.uadr2ku.set(kund.uadr2ku);
-                proj.oadrku.set(kund.oadrku);
-                proj.landKod.set(kund.landKod);
-                proj.land.set(kund.land);
-                proj.gatuadr.set(kund.gatuadr);
-                proj.ktkpers.set(kund.ktkpers);
-                proj.ediPartyidEget.set(kund.ediPartyidEget);
-                proj.ediPartyidBank.set(kund.ediPartyidBank);
-                proj.ediAvsPartyidEget.set(kund.ediAvsPartyidEget);
-                proj.ediAvsPartyidBank.set(kund.ediAvsPartyidBank);
-                proj.telefnr.set(kund.telefnr);
-                proj.telefax.set(kund.telefax);
-                proj.ktkTeldir.set(kund.ktkTeldir);
-                proj.ktkFaxdir.set(kund.ktkFaxdir);
-                proj.ktkMobil.set(kund.ktkMobil);
-                proj.vatKod.set(kund.vatKod);
-                proj.orgnr.set(kund.orgnr);
-                proj.ktkMail.set(kund.ktkMail);
-                proj.sprakNr.set(kund.sprakNr);
-                //  ÖVR 1 
-                proj.projkat.set(kund.projkat);
-                proj.grptht.set(kund.grptht);
-                proj.kostnst.set(kund.kostnst);
-                proj.kstbaer.set(kund.kstbaer);
-                proj.bekrefta.set(kund.bekrefta);
-                proj.bekrStat.set("N");
-                proj.synkKund.set(kund.synkKund);
-                proj.arkStatus.set("N");
-                //  ÖVR 2 
-                proj.toMtid.set("N");
-                proj.sekret.set(kund.sekret);
-                proj.projbsk1.set(SPACE);
-                proj.projbsk2.set(SPACE);
-                proj.projbsk3.set(SPACE);
-                //  SKAPA DOK 
-                proj.katSkapa.set("J");
-                proj.katServer.set("1");
-                proj.katBeho.set("1");
-                proj.katMedaO.init();
-                proj.katAndrad.set("N");
-                //  FÄLT SOM EJ KAN ÄNDRAS i 04-21-10 
-                call("prg.bas.tzdat", std.stdToday);
-                proj.upplagd.set(std.stdToday);
-                proj.ackTid.set(ZERO);
-                proj.txtstat.set(ZERO);
-                proj.delFak.set("N");
-                proj.fnivarvt.set(ZERO);
-                proj.fnivinkt.set(ZERO);
-                proj.fnivmatt.set(ZERO);
-                proj.brNeT.set(SPACE);
-                proj.aconant.set(ZERO);
-                proj.aconfak.set(ZERO);
-                proj.aconffak.set(ZERO);
-                proj.nollFakt.set(ZERO);
-                proj.stoppad.set(ZERO);
-                proj.arkDatum.set(ZERO);
-                proj.arkTxt.set(SPACE);
-                proj.arkTyp.set(SPACE);
-                proj.arkivftg.set(SPACE);
-                proj.senutfdat.set(ZERO);
-                proj.senbfdat.set(ZERO);
-                proj.senregdat.set(ZERO);
-                proj.fateInl.set("N");
-                proj.fateKlar.set("N");
-            }
-            if (!(xmlProjectName.equals("#saknas"))) {
-                proj.projben.set(xmlProjectName.ref(1,35));
-                proj.projbenForts.set(xmlProjectName.ref(36));
-            }
-            if (!(xmlFixedPriceFee.equals("#saknas"))) {
-                proj.fxprarv.setWithConversion(xmlFixedPriceFee);
-            }
-            if (!(xmlFixedPricePurchase.equals("#saknas"))) {
-                proj.fxprink.setWithConversion(xmlFixedPricePurchase);
-            }
-            if (!(xmlFixedPriceOther.equals("#saknas"))) {
-                proj.fxprmat.setWithConversion(xmlFixedPriceOther);
-            }
-            if (!(xmlProjectLeader.equals("#saknas"))) {
-                proj.projans.set(xmlProjectLeader);
-            }
-            if (!(xmlJobCategory[0].equals("#saknas"))) {
-                proj.arbtyp1.set(xmlJobCategory[0]);
-            }
-            if (!(xmlJobCategory[1].equals("#saknas"))) {
-                proj.arbtyp2.set(xmlJobCategory[1]);
-            }
-            if (!(xmlJobCategory[2].equals("#saknas"))) {
-                proj.arbtyp3.set(xmlJobCategory[2]);
-            }
-            if (!(xmlProjectType.equals("#saknas"))) {
-                proj.projtyp.set(xmlProjectType);
-            }
-            if (!(xmlContact.equals("#saknas"))) {
-                proj.ktkpers.set(xmlContact);
-            }
-            if (projNy.equals("J")) {
-                call("prg.pro.p4io", pa.paraArea, da.proj, da.write, proj.post);
-                avtp.key.init();
-                avtp.kundid.set(xmlProjectId.ref(1,4));
-                call("prg.pro.p4io", pa.paraArea, da.avtp, da.startEg, avtp.post);
-                if (pa.ok()) {
-                    call("prg.pro.p4io", pa.paraArea, da.avtp, da.readnext, avtp.post);
-                }
-                while (!(!(pa.ok()) || !(avtp.kundid.equals(xmlProjectId.ref(1,4))) || !(avtp.projlnr.equals(ZERO)))) {
-                    avtp.projidG.set(xmlProjectId);
-                    call("prg.pro.p4io", pa.paraArea, da.avtp, da.write, avtp.post);
-                    call("prg.pro.p4io", pa.paraArea, da.avtp, da.readnext, avtp.post);
-                }
-            }
-            else {
-                call("prg.pro.p4io", pa.paraArea, da.proj, da.rewrite, proj.post);
-            }
-            text.texttyp.set("S");
-            text.projidG.set(xmlProjectId);
-            call("prg.pro.p4io", pa.paraArea, da.text, da.read, text.post);
-            if (!(pa.ok())) {
-                textNy.set("J");
-                text.post.init();
-                text.texttyp.set("S");
-                text.projidG.set(xmlProjectId);
-            }
-            else {
-                textNy.set("N");
-            }
-            if (!(xmlSpecialInvoiceText[0].equals("#saknas"))) {
-                text.text1.set(xmlSpecialInvoiceText[0]);
-            }
-            if (!(xmlSpecialInvoiceText[1].equals("#saknas"))) {
-                text.text2.set(xmlSpecialInvoiceText[1]);
-            }
-            if (!(xmlSpecialInvoiceText[2].equals("#saknas"))) {
-                text.text3.set(xmlSpecialInvoiceText[2]);
-            }
-            if (!(xmlSpecialInvoiceText[3].equals("#saknas"))) {
-                text.text4.set(xmlSpecialInvoiceText[3]);
-            }
-            if (!(xmlSpecialInvoiceText[4].equals("#saknas"))) {
-                text.text5.set(xmlSpecialInvoiceText[4]);
-            }
-            if (textNy.equals("J")) {
-                call("prg.pro.p4io", pa.paraArea, da.text, da.write, text.post);
-            }
-            else {
-                call("prg.pro.p4io", pa.paraArea, da.text, da.rewrite, text.post);
-            }
-        }
-        xmlRad.set("</marathon>");
-        xmlWrite();
-    }
-
-    private void doTimesheetPut() {
-        lib.bas.Ftgspost.fd ftgs=basftgs.get();
-        lib.pro.Medapost.fd meda=promeda.get();
-        lib.pro.Projpost.fd proj=proproj.get();
-        lib.pro.Defkpost.fd defk=prodefk.get();
-        lib.pro.Tidwpost.fd tidw=protidw.get();
-        xmlFel.set(SPACE);
-        if (xmlFel.equals(SPACE)) {
-            ftgs.f9904OpenIO();
-            ftgs.fokod.set(xmlCompanyId);
-            ftgs.f9904Read();
-            if (ftgs.f9904Eof.equals("J") || !(ftgs.fomoduler.ref(4,1).equals("J"))) {
-                xmlFel.set("Angivet företag saknas eller har ej projektredovisning aktiverat!");
-            }
-            ftgs.f9904Close();
-        }
-        pa.bkstvftg.set(xmlCompanyId);
-        if (xmlFel.equals(SPACE)) {
-            if (xmlEmployeeId.equalsEither(SPACE, "#saknas")) {
-                xmlFel.set("Medarbetare måste anges!");
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            meda.medaridG.init();
-            meda.medarid.set(xmlEmployeeId);
-            call("prg.pro.p4io", pa.paraArea, da.meda, da.read, meda.post);
-            if (!(pa.ok())) {
-                xmlFel.set("Medarbetare saknas!");
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            if (!(meda.status.equals(0))) {
-                xmlFel.set("Medarbetare ej aktiv!");
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            if (!(meda.toMtid.equals("J"))) {
-                xmlFel.set("Medarbetare ej ansluten till Marathon Tid!");
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            if (xmlDate.equalsEither(SPACE, "#saknas")) {
-                xmlFel.set("Datum måste anges!");
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            if (!xmlDate.ref(1,8).isNumeric()) {
-                xmlFel.set("Ogiltigt datumformat!");
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            call("prg.bas.stddat", "K", xmlDate.ref(1,8));
-            if (!(returnCode.equals(ZERO))) {
-                xmlFel.set("Ogiltigt datum!");
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            call("prg.bas.tzdat", std.stdToday);
-            if (xmlDate.ref(1,8).compareTo(std.stdToday.ref(1,8))>0) {
-                xmlFel.set("Framtida datum är ej tillåtet!");
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            if (xmlProjectId.equalsEither(SPACE, "#saknas")) {
-                xmlFel.set("Projekt måste anges!");
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            proj.projidG.set(xmlProjectId);
-            call("prg.pro.p4io", pa.paraArea, da.proj, da.read, proj.post);
-            if (!(pa.ok())) {
-                xmlFel.set("Projekt saknas!");
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            proj.projidG.set(xmlProjectId);
-            call("prg.pro.p4io", pa.paraArea, da.proj, da.read, proj.post);
-            if (!proj.projstat.equalsEither(0, 1, 2, 3)) {
-                xmlFel.set("Projekt ej aktivt!");
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            if (!(proj.toMtid.equals("J"))) {
-                xmlFel.set("Projekt ej anslutet till Marathon Tid!");
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            if (xmlCodeId.equalsEither(SPACE, "#saknas")) {
-                xmlFel.set("Arbetskod måste anges!");
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            defk.kod.init();
-            defk.typkk.set("B");
-            defk.kod.ref(1,3).set(xmlCodeId.ref(1,3));
-            call("prg.pro.p4io", pa.paraArea, da.defk, da.read, defk.post);
-            if (!(pa.ok())) {
-                xmlFel.set("Arbetskod saknas!");
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            if (!(defk.toMtid.equals("J"))) {
-                xmlFel.set("Arbetskod ej ansluten till Marathon Tid!");
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            if (xmlHours.equalsEither(SPACE, "#saknas")) {
-                xmlFel.set("Antal timmar måste anges!");
-            }
-        }
-        if (xmlFel.equals(SPACE)) {
-            hoursD.set(xmlHours);
-            hoursD.convert(".",",");
-            hours.setWithConversion(hoursD);
-            if (hoursD.equals(ZERO)) {
-                xmlFel.set("Antal timmar måste anges!");
-            }
-        }
-        xmlRad.set("<?xml version=&xmlquot;1.0&xmlquot; encoding=&xmlquot;ISO-8859-1&xmlquot; ?>");
-        xmlWrite();
-        xmlRad.set("<marathon type=&xmlquot;timesheet_put_response&xmlquot;>");
-        xmlWrite();
-        if (!(xmlFel.equals(SPACE))) {
-            xmlRad.set("  <status>ERROR</status>");
-            xmlWrite();
-            xmlP1.set(xmlFel);
-            xmlKonvP1();
-            xmlRad.set(SPACE);
-            xmlRad.set(concat("  <errormessage>",limit(xmlP1,"          "),"</errormessage>"));
-            xmlWrite();
-        }
-        else {
-            xmlRad.set("  <status>OK</status>");
-            xmlWrite();
-            tidw.key.init();
-            tidw.meda.set(xmlEmployeeId);
-            tidw.dat.ref(1,8).set(xmlDate.ref(1,8));
-            tidw.typ.set("9");
-            tidw.lnr.set(ZERO);
-            call("prg.pro.p4io", pa.paraArea, da.tidw, da.read, tidw.post);
-            while (pa.ok()) {
-                tidw.lnr.increment(1);
-                call("prg.pro.p4io", pa.paraArea, da.tidw, da.read, tidw.post);
-            }
-            tidw.data.set(SPACE);
-            tidw.kundProj.set(xmlProjectId);
-            tidw.kod.ref(1,3).set(xmlCodeId.ref(1,3));
-            tidw.tim.set(hours);
-            tidw.komm.set(xmlComment);
-            tidw.debotid.set("N");
-            call("prg.bas.tzdat", std.stdToday);
-            tidw.regdat.set(std.stdToday);
-            call("prg.pro.p4io", pa.paraArea, da.tidw, da.write, tidw.post);
-        }
-        xmlRad.set("</marathon>");
-        xmlWrite();
-    }
-
-    private void xmlLeftP1() {
-        xmlP.set(xmlP1);
-        xmlLeft();
-        xmlP1.set(xmlP);
-    }
-
-    private void xmlLeftP2() {
-        xmlP.set(xmlP2);
-        xmlLeft();
-        xmlP2.set(xmlP);
-    }
-
-    private void xmlLeftP3() {
-        xmlP.set(xmlP3);
-        xmlLeft();
-        xmlP3.set(xmlP);
-    }
-
-    private void xmlLeftP4() {
-        xmlP.set(xmlP4);
-        xmlLeft();
-        xmlP4.set(xmlP);
-    }
-
-    private void xmlLeftP5() {
-        xmlP.set(xmlP5);
-        xmlLeft();
-        xmlP5.set(xmlP);
-    }
-
-    private void xmlLeftP6() {
-        xmlP.set(xmlP6);
-        xmlLeft();
-        xmlP6.set(xmlP);
-    }
-
-    private void xmlLeftP7() {
-        xmlP.set(xmlP7);
-        xmlLeft();
-        xmlP7.set(xmlP);
-    }
-
-    private void xmlLeftP8() {
-        xmlP.set(xmlP8);
-        xmlLeft();
-        xmlP8.set(xmlP);
-    }
-
-    private void xmlLeftP9() {
-        xmlP.set(xmlP9);
-        xmlLeft();
-        xmlP9.set(xmlP);
-    }
-
-    private void xmlLeft() {
-        if (!(xmlP.equals(SPACE))) {
-            for (xmlPek.set(1);(!((!xmlP.ref(xmlPek,1).equalsEither(SPACE, "0")) || 
-                            (xmlPek.compareTo(25)>0)));xmlPek.increment(1)) {
-            }
-            xmlTmpRad.set(xmlP.ref(xmlPek));
-            xmlP.set(xmlTmpRad);
-        }
-    }
-
-    private void xmlTalP2() {
-        xmlTal();
-        xmlP2.set(xmlP);
-    }
-
-    private void xmlTalP3() {
-        xmlTal();
-        xmlP3.set(xmlP);
-    }
-
-    private void xmlTalP4() {
-        xmlTal();
-        xmlP4.set(xmlP);
-    }
-
-    private void xmlTalP5() {
-        xmlTal();
-        xmlP5.set(xmlP);
-    }
-
-    private void xmlTalP6() {
-        xmlTal();
-        xmlP6.set(xmlP);
-    }
-
-    private void xmlTalP7() {
-        xmlTal();
-        xmlP7.set(xmlP);
-    }
-
-    private void xmlTalP8() {
-        xmlTal();
-        xmlP8.set(xmlP);
-    }
-
-    private void xmlTalP9() {
-        xmlTal();
-        xmlP9.set(xmlP);
-    }
-
-    private void xmlKonvP2() {
-        xmlP.set(xmlP2);
-        xmlKonv();
-        xmlP2.set(xmlP);
-    }
-
-    private void xmlKonvP3() {
-        xmlP.set(xmlP3);
-        xmlKonv();
-        xmlP3.set(xmlP);
-    }
-
-    private void xmlKonvP4() {
-        xmlP.set(xmlP4);
-        xmlKonv();
-        xmlP4.set(xmlP);
-    }
-
-    private void xmlKonvP5() {
-        xmlP.set(xmlP5);
-        xmlKonv();
-        xmlP5.set(xmlP);
-    }
-
-    private void xmlKonvP6() {
-        xmlP.set(xmlP6);
-        xmlKonv();
-        xmlP6.set(xmlP);
-    }
-
-    private void xmlKonvP7() {
-        xmlP.set(xmlP7);
-        xmlKonv();
-        xmlP7.set(xmlP);
-    }
-
-    private void xmlKonvP8() {
-        xmlP.set(xmlP8);
-        xmlKonv();
-        xmlP8.set(xmlP);
-    }
-
-    private void xmlKonvP9() {
-        xmlP.set(xmlP9);
-        xmlKonv();
-        xmlP9.set(xmlP);
-    }
-
--- a/server.src/prg/pro/Testanvg.java
-    private lib.pro.Oogrpost prooogr=new lib.pro.Oogrpost(Testanvg.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Testanvg.this);
--- a/server.src/prg/pro/Thertid.java
-    private lib.bas.Maxipost basmaxi=new lib.bas.Maxipost(Thertid.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Thertid.this);
-    private Field tmpTecken = new Field("X(100)");
--- a/server.src/prg/pro/Tormexp.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Tormexp.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Tormexp.this);
-    private Field radnr = new Field("S9(9)");
-    private Field rad = new Field("X(1000)");
-    private Field x = new Field("S9(9)");
-    private Field field = new Field("X(25)");
-    private Field start2 = new Field("S9(9)");
-    private Field len2 = new Field("S9(9)");
-    private Field projNy = new Field("X");
-    private Field textNy = new Field("X");
-    private Field antal = new Field("S9(9)");
-    private Field hours = new Field("S9(9)V99");
-    private Field hoursD = new Field("X(100)");
-    private Field statuskod = new Field("X(50)");
-    private Field lastKund = new Field("X(4)");
-    private Field jobCategoryPek = new Field("S9(9)");
-    private Field specialInvoiceTextPek = new Field("S9(9)");
-    private Field keyTidw = new Field("X");
-    private Field tmpTidwPost = new Field("X(10000)");
-    private Field ejSlutford = new Field("X");
-    private Field xmlFel = new Field("X(100)");
-    private Field xmlRad = new Field("X(512)");
-    private Field xmlPek = new Field("S9(9)");
-    private Field xmlTmpRad = new Field("X(512)");
-    private Field xmlTmpPek = new Field("S9(9)");
-    private Field xmlAmp = new Field("S9(9)");
-    private Field xmlP1 = new Field("X(200)");
-    private Field xmlP2 = new Field("X(200)");
-    private Field xmlP3 = new Field("X(200)");
-    private Field xmlP4 = new Field("X(200)");
-    private Field xmlP5 = new Field("X(200)");
-    private Field xmlP6 = new Field("X(200)");
-    private Field xmlP7 = new Field("X(200)");
-    private Field xmlP8 = new Field("X(200)");
-    private Field xmlP9 = new Field("X(200)");
-    private Field xmlP = new Field("X(200)");
-    private Field xmlPPek = new Field("S9(9)");
-    private Field xmlTmpP = new Field("X(220)");
-    private Field xmlTmpPPek = new Field("S9(9)");
-    private Field xmlBel = new Field("S9(9)V99");
-    private Field xmlBelD = new Field("--------9,99");
-    private Field stringStart = new Field("S9(9)");
-    private Field stringEnd = new Field("S9(9)");
-    private Field stringLen = new Field("S9(9)");
-    private Field stringData = new Field("X(200)");
--- a/server.src/prg/pro/Uppddag.java
-    private lib.bas.Std std=new lib.bas.Std(Uppddag.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Uppddag.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Uppddag.this);
-    private Field i = new Field("99999");
--- a/server.src/prg/pro/Uppdkamp.java
-    private lib.bas.Std std=new lib.bas.Std(Uppdkamp.this);
-    private lib.bas.Beho beho=new lib.bas.Beho(Uppdkamp.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Uppdkamp.this);
-    private Field pgm = new Field("X(11)", "UPPDKAMP");
-    private Field fileOpened = new Field("X", "N");
-    private Field i = new Field("99999");
--- a/server.src/prg/pro/Uppdtyp.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Uppdtyp.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Uppdtyp.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field i = new Field("99999");
-    private Field n = new Field("S9(11)");
-    private Field tmpTidwPost = new Field("X(64000)");
--- a/server.src/prg/pro/Vnr2fnr.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Vnr2fnr.this);
-    private lib.pro.Stddata stddata=new lib.pro.Stddata(Vnr2fnr.this);
--- a/server.src/prg/pro/W4101030.java
-    private Field z13TknG = new Field("X(10)");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
-    private void s10Commit() {
-        pa.recid.set(da.file);
-        pa.action.set(da.commit);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-    }
-
--- a/server.src/prg/pro/W4101031.java
-    private Field sc1Funk = new Field("9");
-    private Field z13TknG = new Field("X(10)");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
-    private void z99Funk() {
-        if (stddata.stdKey.compareTo(400)>=0) {
-            call("prg.bas.toolexec", pa.paraArea, stddata.stdKey);
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-            }
-            else {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-        }
-        else {
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-            }
-            if (stddata.stdKey.equalsEither(81, 83)) {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-            if (stddata.stdKey.equals(8)) {
-                stddata.z99Oldftg.set(pa.bkstvftg);
-                call("prg.bas.byt", pa.paraArea);
-                cancel("prg.bas.byt");
-                if (!(pa.bkstvftg.equals(stddata.z99Oldftg))) {
-                    stddata.z99Newftg.set(pa.bkstvftg);
-                    pa.bkstvftg.set(stddata.z99Oldftg);
-                    pa.recid.set(da.file);
-                    pa.action.set(da.closeAll);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    cancel("prg.pro.p4921");
-                    cancel("prg.pro.p4900");
-                    pa.bkstvftg.set(stddata.z99Newftg);
-                    pa.action.set(da.open);
-                    call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-                    if (!(pa.ok())) {
-                        pa.txtnr.set(908);
-                        z04Meddela();
-                        throw exit;
-                    }
-                }
-                pa.projidG.init();
-                stddata.stdKey.set(7);
-            }
-        }
-    }
-
-    private void z99FunkSc1() {
-        if (stddata.stdKey.compareTo(400)>=0) {
-            call("prg.bas.toolexec", pa.paraArea, stddata.stdKey);
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-                stddata.stdKey.set(ZERO);
-                sc1Funk.set(ZERO);
-            }
-            else {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-        }
-        else {
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-                stddata.stdKey.set(ZERO);
-                sc1Funk.set(ZERO);
-            }
-            if (stddata.stdKey.equalsEither(81, 83)) {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-            if (stddata.stdKey.equals(8)) {
-                stddata.z99Oldftg.set(pa.bkstvftg);
-                call("prg.bas.byt", pa.paraArea);
-                cancel("prg.bas.byt");
-                if (!(pa.bkstvftg.equals(stddata.z99Oldftg))) {
-                    stddata.z99Newftg.set(pa.bkstvftg);
-                    pa.bkstvftg.set(stddata.z99Oldftg);
-                    pa.recid.set(da.file);
-                    pa.action.set(da.closeAll);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    cancel("prg.pro.p4921");
-                    cancel("prg.pro.p4900");
-                    pa.bkstvftg.set(stddata.z99Newftg);
-                    pa.action.set(da.open);
-                    call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-                    if (!(pa.ok())) {
-                        pa.txtnr.set(908);
-                        z04Meddela();
-                        throw exit;
-                    }
-                }
-                pa.projidG.init();
-                stddata.stdKey.set(7);
-            }
-        }
-    }
-
-    private void z99LasTkn() {
-        c_keymap(stddata.saveKeymap);
-        setEnv("KEYSTROKE","Exception=67 kP");
-        if ((stddata.stdKey.compareTo(0)>0 && stddata.stdKey.compareTo(9)<0) || 
-                (stddata.stdKey.compareTo(400)>=0)) {
-            z99Funk();
-        }
-        else {
-            stddata.stdVal.set(ZERO);
-        }
-        c_keymap(stddata.restoreKeymap);
-    }
-
--- a/server.src/prg/pro/W42030.java
-    private lib.pro.Undlpost proundl=new lib.pro.Undlpost(W42030.this, pa);
-    private Field dasyst = new Field("9999");
-    private Field exportfilnamn = new Field("X(50)");
-    private void s47StartTidgreg() {
-        lib.pro.Tidgpost.fd tidg=protidg.get();
-        pa.recid.set(da.tidg);
-        pa.action.set(da.startEg);
-        prorecarea.recArea.set(tidg.post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.ok()) {
-            stddata.stdPostStatus.set(ZERO);
-        }
-        else {
-            stddata.stdPostStatus.set(1);
-        }
-    }
-
-    private void s48ReadnextTidgreg() {
-        lib.pro.Tidgpost.fd tidg=protidg.get();
-        pa.recid.set(da.tidg);
-        pa.action.set(da.readnextKl);
-        prorecarea.recArea.set(tidg.post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        tidg.post.set(prorecarea.recArea);
-        if (pa.filslut()) {
-            stddata.stdPostStatus.set(1);
-        }
-        else {
-            if (!(tidg.kundid.equals(sc1KundidF))) {
-                pa.svar.set(23);
-            }
-        }
-    }
-
-    private void s49DeleteTidgreg() {
-        lib.pro.Tidgpost.fd tidg=protidg.get();
-        pa.recid.set(da.tidg);
-        pa.action.set(da.delete);
-        prorecarea.recArea.set(tidg.post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-    }
-
-    private void s50WriteTidgreg() {
-        lib.pro.Tidgpost.fd tidg=protidg.get();
-        pa.recid.set(da.tidg);
-        pa.action.set(da.write);
-        prorecarea.recArea.set(tidg.post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-    }
-
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
--- a/server.src/prg/pro/W42170.java
-    private lib.pro.Undlpost proundl=new lib.pro.Undlpost(W42170.this, pa);
-    private Field wsAntal = new Field("S9(9)");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
-    private void s16DeleteProjreg() {
-        lib.pro.Projpost.fd proj=proproj.get();
-        pa.recid.set(da.proj);
-        pa.action.set(da.delete);
-        prorecarea.recArea.set(proj.post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-    }
-
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
--- a/server.src/prg/pro/W435.java
-    private lib.bas.Datapost basdata=new lib.bas.Datapost(W435.this);
-    private Field sc1Funk = new Field("9");
-    private Field z16Typ = z16Colkoder.extend("X(4)");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void getcolBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("BAK ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAD1");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RUB ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAM ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FUNK");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RA24");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("MEDD");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("LEDT");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMO");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMC");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FONS");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("HALV");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void z99Funk() {
-        if (stddata.stdKey.compareTo(400)>=0) {
-            call("prg.bas.toolexec", pa.paraArea, stddata.stdKey);
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-            }
-            else {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-        }
-        else {
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-            }
-            if (stddata.stdKey.equalsEither(81, 83)) {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-            if (stddata.stdKey.equals(8)) {
-                stddata.z99Oldftg.set(pa.bkstvftg);
-                call("prg.bas.byt", pa.paraArea);
-                cancel("prg.bas.byt");
-                if (!(pa.bkstvftg.equals(stddata.z99Oldftg))) {
-                    stddata.z99Newftg.set(pa.bkstvftg);
-                    pa.bkstvftg.set(stddata.z99Oldftg);
-                    pa.recid.set(da.file);
-                    pa.action.set(da.closeAll);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    cancel("prg.pro.p4921");
-                    cancel("prg.pro.p4900");
-                    pa.bkstvftg.set(stddata.z99Newftg);
-                    pa.action.set(da.open);
-                    call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-                    if (!(pa.ok())) {
-                        pa.txtnr.set(908);
-                        z04Meddela();
-                        throw exit;
-                    }
-                }
-                pa.projidG.init();
-                stddata.stdKey.set(7);
-            }
-        }
-    }
-
-    private void z99FunkSc1() {
-        if (stddata.stdKey.compareTo(400)>=0) {
-            call("prg.bas.toolexec", pa.paraArea, stddata.stdKey);
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-                stddata.stdKey.set(ZERO);
-                sc1Funk.set(ZERO);
-            }
-            else {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-        }
-        else {
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-                stddata.stdKey.set(ZERO);
-                sc1Funk.set(ZERO);
-            }
-            if (stddata.stdKey.equalsEither(81, 83)) {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-            if (stddata.stdKey.equals(8)) {
-                stddata.z99Oldftg.set(pa.bkstvftg);
-                call("prg.bas.byt", pa.paraArea);
-                cancel("prg.bas.byt");
-                if (!(pa.bkstvftg.equals(stddata.z99Oldftg))) {
-                    stddata.z99Newftg.set(pa.bkstvftg);
-                    pa.bkstvftg.set(stddata.z99Oldftg);
-                    pa.recid.set(da.file);
-                    pa.action.set(da.closeAll);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    cancel("prg.pro.p4921");
-                    cancel("prg.pro.p4900");
-                    pa.bkstvftg.set(stddata.z99Newftg);
-                    pa.action.set(da.open);
-                    call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-                    if (!(pa.ok())) {
-                        pa.txtnr.set(908);
-                        z04Meddela();
-                        throw exit;
-                    }
-                }
-                pa.projidG.init();
-                stddata.stdKey.set(7);
-            }
-        }
-    }
-
-    private void z99LasTkn() {
-        c_keymap(stddata.saveKeymap);
-        setEnv("KEYSTROKE","Exception=67 kP");
-        if ((stddata.stdKey.compareTo(0)>0 && stddata.stdKey.compareTo(9)<0) || 
-                (stddata.stdKey.compareTo(400)>=0)) {
-            z99Funk();
-        }
-        else {
-            stddata.stdVal.set(ZERO);
-        }
-        c_keymap(stddata.restoreKeymap);
-    }
-
--- a/server.src/prg/pro/W44151.java
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(W44151.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(W44151.this, pa);
-    private lib.pro.Undlpost proundl=new lib.pro.Undlpost(W44151.this, pa);
-    private lib.pro.Skripost proskri=new lib.pro.Skripost(W44151.this, pa);
-    private Field z13TknG = new Field("X(10)");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
-    private void b01KollFrFaknr() {
-        sc1ToFaknr.set(sc1FrFaknr);
-        if (!(sc1FrFaknr.equals(ZERO))) {
-            b01KollFaknr();
-        }
-    }
-
-    private void b01KollToFaknr() {
-        if (!(sc1FrFaknr.equals(ZERO))) {
-            b01KollFaknr();
-        }
-    }
-
-    private void b01KollFaknr() {
-        lib.pro.Faktpost.fd fakt=profakt.get();
-        wsFaktFinns.set("J");
-        wsTyp.set(SPACE);
-        wsFaknr.set(sc1FrFaknr);
-        while (!(wsFaknr.compareTo(sc1ToFaknr)>0)) {
-            fakt.key.init();
-            fakt.faknr.set(wsFaknr);
-            prorecarea.recArea.set(fakt.post);
-            pa.recid.set(da.fakt);
-            pa.action.set(da.startEgK3);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            if (pa.ok()) {
-                pa.action.set(da.readnext);
-                call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                fakt.post.set(prorecarea.recArea);
-            }
-            if (!(pa.ok()) || !(fakt.faknr.equals(wsFaknr))) {
-                wsFaktFinns.set("N");
-            }
-            else {
-                if (!(fakt.faktTyp.equals(9))) {
-                    if (wsTyp.equalsEither(SPACE, "1")) {
-                        wsTyp.set("1");
-                    }
-                    else {
-                        wsTyp.set("*");
-                    }
-                }
-                else {
-                    if (wsTyp.equalsEither(SPACE, "9")) {
-                        wsTyp.set("9");
-                    }
-                    else {
-                        wsTyp.set("*");
-                    }
-                }
-            }
-            wsFaknr.increment(1);
-        }
-        if (wsFaktFinns.equals("N")) {
-            pa.txtnr.set(16);
-            z04Meddela();
-            acceptControl.set(1);
-            controlValue.set(1);
-        }
-        else if (wsTyp.equals("*")) {
-            pa.txtnr.set(17);
-            z04Meddela();
-            acceptControl.set(1);
-            controlValue.set(1);
-        }
-        else {
-            if (wsTyp.equals("1")) {
-                if (sc1SkriF.equals(pa.skriList)) {
-                    sc1SkriF.set(pa.skriFakt);
-                }
-            }
-            else {
-                if (sc1SkriF.equals(pa.skriFakt)) {
-                    sc1SkriF.set(pa.skriList);
-                }
-            }
-        }
-    }
-
-    private void cLasFunk() {
-        lib.pro.Faktpost.fd fakt=profakt.get();
-        lib.pro.Kundpost.fd kund=prokund.get();
-        lib.pro.Projpost.fd proj=proproj.get();
-        lib.pro.Forepost.fd fore=profore.get();
-        if (sc1FrFaknr.equals(sc1ToFaknr)) {
-            fakt.key.init();
-            fakt.faknr.set(sc1FrFaknr);
-            prorecarea.recArea.set(fakt.post);
-            pa.recid.set(da.fakt);
-            pa.action.set(da.startEgK3);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            if (pa.ok()) {
-                pa.action.set(da.readnext);
-                call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                fakt.post.set(prorecarea.recArea);
-            }
-            vb2kKundid.set(fakt.kundid);
-            vb2pKundid.set(fakt.kundid);
-            vb2pProjlnr.set(fakt.projlnr);
-            vb2Fakdat.set(concat(fakt.fakdat.ref(3,2),"-",fakt.fakdat.ref(5,2),"-",fakt.fakdat.ref(7,2)));
-            call("prg.bas.stddatk", vb2Fakdat.ref(1,8));
-            vb2Bfdat.set(concat(fakt.bfdat.ref(3,2),"-",fakt.bfdat.ref(5,2),"-",fakt.bfdat.ref(7,2)));
-            call("prg.bas.stddatk", vb2Bfdat.ref(1,8));
-            vb2Ffdate.set(concat(fakt.ffdate.ref(3,2),"-",fakt.ffdate.ref(5,2),"-",fakt.ffdate.ref(7,2)));
-            call("prg.bas.stddatk", vb2Ffdate.ref(1,8));
-            vb2Fakbsk1.set(fakt.fakbsk1);
-            vb2Fakbsk2.set(fakt.fakbsk2);
-            if (fakt.faktTyp.equals(3)) {
-                ackFakarv.set(ZERO);
-                ackFakink.set(ZERO);
-                ackFakmat.set(ZERO);
-                ackFakaco.set(ZERO);
-                ackFakmoms.set(ZERO);
-                arbFaknr.set(fakt.faknr);
-                fakt.key.init();
-                fakt.faknr.set(arbFaknr);
-                prorecarea.recArea.set(fakt.post);
-                pa.recid.set(da.fakt);
-                pa.action.set(da.startEgK3);
-                call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                pa.action.set(da.readnext);
-                call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                fakt.post.set(prorecarea.recArea);
-                while (!(!(pa.ok()) || !(fakt.faknr.equals(arbFaknr)))) {
-                    ackFakarv.increment(fakt.fakarv);
-                    ackFakink.increment(fakt.fakink);
-                    ackFakmat.increment(fakt.fakmat);
-                    ackFakaco.increment(fakt.fakaco);
-                    ackFakmoms.increment(fakt.fakmoms);
-                    pa.action.set(da.readnext);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    fakt.post.set(prorecarea.recArea);
-                }
-                vb2Fakarv.set(ackFakarv);
-                vb2Fakink.set(ackFakink);
-                vb2Fakmat.set(ackFakmat);
-                vb2Fakaco.set(ackFakaco);
-                vb2Summa.set(ackFakarv.add(ackFakink).add(ackFakmat).add(ackFakaco));
-                vb2Fakmoms.set(ackFakmoms);
-                vb2Totalt.set(ackFakarv.add(ackFakink).add(ackFakmat).add(ackFakmoms).add(ackFakaco));
-                fakt.key.init();
-                fakt.faknr.set(arbFaknr);
-                prorecarea.recArea.set(fakt.post);
-                pa.recid.set(da.fakt);
-                pa.action.set(da.startEgK3);
-                call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                pa.action.set(da.readnext);
-                call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                fakt.post.set(prorecarea.recArea);
-                kund.key1.init();
-                kund.kundid.set(fakt.kundid);
-                prorecarea.recArea.set(kund.post);
-                pa.recid.set(da.kund);
-                pa.action.set(da.read);
-                call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                if (pa.ok()) {
-                    kund.post.set(prorecarea.recArea);
-                    vb2kNamnkun.set(kund.internben);
-                }
-                else {
-                    vb2kNamnkun.set(SPACE);
-                }
-            }
-            else {
-                vb2Fakarv.set(fakt.fakarv);
-                vb2Fakink.set(fakt.fakink);
-                vb2Fakmat.set(fakt.fakmat);
-                vb2Fakaco.set(fakt.fakaco);
-                vb2Summa.set(fakt.fakarv.add(fakt.fakink).add(fakt.fakmat).add(fakt.fakaco));
-                vb2Fakmoms.set(fakt.fakmoms);
-                vb2Totalt.set(fakt.fakarv.add(fakt.fakink).add(fakt.fakmat).add(fakt.fakmoms).add(fakt.fakaco));
-                proj.projidG.set(fakt.projidG);
-                prorecarea.recArea.set(proj.post);
-                pa.recid.set(da.proj);
-                pa.action.set(da.read);
-                call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                if (pa.ok()) {
-                    proj.post.set(prorecarea.recArea);
-                    vb2pProjben.set(proj.projben);
-                }
-                else {
-                    vb2pProjben.set(SPACE);
-                }
-            }
-            colorLedtext();
-            if (fakt.faktTyp.equals(3)) {
-                stddata.stdText1.set(vb212k);
-                call("prg.bas.visa", pa.paraArea, "B003", stddata.stdText1);
-            }
-            else {
-                stddata.stdText1.set(vb212p);
-                call("prg.bas.visa", pa.paraArea, "B002", stddata.stdText1);
-            }
-            stddata.stdText1.set(vb2Fakdat);
-            stddata.stdText2.set(vb2Fakarv);
-            stddata.stdText3.set(vb2Bfdat);
-            stddata.stdText4.set(vb2Fakink);
-            call("prg.bas.visa", pa.paraArea, "B004", stddata.stdText1, stddata.stdText2, stddata.stdText3, stddata.stdText4);
-            stddata.stdText1.set(vb2Ffdate);
-            stddata.stdText2.set(vb2Fakmat);
-            stddata.stdText3.set(vb2Fakaco);
-            stddata.stdText4.set(vb2Summa);
-            call("prg.bas.visa", pa.paraArea, "B005", stddata.stdText1, stddata.stdText2, stddata.stdText3, stddata.stdText4);
-            stddata.stdText1.set(vb2Fakbsk1);
-            stddata.stdText2.set(vb2Fakmoms);
-            stddata.stdText3.set(vb2Fakbsk2);
-            stddata.stdText4.set(vb2Totalt);
-            call("prg.bas.visa", pa.paraArea, "B006", stddata.stdText1, stddata.stdText2, stddata.stdText3, stddata.stdText4);
-            if (!(fakt.faktTyp.equals(9)) && fore.propFakt.equals("J")) {
-                colorMeddelande();
-                call("prg.bas.visa", pa.paraArea, "H001", stddata.stdText);
-            }
-            if (fakt.faktTyp.equals(2)) {
-                colorMeddelande();
-                call("prg.bas.visa", pa.paraArea, "H002", stddata.stdText);
-            }
-            if (fakt.faktTyp.equals(3)) {
-                colorMeddelande();
-                call("prg.bas.visa", pa.paraArea, "H003", stddata.stdText);
-            }
-            if (fakt.faktTyp.equals(9)) {
-                colorMeddelande();
-                call("prg.bas.visa", pa.paraArea, "H004", stddata.stdText);
-            }
-        }
-        else {
-            call("prg.bas.visa", pa.paraArea, "B007");
-        }
-        stddata.stdVal.set(1);
-        while (!(stddata.stdVal.equals(0))) {
-            stddata.stdVal.set(0);
-            call("prg.bas.stdfunk", pa.paraArea, "I", sc1Funk, "H005", "012#");
-            if (stddata.stdKey.equals(27)) {
-                sc1Funk.set(ZERO);
-                stddata.stdVal.set(ZERO);
-                stddata.stdKey.set(ZERO);
-            }
-            if (stddata.stdVal.equals(ZERO)) {
-                if ((sc1Funk.equals(1) && sc1FrFaknr.equals(ZERO))) {
-                    stddata.stdVal.set(1);
-                    pa.txtnr.set(8);
-                    z04Meddela();
-                }
-            }
-        }
-        colorInmClosed();
-        z05BlankaMeddelande();
-    }
-
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
-    private void z99Funk() {
-        if (stddata.stdKey.compareTo(400)>=0) {
-            call("prg.bas.toolexec", pa.paraArea, stddata.stdKey);
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-            }
-            else {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-        }
-        else {
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-            }
-            if (stddata.stdKey.equalsEither(81, 83)) {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-            if (stddata.stdKey.equals(8)) {
-                stddata.z99Oldftg.set(pa.bkstvftg);
-                call("prg.bas.byt", pa.paraArea);
-                cancel("prg.bas.byt");
-                if (!(pa.bkstvftg.equals(stddata.z99Oldftg))) {
-                    stddata.z99Newftg.set(pa.bkstvftg);
-                    pa.bkstvftg.set(stddata.z99Oldftg);
-                    pa.recid.set(da.file);
-                    pa.action.set(da.closeAll);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    cancel("prg.pro.p4921");
-                    cancel("prg.pro.p4900");
-                    pa.bkstvftg.set(stddata.z99Newftg);
-                    pa.action.set(da.open);
-                    call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-                    if (!(pa.ok())) {
-                        pa.txtnr.set(908);
-                        z04Meddela();
-                        throw exit;
-                    }
-                }
-                pa.projidG.init();
-                stddata.stdKey.set(7);
-            }
-        }
-    }
-
-    private void z99FunkSc1() {
-        if (stddata.stdKey.compareTo(400)>=0) {
-            call("prg.bas.toolexec", pa.paraArea, stddata.stdKey);
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-                stddata.stdKey.set(ZERO);
-                sc1Funk.set(ZERO);
-            }
-            else {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-        }
-        else {
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-                stddata.stdKey.set(ZERO);
-                sc1Funk.set(ZERO);
-            }
-            if (stddata.stdKey.equalsEither(81, 83)) {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-            if (stddata.stdKey.equals(8)) {
-                stddata.z99Oldftg.set(pa.bkstvftg);
-                call("prg.bas.byt", pa.paraArea);
-                cancel("prg.bas.byt");
-                if (!(pa.bkstvftg.equals(stddata.z99Oldftg))) {
-                    stddata.z99Newftg.set(pa.bkstvftg);
-                    pa.bkstvftg.set(stddata.z99Oldftg);
-                    pa.recid.set(da.file);
-                    pa.action.set(da.closeAll);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    cancel("prg.pro.p4921");
-                    cancel("prg.pro.p4900");
-                    pa.bkstvftg.set(stddata.z99Newftg);
-                    pa.action.set(da.open);
-                    call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-                    if (!(pa.ok())) {
-                        pa.txtnr.set(908);
-                        z04Meddela();
-                        throw exit;
-                    }
-                }
-                pa.projidG.init();
-                stddata.stdKey.set(7);
-            }
-        }
-    }
-
-    private void z99LasTkn() {
-        c_keymap(stddata.saveKeymap);
-        setEnv("KEYSTROKE","Exception=67 kP");
-        if ((stddata.stdKey.compareTo(0)>0 && stddata.stdKey.compareTo(9)<0) || 
-                (stddata.stdKey.compareTo(400)>=0)) {
-            z99Funk();
-        }
-        else {
-            stddata.stdVal.set(ZERO);
-        }
-        c_keymap(stddata.restoreKeymap);
-    }
-
--- a/server.src/prg/pro/W44161.java
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(W44161.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(W44161.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(W44161.this, pa);
-    private Field wsProjidF = wsArea.extend();
-    private Field wsKundidF = wsProjidF.extend("X(4)");
-    private Field wsProjlnrF = wsProjidF.extend("9(4)");
-    private Field z13TknG = new Field("X(10)");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
-    private void z11ReadSkrireg() {
-        lib.pro.Skripost.fd skri=proskri.get();
-        prorecarea.recArea.set(skri.post);
-        pa.recid.set(da.skri);
-        pa.action.set(da.read);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        skri.post.set(prorecarea.recArea);
-    }
-
-    private void z11OpenListaN() {
-        z11Rr.set(50);
-        z11OpenCpi();
-    }
-
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
-    private void getcolBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("BAK ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAD1");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RUB ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAM ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FUNK");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RA24");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("MEDD");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("LEDT");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMO");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMC");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FONS");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
--- a/server.src/prg/pro/W44180.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(W44180.this, pa);

-    private Field z13TknG = new Field("X(10)");
-        lib.bok.Parapost.fd para=bokpara.get();
-    private void z11ReadSkrireg() {
-        lib.pro.Skripost.fd skri=proskri.get();
-        prorecarea.recArea.set(skri.post);
-        pa.recid.set(da.skri);
-        pa.action.set(da.read);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        skri.post.set(prorecarea.recArea);
-    }
-
-    private void z11OpenListaN() {
-        z11Rr.set(50);
-        z11OpenCpi();
-    }
-
-    private void z11Abort() {
-        c_rerr(pa.syfel);
-        stddata.stdText1.set(99);
-        stddata.stdText2.set(SPACE);
-        stddata.stdText3.set(SPACE);
-        stddata.stdText4.set(pa.syfel);
-        call("prg.bas.visa", pa.paraArea, "F904", stddata.stdText1, stddata.stdText2, stddata.stdText3, stddata.stdText4);
-        dasvar.set(99);
-    }
-
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/W44190.java
-    private lib.pro.Skripost proskri=new lib.pro.Skripost(W44190.this, pa);
-    private Field wsFbel = new Field("S9(9)V99");
-    private Field wsBbel = new Field("S9(9)V99");
-    private Field z13TknG = new Field("X(10)");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
-    private void b01Koll() {
-        lib.pro.Forepost.fd fore=profore.get();
-        call("prg.bas.stddatk", sc1Fakdat.ref(3));
-        call("prg.bas.stddatk", sc1Bfdat.ref(3));
-        call("prg.bas.stddatk", sc1Ffdate.ref(3));
-        call("prg.bas.std1920", sc1Fakdat);
-        call("prg.bas.std1920", sc1Bfdat);
-        call("prg.bas.std1920", sc1Ffdate);
-        if (sc1Fakdat.compareTo(stddata.stdToday)>0 && fore.fdatStort.equals("N")) {
-            pa.txtnr.set(47);
-            z04Meddela();
-            acceptControl.set(1);
-            controlValue.set(1);
-        }
-        else {
-            call("prg.bas.stddat", "R", sc1Fakdat);
-            if (!(returnCode.equals(ZERO))) {
-                pa.txtnr.set(901);
-                z04Meddela();
-                acceptControl.set(1);
-                controlValue.set(1);
-            }
-            else {
-                if ((!wsBfKundid.equalsEither("49", "999")) && 
-                        (((stddata.stdToday.compareTo(wsPerStart)<0 || stddata.stdToday.compareTo(wsPerSlut)>0) && !(sc1Fakdat.equals(stddata.stdToday))) || 
-                         (!(stddata.stdToday.compareTo(wsPerStart)<0) && !(stddata.stdToday.compareTo(wsPerSlut)>0) && (sc1Fakdat.compareTo(wsPerStart)<0 || sc1Fakdat.compareTo(wsPerSlut)>0)))) {
-                    pa.txtnr.set(81);
-                    z04Meddela();
-                    acceptControl.set(1);
-                    controlValue.set(1);
-                }
-            }
-        }
-        call("prg.bas.stddatk", sc1Fakdat.ref(3));
-        call("prg.bas.stddatk", sc1Bfdat.ref(3));
-        call("prg.bas.stddatk", sc1Ffdate.ref(3));
-    }
-
-    private void b02Koll() {
-        lib.pro.Forepost.fd fore=profore.get();
-        call("prg.bas.stddatk", sc1Fakdat.ref(3));
-        call("prg.bas.stddatk", sc1Bfdat.ref(3));
-        call("prg.bas.stddatk", sc1Ffdate.ref(3));
-        call("prg.bas.std1920", sc1Fakdat);
-        call("prg.bas.std1920", sc1Bfdat);
-        call("prg.bas.std1920", sc1Ffdate);
-        if (sc1Bfdat.compareTo(stddata.stdToday)>0 && fore.fdatStort.equals("N")) {
-            pa.txtnr.set(47);
-            z04Meddela();
-            acceptControl.set(1);
-            controlValue.set(2);
-        }
-        else {
-            call("prg.bas.stddat", "R", sc1Bfdat);
-            if (!(returnCode.equals(ZERO))) {
-                pa.txtnr.set(901);
-                z04Meddela();
-                acceptControl.set(1);
-                controlValue.set(2);
-            }
-            else {
-                if ((sc1Bfdat.compareTo(wsBfStart)<0 || sc1Bfdat.compareTo(wsBfSlut)>0)) {
-                    pa.txtnr.set(81);
-                    z04Meddela();
-                    acceptControl.set(1);
-                    controlValue.set(2);
-                }
-            }
-        }
-        call("prg.bas.stddatk", sc1Fakdat.ref(3));
-        call("prg.bas.stddatk", sc1Bfdat.ref(3));
-        call("prg.bas.stddatk", sc1Ffdate.ref(3));
-    }
-
-    private void b03Koll() {
-        call("prg.bas.stddatk", sc1Fakdat.ref(3));
-        call("prg.bas.stddatk", sc1Bfdat.ref(3));
-        call("prg.bas.stddatk", sc1Ffdate.ref(3));
-        call("prg.bas.std1920", sc1Fakdat);
-        call("prg.bas.std1920", sc1Bfdat);
-        call("prg.bas.std1920", sc1Ffdate);
-        if (sc1Ffdate.equals(ZERO)) {
-            sc1Ffdate.set(sc1Fakdat);
-        }
-        if (sc1Ffdate.ref(3,6).compareTo("000099")<=0) {
-            call("prg.bas.stddat", "A", sc1Fakdat, sc1Ffdate.ref(3,6), sc1Ffdate);
-        }
-        call("prg.bas.stddat", "R", sc1Ffdate);
-        if (!(returnCode.equals(ZERO)) && stddata.stdVal.equals(ZERO)) {
-            pa.txtnr.set(901);
-            z04Meddela();
-            acceptControl.set(1);
-            controlValue.set(3);
-        }
-        call("prg.bas.stddatk", sc1Fakdat.ref(3));
-        call("prg.bas.stddatk", sc1Bfdat.ref(3));
-        call("prg.bas.stddatk", sc1Ffdate.ref(3));
-    }
-
-    private void b10Koll() {
-        if (!((sc1Prov.equalsEither(stddata.stdJa, stddata.stdNej)))) {
-            pa.txtnr.set(35);
-            z04Meddela();
-            acceptControl.set(1);
-            controlValue.set(10);
-        }
-    }
-
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
-    private void getcolRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAD1");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RUB ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAM ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FUNK");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RA24");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("MEDD");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("LEDT");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMO");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMC");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FONS");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("HALV");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void z99Funk() {
-        if (stddata.stdKey.compareTo(400)>=0) {
-            call("prg.bas.toolexec", pa.paraArea, stddata.stdKey);
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-            }
-            else {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-        }
-        else {
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-            }
-            if (stddata.stdKey.equalsEither(81, 83)) {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-            if (stddata.stdKey.equals(8)) {
-                stddata.z99Oldftg.set(pa.bkstvftg);
-                call("prg.bas.byt", pa.paraArea);
-                cancel("prg.bas.byt");
-                if (!(pa.bkstvftg.equals(stddata.z99Oldftg))) {
-                    stddata.z99Newftg.set(pa.bkstvftg);
-                    pa.bkstvftg.set(stddata.z99Oldftg);
-                    pa.recid.set(da.file);
-                    pa.action.set(da.closeAll);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    cancel("prg.pro.p4921");
-                    cancel("prg.pro.p4900");
-                    pa.bkstvftg.set(stddata.z99Newftg);
-                    pa.action.set(da.open);
-                    call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-                    if (!(pa.ok())) {
-                        pa.txtnr.set(908);
-                        z04Meddela();
-                        throw exit;
-                    }
-                }
-                pa.projidG.init();
-                stddata.stdKey.set(7);
-            }
-        }
-    }
-
-    private void z99FunkSc1() {
-        if (stddata.stdKey.compareTo(400)>=0) {
-            call("prg.bas.toolexec", pa.paraArea, stddata.stdKey);
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-                stddata.stdKey.set(ZERO);
-                sc1Funk.set(ZERO);
-            }
-            else {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-        }
-        else {
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-                stddata.stdKey.set(ZERO);
-                sc1Funk.set(ZERO);
-            }
-            if (stddata.stdKey.equalsEither(81, 83)) {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-            if (stddata.stdKey.equals(8)) {
-                stddata.z99Oldftg.set(pa.bkstvftg);
-                call("prg.bas.byt", pa.paraArea);
-                cancel("prg.bas.byt");
-                if (!(pa.bkstvftg.equals(stddata.z99Oldftg))) {
-                    stddata.z99Newftg.set(pa.bkstvftg);
-                    pa.bkstvftg.set(stddata.z99Oldftg);
-                    pa.recid.set(da.file);
-                    pa.action.set(da.closeAll);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    cancel("prg.pro.p4921");
-                    cancel("prg.pro.p4900");
-                    pa.bkstvftg.set(stddata.z99Newftg);
-                    pa.action.set(da.open);
-                    call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-                    if (!(pa.ok())) {
-                        pa.txtnr.set(908);
-                        z04Meddela();
-                        throw exit;
-                    }
-                }
-                pa.projidG.init();
-                stddata.stdKey.set(7);
-            }
-        }
-    }
-
-    private void z99LasTkn() {
-        c_keymap(stddata.saveKeymap);
-        setEnv("KEYSTROKE","Exception=67 kP");
-        if ((stddata.stdKey.compareTo(0)>0 && stddata.stdKey.compareTo(9)<0) || 
-                (stddata.stdKey.compareTo(400)>=0)) {
-            z99Funk();
-        }
-        else {
-            stddata.stdVal.set(ZERO);
-        }
-        c_keymap(stddata.restoreKeymap);
-    }
-
--- a/server.src/prg/pro/W463.java
-    private Field idx = new Field("99");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z11ReadSkrireg() {
-        lib.pro.Skripost.fd skri=proskri.get();
-        prorecarea.recArea.set(skri.post);
-        pa.recid.set(da.skri);
-        pa.action.set(da.read);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        skri.post.set(prorecarea.recArea);
-    }
-
-    private void z11OpenListaN() {
-        z11Rr.set(50);
-        z11OpenCpi();
-    }
-
-    private void z11Abort() {
-        c_rerr(pa.syfel);
-        stddata.stdText1.set(99);
-        stddata.stdText2.set(SPACE);
-        stddata.stdText3.set(SPACE);
-        stddata.stdText4.set(pa.syfel);
-        call("prg.bas.visa", pa.paraArea, "F904", stddata.stdText1, stddata.stdText2, stddata.stdText3, stddata.stdText4);
-        dasvar.set(99);
-    }
-
-    private void getcolBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("BAK ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAD1");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RUB ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAM ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FUNK");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RA24");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("MEDD");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("LEDT");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMO");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMC");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FONS");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
--- a/server.src/prg/pro/W47103.java
-    private lib.pro.Forepost profore=new lib.pro.Forepost(W47103.this, pa);
-    private Field wsSkriv = new Field("9");
-    private Field wsArb = new Field("S9(9)V99");
-    private Field wsLogMsg = new Field("X(1024)", SPACE);
-    private Field wsLogName = new Field("X(64)", SPACE);
-    private Field wsLogCmd = new Field("X(2048)", SPACE);
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
-    private void log() {
-        if (new Constant(1).equals(2)) {
-            if (wsLogName.equals(SPACE)) {
-                wsLogName.set("TMP/LOG");
-                wsLogCmd.set(concat("/bin/rm -f ",wsLogName));
-                call("system", wsLogCmd);
-            }
-            wsLogCmd.set(SPACE);
-            wsLogCmd.set(concat(limit("/bin/echo ","    "),limit(wsLogMsg,"    "),limit(" >> ","    "),limit(wsLogName,"    ")));
-            call("system", wsLogCmd);
-        }
-    }
-
-    private void s05ReadProjreg() {
-        lib.pro.Projpost.fd proj=proproj.get();
-        pa.recid.set(da.proj);
-        pa.action.set(da.read);
-        prorecarea.recArea.set(proj.post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        proj.post.set(prorecarea.recArea);
-    }
-
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z11ReadSkrireg() {
-        lib.pro.Skripost.fd skri=proskri.get();
-        prorecarea.recArea.set(skri.post);
-        pa.recid.set(da.skri);
-        pa.action.set(da.read);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        skri.post.set(prorecarea.recArea);
-    }
-
-    private void z11OpenListaN() {
-        z11Rr.set(50);
-        z11OpenCpi();
-    }
-
-    private void z11Abort() {
-        c_rerr(pa.syfel);
-        stddata.stdText1.set(99);
-        stddata.stdText2.set(SPACE);
-        stddata.stdText3.set(SPACE);
-        stddata.stdText4.set(pa.syfel);
-        call("prg.bas.visa", pa.paraArea, "F904", stddata.stdText1, stddata.stdText2, stddata.stdText3, stddata.stdText4);
-        dasvar.set(99);
-    }
-
-    private void getcolBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("BAK ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAD1");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RUB ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAM ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FUNK");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RA24");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("MEDD");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("LEDT");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMO");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMC");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FONS");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
--- a/server.src/prg/pro/W47104.java
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(W47104.this, pa);
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
-    private void s05ReadProjreg() {
-        lib.pro.Projpost.fd proj=proproj.get();
-        pa.recid.set(da.proj);
-        pa.action.set(da.read);
-        prorecarea.recArea.set(proj.post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        proj.post.set(prorecarea.recArea);
-    }
-
-    private void s08ReadKundreg() {
-        lib.pro.Kundpost.fd kund=prokund.get();
-        kund.noll.set(ZERO);
-        pa.recid.set(da.kund);
-        pa.action.set(da.read);
-        prorecarea.recArea.set(kund.post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        kund.post.set(prorecarea.recArea);
-    }
-
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z11ReadSkrireg() {
-        lib.pro.Skripost.fd skri=proskri.get();
-        prorecarea.recArea.set(skri.post);
-        pa.recid.set(da.skri);
-        pa.action.set(da.read);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        skri.post.set(prorecarea.recArea);
-    }
-
-    private void z11OpenListaN() {
-        z11Rr.set(50);
-        z11OpenCpi();
-    }
-
-    private void z11Abort() {
-        c_rerr(pa.syfel);
-        stddata.stdText1.set(99);
-        stddata.stdText2.set(SPACE);
-        stddata.stdText3.set(SPACE);
-        stddata.stdText4.set(pa.syfel);
-        call("prg.bas.visa", pa.paraArea, "F904", stddata.stdText1, stddata.stdText2, stddata.stdText3, stddata.stdText4);
-        dasvar.set(99);
-    }
-
-    private void getcolBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("BAK ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAD1");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RUB ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAM ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FUNK");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RA24");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("MEDD");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("LEDT");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMO");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMC");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FONS");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("HALV");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
--- a/server.src/prg/pro/W4731010.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(W4731010.this, pa);
-    private lib.pro.Jarvpost projarv=new lib.pro.Jarvpost(W4731010.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(W4731010.this, pa);
-    private lib.pro.Jinkpost projink=new lib.pro.Jinkpost(W4731010.this, pa);
-    private lib.pro.Nattpost pronatt=new lib.pro.Nattpost(W4731010.this, pa);
-    private lib.pro.Jmatpost projmat=new lib.pro.Jmatpost(W4731010.this, pa);
-    private lib.pro.Vandpost provand=new lib.pro.Vandpost(W4731010.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(W4731010.this, pa);
-    private lib.pro.Kperpost prokper=new lib.pro.Kperpost(W4731010.this, pa);
-    private lib.pro.Resrpost proresr=new lib.pro.Resrpost(W4731010.this, pa);
-    private lib.pro.Kbudpost prokbud=new lib.pro.Kbudpost(W4731010.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(W4731010.this, pa);
-    private lib.pro.Pestpost propest=new lib.pro.Pestpost(W4731010.this, pa);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(W4731010.this);
-    private Field wsVillkOk = new Field("X");
-    private Field wsOverKansKund = new Field("X(8)");
-    private Field wsOverKansKundO = new Field("X(8)");
-    private Field wsOverKansSort = new Field("X(25)");
-    private Field wsOverKansRub = new Field("X(40)");
-    private Field wsKund = new Field("X(4)");
-    private Field wsProj = new Field("9(4)");
-    private Field wsProjOk = new Field("X");
-    private Field wsProjtyp = new Field("X");
-    private Field z13TknG = new Field("X(10)");
-    private Field validOk = new Field("X");
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
--- a/server.src/prg/pro/W474.java
-    private Field wsFrPer = new Field("9(6)");
-    private Field wsTiPer = new Field("9(6)");
-    private Field wsPer = new Field("9(6)");
-    private Field wsDag = new Field("99");
-    private Field wsTimAntal = new Field("S9(9)V99");
-    private Field wsZz9 = new Field("ZZ9");
-    private Field z13TknG = new Field("X(10)");
-    private Field validOk = new Field("X");
-    private void s08ReadSkri() {
-        lib.bas.Skripost.fd skri=basskri.get();
-        pa.action.set(da.read);
-        pa.recid.set(da.skri);
-        prorecarea.recArea.set(skri.record);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        skri.record.set(prorecarea.recArea);
-    }
-
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
-    private void getcolBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("BAK ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAD1");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RUB ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAM ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FUNK");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RA24");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("MEDD");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("LEDT");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMO");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMC");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FONS");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("HALV");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
--- a/server.src/prg/pro/W49960.java
-    private Field z13TknG = new Field("X(10)");
-    private Field exportfilnamn = new Field("X(50)");
-    private Field validOk = new Field("X");
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
-    private void getcolBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("BAK ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAD1");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RUB ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAM ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FUNK");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RA24");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("MEDD");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("LEDT");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMO");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMC");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FONS");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void z99Funk() {
-        if (stddata.stdKey.compareTo(400)>=0) {
-            call("prg.bas.toolexec", pa.paraArea, stddata.stdKey);
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-            }
-            else {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-        }
-        else {
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-            }
-            if (stddata.stdKey.equalsEither(81, 83)) {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-            if (stddata.stdKey.equals(8)) {
-                stddata.z99Oldftg.set(pa.bkstvftg);
-                call("prg.bas.byt", pa.paraArea);
-                cancel("prg.bas.byt");
-                if (!(pa.bkstvftg.equals(stddata.z99Oldftg))) {
-                    stddata.z99Newftg.set(pa.bkstvftg);
-                    pa.bkstvftg.set(stddata.z99Oldftg);
-                    pa.recid.set(da.file);
-                    pa.action.set(da.closeAll);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    cancel("prg.pro.p4921");
-                    cancel("prg.pro.p4900");
-                    pa.bkstvftg.set(stddata.z99Newftg);
-                    pa.action.set(da.open);
-                    call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-                    if (!(pa.ok())) {
-                        pa.txtnr.set(908);
-                        z04Meddela();
-                        throw exit;
-                    }
-                }
-                pa.projidG.init();
-                stddata.stdKey.set(7);
-            }
-        }
-    }
-
-    private void z99FunkSc1() {
-        if (stddata.stdKey.compareTo(400)>=0) {
-            call("prg.bas.toolexec", pa.paraArea, stddata.stdKey);
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-                stddata.stdKey.set(ZERO);
-                sc1Funk.set(ZERO);
-            }
-            else {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-        }
-        else {
-            if (stddata.stdKey.equalsEither(67, 68, 69, 70, 27, 13)) {
-                stddata.stdVal.set(ZERO);
-                stddata.stdKey.set(ZERO);
-                sc1Funk.set(ZERO);
-            }
-            if (stddata.stdKey.equalsEither(81, 83)) {
-                stddata.stdVal.set(1);
-                stddata.stdKey.set(7);
-            }
-            if (stddata.stdKey.equals(8)) {
-                stddata.z99Oldftg.set(pa.bkstvftg);
-                call("prg.bas.byt", pa.paraArea);
-                cancel("prg.bas.byt");
-                if (!(pa.bkstvftg.equals(stddata.z99Oldftg))) {
-                    stddata.z99Newftg.set(pa.bkstvftg);
-                    pa.bkstvftg.set(stddata.z99Oldftg);
-                    pa.recid.set(da.file);
-                    pa.action.set(da.closeAll);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    cancel("prg.pro.p4921");
-                    cancel("prg.pro.p4900");
-                    pa.bkstvftg.set(stddata.z99Newftg);
-                    pa.action.set(da.open);
-                    call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-                    if (!(pa.ok())) {
-                        pa.txtnr.set(908);
-                        z04Meddela();
-                        throw exit;
-                    }
-                }
-                pa.projidG.init();
-                stddata.stdKey.set(7);
-            }
-        }
-    }
-
-    private void z99LasTkn() {
-        c_keymap(stddata.saveKeymap);
-        setEnv("KEYSTROKE","Exception=67 kP");
-        if ((stddata.stdKey.compareTo(0)>0 && stddata.stdKey.compareTo(9)<0) || 
-                (stddata.stdKey.compareTo(400)>=0)) {
-            z99Funk();
-        }
-        else {
-            stddata.stdVal.set(ZERO);
-        }
-        c_keymap(stddata.restoreKeymap);
-    }
-
--- a/server.src/prg/pro/W90412.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W90412.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W90412.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(W90412.this);
-    private Field tmpCommandLine = new Field("X(100)");
-    private Field tmpKto = new Field("X(6)");
-    private Field tmpKst = new Field("X(6)");
-    private Field tmpKbr = new Field("X(6)");
-    private Field tmpPer = new Field("99");
--- a/server.src/prg/pro/W90420.java
-    private lib.bas.Beho beho=new lib.bas.Beho(W90420.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(W90420.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(W90420.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(W90420.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(W90420.this, pa);
--- a/server.src/prg/pro/Webaorp.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Webaorp.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Webaorp.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Webaorp.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Webaorp.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webaorp.this);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Webaorp.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Webaorp.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webaorp.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webaorp.this);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webaorp.this, pa);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(Webaorp.this);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Webaorp.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp = new Field("X(300)");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel = new Field("S9(10)");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(10000)");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field sel = new Field("X(1000)");
-    private Field selKod = new Field("X(100)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKod = new Field("X(100)");
-    private Field testKodNum = new Field("9(15)");
-    private Field testOk = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field tmpKod = new Field("XXX");
-    private Field tmpSort = new Field("X");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webatt.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Webatt.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Webatt.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Webatt.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Webatt.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webatt.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webatt.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webatt.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field frame = new Field("X");



-    private Field tmpHel = new Field("S9(10)");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(10000)");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field tmpDatum2 = new Field("9(8)");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");






-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private void skrivRad() {
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webbu0.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webbu0.this);
-    private lib.pro.Budwpost probudw=new lib.pro.Budwpost(Webbu0.this, pa);
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webbu0.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Webbu0.this);
-    private Field tmps = new Field("X(1000)");
-    private Field ii = new Field("9999");
-    private Field aktiva = new Field("X");
-    private Field egna = new Field("X");
-    private Field lag = new Field("S9(9)");
-    private Field fi = new Field("X");
-    private Field ffaktEof = new Field("X");
-    private Field lstBel = new Field("ZZBZZZBZZ9-");
-    private Field tmpBkstvftg = new Field("XXXX");
-    private Field x = new Field("99");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");
-    private void budget() {
-        lib.pro.Budwpost.fd budw=probudw.get();
-        call(webpara.webut, "<TR><TD>");
-        if (!(proj.projidG.equals(oldProj))) //         IF KUNDID = SPACE MOVE "Ej angiven" to K-INTERNBEN END-IF 
-            //         IF PROJLNR <= 0000 MOVE "Ej angivet" to P-PROJBEN END-IF 
-        {
-            if (projlnr.compareTo(new Constant("0000"))<=0) {
-                proj.projben.set("---");
-            }
-            call(webpara.webut, "%s", proj.projidG);
-            call(webpara.webut, "</TD>");
-            call(webpara.webut, "<TD>");
-            call(webpara.webut, "%s", proj.projben);
-            call(webpara.webut, "</TD>");
-            call(webpara.webut, "<TD>");
-            oldProj.set(proj.projidG);
-        }
-        else {
-            call(webpara.webut, "</TD><TD></TD><TD>");
-        }
-        call(webpara.webut, "<A HREF='javascript:bud(%c%k%c)'>", 34, budw.nr, 34);
-        call(webpara.webut, budw.nr);
-        call(webpara.webut, "</A></TD>");
-    }
-
-    private void behormed() {
-        fi.set("N");
-        //     IF P-KAT-BEHO = 1 
-        //         MOVE "J" TO FI 
-        //     ELSE 
-        i.set(1);
-        while (!(i.compareTo(50)>0)) {
-            if (proj.katMeda[i.getInt()-1].equals(webpara.medarb)) {
-                fi.set("J");
-            }
-            i.increment(1);
-        }
-    }
-
--- a/server.src/prg/pro/Webbu1.java
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webbu1.this, pa);
-    private lib.pro.Avtppost proavtp=new lib.pro.Avtppost(Webbu1.this, pa);



--- a/server.src/prg/pro/Webbu2.java
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webbu2.this, pa);
-    private lib.pro.Budapost probuda=new lib.pro.Budapost(Webbu2.this, pa);
-    private lib.pro.Budipost probudi=new lib.pro.Budipost(Webbu2.this, pa);
-    private lib.pro.Budopost probudo=new lib.pro.Budopost(Webbu2.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Webbu2.this);



-    private Field path = new Field("X(50)");
-    private void closeDown() {
-    }
-
--- a/server.src/prg/pro/Webbu3.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webbu3.this);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Webbu3.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webbu3.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webbu3.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Webbu3.this, pa);



-    private Field tmpBel = new Field("S9(8)V99");
-    private Field tmpHel = new Field("S9(8)");
-    private Field lstBel = new Field("--------9,99");
-    private Field s1 = new Field("S9(9)V99");
-    private Field s2 = new Field("S9(9)V99");
-    private Field f = new Field("X");
-    private Field f2 = new Field("X");
-    private Field datum = new Field("9(8)");
-    private Field oKat = new Field("XX");
-    private Field operatingSystem = new Field("X(10)", "UNIX");
-    private Field inPost = new Field("X(2000)");
-    private Field i = new Field("999");
-    private void lasUpp() {
-        call(webpara.webut, "<SCRIPT>document.cookie='%0=; path=/; expires=0'</SCRIPT>", datum);
-    }
-
-    private void avbryt() {
-        call(webpara.webut, "<SCRIPT>");
-        //     CALL WEBUT USING "window.parent.parent.h.location.search='?PRG/PRO/WEBTID+%k'" DATUM 
-        call(webpara.webut, "parent.h.location.search='?PRG/PRO/WEBTID+%k'", datum);
-        call(webpara.webut, "</SCRIPT>");
-        closeDown();
-        atergang();
-        return;
-    }
-
-
--- a/server.src/prg/pro/Webbu4.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webbu4.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webbu4.this);
-    private lib.pro.Datab da=new lib.pro.Datab(Webbu4.this);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Webbu4.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webbu4.this, pa);
-    private Field tg = new Field("X");
-    private Field otg = new Field("X");
-    private Field i = new Field("99");
-    private Field c = new Field("999");
-    private Field tmp3 = new Field("999");
-    private Field operatingSystem = new Field("X(10)", "UNIX");
-    private Field tmpBehorig = new Field("X");
-    private Field aktiva = new Field("X");
-    private Field egna = new Field("X");
-    private Field sortering = new Field("X");
-    private Field sortnamn = new Field("X(50)");
-    private Field bokst = new Field("X");
-    private Field kundid = new Field("XXXX");
-    private Field projlnr = new Field("9999");
--- a/server.src/prg/pro/Webbu5.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webbu5.this, pa);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webbu5.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webbu5.this, pa);
-    private lib.pro.Nattpost pronatt=new lib.pro.Nattpost(Webbu5.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webbu5.this, pa);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webbu5.this);
-    private lib.pro.Mpss mpss=new lib.pro.Mpss(Webbu5.this);
-    private lib.pro.Mpsu mpsu=new lib.pro.Mpsu(Webbu5.this);
-    private Field antalNoll = new Field("9999");
-    private Field s2 = new Field("S9(9)V99");
-    private Field s11 = new Field("S9(9)V99");
-    private Field s12 = new Field("S9(9)V99");
-    private Field f = new Field("X");
-    private Field f2 = new Field("X");
-    private Field oKat = new Field("XX");
-    private Field i = new Field("999");
-    private Field budkol = new Field("99");
-    private Field tmpBkstvftg = new Field("XXXX");
-    private Field wsOmv = new Field("X");
-    private Field xxxxx = new Field("X");
-    private Field ffaktEof = new Field("X");
-    private Field frektEof = new Field("X");
-    private Field tmpPfak = new Field("---9,99");
-    private Field kans = new Field("XXXX");
-    private Field pled = new Field("XXXX");
-    private Field stat = new Field("9");
-    private Field ptypEg = new Field("X");
-    private Field ptypI = new Field("X");
-    private Field ptypJ = new Field("X");
-    private Field mtid = new Field("X");
-    private Field minlager = new Field("9(9)");
-    private Field tmpAntal = new Field("S9(9)");
-    private Field tmpCount = new Field("X");
-    private Field tmpZzz9 = new Field("ZZZ9");
-    private Field tmpLager = new Field("S9(9)");
-    private Field tmpBel = new Field("S9(9)");
-    private Field vb1AntRub = new Field("9");
-    private Field vb1AntRad = new Field("9");
-    private Field n = new Field("999");
-    private Field y = new Field("999");
-    private Field z = new Field("999");
-    private Field s = new Field("999");
-    private Field ss = new Field("999");
-    private Field tklar = new Field("X");
-    private Field pstart = new Field("999");
-    private Field preadnext = new Field("999");
-    private Field arkivnrf = new Field("9(6)");
-    private Field arkivnrt = new Field("9(6)");
-    private Field arkstatJ = new Field("X");
-    private Field arkstatN = new Field("X");
-    private Field arkstatI = new Field("X");
-    private Field upplagtfr = new Field("9(8)");
-    private Field upplagtt = new Field("9(8)");
-    private Field po = new Field("X(20)");
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webbu6.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webbu6.this, pa);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webbu6.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webbu6.this, pa);
-    private lib.pro.Nattpost pronatt=new lib.pro.Nattpost(Webbu6.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webbu6.this, pa);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webbu6.this);
-    private lib.pro.Mpss mpss=new lib.pro.Mpss(Webbu6.this);
-    private lib.pro.Mpsu mpsu=new lib.pro.Mpsu(Webbu6.this);
-    private Field tmp200 = new Field("X(200)");
-    private Field antalNoll = new Field("9999");
-    private Field s11 = new Field("S9(9)V99");
-    private Field s12 = new Field("S9(9)V99");
-    private Field f = new Field("X");
-    private Field f2 = new Field("X");
-    private Field oKat = new Field("XX");
-    private Field i = new Field("999");
-    private Field ii = new Field("999");
-    private Field budkol = new Field("99");
-    private Field tmpBkstvftg = new Field("XXXX");
-    private Field wsOmv = new Field("X");
-    private Field xxxxx = new Field("X");
-    private Field ffaktEof = new Field("X");
-    private Field frektEof = new Field("X");
-    private Field tmpPfak = new Field("---9,99");
-    private Field kans = new Field("XXXX");
-    private Field pled = new Field("XXXX");
-    private Field stat = new Field("9");
-    private Field ptypEg = new Field("X");
-    private Field ptypI = new Field("X");
-    private Field ptypJ = new Field("X");
-    private Field mtid = new Field("X");
-    private Field minlager = new Field("9(9)");
-    private Field tmpAntal = new Field("S9(9)");
-    private Field tmpCount = new Field("X");
-    private Field tmpZzz9 = new Field("ZZZ9");
-    private Field tmpLager = new Field("S9(9)");
-    private Field tmpBel = new Field("S9(9)");
-    private Field vb1AntRub = new Field("9");
-    private Field vb1AntRad = new Field("9");
-    private Field n = new Field("999");
-    private Field z = new Field("999");
-    private Field s = new Field("999");
-    private Field ss = new Field("999");
-    private Field tklar = new Field("X");
-    private Field pstart = new Field("999");
-    private Field preadnext = new Field("999");
-    private Field arkivnrf = new Field("9(6)");
-    private Field arkivnrt = new Field("9(6)");
-    private Field arkstatJ = new Field("X");
-    private Field arkstatN = new Field("X");
-    private Field arkstatI = new Field("X");
-    private Field upplagtfr = new Field("9(8)");
-    private Field upplagtt = new Field("9(8)");
-    private Field po = new Field("X(20)");
-    private Field tmpFilnamn = new Field("X(50)");
-    private Field websortFilnamn = new Field("X(50)");
-    private Field startpos = new Field("99999");
-    private Field langd = new Field("99999");
-    private Field tmp10000 = new Field("X(10000)");
-    private Field tmp10000b = new Field("X(10000)");
-    private Field tmp30000 = new Field("X(30000)");
-    private Field tmpAnt = new Field("9(9)");
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webbuf1.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webbuf1.this);
--- a/server.src/prg/pro/Webbux1.java
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webbux1.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Webbux1.this, pa);
-    private lib.pro.Avtppost proavtp=new lib.pro.Avtppost(Webbux1.this, pa);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webbux1.this);



-    private Field w1 = new Field("XXXX");
-    private Field w2 = new Field("9999");
-    private Field w3 = new Field("X(35)");
-    private Field spaLnr = new Field("9999");
-    private void skrivRader() {
-    }
-
--- a/server.src/prg/pro/Webbux3.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webbux3.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webbux3.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webbux3.this, pa);



-    private Field tmpBel = new Field("S9(8)V99");
-    private Field tmpHel = new Field("S9(8)");
-    private Field lstBel = new Field("--------9,99");
-    private Field s1 = new Field("S9(9)V99");
-    private Field s2 = new Field("S9(9)V99");
-    private Field f = new Field("X");
-    private Field f2 = new Field("X");
-    private Field datum = new Field("9(8)");
-    private Field oKat = new Field("XX");
-    private Field operatingSystem = new Field("X(10)", "UNIX");
-    private Field lnr1 = new Field("999");
-    private Field inPost = new Field("X(2000)");
-    private Field i = new Field("999");
-    private Field antalrader = new Field("999");
-    private Field x = new Field("9999");
-    private Field y = new Field("9999");
-    private Field getFel = new Field("X");
-    private Field getNamn = new Field("X(50)");
-    private Field spaLnr = new Field("9999");
-    private void delsparat() {
-        spaValue.set("RADERA");
-        tmp.set(SPACE);
-        tmp.set(concat("X","\u0001","BUX","\u0001","BURAD","\u0001",spaName,"\u0001","0","\u0001"));
-        display("UPONCOMMAND-LINE",tmp,"\n");
-        call("prg.bas.webspar", spaValue);
-    }
-
-    private void getfield() {
-        getFel.set("N");
-        tmp.set(SPACE);
-        acceptFrom("CONSOLE",tmp);
-        tmp.convert(new String(new char[]{0x0A,0x0D}),new String(new char[]{0x20,0x20}));
-        if (!(tmp.ref(1,2).equals("--"))) {
-            getFel.set("J");
-            return;
-        }
-        x.set(0);
-        x.increment(tmp.countTrailing(SPACE));
-        if (tmp.ref(new Constant("299").subtract(x),2).equals("--")) {
-            getFel.set("S");
-            return;
-        }
-        tmp.set(SPACE);
-        acceptFrom("CONSOLE",tmp);
-        tmp.convert(new String(new char[]{0x0A,0x0D}),new String(new char[]{0x20,0x20}));
-        x.set(0);
-        x.increment(tmp.countBefore("; name="));
-        if (x.equals(300)) {
-            getFel.set("J");
-            return;
-        }
-        x.increment(9);
-        y.set(0);
-        y.increment(tmp.ref(x).countBefore("\"")); "
-        if (y.equals(0)) {
-            getFel.set("J");
-            return;
-        }
-        if (!(tmp.ref(x,y).equals(getNamn.ref(1,y)))) {
-            getFel.set("J");
-            return;
-        }
-        tmp.set(SPACE);
-        acceptFrom("CONSOLE",tmp);
-        tmp.convert(new String(new char[]{0x0A,0x0D}),new String(new char[]{0x20,0x20}));
-        if (!(tmp.equals(SPACE))) {
-            getFel.set("J");
-            return;
-        }
-        tmp.set(SPACE);
-        acceptFrom("CONSOLE",tmp);
-        tmp.convert(new String(new char[]{0x0A,0x0D}),new String(new char[]{0x20,0x20}));
-    }
-
-    private void lasUpp() {
-        call(webpara.webut, "<SCRIPT>document.cookie='%0=; path=/; expires=0'</SCRIPT>", datum);
-    }
-
-    private void avbryt() {
-        call(webpara.webut, "<SCRIPT>");
-        //     CALL WEBUT USING "window.parent.parent.h.location.search='?PRG/PRO/WEBTID+%k'" DATUM 
-        call(webpara.webut, "parent.h.location.search='?PRG/PRO/WEBTID+%k'", datum);
-        call(webpara.webut, "</SCRIPT>");
-        closeDown();
-        atergang();
-        return;
-    }
-
-
--- a/server.src/prg/pro/Webfa.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webfa.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webfa.this, pa);
-    private Field path = new Field("X(50)");
-    private Field y = new Field("99999");
-    private Field oldMeda = new Field("XXXX");
-    private Field oldKat = new Field("99");

-    private Field summa = new Field("X");
-    private Field radtyp = new Field("X");
--- a/server.src/prg/pro/Webfa2.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webfa2.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webfa2.this, pa);
-    private lib.pro.Befapost probefa=new lib.pro.Befapost(Webfa2.this, pa);
-    private Field path = new Field("X(50)");
-    private Field y = new Field("99999");
-    private Field oldMeda = new Field("XXXX");
-    private Field oldKat = new Field("99");
-    private Field oldUtyp = new Field("X");

-    private Field summa = new Field("X");
-    private Field radtyp = new Field("X");

--- a/server.src/prg/pro/Webfaki.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webfaki.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webfaki.this);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webfaki.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webfaki.this, pa);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(Webfaki.this, pa);
-    private lib.pro.Tidfpost protidf=new lib.pro.Tidfpost(Webfaki.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp100 = new Field("X(100)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field ptrl2 = new Field("99999");
-    private Field ptrl3 = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field flagga1 = new Field("X");






-    private Field opened = new Field("X");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field ti = new Field("99999");
-    private Field lnr = new Field("999");
-    private void skrivFsort() {
-        fsortPost.write();
-    }
-
--- a/server.src/prg/pro/Webfako.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webfako.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webfako.this);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webfako.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webfako.this, pa);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(Webfako.this, pa);
-    private lib.pro.Tidfpost protidf=new lib.pro.Tidfpost(Webfako.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp100 = new Field("X(100)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field ptrl2 = new Field("99999");
-    private Field ptrl3 = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field flagga1 = new Field("X");






-    private Field opened = new Field("X");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field ti = new Field("99999");
-    private Field lnr = new Field("999");
-    private void skrivFsort() {
-        fsortPost.write();
-    }
-
--- a/server.src/prg/pro/Webfakt.java
-            lib.bok.Parapost.fd para=bokpara.get();
--- a/server.src/prg/pro/Webfrg.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Webfrg.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webfrg.this);
-    private lib.bas.Std std=new lib.bas.Std(Webfrg.this);
-    private lib.pro.Faanpost profaan=new lib.pro.Faanpost(Webfrg.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Webfrg.this, pa);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webfrg.this);
-    private Field tmp = new Field("X(50)");
-    private Field tmps = new Field("X(1000)");
-    private Field ii = new Field("9999");
-    private Field nej = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field selGrp = new Field("XXXX");
-    private Field antal = new Field("9(5)");
-    private Field projlnr = new Field("9999");
-    private Field projlnrTst = new Field("9999");
-    private Field kundid = new Field("XXXX");
-    private Field kundidTst = new Field("XXXX");
-    private Field kaktiva = new Field("X", "N");
-    private Field kegna = new Field("X", "N");
-    private Field aktiva = new Field("X");
-    private Field egna = new Field("X");
-    private Field endslut = new Field("X");
-    private Field laga = new Field("S9(9)");
-    private Field lagi = new Field("S9(9)");
-    private Field lago = new Field("S9(9)");
-    private Field ffaktEof = new Field("X");
-    private Field lstBel = new Field("ZZBZZZBZZ9-");
-    private Field tmpBkstvftg = new Field("XXXX");
-    private Field x = new Field("99");
-    private Field fakFinns = new Field("X");
-    private Field kunFak = new Field("S9(9)V99");
-    private Field kunFakBet = new Field("S9(9)V99");
-    private Field totFak = new Field("S9(9)V99");
-    private Field totFakBet = new Field("S9(9)V99");
-    private Field totFakForf = new Field("S9(9)V99");
-    private Field totFakForfBet = new Field("S9(9)V99");
-    private Field obet = new Field("X");
-    private Field forf = new Field("X");
-    private Field nb = new Field("S9(9)");
-    private Field nc = new Field("S9(9)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");
-    private Field koll = new Field("X");
-    private Field narg = new Field("S9(11)");
-    private Field prick1Datum = new Field("9(8)");
-    private Field prick2Datum = new Field("9(8)");
-    private Field endgrp = new Field("X(1000)");
-    private Field finnsBa = new Field("X");
-    private Field finnsBo = new Field("X");
-    private Field endforf = new Field("X");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webhist.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webhist.this);
-    private lib.kun.Parapost kunpara=new lib.kun.Parapost(Webhist.this, pa);
--- a/server.src/prg/pro/Webjust.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webjust.this);
-    private lib.pro.Ifatpost proifat=new lib.pro.Ifatpost(Webjust.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webjust.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field medGrptht = new Field("X(4)");
-    private Field proGrptht = new Field("X(4)");
-    private Field krabBel = new Field("S9(9)V99");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");



-    private Field startdat = new Field("9(8)");
-    private Field slutdat = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");






-    private Field opened = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field sum2Belopp = new Field("S9(9)V99");
-    private Field tmpStyle = new Field("X(20)");
-    private Field betaBel = new Field("S9(10)V99");
-    private Field betaDatum = new Field("9(8)");
-    private Field xmlFilnamn = new Field("X(50)");
-    private Field xslFilnamn = new Field("X(50)");
-    private Field sumAco = new Field("S9(9)");
-    private Field sumArv = new Field("S9(9)");
-    private Field sumInk = new Field("S9(9)");
-    private Field sumOvr = new Field("S9(9)");
-    private Field sum2Aco = new Field("S9(9)");
-    private Field sum2Arv = new Field("S9(9)");
-    private Field sum2Ink = new Field("S9(9)");
-    private Field sum2Ovr = new Field("S9(9)");
--- a/server.src/prg/pro/Webka.java
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Webka.this, pa);
-    private Field i = new Field("99");
-    private Field tmp3 = new Field("999");
-    private Field tmpBehorig = new Field("X");
-    private Field ny = new Field("X");
--- a/server.src/prg/pro/Webka0.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webka0.this);
-    private Field c = new Field("999");
-    private Field tmp3 = new Field("999");
-    private Field tmpBehorig = new Field("X");
-    private Field bokst = new Field("X");
--- a/server.src/prg/pro/Webkorr9.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webkorr9.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webkorr9.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl3 = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field flagga1 = new Field("X");






-    private Field opened = new Field("X");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum1c = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field j = new Field("99999");
-    private Field ti = new Field("99999");
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webkorri.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webkorri.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webkorri.this);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webkorri.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webkorri.this, pa);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(Webkorri.this, pa);
-    private lib.pro.Tidfpost protidf=new lib.pro.Tidfpost(Webkorri.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp100 = new Field("X(100)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field ptrl3 = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field flagga1 = new Field("X");






-    private Field opened = new Field("X");
-    private Field selMeda = new Field("X(1000)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field ti = new Field("99999");
--- a/server.src/prg/pro/Webkorro.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webkorro.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webkorro.this);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webkorro.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webkorro.this, pa);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(Webkorro.this, pa);
-    private lib.pro.Tidfpost protidf=new lib.pro.Tidfpost(Webkorro.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp100 = new Field("X(100)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field ptrl3 = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field flagga1 = new Field("X");






-    private Field opened = new Field("X");
-    private Field selMeda = new Field("X(1000)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field ti = new Field("99999");
--- a/server.src/prg/pro/Webkr21i.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webkr21i.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webkr21i.this);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webkr21i.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webkr21i.this, pa);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(Webkr21i.this, pa);
-    private lib.pro.Tidfpost protidf=new lib.pro.Tidfpost(Webkr21i.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp100 = new Field("X(100)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field ptrl2 = new Field("99999");
-    private Field ptrl3 = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field flagga1 = new Field("X");






-    private Field opened = new Field("X");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field ti = new Field("99999");
-    private Field lnr = new Field("999");
-    private void skrivFsort() {
-        fsortPost.write();
-    }
-
--- a/server.src/prg/pro/Webkred.java
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(Webkred.this);
-    private lib.kun.Faktpost kunfakt=new lib.kun.Faktpost(Webkred.this, pa);
-    private lib.pri.Tugdpost pritugd=new lib.pri.Tugdpost(Webkred.this);
-    private lib.pri.Ugfdpost priugfd=new lib.pri.Ugfdpost(Webkred.this);
-    private lib.pri.Prispost pripris=new lib.pri.Prispost(Webkred.this);
-    private lib.pri.Vdagpost privdag=new lib.pri.Vdagpost(Webkred.this);
-    private lib.bas.Std std=new lib.bas.Std(Webkred.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webkred.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field i = new Field("99999");
-    private Field j = new Field("99999");
-    private Field x = new Field("999999");
-    private Field kund = new Field("X(8)");
-    private Field kreditFaktBet = new Field("S9(9)");
-    private Field kreditFaktObet = new Field("S9(9)");
-    private Field kreditPlan = new Field("S9(9)");
-    private Field kreditOrder = new Field("S9(9)");
-    private Field kreditObet = new Field("S9(9)");
-    private Field kreditTot = new Field("S9(9)");
-    private Field kreditLimit = new Field("S9(9)");
-    private Field kreditKvar = new Field("S9(9)");
-    private Field kreditKund = new Field("X(8)");
-    private Field kreditOver = new Field("X(4)");
-    private Field kreditOverTop = new Field("X(4)");
-    private Field kreditOverTop2 = new Field("X(4)");
-    private Field kreditPlanPek = new Field("99999");
-    private Field kreditFordPek = new Field("S9(9)");
-    private Field kreditFordBelopp = new Field("S9(9)");
-    private Field kreditToday = new Field("9(8)");
-    private Field kreditDgrToday = new Field("9(6)");
-    private Field kreditDgrInf = new Field("9(6)");
-    private Field kreditKolla = new Field("X");
-    private Field kreditKunFinns = new Field("X");
-    private Field kreditObetKund = new Field("X(8)");
-        lib.pri.Tidnpost.fd pris_tidn=prisPritidn.get();
--- a/server.src/prg/pro/Webkrr21.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webkrr21.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webkrr21.this);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webkrr21.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webkrr21.this, pa);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(Webkrr21.this, pa);
-    private lib.pro.Tidfpost protidf=new lib.pro.Tidfpost(Webkrr21.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp100 = new Field("X(100)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field ptrl2 = new Field("99999");
-    private Field ptrl3 = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field flagga1 = new Field("X");






-    private Field opened = new Field("X");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field ti = new Field("99999");
-    private Field lnr = new Field("999");
-    private void skrivFsort() {
-        fsortPost.write();
-    }
-
--- a/server.src/prg/pro/Weblasa.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Weblasa.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Weblasa.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Weblasa.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Weblasa.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Weblasa.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Weblasa.this);
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");



-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p3 = new Field("X(1000)");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field ptr = new Field("99999");
-    private Field ptrl = new Field("99999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
--- a/server.src/prg/pro/Weblisti.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Weblisti.this, pa);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Weblisti.this);
-    private lib.bas.Std std=new lib.bas.Std(Weblisti.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Weblisti.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Weblisti.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Weblisti.this);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Weblisti.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Weblisti.this, pa);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(Weblisti.this, pa);
-    private lib.pro.Tidfpost protidf=new lib.pro.Tidfpost(Weblisti.this, pa);
-    private lib.pro.Peripost properi=new lib.pro.Peripost(Weblisti.this, pa);
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmp100 = new Field("X(100)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field ptrl3 = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field flagga1 = new Field("X");






-    private Field opened = new Field("X");
-    private Field selMeda = new Field("X(1000)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field ti = new Field("99999");
-    private Field felkod = new Field("999");
-    private Field beh = new Field("X");
-    private Field tmpPalgpro = new Field("S9(3)V99");
-    private Field tmpPrisink = new Field("S9(7)V99");
--- a/server.src/prg/pro/Weblisto.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Weblisto.this, pa);
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Weblisto.this);
-    private lib.bas.Std std=new lib.bas.Std(Weblisto.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Weblisto.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Weblisto.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Weblisto.this);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Weblisto.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Weblisto.this, pa);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(Weblisto.this, pa);
-    private lib.pro.Tidfpost protidf=new lib.pro.Tidfpost(Weblisto.this, pa);
-    private lib.pro.Peripost properi=new lib.pro.Peripost(Weblisto.this, pa);

-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field tmp100 = new Field("X(100)");
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field ptrl3 = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field flagga1 = new Field("X");






-    private Field opened = new Field("X");
-    private Field selMeda = new Field("X(1000)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field j = new Field("99999");
-    private Field x = new Field("99999");
-    private Field ti = new Field("99999");
-    private Field felkod = new Field("999");
-    private Field beh = new Field("X");
-    private Field tmpPrispenh = new Field("S9(7)V99");
--- a/server.src/prg/pro/Weblonex.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Weblonex.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Weblonex.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Weblonex.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Weblonex.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Weblonex.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Weblonex.this);
-    private Field post = new Field("X(1000)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field tmpHel = new Field("S9(10)");
-    private Field i = new Field("99999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p1 = new Field("X(50)");
-    private Field p2 = new Field("X(50)");
-    private Field p3 = new Field("X(10000)");
-    private Field p4 = new Field("X(1000)");
-    private Field p5 = new Field("X(50)");
-    private Field p6 = new Field("X");



-    private Field oldTim = new Field("S9(5)V99");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field ejSlutford = new Field("X");
-    private Field tmpKey = new Field("X(1000)");
-    private Field oldKey = new Field("X(12)");
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Weboa.java
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Weboa.this, pa);
-    private lib.pro.Forepost profore=new lib.pro.Forepost(Weboa.this, pa);
-    private lib.pro.Ofhupost proofhu=new lib.pro.Ofhupost(Weboa.this, pa);
-    private lib.pro.Ofrapost proofra=new lib.pro.Ofrapost(Weboa.this, pa);
-    private lib.pro.Ofprpost proofpr=new lib.pro.Ofprpost(Weboa.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Weboa.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Weboa.this);
-    private Field post = new Field("X(1000)");



-    private Field tmpBel = new Field("X(50)");
-    private Field ltbetv = new Field("XXX");
-    private Field y = new Field("99999");



-    private Field accBel = new Field("9(9)");
-    private Field accDat = new Field("9(8)");
-    private Field utskrift = new Field("X");
--- a/server.src/prg/pro/Weboa3.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Weboa3.this);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Weboa3.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Weboa3.this);
-    private Field fsortEof = new Field("X", "N");



-    private Field ii = new Field("99");
-    private Field ij = new Field("99");
-    private Field fel = new Field("99");
-    private void avbryt() {
-        call(webpara.webut, "<SCRIPT>");
-        //     CALL WEBUT USING "parent.m.location.search='?PRG/PRO/WEBTID+%k+O'" DATUM 
-        call(webpara.webut, "opener.parent.goback()");
-        call(webpara.webut, "</SCRIPT>");
-        closeDown();
-        atergang();
-        return;
-    }
-
--- a/server.src/prg/pro/Webofak.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webofak.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webofak.this);
-    private lib.pro.Budwpost probudw=new lib.pro.Budwpost(Webofak.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field fifabEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp3 = new Field("X(300)");
-    private Field tmpPost = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("S9(9)V99");
-    private Field krabBel = new Field("S9(9)V99");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field tmpDatum = new Field("9(8)");
-    private Field startdat = new Field("9(8)");
-    private Field slutdat = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field fi = new Field("X");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field pleveGodkBetsatt = new Field("X(10)");
-    private Field pleveStdVal = new Field("XXX");
-    private Field pleveUtlBank = new Field("XXX");
-    private Field pleveBgcMedia = new Field("X");
-    private Field pleveMediaBgc = new Field("X");
-    private Field charCount = new Field("99", 0);
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpHel = new Field("S9(9)");
-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");






-    private Field opened = new Field("X");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field tmpStyle = new Field("X(20)");
-    private Field betaBel = new Field("S9(10)V99");
-    private Field betaDatum = new Field("9(8)");
--- a/server.src/prg/pro/Webou.java
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Webou.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webou.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webou.this);
-    private lib.pro.Pma1post propma1=new lib.pro.Pma1post(Webou.this, pa);
-    private Field path = new Field("X(50)");



-    private Field ltbetv = new Field("XXX");
-    private Field i = new Field("999");
-    private Field y = new Field("99999");



-    private void skrivPben() {
-        call(webpara.webut, "PBEN%c%m", 9, "Ben");
-    }
-
-    private void skrivPtyp() {
-        call(webpara.webut, "PTYP%c%m%c%m%c%m", 9, "Typ", 9, "Ext", 9, "Spc");
-    }
-
-    private void skrivAtyp() {
-        lib.pro.Defkpost.fd defk=prodefk.get();
-        defk.key.init();
-        defk.typkk.set("T");
-        pa.recid.set(da.defk);
-        pa.action.set(da.startEg);
-        prorecarea.recArea.set(defk.post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        defk.post.set(prorecarea.recArea);
-        if (pa.ok()) {
-            pa.recid.set(da.defk);
-            pa.action.set(da.readnext);
-            prorecarea.recArea.set(defk.post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            defk.post.set(prorecarea.recArea);
-        }
-        while (!(!((pa.ok())) || !(defk.typkk.equals("T")))) {
-            if (defk.toMtid.equals("J")) {
-                call("prg.bas.stdmatch", defk.mtidMgrp, webpara.mgrptht, defk.toMtid);
-            }
-            if (defk.toMtid.equals("J")) //             MOVE D-BENKK(STD-SPRAKNR-EGET) TO TMP 
-            {
-                call(webpara.spkod, defk.post, webpara.spben);
-                if (webpara.spben.equals(SPACE)) {
-                    webpara.spben.set(defk.kod);
-                }
-                //             CALL "PRG/BAS/STDTOWIN" USING D-ARBTYP 
-                //             CALL "PRG/BAS/STDTOWIN" USING SPBEN  
-                //             DISPLAY D-ARBTYP X"09" SPBEN X"09" UPON SYSOUT  
-                call(webpara.webut, "%8%c%S %c", defk.arbtyp, 9, webpara.spben, 9);
-            }
-            pa.recid.set(da.defk);
-            pa.action.set(da.readnext);
-            prorecarea.recArea.set(defk.post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            defk.post.set(prorecarea.recArea);
-        }
-    }
-
-    private void skrivPma1() {
-        lib.pro.Pma1post.fd pma1=propma1.get();
-        pma1.key.init();
-        pa.recid.set(da.pma1);
-        pa.action.set(da.startEg);
-        prorecarea.recArea.set(pma1.post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        pma1.post.set(prorecarea.recArea);
-        if (pa.ok()) {
-            pa.recid.set(da.pma1);
-            pa.action.set(da.readnext);
-            prorecarea.recArea.set(pma1.post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            pma1.post.set(prorecarea.recArea);
-        }
-        while ((pa.ok())) {
-            if (pma1.benamn[0].equals(SPACE)) {
-                pma1.benamn[0].set(pma1.kod);
-            }
-            //         CALL "PRG/BAS/STDTOWIN" USING PMA1-KOD 
-            //         CALL "PRG/BAS/STDTOWIN" USING PMA1-BENAMN(1)  
-            //         DISPLAY PMA1-KOD X"09" PMA1-BENAMN(1) X"09" UPON SYSOUT  
-            call(webpara.webut, "%8%c%S %c", pma1.kod, 9, pma1.benamn[0], 9);
-            pa.recid.set(da.pma1);
-            pa.action.set(da.readnext);
-            prorecarea.recArea.set(pma1.post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            pma1.post.set(prorecarea.recArea);
-        }
-    }
-
-    private void skrivMeda() {
-        lib.pro.Medapost.fd meda=promeda.get();
-        meda.medaridG.init();
-        pa.recid.set(da.meda);
-        pa.action.set(da.startEg);
-        prorecarea.recArea.set(meda.post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        meda.post.set(prorecarea.recArea);
-        if (pa.ok()) {
-            pa.recid.set(da.meda);
-            pa.action.set(da.readnext);
-            prorecarea.recArea.set(meda.post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            meda.post.set(prorecarea.recArea);
-        }
-        while (!(!((pa.ok())) || !(meda.space.equals(SPACE)))) {
-            if (meda.status.compareTo(9)<0 && meda.plKa.equals("J")) {
-                if (meda.namnmed.equals(SPACE)) {
-                    meda.namnmed.set(meda.medarid);
-                }
-                //             CALL "PRG/BAS/STDTOWIN" USING M-MEDARID 
-                //             CALL "PRG/BAS/STDTOWIN" USING M-NAMNMED 
-                //             DISPLAY M-MEDARID X"09" M-NAMNMED X"09" UPON SYSOUT 
-                call(webpara.webut, "%8%c%S %c", meda.medarid, 9, meda.namnmed, 9);
-            }
-            pa.recid.set(da.meda);
-            pa.action.set(da.readnext);
-            prorecarea.recArea.set(meda.post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            meda.post.set(prorecarea.recArea);
-        }
-    }
-
-    private void skrivGrupper() {
-        lib.pro.Defkpost.fd defk=prodefk.get();
-        defk.key.init();
-        defk.typkk.set("U");
-        pa.recid.set(da.defk);
-        pa.action.set(da.startEg);
-        prorecarea.recArea.set(defk.post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        defk.post.set(prorecarea.recArea);
-        if (pa.ok()) {
-            pa.recid.set(da.defk);
-            pa.action.set(da.readnext);
-            prorecarea.recArea.set(defk.post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            defk.post.set(prorecarea.recArea);
-        }
-        while (!(!((pa.ok())) || !(defk.typkk.equals("U")))) //         IF D-TO-MTID = "J" 
-        {
-            call(webpara.spkod, defk.post, webpara.spben);
-            if (webpara.spben.equals(SPACE)) {
-                webpara.spben.set(defk.kod.ref(1,2));
-            }
-            //             CALL "PRG/BAS/STDTOWIN" USING D-KOD 
-            //             CALL "PRG/BAS/STDTOWIN" USING SPBEN  
-            //             DISPLAY D-KOD(1:2) X"09" SPBEN X"09" UPON SYSOUT 
-            call(webpara.webut, "%8%c%S %c", defk.kod.ref(1,2), 9, webpara.spben, 9);
-            //         END-IF 
-            pa.recid.set(da.defk);
-            pa.action.set(da.readnext);
-            prorecarea.recArea.set(defk.post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            defk.post.set(prorecarea.recArea);
-        }
-    }
-
-    private void skrivListaOld() {
-        lib.pro.Ofhupost.fd ofhu=proofhu.get();
-        ofhu.post.init();
-        pa.recid.set(da.ofhu);
-        pa.action.set(da.startEg);
-        prorecarea.recArea.set(ofhu.post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        ofhu.post.set(prorecarea.recArea);
-        if (pa.ok()) {
-            pa.recid.set(da.ofhu);
-            pa.action.set(da.readnext);
-            prorecarea.recArea.set(ofhu.post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            ofhu.post.set(prorecarea.recArea);
-        }
-        while (pa.ok()) {
-            display("UPONSYSOUT",ofhu.key,"\t","\n");
-            pa.recid.set(da.ofhu);
-            pa.action.set(da.readnext);
-            prorecarea.recArea.set(ofhu.post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            ofhu.post.set(prorecarea.recArea);
-        }
-    }
-
--- a/server.src/prg/pro/Webovs.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Webovs.this);
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Webovs.this);
-    private lib.bas.Behopost basbeho=new lib.bas.Behopost(Webovs.this);
-    private lib.bas.Systpost bassyst=new lib.bas.Systpost(Webovs.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webovs.this);
-    private lib.bas.Std std=new lib.bas.Std(Webovs.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webovs.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webovs.this);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webovs.this, pa);
-    private lib.bas.Faxqpost basfaxq=new lib.bas.Faxqpost(Webovs.this);
-    private lib.lev.Faktpost levfakt=new lib.lev.Faktpost(Webovs.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(300)");
-    private Field tmp80 = new Field("X(80)");
-    private Field post = new Field("X(1000)");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field tmpHel = new Field("S9(10)");
-    private Field y = new Field("99999");
-    private Field z = new Field("99999");
-    private Field poster = new Field("99999");
-    private Field p6 = new Field("X");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field lnr = new Field("999999");
-    private Field lstBel = new Field("----B---B--9,99");
-    private Field lstKod = new Field("999999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp = new Field("S9(10)V99");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmpAntFore = new Field("99");
-    private Field tmpAntEfter = new Field("99");
-    private Field felnr = new Field("X(4)");
-    private Field tmpStreck = new Field("X");
-    private Field pleveBgVarning = new Field("X");
-    private Field tmpFak = new Field("9");
-    private Field tmpKtrl = new Field("9");






-    private Field tmpNum = new Field("S9(9)V99");
-    private Field tmpNum2 = new Field("S9(9)V99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field tmp6n = new Field("999999");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field ulNamn = new Field("X(50)");
-    private Field endaktiva = new Field("X");
-    private Field endegna = new Field("X");
-    private Field endover = new Field("XXXXXXXX");
-    private Field sokval = new Field("X(20)");
-    private Field aktiv = new Field("X");
-    private Field lstBelv4 = new Field("----B---B--9,9999");
-    private Field lstBelv1 = new Field("----B---B--9,9");
-    private Field flagga1 = new Field("X");
-    private Field selGrp = new Field("X(1000)");
-    private Field selEndakt = new Field("X");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field sum1 = new Field("S9(10)");
-    private Field sum2 = new Field("S9(10)");
-    private Field sum3 = new Field("S9(10)V99");
-    private Field sum1b = new Field("S9(10)");
-    private Field sum2b = new Field("S9(10)");
-    private Field antal1 = new Field("99999");
-    private Field wsBelavv = new Field("S9(9)");
-    private Field tmpKod = new Field("XXX");
-    private Field tmpSort = new Field("X");
-    private void skrivData() {
-        lib.pro.Projpost.fd proj=proproj.get();
-        proj.post.init();
-        call("prg.pro.p4io", pa.paraArea, da.proj, da.startEg, proj.post);
-        if (pa.ok()) {
-            call("prg.pro.p4io", pa.paraArea, da.proj, da.readnext, proj.post);
-        }
-        if (pa.ok()) {
-            call("prg.pro.p4io", pa.paraArea, da.proj, da.readnext, proj.post);
-        }
-        while (pa.ok()) {
-            if (proj.projlnr.compareTo(ZERO)>0 && (selKund.equalsEither(proj.kundid, SPACE)) && 
-                    (selGrp.equalsEither(proj.grptht, SPACE)) && 
-                    (proj.projstat.compareTo(7)<=0 || !(selEndakt.equals("J")))) {
-                for (i.set(1);(!(i.compareTo(25)>0 || proj.prisOvrKod[i.getInt()-1].compareTo(ZERO)<=0));i.increment(1)) {
-                    skrivRad();
-                }
-            }
-            call("prg.pro.p4io", pa.paraArea, da.proj, da.readnext, proj.post);
-        }
-    }
-
-    private void skrivHuvud() {
-        call(webpara.webut, "<html xmlns:excel='urn:schemas-microsoft-com:office:excel'>");
-        call(webpara.webut, "<head>");
-        call(webpara.webut, "<meta http-equiv=Content-Type content=%ctext/html; charset=ISO-8859-1%c>", 34, 34);
-        call(webpara.webut, "<style type='text/css'>");
-        call(webpara.webut, "td.v {border-style:solid;border-top:none;border-left:.5pt solid;border-bottom:none;border-right:.5pt solid;white-space:nowrap;text-align:left}");
-        call(webpara.webut, "td.h {border-style:solid;border-top:none;border-left:.5pt solid;border-bottom:none;border-right:.5pt solid;white-space:nowrap;text-align:right}");
-        //     CALL WEBUT USING "table äborder-bottom:.5pt solidå" 
-        call(webpara.webut, "td.vrub {font-weight:bold;border-top:.5pt solid;border-left:.5pt solid;border-bottom:.5pt solid;border-right:.5pt solid;background:#c0c0c0;text-align:left}");
-        call(webpara.webut, "td.hrub {font-weight:bold;border-top:.5pt solid;border-left:.5pt solid;border-bottom:.5pt solid;border-right:.5pt solid;background:#c0c0c0;text-align:right}");
-        call(webpara.webut, "td.vsum {font-weight:bold;border-top:.5pt solid;border-left:.5pt solid;border-bottom:.5pt solid; border-right:.5pt solid;white-space:nowrap;text-align:left}");
-        call(webpara.webut, "td.hsum {font-weight:bold;border-top:.5pt solid;border-left:.5pt solid;border-bottom:.5pt solid; border-right:.5pt solid;white-space:nowrap;text-align:right}");
-        //     CALL WEBUT USING "td.vsum äfont-weight:bold;border-top:none;border-left:.5pt solid;border-bottom:none; border-right:.5pt solid;white-space:nowrap;text-align:leftå" 
-        //     CALL WEBUT USING "td.hsum äfont-weight:bold;border-top:none;border-left:.5pt solid;border-bottom:none; border-right:.5pt solid;white-space:nowrap;text-align:rightå" 
-        call(webpara.webut, "@page {mso-page-orientation:landscape;}");
-        call(webpara.webut, "</style>");
-        call(webpara.webut, "<xml>");
-        call(webpara.webut, "<excel:ExcelWorkbook>");
-        call(webpara.webut, "<excel:ExcelWorksheets>");
-        call(webpara.webut, "<excel:ExcelWorksheet>");
-        call(webpara.webut, "<excel:Name>%0</excel:Name>", "Mervärdesrapport");
-        call(webpara.webut, "<excel:WorksheetOptions>");
-        call(webpara.webut, "<excel:Print>");
-        call(webpara.webut, "<excel:ValidPrinterInfo/>");
-        call(webpara.webut, "</excel:Print>");
-        call(webpara.webut, "</excel:WorksheetOptions>");
-        call(webpara.webut, "</excel:ExcelWorksheet>");
-        call(webpara.webut, "</excel:ExcelWorksheets>");
-        call(webpara.webut, "</excel:ExcelWorkbook>");
-        call(webpara.webut, "</xml>");
-        call(webpara.webut, "</head>");
-        call(webpara.webut, "<body>");
-        call(webpara.webut, "<table>");
-        skrivRubriker();
-    }
-
-    private void skrivRubriker() {
-        call(webpara.webut, "<tr>");
-        call(webpara.webut, "<th class=vrub>%m</th>", "Pro");
-        call(webpara.webut, "<th class=vrub>%m</th>", "OvK");
-        call(webpara.webut, "<th class=vrub>%m</th>", "Pri");
-        call(webpara.webut, "</tr>");
-    }
-
-    private void skrivRad() {
-        lib.pro.Projpost.fd proj=proproj.get();
-        call(webpara.webut, "<tr>");
-        call(webpara.webut, "<td class=v>%S %0</td>", proj.kundid, proj.projlnr);
-        call(webpara.webut, "<td class=h>%0</td>", proj.prisOvrKod[i.getInt()-1]);
-        call(webpara.webut, "<td class=h>%N</td>", proj.prisOvrUt[i.getInt()-1]);
-        call(webpara.webut, "</tr>");
-    }
-
-    private void skrivFot() {
-        call(webpara.webut, "</table>");
-        call(webpara.webut, "</body>");
-        call(webpara.webut, "</html>");
-    }
-
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpb.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webpb.this);
-    private lib.pro.Ofhupost proofhu=new lib.pro.Ofhupost(Webpb.this, pa);
-    private lib.pro.Ofrapost proofra=new lib.pro.Ofrapost(Webpb.this, pa);
-    private lib.pro.Ofprpost proofpr=new lib.pro.Ofprpost(Webpb.this, pa);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webpb.this);
-    private lib.pro.Pma1post propma1=new lib.pro.Pma1post(Webpb.this, pa);
-    private lib.pro.Avtppost proavtp=new lib.pro.Avtppost(Webpb.this, pa);
-    private Field tmpAvtp = new Field("X(30000)");
-    private Field tmpAvtp2 = new Field("X(30000)");
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("X(50)");
-    private Field ltbetv = new Field("XXX");
-    private Field y = new Field("99999");



-    private Field tmpDatum1 = new Field("9(8)");
-    private Field hittat = new Field("X");
-    private Field lnr = new Field("999");
-    private Field tKund = new Field("XXXX");
-    private Field bp = new Field("XXXX9999");
-    private Field aktiv = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field flagga1 = new Field("X");
-    private Field flagga2 = new Field("X");
-    private Field tmpKurs = new Field("999999V9999");
-    private Field tmpKursAntal = new Field("999999");
-    private Field tmpKurs2 = new Field("999999V9999");
-    private Field tmpKursAntal2 = new Field("999999");
-    private Field sumBelopp = new Field("S9(10)V99");
--- a/server.src/prg/pro/Webprk.java
-    private lib.bas.Std std=new lib.bas.Std(Webprk.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webprk.this);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Webprk.this, pa);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webprk.this);
-    private Field q = new Field("XXX");
-    private Field sel = new Field("X(56)");
-    private Field tg = new Field("X");
-    private Field otg = new Field("X");
-    private Field c = new Field("999");
-    private Field tmp3 = new Field("999");
-    private Field operatingSystem = new Field("X(10)", "UNIX");
-    private Field tmpBehorig = new Field("X");
-    private Field sortering = new Field("X");
-    private Field sortnamn = new Field("X(50)");
-    private Field bokst = new Field("X");
-    private Field frame = new Field("X");
--- a/server.src/prg/pro/Webpro0.java
-    private Field tmps = new Field("X(1000)");
-    private Field ii = new Field("9999");
-    private Field kq = new Field("XXX");
-    private Field q = new Field("XXX");
-    private Field operatingSystem = new Field("X(10)", "UNIX");
-    private Field tmpBkstvftg = new Field("XXXX");
-    private Field x = new Field("99");
--- a/server.src/prg/pro/Webpro1.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Webpro1.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webpro1.this);
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro1.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Webpro1.this, pa);
-    private Field tmpBkstvftg = new Field("XXXX");
-    private Field x = new Field("99");
-    private Field perfr = new Field("9(6)");
-    private Field perti = new Field("9(6)");
-    private Field flagga1 = new Field("X");
-    private void fsortStart() {
-        fsortEof.set("N");
-        fsort.start("NOT<", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortReadnext() {
-        fsortEof.set("N");
-        fsort.readNext();
-        if (fsort.atEnd()) {
-            fsortEof.set("J");
-        }
-        if (fsortFs.equals("9D")) {
-            fsort.start(">", "fsort_key");
-            c_sleep("1");
-            fsortReadnext();
-            return;
-        }
-        if (fsortFs.compareTo("00")>0) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpro10.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro10.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webpro10.this, pa);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webpro10.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webpro10.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webpro10.this, pa);
-    private Field tb = new Field("S9(9)V99");
-    private Field totTimLagJ = new Field("S9(9)");
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpro11.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro11.this, pa);
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpro12.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro12.this, pa);
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpro13.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro13.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webpro13.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webpro13.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Webpro13.this);
-    private Field tmps = new Field("X(1000)");
-    private Field ii = new Field("9999");
-    private Field fr = new Field("XXX");
-    private Field lag = new Field("S9(9)");
-    private Field tb = new Field("S9(9)");
-    private Field fkodKat = new Field("99");
-    private Field fkodKod = new Field("999");
-    private Field fkodEof = new Field("X");
-    private Field ffaktEof = new Field("X");
-    private Field totTimLagJ = new Field("S9(9)");
-    private Field mk = new Field("XX");

-    private Field fxpr = new Field("S9(9)V99");
-    private Field tmpPfak = new Field("--9.99");
-    private Field lstBel = new Field("--B---B--9");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field f = new Field("X");
-    private Field f2 = new Field("X");
-    private Field paTimpris = new Field("9(5)");
-    private Field tmpTimpris = new Field("9(5)");
-    private Field wsBelavv = new Field("S9(9)");
-    private void fkodFirst() {
-        lib.pro.Statpost.fd stat=prostat.get();
-        fkodEof.set("J");
-        stat.key.init();
-        stat.projidG.set(projekt);
-        stat.saldotyp.set("M");
-        stat.kat.set(fkodKat);
-        stat.kod.set(fkodKod);
-        pa.recid.set(da.stat);
-        pa.action.set(da.startEg);
-        prorecarea.recArea.set(stat.post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.ok()) {
-            pa.recid.set(da.stat);
-            pa.action.set(da.readnext);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            stat.post.set(prorecarea.recArea);
-            if (pa.ok() && stat.projidG.equals(projekt) && stat.saldotyp.equals("M")) {
-                fkodEof.set("N");
-            }
-            else {
-                stat.kat.set(99);
-                stat.kod.set(999);
-            }
-        }
-        else {
-            stat.kat.set(99);
-            stat.kod.set(999);
-        }
-        fkodKat.set(stat.kat);
-        fkodKod.set(stat.kod);
-    }
-
-    private void fkodReadnext() {
-        lib.pro.Statpost.fd stat=prostat.get();
-        fkodEof.set("J");
-        stat.key.init();
-        stat.projidG.set(projekt);
-        stat.saldotyp.set("M");
-        stat.kat.set(fkodKat);
-        stat.kod.set(fkodKod);
-        pa.recid.set(da.stat);
-        pa.action.set(da.startEg);
-        prorecarea.recArea.set(stat.post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.ok()) {
-            pa.recid.set(da.stat);
-            pa.action.set(da.readnext);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            stat.post.set(prorecarea.recArea);
-            if (pa.ok() && stat.projidG.equals(projekt) && stat.saldotyp.equals("M") && stat.kat.equals(fkodKat) && stat.kod.equals(fkodKod)) {
-                pa.recid.set(da.stat);
-                pa.action.set(da.readnext);
-                call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                stat.post.set(prorecarea.recArea);
-            }
-            if (pa.ok() && stat.projidG.equals(projekt) && stat.saldotyp.equals("M")) {
-                fkodEof.set("N");
-            }
-            else {
-                stat.kat.set(99);
-                stat.kod.set(999);
-            }
-        }
-        else {
-            stat.kat.set(99);
-            stat.kod.set(999);
-        }
-        fkodKat.set(stat.kat);
-        fkodKod.set(stat.kod);
-    }
-
--- a/server.src/prg/pro/Webpro15.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro15.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webpro15.this, pa);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webpro15.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webpro15.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webpro15.this, pa);
-    private Field lag = new Field("S9(9)V99");
-    private Field tb = new Field("S9(9)");
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpro16.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro16.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webpro16.this, pa);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webpro16.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Webpro16.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webpro16.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webpro16.this, pa);
-    private Field tb = new Field("S9(9)V99");
-    private Field totTimLagJ = new Field("S9(9)");
-    private void skrivUframe() {
-        call(webpara.webut, "<html><head>");
-        call(webpara.webut, webpara.stil);
-        call(webpara.webut, "</head>");
-        call(webpara.webut, "<body class=upp>");
-        call("prg.pro.webhist", "AKD");
-    }
-
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpro17.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro17.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webpro17.this, pa);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webpro17.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webpro17.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webpro17.this, pa);
-    private Field lag = new Field("S9(9)V99");
-    private Field tb = new Field("S9(9)");
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpro18.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro18.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webpro18.this, pa);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webpro18.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webpro18.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webpro18.this, pa);
-    private Field tb = new Field("S9(9)V99");
-    private Field totTimLagJ = new Field("S9(9)");
-    private void skrivUframe() {
-        call(webpara.webut, "<html><head>");
-        call(webpara.webut, webpara.stil);
-        call(webpara.webut, "</head>");
-        call(webpara.webut, "<body class=upp>");
-        call("prg.pro.webhist", "AKD");
-    }
-
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpro19.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webpro19.this);
-    private lib.pro.Jarvpost projarv=new lib.pro.Jarvpost(Webpro19.this, pa);
-    private lib.pro.Jinkpost projink=new lib.pro.Jinkpost(Webpro19.this, pa);
-    private lib.pro.Vandpost provand=new lib.pro.Vandpost(Webpro19.this, pa);
-    private lib.pro.Avtppost proavtp=new lib.pro.Avtppost(Webpro19.this, pa);
-    private lib.pro.Jmatpost projmat=new lib.pro.Jmatpost(Webpro19.this, pa);
-    private Field l6 = new Field("9");
-    private Field l7 = new Field("9");
-    private Field l8 = new Field("9");
-    private Field l9 = new Field("9");
-    private Field l10 = new Field("9");
-    private Field s1 = new Field("S9(9)V99");
-    private Field s2 = new Field("S9(9)V99");
-    private Field f = new Field("X");
-    private Field f2 = new Field("X");
-    private Field i = new Field("99");
-    private Field budkol = new Field("99");
-    private Field budtim = new Field("S9(9)V99");
-    private Field tmpBkstvftg = new Field("XXXX");
-    private Field wsOmv = new Field("X");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");
-    private Field ffaktEof = new Field("X");
-    private Field frektEof = new Field("X");
-    private Field tmpPfak = new Field("---9,99");
-    private Field tid = new Field("9(8)");
-    private Field wsBelavv = new Field("S9(9)");
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpro1b.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Webpro1b.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webpro1b.this);
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro1b.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Webpro1b.this, pa);
-    private lib.pro.Replpost prorepl=new lib.pro.Replpost(Webpro1b.this, pa);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(Webpro1b.this, pa);
-    private Field sumRepltim = new Field("S9(4)V99");
-    private Field tmpPris = new Field("9(5)");
-    private Field sumReplpris = new Field("S9(10)");
-    private Field tmpReplpris = new Field("S9(10)");
-    private Field tmpHel = new Field("S9(10)");
-    private Field lstBel = new Field("ZZBZZZBZZ9-");
-    private Field tmpBkstvftg = new Field("XXXX");
-    private Field x = new Field("99");
-    private Field perfr = new Field("9(6)");
-    private Field perti = new Field("9(6)");
-    private Field flagga1 = new Field("X");
-        lib.pro.Inktpost.fd inkt=proinkt.get();
-    private void fsortStart() {
-        fsortEof.set("N");
-        fsort.start("NOT<", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortReadnext() {
-        fsortEof.set("N");
-        fsort.readNext();
-        if (fsort.atEnd()) {
-            fsortEof.set("J");
-        }
-        if (fsortFs.equals("9D")) {
-            fsort.start(">", "fsort_key");
-            c_sleep("1");
-            fsortReadnext();
-            return;
-        }
-        if (fsortFs.compareTo("00")>0) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpro1k688.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Webpro1k688.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webpro1k688.this);
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro1k688.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Webpro1k688.this, pa);
-    private lib.pro.Replpost prorepl=new lib.pro.Replpost(Webpro1k688.this, pa);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(Webpro1k688.this, pa);
-    private Field sumRepltim = new Field("S9(4)V99");
-    private Field tmpPris = new Field("9(5)");
-    private Field sumReplpris = new Field("S9(10)");
-    private Field tmpReplpris = new Field("S9(10)");
-    private Field tmpHel = new Field("S9(10)");
-    private Field lstBel = new Field("ZZBZZZBZZ9-");
-    private Field tmpBkstvftg = new Field("XXXX");
-    private Field x = new Field("99");
-    private Field perfr = new Field("9(6)");
-    private Field perti = new Field("9(6)");
-    private void fsortStart() {
-        fsortEof.set("N");
-        fsort.start("NOT<", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortReadnext() {
-        fsortEof.set("N");
-        fsort.readNext();
-        if (fsort.atEnd()) {
-            fsortEof.set("J");
-        }
-        if (fsortFs.equals("9D")) {
-            fsort.start(">", "fsort_key");
-            c_sleep("1");
-            fsortReadnext();
-            return;
-        }
-        if (fsortFs.compareTo(new Constant("00"))>0) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpro20.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro20.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webpro20.this, pa);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webpro20.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webpro20.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webpro20.this, pa);
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpro23.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro23.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webpro23.this, pa);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webpro23.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webpro23.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Webpro23.this);
-    private Field tmps = new Field("X(1000)");
-    private Field ii = new Field("9999");
-    private Field fr = new Field("XXX");
-    private Field iii = new Field("9999", 0);
-    private Field lag = new Field("S9(9)");
-    private Field tb = new Field("S9(9)");
-    private Field totTimLagJ = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field lstBel = new Field("--B---B--9");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field s1 = new Field("S9(9)V99");
-    private Field s2 = new Field("S9(9)V99");
-    private Field f2 = new Field("X");
-    private Field oKat = new Field("XX");
--- a/server.src/prg/pro/Webpro24.java
-    private lib.pro.Stddata stddata=new lib.pro.Stddata(Webpro24.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webpro24.this);
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/Webpro25.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro25.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webpro25.this, pa);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webpro25.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webpro25.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webpro25.this, pa);
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpro26.java
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webpro26.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webpro26.this, pa);
-    private Field tmpEof = new Field("X");
--- a/server.src/prg/pro/Webpro27.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro27.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webpro27.this, pa);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webpro27.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Webpro27.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webpro27.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webpro27.this, pa);
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpro3.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webpro3.this);
-    private lib.pro.Mpss mpss=new lib.pro.Mpss(Webpro3.this);
-    private lib.pro.Mpsu mpsu=new lib.pro.Mpsu(Webpro3.this);
-    private Field fsortpEof = new Field("X", "N");
-    private Field tmp2 = new Field("X(100)");
-    private Field f2 = new Field("X");
-    private Field oKat = new Field("XX");
-    private Field budkol = new Field("99");
-    private Field tmpBkstvftg = new Field("XXXX");
-    private Field xxxxx = new Field("X");
-    private Field tmpZzz9 = new Field("ZZZ9");
-    private void skapaPrl() {
-    }
-
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpro30.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro30.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webpro30.this, pa);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webpro30.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webpro30.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webpro30.this, pa);
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpro33.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro33.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webpro33.this, pa);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webpro33.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webpro33.this, pa);
-    private Field fr = new Field("XXX");
-    private Field iii = new Field("9999", 0);
-    private Field lag = new Field("S9(9)");
-    private Field tb = new Field("S9(9)");
-    private Field totTimLagJ = new Field("S9(9)");
-    private Field lstBel = new Field("--B---B--9");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field s1 = new Field("S9(9)V99");
-    private Field s2 = new Field("S9(9)V99");
-    private Field f = new Field("X");
-    private Field f2 = new Field("X");
-    private Field oKat = new Field("XX");
--- a/server.src/prg/pro/Webpro34.java
-    private lib.pro.Stddata stddata=new lib.pro.Stddata(Webpro34.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webpro34.this);
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/Webpro35.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro35.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webpro35.this, pa);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webpro35.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webpro35.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webpro35.this, pa);
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpro37.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro37.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webpro37.this, pa);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webpro37.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Webpro37.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webpro37.this, pa);
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webpro37.this, pa);
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpro3c.java
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webpro3c.this);
-    private lib.pro.Mpss mpss=new lib.pro.Mpss(Webpro3c.this);
-    private lib.pro.Mpsu mpsu=new lib.pro.Mpsu(Webpro3c.this);
-    private Field fsortpEof = new Field("X", "N");
-    private Field f2 = new Field("X");
-    private Field oKat = new Field("XX");
-    private Field n = new Field("999");
-    private Field y = new Field("999");
-    private Field z = new Field("999");
-    private Field s = new Field("999");
-    private Field ss = new Field("999");
-    private Field po = new Field("X(20)");
-    private Field beh = new Field("X");
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpro4.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro4.this, pa);
-    private Field lag = new Field("S9(9)");
-    private Field fxpr = new Field("S9(9)V99");
-    private Field tmpPfak = new Field("---9,99");
--- a/server.src/prg/pro/Webpro40.java
-    private lib.pro.Stddata stddata=new lib.pro.Stddata(Webpro40.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webpro40.this);
-    private Field scTkn = new Field("X");
-    private Field scTknNr = new Field("999");
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/Webpro41.java
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/Webpro42.java
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webpro42.this, pa);
-    private lib.pro.Mrek mrek=new lib.pro.Mrek(Webpro42.this);
-    private lib.pro.Stddata stddata=new lib.pro.Stddata(Webpro42.this);
-    private lib.pro.Datab da=new lib.pro.Datab(Webpro42.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webpro42.this);
-    private Field vpos = new Field("99", 99);
-    private Field radakt = new Field("99");
-    private Field radstart = new Field("99");
-    private Field radmax = new Field("99");
-    private Field tomrad = new Field("X(76)", SPACE);
-    private void aInitiera() {
-        lib.pro.Medapost.fd meda=promeda.get();
-        trTab.init();
-        call(mrek.mrek, pa.paraArea, mrek.first, mrek.svar, mrek.post);
-        stddata.x.set(mrek.radnr.subtract(1));
-        while (!(!(mrek.ok()))) {
-            stddata.y.set(ZERO);
-            stddata.y.increment(mrek.text.countLeading(SPACE));
-            if (stddata.y.compareTo(vpos)<0) {
-                vpos.set(stddata.y);
-            }
-            radmax.set(mrek.radnr.subtract(stddata.x));
-            trtText[radmax.getInt()-1].set(mrek.text);
-            call(mrek.mrek, pa.paraArea, mrek.next, mrek.svar, mrek.post);
-        }
-        vpos.increment(1);
-        if (vpos.compareTo(35)>0) {
-            vpos.set(35);
-        }
-        call(mrek.mrek, pa.paraArea, mrek.close, mrek.svar, mrek.post);
-        if (mrek.cancel()) {
-            cancel(mrek.mrek);
-        }
-        rekv.key.set(lsKey);
-        call(rekv.rekv, pa.paraArea, rekv.read, rekv.svar, rekv.post);
-        ruppgTab.init();
-        rutText[0].set(concat(rekv.bestdat.ref(3,2),"-",rekv.bestdat.ref(5,2),"-",rekv.bestdat.ref(7,2)));
-        rutText[1].set(concat(rekv.levdat.ref(3,2),"-",rekv.levdat.ref(5,2),"-",rekv.levdat.ref(7,2)));
-        lstRekvnr.set(rekv.rekvnr);
-        while (!(!(lstRekvnrRed.ref(1,1).equals(SPACE)))) {
-            lstRekvnrRed.set(lstRekvnrRed.ref(2,7));
-        }
-        rutText[2].set(concat(rekv.aa.ref(3,2),"-",limit(lstRekvnrRed,SPACE)));
-        rutText[3].set(concat(rekv.kundid," ",rekv.projlnr));
-        proj.projidG.set(rekv.projidG);
-        prorecarea.recArea.set(proj.post);
-        pa.recid.set(da.proj);
-        pa.action.set(da.read);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        proj.post.set(prorecarea.recArea);
-        if (!(pa.ok())) //         CALL "PRG/BAS/VISA"          USING PARA-AREA "H002" STD-TEXT 
-            //         MOVE STD-TEXT                TO P-PROJBEN 
-        {
-        }
-        rutText[4].set(proj.projben);
-        rutText[5].set(rekv.namnkun);
-        meda.medaridG.set(SPACE);
-        meda.medarid.set(rekv.medarid);
-        prorecarea.recArea.set(meda.post);
-        pa.recid.set(da.meda);
-        pa.action.set(da.read);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        meda.post.set(prorecarea.recArea);
-        if (!(pa.ok())) //         CALL "PRG/BAS/VISA"          USING PARA-AREA "H002" STD-TEXT 
-            //         MOVE STD-TEXT                TO M-NAMNMED 
-        {
-        }
-        rutText[6].set(meda.namnmed);
-        lstPrisink.set(rekv.prisink);
-        rutText[7].set(lstPrisink);
-        rutText[10].set(rekv.lename);
-        rutText[11].set(rekv.leadr1);
-        rutText[12].set(rekv.leadr2);
-        rutText[13].set(rekv.leadr3);
-        rutText[14].set(rekv.leadr4);
-        rutText[15].set(rekv.lectry);
-        rutText[16].set(rekv.lefax);
-        lstBetvillk.set(rekv.betvillk);
-        rutText[17].set(lstBetvillk);
-        rutText[20].set(rekv.levadr1);
-        rutText[21].set(rekv.levadr2);
-        rutText[22].set(rekv.levadr3);
-        rutText[23].set(rekv.levadr4);
-        call(rekv.rekv, pa.paraArea, rekv.close, rekv.svar, rekv.post);
-        if (rekv.cancel()) {
-            cancel(rekv.rekv);
-        }
-        rtxt.key.init();
-        rtxt.aa.set(rekv.aa);
-        rtxt.rekvnr.set(rekv.rekvnr);
-        call(rtxt.rtxt, pa.paraArea, rtxt.startEg, rtxt.svar, rtxt.post);
-        stddata.x.set(1);
-        wsRadnr.set(1);
-        while (!(stddata.x.compareTo(24)>0)) {
-            arbRad.set(trtText[stddata.x.getInt()-1]);
-            if (rtxt.ok() && rekv.aa.equals(rtxt.aa) && rekv.rekvnr.equals(rtxt.rekvnr) && wsRadnr.equals(rtxt.radnr)) {
-                rutText[98].set(rtxt.text);
-                call(rtxt.rtxt, pa.paraArea, rtxt.next, rtxt.svar, rtxt.post);
-            }
-            else {
-                rutText[98].set(SPACE);
-            }
-            wsRadnr.increment(1);
-            wsRad.set(rutText[stddata.x.getInt()-1]);
-            call(webpara.webut, arbRad);
-        }
-        radakt.set(1);
-        radstart.set(1);
-        call(rtxt.rtxt, pa.paraArea, rtxt.close, rtxt.svar, rtxt.post);
-        if (rtxt.cancel()) {
-            cancel(rtxt.rtxt);
-        }
-    }
-
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/Webpro44.java
-    private lib.pro.Faktpost profakt=new lib.pro.Faktpost(Webpro44.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Webpro44.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webpro44.this);
-    private Field backlnr = new Field("9999");
-    private Field urval = new Field("9");
-    private Field scTkn = new Field("X");
-    private Field scTknNr = new Field("999");
-    private Field totMoms = new Field("S9(9)");
-    private Field oldCrtpos = new Field("9(4)");
-    private Field tmpBkstvftg = new Field("X(4)");
-    private Field tmpWindow = new Field("X(10)");
-    private Field tmpBitmap = new Field("9(9)");
-    private Field tmp80 = new Field("X(80)");
-    private Field lstBel = new Field("--B---B--9,99");
-    private Field lstHel = new Field("--B---B--9");
-    private Field frame = new Field("X");
-    private void skrivUframe() {
-        call(webpara.webut, "<html><head>");
-        call(webpara.webut, webpara.stil);
-        call(webpara.webut, "</head>");
-        call(webpara.webut, "<body class=upp>");
-        call("prg.pro.webhist", "FSP");
-    }
-
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/Webpro4p.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro4p.this, pa);
--- a/server.src/prg/pro/Webpro5.java
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webpro5.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webpro5.this, pa);
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro5.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Webpro5.this, pa);
-    private lib.pro.Lexipost prolexi=new lib.pro.Lexipost(Webpro5.this, pa);
-    private lib.pro.Textpost protext=new lib.pro.Textpost(Webpro5.this, pa);
-    private lib.pro.Mpss mpss=new lib.pro.Mpss(Webpro5.this);
-    private lib.pro.Stddata stddata=new lib.pro.Stddata(Webpro5.this);
-    private Field z13TknG = new Field("X(10)");
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
-    private void getcolBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("BAK ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAD1");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RUB ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAM ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FUNK");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RA24");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("MEDD");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("LEDT");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMO");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMC");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FONS");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("HALV");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/Webpro50.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webpro50.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webpro50.this, pa);
-    private lib.pro.Tidgpost protidg=new lib.pro.Tidgpost(Webpro50.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Webpro50.this, pa);
-    private lib.pro.Inktpost proinkt=new lib.pro.Inktpost(Webpro50.this, pa);
-    private Field lag = new Field("S9(9)");
-    private Field tb = new Field("S9(9)");
-    private Field totTimLagJ = new Field("S9(9)");
-    private Field tmpPfak = new Field("--9,99");
-    private Field lstBel = new Field("--B---B--9");
-    private Field s1 = new Field("S9(9)V99");
-    private Field s2 = new Field("S9(9)V99");
-    private Field f = new Field("X");
-    private Field f2 = new Field("X");
-    private Field startdat = new Field("9(8)");
-    private Field oKat = new Field("XX");
-    private Field x = new Field("99");
-    private Field tmpBkstvftg = new Field("XXXX");
-    private Field tmpValuta = new Field("XXX");
-    private void ffaktStart() {
-        lib.pro.Faktpost.fd fakt=profakt.get();
-        fakt.projidG.set(projekt);
-        pa.recid.set(da.fakt);
-        pa.action.set(da.startEg);
-        prorecarea.recArea.set(fakt.post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.ok()) {
-            ffaktEof.set("N");
-        }
-        else {
-            ffaktEof.set("J");
-        }
-    }
-
-    private void ffaktReadnext() {
-        ffaktReadnextLoop();
-    }
-
-    private void ffaktReadnextLoop() {
-        lib.pro.Faktpost.fd fakt=profakt.get();
-        pa.recid.set(da.fakt);
-        pa.action.set(da.readnext);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        fakt.post.set(prorecarea.recArea);
-        if (pa.ok() && (fakt.projidG.equals(projekt) || fakt.kundid.equals(kundid) && projlnr.equals(0))) {
-            ffaktEof.set("N");
-        }
-        else {
-            ffaktEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpro51.java
-    private lib.pro.Stddata stddata=new lib.pro.Stddata(Webpro51.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webpro51.this);
-    private Field scTkn = new Field("X");
-    private Field scTknNr = new Field("999");



-    private Field oldCrtpos = new Field("9(4)");
-    private Field tmpBkstvftg = new Field("X(4)");
-    private Field tmpWindow = new Field("X(10)");
-    private Field tmpBitmap = new Field("9(9)");
-    private Field tmp80 = new Field("X(80)");
-    private Field lstBel = new Field("--B---B--9,99");
-    private Field lstHel = new Field("--B---B--9");
-    private void old1() {
-        lib.pro.Faktpost.fd fakt=profakt.get();
-        call(webpara.webut, "<BR><HR><PRE>");
-        tmp80.set(SPACE);
-        tmp80.ref(55,5).set("Summa");
-        lstHel.set(scTot);
-        tmp80.ref(60,10).set(lstHel);
-        call(webpara.webut, tmp80);
-        call(webpara.webut, " ");
-        tmp80.set(SPACE);
-        //             MOVE "WEB" TO STD-PGM 
-        //             MOVE "H" TO VISAKOD(1:1) 
-        //             MOVE D(1:S) TO VISAKOD(2:) 
-        //             CALL "PRG/BAS/VISA" USING PARA-AREA VISAKOD STD-TEXT 
-        //             CALL "PRG/BAS/STDTOWIN" USING STD-TEXT 
-        tmp80.ref(1,4).set("Moms");
-        lstBel.set(fakt.momspro);
-        tmp80.ref(5,13).set(lstBel);
-        tmp80.ref(19,13).set("% p&aring; kr");
-        lstHel.set(scTot);
-        tmp80.ref(32,13).set(lstHel);
-        lstHel.set(totMoms);
-        tmp80.ref(66,10).set(lstHel);
-        call(webpara.webut, tmp80);
-        call(webpara.webut, " ");
-        tmp80.set(SPACE);
-        tmp80.ref(54,6).set("Totalt");
-        scTot.increment(fakt.fakmoms);
-        lstHel.set(scTot);
-        tmp80.ref(60,10).set(lstHel);
-        call(webpara.webut, tmp80);
-        call(webpara.webut, "</PRE>");
-    }
-
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/Webpro52.java
-    private lib.pro.Stddata stddata=new lib.pro.Stddata(Webpro52.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webpro52.this);
-    private lib.bas.Header header=new lib.bas.Header(Webpro52.this);
-    private Field scTkn = new Field("X");
-    private Field scTknNr = new Field("999");



-    private Field oldCrtpos = new Field("9(4)");
-    private Field tmpBitmap = new Field("9(9)");
-    private Field tmpOk = new Field("X");
-    private Field tmpWindow = new Field("X(10)");
-    private Field tmpScan = new Field("X(50)");
-    private Field tmpScan2 = new Field("X(50)");
-    private void visaFakt() {
-    }
-
-    private void fbokfLast() {
-        if (fbokfNr.compareTo(200)>0) {
-            fbokfNr.set(200);
-        }
-        while (!(fbokfNr.equals(ZERO) || !(fbokfTKto[fbokfNr.getInt()-1].equals(SPACE)))) {
-            fbokfNr.decrement(1);
-        }
-        if (fbokfNr.compareTo(ZERO)>0 && !(fbokfTKto[fbokfNr.getInt()-1].equals(SPACE))) {
-            fbokfKto.set(fbokfTKto[fbokfNr.getInt()-1]);
-            fbokfKst.set(fbokfTKst[fbokfNr.getInt()-1]);
-            fbokfKbr.set(fbokfTKbr[fbokfNr.getInt()-1]);
-            fbokfBel.set(fbokfTBel[fbokfNr.getInt()-1]);
-            fbokfEof.set("N");
-        }
-        else {
-            fbokfEof.set("J");
-        }
-    }
-
-    private void fbokfReadprev() {
-        fbokfNr.decrement(1);
-        if (fbokfNr.compareTo(ZERO)>0 && !(fbokfTKto[fbokfNr.getInt()-1].equals(SPACE))) {
-            fbokfKto.set(fbokfTKto[fbokfNr.getInt()-1]);
-            fbokfKst.set(fbokfTKst[fbokfNr.getInt()-1]);
-            fbokfKbr.set(fbokfTKbr[fbokfNr.getInt()-1]);
-            fbokfBel.set(fbokfTBel[fbokfNr.getInt()-1]);
-            fbokfEof.set("N");
-        }
-        else {
-            fbokfEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webpro53.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webpro53.this);
-    private Field pgm = new Field("X(12)", "045053");
-    private Field scTkn = new Field("X");
-    private Field scTknNr = new Field("999");



-    private Field scRad = new Field("X(76)");
-    private Field oldCrtpos = new Field("9(4)");
-    private Field tmpBitmap = new Field("9(9)");
-    private Field tmpRad = new Field("X(76)");
-    private Field tmpOk = new Field("X");
-    private Field tmpAntal = new Field("S9(9)");
-    private Field tmpWindow = new Field("X(10)");
-    private Field paId = new Field("X(8)");
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/Webpro54.java
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Webpro54.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webpro54.this);
-    private Field scTkn = new Field("X");
-    private Field scTknNr = new Field("999");



-    private Field oldCrtpos = new Field("9(4)");
-    private Field tmpBkstvftg = new Field("X(4)");
-    private Field tmpWindow = new Field("X(10)");
-    private Field tmpBitmap = new Field("9(9)");
-    private void skrivFrameset() {
-        setContentType("text/html");
-        webpara.jhtml.set("J");
-        call(webpara.webut, "<HTML>");
-        call(webpara.webut, "<HEAD>");
-        call(webpara.webut, "<TITLE>");
-        call(webpara.webut, "MARATHON PL - PROJEKTSTATUS");
-        call(webpara.webut, "</TITLE>");
-        call(webpara.webut, "<script src=/std.html></script>");
-        call(webpara.webut, "<SCRIPT>");
-        //     CALL WEBUT USING "if (document.cookie.indexOf('FxRxExSxH2=J')>=0)ädocument.cookie='FxRxExSxH2=N'åelseäwindow.location.reload()å" 
-        call(webpara.webut, "</SCRIPT>");
-        call(webpara.webut, "</HEAD>");
-        call(webpara.webut, "<FRAMESET ROWS='50,*' border=0>");
-        call(webpara.webut, "   <FRAME SRC='%0?PRG/PRO/WEBPRO51+%u+%0+%0+%0+%0+%0' NAME=u scrolling=no>", path, kundid, projlnr, paFaknr, urval, backlnr, "U");
-        call(webpara.webut, "   <FRAME SRC='%0?PRG/PRO/WEBPRO51+%u+%0+%0+%0+%0+%0' NAME=h>", path, kundid, projlnr, paFaknr, urval, backlnr, "H");
-        call(webpara.webut, "</FRAMESET>");
-    }
-
-    private void colorBakgrund() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (std.stdHasColor.equals("Y")) {
-            if (std.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (std.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-    //     COPY "SRC/PRO/LIB/Z04MED.PD". 
-    //     COPY "SRC/PRO/LIB/Z17EXIT.PD". 
-
--- a/server.src/prg/pro/Webpro55.java
-    private lib.pro.Skripost proskri=new lib.pro.Skripost(Webpro55.this, pa);
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
--- a/server.src/prg/pro/Webpro6.java
-    private Field spara = new Field("X(50)");
-    private Field startprg = new Field("X(20)");
-    private Field startnr = new Field("999");
--- a/server.src/prg/pro/Webproaj.java
-    private lib.pro.Tidrpost protidr=new lib.pro.Tidrpost(Webproaj.this, pa);
-    private lib.pro.Nattpost pronatt=new lib.pro.Nattpost(Webproaj.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webproaj.this, pa);
-    private lib.pro.Avtppost proavtp=new lib.pro.Avtppost(Webproaj.this, pa);
-    private lib.pro.Peripost properi=new lib.pro.Peripost(Webproaj.this, pa);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Webproaj.this);
-    private lib.pro.Tidfpost protidf=new lib.pro.Tidfpost(Webproaj.this, pa);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webproaj.this);
-    private Field tmp = new Field("X(50)");
-    private Field typ = new Field("X");
-    private Field startdat = new Field("9(8)");
-    private Field slutdat = new Field("9(8)");
-    private Field timPerDag = new Field("S9(9)V99");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field startn = new Field("9(6)");
-    private Field vecka = new Field("9(6)");
-    private Field gt = new Field("9(6)");
-    private Field lt = new Field("9(6)");
--- a/server.src/prg/pro/Webproat.java
-    private lib.pro.Tidrpost protidr=new lib.pro.Tidrpost(Webproat.this, pa);
-    private lib.pro.Nattpost pronatt=new lib.pro.Nattpost(Webproat.this, pa);
-    private lib.pro.Almapost proalma=new lib.pro.Almapost(Webproat.this, pa);
-    private lib.pro.Calepost procale=new lib.pro.Calepost(Webproat.this, pa);
-    private lib.pro.Avtppost proavtp=new lib.pro.Avtppost(Webproat.this, pa);
-    private lib.pro.Peripost properi=new lib.pro.Peripost(Webproat.this, pa);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Webproat.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webproat.this);
-    private lib.pro.Tidfpost protidf=new lib.pro.Tidfpost(Webproat.this, pa);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webproat.this);
-    private Field typ = new Field("X");
-    private Field fsortEof = new Field("X");
-    private Field startdat = new Field("9(8)");
-    private Field slutdat = new Field("9(8)");
-    private Field tmp6 = new Field("9(6)");
-    private Field vecka = new Field("9(6)");
-    private Field gt = new Field("9(8)");
-    private Field lt = new Field("9(8)");
-    private Field tmpBelopp = new Field("S9(9)V99");
-    private Field timK = new Field("9(4)V99");
-    private void skrivpamdagar() {
-        lib.pro.Tidwpost.fd tidw=protidw.get();
-        lib.pro.Medapost.fd pro_meda=promeda.get();
-        lib.pro.Defkpost.fd defk=prodefk.get();
-        call("prg.bas.filut", "OPEN", pamFilnamn);
-        datum.ref(1,6).set(period);
-        datum.ref(7,2).set("01");
-        while (datum.ref(1,6).equals(period)) {
-            tidw.post.set(SPACE);
-            tidw.meda.set(pro_meda.medarid);
-            tidw.dat.set(datum);
-            tidw.typ.set("0");
-            tidw.lnr.set(ZERO);
-            call("prg.pro.p4io", pa.paraArea, da.tidw, da.read, tidw.post);
-            if (pa.ok()) {
-                ejSlutford.set(tidw.ejSlutford);
-            }
-            else {
-                ejSlutford.set("N");
-            }
-            tidw.post.set(SPACE);
-            sumTim.set(0);
-            tidw.meda.set(pro_meda.medarid);
-            tidw.dat.set(datum);
-            tidw.typ.set("1");
-            call("prg.pro.p4io", pa.paraArea, da.tidw, da.startEg, tidw.post);
-            if (pa.ok()) {
-                call("prg.pro.p4io", pa.paraArea, da.tidw, da.readnext, tidw.post);
-            }
-            while (!(!(pa.ok()) || !(tidw.meda.equals(pro_meda.medarid)) || !(tidw.dat.equals(datum)))) {
-                if (!(tidw.strotid.equals("J"))) {
-                    defk.post.init();
-                    defk.typkk.set("B");
-                    defk.kod.set(tidw.kod);
-                    call("prg.pro.p4io", pa.paraArea, da.defk, da.read, defk.post);
-                    if (defk.kattillh.compareTo(99)<0) {
-                        sumTim.increment(tidw.tim);
-                    }
-                }
-                call("prg.pro.p4io", pa.paraArea, da.tidw, da.readnext, tidw.post);
-            }
-            if (ejSlutford.equals("J") || (sumTim.compareTo(timK)<0 && datum.compareTo(webpara.today)<=0 && !(ejSlutford.equals("S")))) {
-                call("prg.bas.strut", tmp80, "%D", datum);
-                call("prg.bas.filut", "WRITE", tmp80);
-            }
-            call("prg.bas.stddat", "A", datum, "000001", datum);
-        }
-        call("prg.bas.filut", "CLOSE");
-    }
-
--- a/server.src/prg/pro/Webprobu.java
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webprobu.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Webprobu.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webprobu.this, pa);
-    private lib.pro.Avtppost proavtp=new lib.pro.Avtppost(Webprobu.this, pa);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webprobu.this);

-    private Field i = new Field("999");
-    private Field tmpBel = new Field("S9(9)");
-    private Field w1 = new Field("XXXX");
-    private Field w2 = new Field("9999");
-    private Field w3 = new Field("X(35)");
-    private Field mall = new Field("X");
--- a/server.src/prg/pro/Webproj.java
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Webproj.this, pa);
-    private Field q = new Field("XXX");
-    private Field operatingSystem = new Field("X(10)", "UNIX");
-    private Field tmpBehorig = new Field("X");
-    private Field bokst = new Field("X");
--- a/server.src/prg/pro/Webproja.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webproja.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Webproja.this);
--- a/server.src/prg/pro/Webproji.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webproji.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webproji.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Webproji.this);
--- a/server.src/prg/pro/Webprojm.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webprojm.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webprojm.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Webprojm.this);
--- a/server.src/prg/pro/Webpros.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webpros.this);
-    private lib.pro.Datab da=new lib.pro.Datab(Webpros.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webpros.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Webpros.this, pa);



-    private Field l1 = new Field("9");
-    private Field l2 = new Field("9");
-    private Field l3 = new Field("9");
-    private Field l4 = new Field("9");
-    private Field l5 = new Field("9");
-    private Field l6 = new Field("9");
-    private Field l7 = new Field("9");
-    private Field l8 = new Field("9");
-    private Field l9 = new Field("9");
-    private Field l10 = new Field("9");
--- a/server.src/prg/pro/Webprp.java
-    private lib.bok.Parapost bokpara=new lib.bok.Parapost(Webprp.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Webprp.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webprp.this);
-    private Field tmps = new Field("X(1000)");
-    private Field ii = new Field("9999");
-    private Field kq = new Field("XXX");
-    private Field q = new Field("XXX");
-    private Field sel = new Field("X(56)");
-    private Field ffaktEof = new Field("X");
-    private Field lstBel = new Field("ZZBZZZBZZ9-");
-    private Field tmpBkstvftg = new Field("XXXX");
-    private Field x = new Field("99");
-    private Field frame = new Field("X");
--- a/server.src/prg/pro/Webre.java
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webre.this, pa);
-    private lib.pro.Textpost protext=new lib.pro.Textpost(Webre.this, pa);
-    private lib.pro.Avtppost proavtp=new lib.pro.Avtppost(Webre.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webre.this);
-    private lib.pro.Mrek mrek=new lib.pro.Mrek(Webre.this);
-    private Field tmp80 = new Field("X(80)");



-    private Field tKund = new Field("XXXX");
-    private void skrivPben() {
-        call(webpara.webut, "PBEN%c%m", 9, "Ben");
-    }
-
-    private void skrivPtyp() {
-        call(webpara.webut, "PTYP%c%m%c%m%c%m", 9, "Typ", 9, "Ext", 9, "Spc");
-    }
-
-    private void skrivMeda() {
-        promeda.get().medaridG.init();
-        pa.recid.set(da.meda);
-        pa.action.set(da.startEg);
-        prorecarea.recArea.set(promeda.get().post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        promeda.get().post.set(prorecarea.recArea);
-        if (pa.ok()) {
-            pa.recid.set(da.meda);
-            pa.action.set(da.readnext);
-            prorecarea.recArea.set(promeda.get().post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            promeda.get().post.set(prorecarea.recArea);
-        }
-        while (!(!((pa.ok())) || !(promeda.get().space.equals(SPACE)))) {
-            if (promeda.get().status.compareTo(9)<0) {
-                if (promeda.get().namnmed.equals(SPACE)) {
-                    promeda.get().namnmed.set(promeda.get().medarid);
-                }
-                //             CALL "PRG/BAS/STDTOWIN" USING M-NAMNMED 
-                //             CALL "PRG/BAS/STDTOWIN" USING M-MEDARID 
-                //             DISPLAY M-MEDARID X"09" M-NAMNMED X"09" UPON SYSOUT 
-                call(webpara.webut, "%8%c%S %c", promeda.get().medarid, 9, promeda.get().namnmed, 9);
-            }
-            pa.recid.set(da.meda);
-            pa.action.set(da.readnext);
-            prorecarea.recArea.set(promeda.get().post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            promeda.get().post.set(prorecarea.recArea);
-        }
-    }
-
-    private void skrivKtkp() {
-        call(webpara.webut, "KTKP%c%m%c", 9, "Ktp", 9);
-    }
-
-    private void skrivFarv() {
-        call(webpara.webut, "FARV%c%m %m%c", 9, "Fpr", "Arv", 9);
-    }
-
-    private void skrivFink() {
-        call(webpara.webut, "FINK%c%m %m%c", 9, "Fpr", "Ink", 9);
-    }
-
-    private void skrivFovr() {
-        call(webpara.webut, "FOVR%c%m %m%c", 9, "Fpr", "Ovr", 9);
-    }
-
-    private void skrivFsum() {
-        call(webpara.webut, "FSUM%c%m %m%c", 9, "Fpr", "Sum", 9);
-    }
-
-    private void skrivFtxt() {
-        call(webpara.webut, "FTXT%c%m%c", 9, "SFa", 9);
-    }
-
-    private void skrivMast() {
-        call(webpara.webut, "MAST%c%m%c\\", 9, "KA4", 9);
-    }
-
-    private void skrivProjlista() {
-        kundid.set(p1);
-        proproj.get().projidG.init();
-        proproj.get().kundid.set(kundid);
-        pa.recid.set(da.proj);
-        pa.action.set(da.startEg);
-        prorecarea.recArea.set(proproj.get().post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        proproj.get().post.set(prorecarea.recArea);
-        if (pa.ok()) {
-            pa.recid.set(da.proj);
-            pa.action.set(da.readnext);
-            prorecarea.recArea.set(proproj.get().post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            proproj.get().post.set(prorecarea.recArea);
-        }
-        while (!(!(pa.ok()) || !(proproj.get().kundid.equals(kundid)))) {
-            if (!(proproj.get().projlnr.equals(0)) && (!(proproj.get().projstat.equals(9)))) {
-                behormeda();
-                if (fi.equals("J")) {
-                    call(webpara.webut, "%8%c%S %c\\", proproj.get().projlnr, 9, proproj.get().projben, 9);
-                    call(webpara.webut, "%S %c\\", proproj.get().namnkun, 9);
-                    call(webpara.webut, "%S %c\\", proproj.get().uadr1ku, 9);
-                    call(webpara.webut, "%S %c\\", proproj.get().uadr2ku, 9);
-                    call(webpara.webut, "%S %c\\", proproj.get().oadrku, 9);
-                    call(webpara.webut, "%S %c", proproj.get().land, 9);
-                }
-            }
-            pa.recid.set(da.proj);
-            pa.action.set(da.readnext);
-            prorecarea.recArea.set(proproj.get().post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            proproj.get().post.set(prorecarea.recArea);
-        }
-    }
-
-    private void skrivMrekantalrader() {
-        i.set(0);
-        std.stdBkstvftg.set(webpara.ftg);
-        mrek.post.init();
-        call(mrek.mrek, pa.paraArea, mrek.first, mrek.svar, mrek.post);
-        while (!(!(mrek.ok()))) {
-            i.increment(mrek.text.count("#99"));
-            call(mrek.mrek, pa.paraArea, mrek.next, mrek.svar, mrek.post);
-        }
-        display("UPONSYSOUT",i,"\n");
-    }
-
-    private void skrivKundlista() {
-        prokund.get().post.init();
-        pa.recid.set(da.kund);
-        pa.action.set(da.startEg);
-        prorecarea.recArea.set(prokund.get().post);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        prokund.get().post.set(prorecarea.recArea);
-        if (pa.ok()) {
-            pa.recid.set(da.kund);
-            pa.action.set(da.readnext);
-            prorecarea.recArea.set(prokund.get().post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            prokund.get().post.set(prorecarea.recArea);
-        }
-        if (pa.ok() && !(prokund.get().noll.equals(0))) {
-            prokund.get().noll.set(9999);
-            pa.recid.set(da.kund);
-            pa.action.set(da.startEg);
-            prorecarea.recArea.set(prokund.get().post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            prokund.get().post.set(prorecarea.recArea);
-            if (pa.ok()) {
-                pa.recid.set(da.kund);
-                pa.action.set(da.readnext);
-                prorecarea.recArea.set(prokund.get().post);
-                call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                prokund.get().post.set(prorecarea.recArea);
-            }
-        }
-        while (pa.ok()) {
-            if ((prokund.get().status.compareTo(8)<0 && !(prokund.get().projtyp.equals("I")) && !(prokund.get().projtyp.equals("9")) && prokund.get().noll.equals(0) && !(prokund.get().kundid.equals("0000")))) {
-                if (profore.get().sekrNiv.compareTo(0)>0) {
-                    tKund.set(prokund.get().kundid);
-                    call("prg.pro.webpro0", tKund, "X");
-                    pa.recid.set(da.kund);
-                    pa.action.set(da.startEg);
-                    prorecarea.recArea.set(prokund.get().post);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    prokund.get().post.set(prorecarea.recArea);
-                    if (pa.ok()) {
-                        pa.recid.set(da.kund);
-                        pa.action.set(da.readnext);
-                        prorecarea.recArea.set(prokund.get().post);
-                        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                        prokund.get().post.set(prorecarea.recArea);
-                    }
-                }
-                else {
-                    tKund.set(1);
-                }
-                if (tKund.compareTo(ZERO)>0) {
-                    call(webpara.webut, "%8%c%S %c", prokund.get().kundid, 9, prokund.get().internben, 9);
-                }
-            }
-            pa.recid.set(da.kund);
-            pa.action.set(da.readnext);
-            prorecarea.recArea.set(prokund.get().post);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            prokund.get().post.set(prorecarea.recArea);
-            if (pa.ok() && !(prokund.get().noll.equals(0))) {
-                prokund.get().noll.set(9999);
-                pa.recid.set(da.kund);
-                pa.action.set(da.startEg);
-                prorecarea.recArea.set(prokund.get().post);
-                call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                prokund.get().post.set(prorecarea.recArea);
-                if (pa.ok()) {
-                    pa.recid.set(da.kund);
-                    pa.action.set(da.readnext);
-                    prorecarea.recArea.set(prokund.get().post);
-                    call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-                    prokund.get().post.set(prorecarea.recArea);
-                }
-            }
-        }
-    }
-
-    private void skrivSkrivarval() {
-        proskri.get().post.init();
-        pa.recid.set(da.skri);
-        prorecarea.recArea.set(proskri.get().post);
-        pa.action.set(da.startEg);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.ok()) {
-            proskri.get().post.set(prorecarea.recArea);
-            pa.recid.set(da.skri);
-            prorecarea.recArea.set(proskri.get().post);
-            pa.action.set(da.readnext);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            proskri.get().post.set(prorecarea.recArea);
-        }
-        while (pa.ok()) //         IF SKTYP = "BASTROFF" 
-        {
-            if (proskri.get().name.compareTo(SPACE)>0) {
-                display("UPONSYSOUT",proskri.get().kod,new String(new char[]{0x09}),proskri.get().name,new String(new char[]{0x09}),"\n");
-            }
-            else {
-                display("UPONSYSOUT",proskri.get().kod,new String(new char[]{0x09}),proskri.get().kod,new String(new char[]{0x09}),"\n");
-            }
-            pa.recid.set(da.skri);
-            prorecarea.recArea.set(proskri.get().post);
-            pa.action.set(da.readnext);
-            call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-            proskri.get().post.set(prorecarea.recArea);
-        }
-    }
-
--- a/server.src/prg/pro/Webreg.java
-        if (true) {
-            return;
-        }
-        tmp.set("PRO.REG.");
-        tmp.ref(9).set(p1);
-        tmp80.set(p3);
-        call("prg.bas.regstat", tmp, "<", tmp80);
-        tmp.set("PRO.REG.");
-        tmp.ref(9).set(p1);
-        tmp80.set(p3);
-        call("prg.bas.regstat", tmp, "*", tmp80);
--- a/server.src/prg/pro/Webrepl.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webrepl.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webrepl.this);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webrepl.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field fprojEof = new Field("X", "N");
-    private Field fmedaEof = new Field("X", "N");
-    private Field fovsEof = new Field("X", "N");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(50)");



-    private Field y = new Field("9(9)");
-    private Field z = new Field("99999");
-    private Field p6 = new Field("X");
-    private Field lstKod = new Field("999999");
-    private Field ptrl = new Field("99999");
-    private Field spaName = new Field("X(50)");
-    private Field spaValue = new Field("X(100)");
-    private Field spaLnr = new Field("9999");
-    private Field tmpBelopp2 = new Field("S9(10)V99");
-    private Field forsta = new Field("X");
-    private Field behorig = new Field("X");
-    private Field tmpPek = new Field("99");
-    private Field tmp2n = new Field("99");
-    private Field tmp6 = new Field("XXXXXX");
-    private Field n = new Field("S9(11)");
-    private Field s1 = new Field("9999");
-    private Field s2 = new Field("9999");
-    private Field s3 = new Field("9999");
-    private Field s4 = new Field("9999");
-    private Field lupkod = new Field("X(50)");
-    private Field lupxp1 = new Field("X(50)");
-    private Field selKodNum = new Field("9(15)");
-    private Field testKodNum = new Field("9(15)");
-    private Field frdLnr = new Field("9(6)");
-    private Field aktiv = new Field("X");
-    private void testaNum() {
-        testKodNum.setWithConversion(testKod);
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        selKodNum.setWithConversion(selKod);
-        while (!(ptr.compareTo(1000)>0 || selKodNum.equalsEither(testKodNum, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            selKodNum.setWithConversion(selKod);
-        }
-        if (selKodNum.equals(testKodNum)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webrg.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webrg.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webrg.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Webrg.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webrg.this);
-    private lib.pro.Pma1post propma1=new lib.pro.Pma1post(Webrg.this, pa);
-    private lib.pro.Pma2post propma2=new lib.pro.Pma2post(Webrg.this, pa);
-    private lib.pro.Overpost proover=new lib.pro.Overpost(Webrg.this, pa);
-    private Field path = new Field("X(50)");



-    private Field tmpBel = new Field("X(50)");
-    private Field ltbetv = new Field("XXX");
-    private Field y = new Field("99999");



-    private Field accBel = new Field("9(9)");
-    private Field accDat = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field tmpPer = new Field("9(6)");
-    private Field hittat = new Field("X");
-    private Field s = new Field("999");
-    private Field fi = new Field("X");
-    private Field tKund = new Field("XXXX");
-    private Field endaktiva = new Field("X");
-    private void skrivSumradbegrOld() {
-        call(webpara.webut, "%0|%m|", 1, "Pro");
-        //  P-PROJID-G 
-        call(webpara.webut, "%0|%m|", 2, "PBn");
-        //  P-PROJBEN 
-        call(webpara.webut, "%0|%m|", 3, "Mas");
-        //  P-PROJID-M 
-        call(webpara.webut, "%0|%m|", 4, "Prl");
-        //  P-PROJANS 
-        call(webpara.webut, "%0|%m|", 5, "Prl");
-        //  P-PROJANS namn 
-        call(webpara.webut, "%0|%m|", 6, "Pty");
-        //  P-PROJTYP 
-        call(webpara.webut, "%0|%m|", 7, "ps");
-        //  P-PROJSTAT 
-        call(webpara.webut, "%0|%m|", 8, "ps");
-        //  P-PROJSTAT beskr 
-        call(webpara.webut, "%0|%m|", 9, "Prg");
-        //  P-GRPTHT 
-        call(webpara.webut, "%0|%m|", 81, "Upp");
-        //  P-UPPLAGD 
-        call(webpara.webut, "%0|%m|", 82, "Upp");
-        //  P-UPPLAGD 
-        call(webpara.webut, "%0|%0|", 83, "Senast reg");
-        //  P-SENREGDAT 
-        call(webpara.webut, "%0|%0|", 84, "Senast reg");
-        //  P-SENREGDAT 
-    }
-
-    private void nollaUtskrift() {
-        webtidin.rappStat.set(SPACE);
-        tmp.set(SPACE);
-        tmp.set(concat(limit("X",SPACE),limit("\u0001",SPACE),limit("RAPPSTAT=",SPACE),limit(webtidin.rappStat,SPACE),limit("&RAPPFIL=",SPACE),limit(webtidin.rappFil,SPACE),limit("\u0001",SPACE)));
-        display("UPONCOMMAND-LINE",tmp,"\n");
-        call("prg.bas.webspar", spaValue);
-    }
-
-    private void hamtaDefaulter() {
-    }
-
--- a/server.src/prg/pro/Webrg3b.java
-    private lib.pro.Ofhupost proofhu=new lib.pro.Ofhupost(Webrg3b.this, pa);
-    private lib.pro.Ofrapost proofra=new lib.pro.Ofrapost(Webrg3b.this, pa);
-    private lib.pro.Ofprpost proofpr=new lib.pro.Ofprpost(Webrg3b.this, pa);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webrg3b.this);
-    private Field fsortEof = new Field("X", "N");
-    private Field fsort2Eof = new Field("X", "N");
-    private Field tmp80 = new Field("X(80)");
-    private Field ij = new Field("99");
-    private Field y = new Field("9999");
-    private Field fel = new Field("99");
-    private Field ben = new Field("X(25)");
-    private Field accstatj = new Field("X");
-    private Field accstatn = new Field("X");
-    private Field accstatu = new Field("X");
-    private Field accstati = new Field("X");
-    private Field sortering = new Field("99");
-    private Field vjust = new Field("X");
-    private Field bytt = new Field("X");
-    private Field accBel = new Field("9(9)");
-    private Field accDat = new Field("9(8)");
-    private Field header = new Field("X(20)");
-    private Field footer = new Field("X(20)");
-    private Field koln = new Field("99");
-    private Field path = new Field("X(50)");
-    private Field lstBel = new Field("-9(10),99");
-    private Field tmpDatum3 = new Field("9(8)");
-    private Field tmpLager2 = new Field("S9(9)");
-    private void urvalProj2() {
-        lib.pro.Projpost.fd proj=proproj.get();
-        h.set("N");
-        if (rrap.sbegrepp[0].equalsEither(3, 9)) {
-            tmpPost.set(fsortPost);
-            fsortPost.init();
-            fsortK[0].set(proj.projidG);
-            fsort.start(">=", "fsort_key");
-            if (fsortFs.equals("00")) {
-                fsort.readNext();
-            }
-            if (fsortFs.equals("00") && fsortK[0].equals(proj.projidG)) {
-                h.set("J");
-                fsortPost.set(tmpPost);
-                return;
-            }
-        }
-        if (rrap.sbegrepp[1].equalsEither(3, 9)) {
-            tmpPost.set(fsortPost);
-            fsortPost.init();
-            fsortK[0].set(tmpK[0]);
-            fsortK[1].set(proj.projidG);
-            fsort.start(">=", "fsort_key");
-            if (fsortFs.equals("00")) {
-                fsort.readNext();
-            }
-            if (fsortFs.equals("00") && fsortK[1].equals(proj.projidG)) {
-                h.set("J");
-                fsortPost.set(tmpPost);
-                return;
-            }
-        }
-        if (rrap.sbegrepp[2].equalsEither(3, 9)) {
-            tmpPost.set(fsortPost);
-            fsortPost.init();
-            fsortK[0].set(tmpK[0]);
-            fsortK[1].set(tmpK[1]);
-            fsortK[2].set(proj.projidG);
-            fsort.start(">=", "fsort_key");
-            if (fsortFs.equals("00")) {
-                fsort.readNext();
-            }
-            if (fsortFs.equals("00") && fsortK[2].equals(proj.projidG)) {
-                h.set("J");
-                fsortPost.set(tmpPost);
-                return;
-            }
-        }
-        if (rrap.sbegrepp[3].equalsEither(3, 9)) {
-            tmpPost.set(fsortPost);
-            fsortPost.init();
-            fsortK[0].set(tmpK[0]);
-            fsortK[1].set(tmpK[1]);
-            fsortK[2].set(tmpK[2]);
-            fsortK[3].set(proj.projidG);
-            fsort.start(">=", "fsort_key");
-            if (fsortFs.equals("00")) {
-                fsort.readNext();
-            }
-            if (fsortFs.equals("00") && fsortK[3].equals(proj.projidG)) {
-                h.set("J");
-                fsortPost.set(tmpPost);
-                return;
-            }
-        }
-        if (rrap.sbegrepp[2].equalsEither(3, 9)) {
-            tmpPost.set(fsortPost);
-            fsortPost.init();
-            fsortK[0].set(tmpK[0]);
-            fsortK[1].set(tmpK[1]);
-            fsortK[2].set(tmpK[2]);
-            fsortK[3].set(tmpK[3]);
-            fsortK[4].set(proj.projidG);
-            fsort.start(">=", "fsort_key");
-            if (fsortFs.equals("00")) {
-                fsort.readNext();
-            }
-            if (fsortFs.equals("00") && fsortK[4].equals(proj.projidG)) {
-                h.set("J");
-                fsortPost.set(tmpPost);
-                return;
-            }
-        }
-        fsortPost.set(tmpPost);
-    }
-
-    private void skrivTabbar() {
-        call(webpara.xmlut, "<kolumner>");
-        tabposr.set(rrap.sbredd.subtract(28));
-        call(webpara.xmlut, "<kolumn>%b</kolumn>", 7);
-        call(webpara.xmlut, "<kolumn>%b</kolumn>", 7);
-        call(webpara.xmlut, "<kolumn>%b</kolumn>", 7);
-        call(webpara.xmlut, "<kolumn>%b</kolumn>", 7);
-        call(webpara.xmlut, "<kolumn>%b</kolumn>", tabposr);
-        kolIx.set(1);
-        for (int _t=antalkol.getInt(); _t>0; _t--) {
-            call(webpara.xmlut, "<kolumn>%b</kolumn>", kolBredd[kolIx.getInt()-1]);
-            kolIx.increment(1);
-        }
-        call(webpara.xmlut, "</kolumner>");
-    }
-
--- a/server.src/prg/pro/Webrg4.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webrg4.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webrg4.this);
--- a/server.src/prg/pro/Websess.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Websess.this);
-    private lib.pro.Datab da=new lib.pro.Datab(Websess.this);
-    private Field tmp = new Field("X(300)");
--- a/server.src/prg/pro/Webtid2.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webtid2.this);
-    private Field lag = new Field("S9(9)");
-    private Field tb = new Field("S9(9)");
-    private Field fkodKat = new Field("99");
-    private Field fkodKod = new Field("999");
-    private Field fkodEof = new Field("X");
-    private Field ffaktEof = new Field("X");
-    private Field tmpPfak = new Field("--9.99");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field s1 = new Field("S9(9)V99");
-    private Field s2 = new Field("S9(9)V99");
-    private Field f = new Field("X");
-    private Field f2 = new Field("X");
-    private Field oKat = new Field("XX");
-    private Field cLast = new Field("X");
--- a/server.src/prg/pro/Webtid2m.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webtid2m.this);
-    private lib.bas.Std std=new lib.bas.Std(Webtid2m.this);
-    private Field tmp2 = new Field("X(50)");
-    private Field tmps = new Field("X(1000)");
-    private Field ii = new Field("9999");
-    private Field lag = new Field("S9(9)");
-    private Field tb = new Field("S9(9)");
-    private Field fkodKat = new Field("99");
-    private Field fkodKod = new Field("999");
-    private Field fkodEof = new Field("X");
-    private Field ffaktEof = new Field("X");
-    private Field tmpPfak = new Field("--9.99");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field s1 = new Field("S9(9)V99");
-    private Field s2 = new Field("S9(9)V99");
-    private Field kopDatum = new Field("9(8)");
-    private Field oKat = new Field("XX");
-    private Field timK00 = new Field("9(6)");
-    private Field cLast = new Field("X");
-    private Field kop = new Field("X");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(100)");
-    private Field grupp = new Field("XX");
-    private Field antalexporterade = new Field("999");
-    private Field antalvita = new Field("999");
-    private Field tmpRader = new Field("999");
--- a/server.src/prg/pro/Webtid2r.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webtid2r.this);
-    private lib.bas.Std std=new lib.bas.Std(Webtid2r.this);
-    private Field tmp2 = new Field("X(50)");
-    private Field tmps = new Field("X(1000)");
-    private Field ii = new Field("9999");
-    private Field lag = new Field("S9(9)");
-    private Field tb = new Field("S9(9)");
-    private Field fkodKat = new Field("99");
-    private Field fkodKod = new Field("999");
-    private Field fkodEof = new Field("X");
-    private Field ffaktEof = new Field("X");
-    private Field tmpPfak = new Field("--9.99");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field s1 = new Field("S9(9)V99");
-    private Field s2 = new Field("S9(9)V99");
-    private Field f = new Field("X");
-    private Field f2 = new Field("X");
-    private Field kopDatum = new Field("9(8)");
-    private Field oKat = new Field("XX");
-    private Field timK00 = new Field("9(6)");
-    private Field cLast = new Field("X");
-    private Field kop = new Field("X");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(100)");
--- a/server.src/prg/pro/Webtid3.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webtid3.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webtid3.this);
-    private lib.pro.Tidfpost protidf=new lib.pro.Tidfpost(Webtid3.this, pa);
-    private lib.pro.Avtppost proavtp=new lib.pro.Avtppost(Webtid3.this, pa);



-    private Field lag = new Field("S9(9)");
-    private Field tb = new Field("S9(9)");
-    private Field fkodKat = new Field("99");
-    private Field fkodKod = new Field("999");
-    private Field fkodEof = new Field("X");
-    private Field ffaktEof = new Field("X");
-    private Field tmpPfak = new Field("--9.99");
-    private Field tmpBel = new Field("S9(8)V99");
-    private Field tmpHel = new Field("S9(8)");
-    private Field s1 = new Field("S9(9)V99");
-    private Field s2 = new Field("S9(9)V99");
-    private Field f = new Field("X");
-    private Field f2 = new Field("X");
-    private Field oKat = new Field("XX");
-    private Field i = new Field("999");
-    private Field ii = new Field("999");
-    private Field ij = new Field("99");
--- a/server.src/prg/pro/Webtid3v.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webtid3v.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webtid3v.this);
-    private lib.pro.Tidfpost protidf=new lib.pro.Tidfpost(Webtid3v.this, pa);
-    private lib.pro.Avtppost proavtp=new lib.pro.Avtppost(Webtid3v.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private Field massAntal = new Field("9(5)");



-    private Field lag = new Field("S9(9)");
-    private Field tb = new Field("S9(9)");
-    private Field fkodKat = new Field("99");
-    private Field fkodKod = new Field("999");
-    private Field fkodEof = new Field("X");
-    private Field ffaktEof = new Field("X");
-    private Field tmpPfak = new Field("--9.99");
-    private Field tmpBel = new Field("S9(8)V99");
-    private Field tmpHel = new Field("S9(8)");
-    private Field s1 = new Field("S9(9)V99");
-    private Field s2 = new Field("S9(9)V99");
-    private Field f = new Field("X");
-    private Field f2 = new Field("X");
-    private Field oKat = new Field("XX");
-    private Field i = new Field("999");
-    private Field ii = new Field("999");
-    private Field ij = new Field("99");
--- a/server.src/prg/pro/Webtida.java
-    private lib.pro.Tidrpost protidr=new lib.pro.Tidrpost(Webtida.this, pa);
-    private lib.pro.Nattpost pronatt=new lib.pro.Nattpost(Webtida.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webtida.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Webtida.this, pa);
-    private lib.pro.Avtppost proavtp=new lib.pro.Avtppost(Webtida.this, pa);
-    private lib.pro.Peripost properi=new lib.pro.Peripost(Webtida.this, pa);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Webtida.this);
-    private lib.pro.Tidfpost protidf=new lib.pro.Tidfpost(Webtida.this, pa);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webtida.this);
-    private Field typ = new Field("X");
-    private Field startdat = new Field("9(8)");
-    private Field slutdat = new Field("9(8)");
-    private Field timPerDag = new Field("S9(9)V99");
-    private Field startn = new Field("9(6)");
-    private Field vecka = new Field("9(6)");
--- a/server.src/prg/pro/Webtidbj.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webtidbj.this);
-    private lib.pro.Calepost procale=new lib.pro.Calepost(Webtidbj.this, pa);
-    private lib.pro.Almapost proalma=new lib.pro.Almapost(Webtidbj.this, pa);
-    private lib.pro.Budipost probudi=new lib.pro.Budipost(Webtidbj.this, pa);
-    private lib.pro.Budopost probudo=new lib.pro.Budopost(Webtidbj.this, pa);
-    private Field idpa = new Field("X(8)");



-    private Field frame = new Field("X");
-    private Field path = new Field("X(100)");
-    private Field tid = new Field("9(8)");
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webtidbu.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webtidbu.this);
-    private lib.pro.Calepost procale=new lib.pro.Calepost(Webtidbu.this, pa);
-    private lib.pro.Almapost proalma=new lib.pro.Almapost(Webtidbu.this, pa);
-    private lib.pro.Budipost probudi=new lib.pro.Budipost(Webtidbu.this, pa);
-    private lib.pro.Budopost probudo=new lib.pro.Budopost(Webtidbu.this, pa);
-    private Field idpa = new Field("X(8)");



-    private Field path = new Field("X(100)");
-    private void fsortRead() {
-        fsortEof.set("N");
-        fsort.read();
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
-    private void fsortStartprev() {
-        fsortEof.set("N");
-        fsort.start("NOT>", "fsort_key");
-        if (fsort.invalidKey()) {
-            fsortEof.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webtidfr.java
-    private void atergang() {
-        throw exit;
-    }
-
--- a/server.src/prg/pro/Webtidj.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webtidj.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webtidj.this);
-    private Field path = new Field("X(100)");
-    private Field timPerDag = new Field("S9(9)V99");
-    private void skriv1Test() {
-        display("UPONSYSOUT","v 3","\t","-","\t","-","\t","2;2;3","\t","3;2;3","\t","4;2;3","\t","5;2;3","\t","6;2;3","\t","\n");
-        display("UPONSYSOUT","v 4","\t","1;2;3","\t","1;2;3","\t","2;2;3","\t","3;2;3","\t","4;2;3","\t","5;2;3","\t","6;2;3","\t","\n");
-        display("UPONSYSOUT","v 5","\t","1;2;3","\t","1;2;3","\t","2;2;3","\t","3;2;3","\t","4;2;3","\t","5;2;3","\t","6;2;3","\t","\n");
-        display("UPONSYSOUT","v 6","\t","1;2;3","\t","1;2;3","\t","2;2;3","\t","3;2;3","\t","4;2;3","\t","5;2;3","\t","6;2;3","\t","\n");
-        display("UPONSYSOUT","v 7","\t","1;2;3","\t","1;2;3","\t","2;2;3","\t","3;2;3","\t","-","\t","-","\t","-","\t","\n");
-    }
-    //     PERFORM SKRIV-SPRAK 
-    //     CALL WEBUT USING "ATYP%c%m%c\\" 9 "Atp" 9 
-    //     PERFORM UNTIL NOT (PA-OK) OR D-TYPKK NOT = "T" 
-    //         MOVE D-BENKK(STD-SPRAKNR-EGET) TO TMP 
-    //         CALL "PRG/BAS/STDTOWIN" USING TMP  
-    //         DISPLAY D-ARBTYP X"09" TMP(1:35) X"09" UPON SYSOUT WITH NO ADVANCING 
-    //  
-    //         MOVE DA-DEFK TO PA-RECID 
-    //         MOVE DA-READNEXT TO PA-ACTION 
-    //         MOVE DEFK-POST TO REC-AREA 
-    //         CALL "PRG/PRO/04921" USING PARA-AREA REC-AREA 
-    //         MOVE REC-AREA TO DEFK-POST 
-    //     END-PERFORM 
-    //     DISPLAY "" UPON SYSOUT. 
-
-        Hashtable<String, Field[]> ht=new Hashtable();
--- a/server.src/prg/pro/Webtidmb.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webtidmb.this);
-    private Field frame = new Field("X");
-    private Field p1 = new Field("X");
-    private Field wsBelavv = new Field("S9(9)");
--- a/server.src/prg/pro/Webtidp.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Webtidp.this);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Webtidp.this, pa);
-    private lib.pro.Forepost profore=new lib.pro.Forepost(Webtidp.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Webtidp.this);
-    private Field tmp = new Field("X(50)");
-    private Field tmp2 = new Field("9(2)");
-    private Field timPerDag = new Field("S9(9)V99");
-    private Field tmpX = new Field("999,99");
--- a/server.src/prg/pro/Webtidp0.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Webtidp0.this);
-    private lib.pro.Forepost profore=new lib.pro.Forepost(Webtidp0.this, pa);
--- a/server.src/prg/pro/Webtidr6.java
-    private lib.pro.Tidrpost protidr=new lib.pro.Tidrpost(Webtidr6.this, pa);
-    private lib.pro.Nattpost pronatt=new lib.pro.Nattpost(Webtidr6.this, pa);
-    private lib.pro.Almapost proalma=new lib.pro.Almapost(Webtidr6.this, pa);
-    private lib.pro.Calepost procale=new lib.pro.Calepost(Webtidr6.this, pa);
-    private lib.pro.Avtppost proavtp=new lib.pro.Avtppost(Webtidr6.this, pa);
-    private lib.pro.Peripost properi=new lib.pro.Peripost(Webtidr6.this, pa);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Webtidr6.this);
-    private Field wsSign = new Field("S9");
-    private Field wsTim2D = new Field("---9.99");
-    private Field wsBelD = new Field("-B---B--9");
-    private Field wsRad = new Field("X(200)");
-    private Field wsText = new Field("X(200)");
-    private Field wsRub = new Field("X(40)");
-    private Field wsWeekday = new Field("9(6)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field gt = new Field("9(6)");
-    private Field lt = new Field("9(6)");
-    private Field z13TknG = new Field("X(10)");
-    private void skrivDetaljradX() {
-        if (mtidBelopp.equals("J")) {
-            call(webpara.websort, "%D %S|%N|%H %S%S%S%S%S|%0", fsortDat, fsortKodben, fsortTim, fsortBel, fsortKomm.ref(1,200), fsortKomm.ref(201,200), fsortKomm.ref(401,200), fsortKomm.ref(601,200), fsortKomm.ref(801), fsortDat);
-        }
-        else {
-            call(webpara.websort, "%D %S|%N %S%S%S%S%S|%0", fsortDat, fsortKodben, fsortTim, fsortKomm.ref(1,200), fsortKomm.ref(201,200), fsortKomm.ref(401,200), fsortKomm.ref(601,200), fsortKomm.ref(801), fsortDat);
-        }
-        poster.increment(1);
-    }
-
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
-    private void getcolBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("BAK ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAD1");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RUB ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAM ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FUNK");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RA24");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("MEDD");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("LEDT");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMO");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMC");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FONS");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("HALV");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/Webtidrj.java
-    private lib.pro.Tidrpost protidr=new lib.pro.Tidrpost(Webtidrj.this, pa);
-    private lib.pro.Nattpost pronatt=new lib.pro.Nattpost(Webtidrj.this, pa);
-    private lib.pro.Almapost proalma=new lib.pro.Almapost(Webtidrj.this, pa);
-    private lib.pro.Calepost procale=new lib.pro.Calepost(Webtidrj.this, pa);
-    private lib.pro.Avtppost proavtp=new lib.pro.Avtppost(Webtidrj.this, pa);
-    private lib.pro.Peripost properi=new lib.pro.Peripost(Webtidrj.this, pa);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Webtidrj.this);
-    private Field wsSign = new Field("S9");
-    private Field wsTim2D = new Field("---9.99");
-    private Field wsBelD = new Field("-B---B--9");
-    private Field wsProj = new Field("X(10)");
-    private Field wsProjRub = new Field("9(4)");
-    private Field wsProjTim = new Field("S9(9)V99");
-    private Field wsProjBel = new Field("S9(9)");
-    private Field wsRad = new Field("X(200)");
-    private Field wsText = new Field("X(200)");
-    private Field wsRub = new Field("X(40)");
-    private Field wsWeekday = new Field("9(6)");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field gt = new Field("9(6)");
-    private Field lt = new Field("9(6)");
-    private Field z13TknG = new Field("X(10)");
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
-    private void getcolBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("BAK ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAD1");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RUB ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAM ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FUNK");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RA24");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("MEDD");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("LEDT");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMO");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMC");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FONS");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("HALV");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/Webtidrp.java
-    private lib.pro.Tidrpost protidr=new lib.pro.Tidrpost(Webtidrp.this, pa);
-    private lib.pro.Nattpost pronatt=new lib.pro.Nattpost(Webtidrp.this, pa);
-    private lib.pro.Almapost proalma=new lib.pro.Almapost(Webtidrp.this, pa);
-    private lib.pro.Calepost procale=new lib.pro.Calepost(Webtidrp.this, pa);
-    private lib.pro.Peripost properi=new lib.pro.Peripost(Webtidrp.this, pa);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Webtidrp.this);
-    private Field wsSign = new Field("S9");
-    private Field wsRub2 = new Field("X(40)");
-    private Field wsText = new Field("X(200)");
-    private Field z13TknG = new Field("X(10)");
-    private void colorBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "BAK ");
-        }
-    }
-
-    private void colorRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAD1");
-        }
-    }
-
-    private void colorRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RUB ");
-        }
-    }
-
-    private void colorRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RAM ");
-        }
-    }
-
-    private void colorFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FUNK");
-        }
-    }
-
-    private void colorRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "RA24");
-        }
-    }
-
-    private void colorMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "MEDD");
-        }
-    }
-
-    private void colorLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void colorInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMO");
-        }
-    }
-
-    private void colorInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "INMC");
-        }
-    }
-
-    private void colorFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "FONS");
-        }
-    }
-
-    private void colorHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            if (stddata.stdHalv.equals("J")) {
-                call("prg.bas.col", pa.paraArea, "HALV");
-            }
-            else {
-                call("prg.bas.col", pa.paraArea, "LEDT");
-            }
-        }
-    }
-
-    private void colorKvittens() {
-        if (stddata.stdHasColor.equals("Y")) {
-            call("prg.bas.col", pa.paraArea, "LEDT");
-        }
-    }
-
-    private void z04Meddela() {
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z05BlankaMeddelande() {
-        pa.txtnr.set(0);
-        stddata.stdVisaFelNr.set(pa.txtnr);
-        call("prg.bas.visa", pa.paraArea, stddata.stdVisaFel);
-    }
-
-    private void z07BhKoll() {
-        stddata.stdSvar.set(ZERO);
-        stddata.stdKom.set("k");
-        call("prg.bas.beho", pa.paraArea, pa.beniv, pa.modulkod, stddata.stdBeho, stddata.stdKom);
-        pa.svar.set(ZERO);
-        if (stddata.stdKom.equals("N")) {
-            stddata.stdSvar.set(1);
-            pa.txtnr.set(902);
-        }
-        if (stddata.stdKom.equals(SPACE)) {
-            pa.svar.set(23);
-        }
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
-    private void getcolBakgrund() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("BAK ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad1() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAD1");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRubrik() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RUB ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRam() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RAM ");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFunk() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FUNK");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolRad24() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("RA24");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolMeddelande() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("MEDD");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolLedtext() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("LEDT");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmOpen() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMO");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolInmClosed() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("INMC");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolFonster() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("FONS");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void getcolHalv() {
-        if (stddata.stdHasColor.equals("Y")) {
-            z16Typ.set("HALV");
-            call("prg.bas.getcol", pa.paraArea, z16Colkoder);
-            cancel("prg.bas.getcol");
-        }
-    }
-
-    private void z17Init() {
-        stddata.stdPgmsave.set(stddata.stdPgm);
-        stddata.stdPgm.set(stddata.stdPgmnew);
-        pa.action.set(da.open);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (!(pa.ok())) {
-            pa.txtnr.set(908);
-            z04Meddela();
-            cancel("prg.pro.p4900");
-            throw exit;
-        }
-        stddata.stdSvar.set(pa.svar);
-    }
-
-    private void z17Exit() {
-        pa.action.set(da.close);
-        call("prg.pro.p4900", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4900");
-        }
-        pa.recid.set(da.file);
-        pa.action.set(da.close);
-        call("prg.pro.p4921", pa.paraArea, prorecarea.recArea);
-        if (pa.avslut()) {
-            cancel("prg.pro.p4921");
-        }
-        stddata.stdPgm.set(stddata.stdPgmsave);
-        throw exit;
-    }
-
--- a/server.src/prg/pro/Webtidrx.java
-    private lib.bas.Tidapost bastida=new lib.bas.Tidapost(Webtidrx.this);
-    private lib.pro.Tidrpost protidr=new lib.pro.Tidrpost(Webtidrx.this, pa);
-    private lib.pro.Nattpost pronatt=new lib.pro.Nattpost(Webtidrx.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webtidrx.this, pa);
-    private lib.pro.Almapost proalma=new lib.pro.Almapost(Webtidrx.this, pa);
-    private lib.pro.Calepost procale=new lib.pro.Calepost(Webtidrx.this, pa);
-    private lib.pro.Avtppost proavtp=new lib.pro.Avtppost(Webtidrx.this, pa);
-    private lib.pro.Peripost properi=new lib.pro.Peripost(Webtidrx.this, pa);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Webtidrx.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Webtidrx.this);
-    private lib.pro.Tidfpost protidf=new lib.pro.Tidfpost(Webtidrx.this, pa);
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webtidrx.this);
-    private Field tmp2 = new Field("X(200)");
-    private Field tmp3 = new Field("X(200)");
-    private Field tmp80 = new Field("X(80)");
-    private Field typ = new Field("X");
-    private Field fsortEof = new Field("X");
-    private Field tmp6 = new Field("9(6)");
-    private Field tmpPeriod = new Field("9(6)");
-    private Field endgrupp = new Field("X(1000)");
-    private Field endejatt = new Field("X");
-    private Field vecka = new Field("9(6)");
-    private Field gt = new Field("9(8)");
-    private Field lt = new Field("9(8)");
-    private Field sel = new Field("X(1000)");
-    private Field selKod = new Field("X(100)");
-    private Field testKod = new Field("X(100)");
-    private Field testOk = new Field("X");
-    private Field ptr = new Field("99999");
-    private Field i = new Field("9(4)");
-    private Field sumG = new Field("9(5)");
-    private Field sumE = new Field("9(5)");
-    private Field sumB = new Field("9(5)");
-    private Field sumC = new Field("9(5)");
-    private Field sumTot2 = new Field("S9(9)V99");
-    private Field wsCale = new Field("S9(9)V99");
-    private Field tmpBelopp = new Field("S9(9)V99");
-    private Field andrad = new Field("X");
-    private Field attkommfinns = new Field("X");
-    private Field atttyp = new Field("X");
-    private Field attkomm = new Field("X(1000)");
-    private Field meda = new Field("X(4)");
-    private Field post = new Field("X(2000)");
-    private Field sprak = new Field("XX");
-    private Field z = new Field("99999");
-    private Field fi = new Field("X");
-    private Field skrivit = new Field("X");
-    private Field ejSlutford = new Field("X");
-    private Field flagga1 = new Field("X");
-    private Field kolla = new Field("X");
-    private Field sumTim = new Field("9(9)V99");
-    private Field pamFilnamn = new Field("X(50)");
-    private Field timK = new Field("9(4)V99");
-    private Field mejltext = new Field("X(1000)");
-    private void testa() {
-        if (sel.equals(SPACE)) {
-            testOk.set("J");
-            return;
-        }
-        if (testKod.equals(SPACE)) {
-            testOk.set("N");
-            return;
-        }
-        testOk.set("N");
-        ptr.set(1);
-        unstring(sel,ptr,new Object[]{",","     "},selKod);
-        c_justify(selKod, "L");
-        while (!(ptr.compareTo(1000)>0 || selKod.equalsEither(testKod, SPACE))) {
-            unstring(sel,ptr,new Object[]{",","     "},selKod);
-            c_justify(selKod, "L");
-        }
-        if (selKod.equals(testKod)) {
-            testOk.set("J");
-        }
-    }
-
--- a/server.src/prg/pro/Webtidvi.java
-    private lib.pro.Tidrpost protidr=new lib.pro.Tidrpost(Webtidvi.this, pa);
-    private lib.pro.Nattpost pronatt=new lib.pro.Nattpost(Webtidvi.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webtidvi.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Webtidvi.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webtidvi.this, pa);
-    private lib.pro.Almapost proalma=new lib.pro.Almapost(Webtidvi.this, pa);
-    private lib.pro.Calepost procale=new lib.pro.Calepost(Webtidvi.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Webtidvi.this, pa);
-    private lib.pro.Avtppost proavtp=new lib.pro.Avtppost(Webtidvi.this, pa);
-    private lib.pro.Peripost properi=new lib.pro.Peripost(Webtidvi.this, pa);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Webtidvi.this);
-    private lib.pro.Tidfpost protidf=new lib.pro.Tidfpost(Webtidvi.this, pa);
-    private Field startn = new Field("9(6)");
--- a/server.src/prg/pro/Webtidvr.java
-    private lib.pro.Tidrpost protidr=new lib.pro.Tidrpost(Webtidvr.this, pa);
-    private lib.pro.Nattpost pronatt=new lib.pro.Nattpost(Webtidvr.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Webtidvr.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Webtidvr.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Webtidvr.this, pa);
-    private lib.pro.Almapost proalma=new lib.pro.Almapost(Webtidvr.this, pa);
-    private lib.pro.Calepost procale=new lib.pro.Calepost(Webtidvr.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Webtidvr.this, pa);
-    private lib.pro.Avtppost proavtp=new lib.pro.Avtppost(Webtidvr.this, pa);
-    private lib.pro.Peripost properi=new lib.pro.Peripost(Webtidvr.this, pa);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Webtidvr.this);
-    private lib.pro.Tidfpost protidf=new lib.pro.Tidfpost(Webtidvr.this, pa);
-    private Field startn = new Field("9(6)");
--- a/server.src/prg/pro/Webtidx.java
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Webtidx.this);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Webtidx.this, pa);
-    private Field idpa = new Field("X(8)");



-    private Field lag = new Field("S9(9)");
-    private Field tb = new Field("S9(9)");
-    private Field fkodKat = new Field("99");
-    private Field fkodKod = new Field("999");
-    private Field fkodEof = new Field("X");
-    private Field tmpPfak = new Field("--9.99");
-    private Field lstBel = new Field("--B---B--9");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field lstTim2 = new Field("---9,99");
-    private Field timPerDag = new Field("S9(9)V99");
-    private Field tmp2 = new Field("9(2)");
--- a/server.src/prg/pro/Webtidx2.java
-    private Field wspaEof = new Field("X", "N");
-    private Field tmps = new Field("X(1000)");
-    private Field spaLnr = new Field("9999");
-    private Field lag = new Field("S9(9)");
-    private Field tb = new Field("S9(9)");
-    private Field fkodKat = new Field("99");
-    private Field fkodKod = new Field("999");
-    private Field fkodEof = new Field("X");
-    private Field ffaktEof = new Field("X");
-    private Field tmpPfak = new Field("--9.99");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field s1 = new Field("S9(9)V99");
-    private Field s2 = new Field("S9(9)V99");
-    private Field f = new Field("X");
-    private Field f2 = new Field("X");
-    private Field kopDatum = new Field("9(8)");
-    private Field oKat = new Field("XX");
-    private Field timK00 = new Field("9(6)");
-    private Field cLast = new Field("X");
-    private Field frame = new Field("X");
-    private Field antalvita = new Field("999");
-    private Field tmpRader = new Field("999");
-    private Field timPerDag = new Field("S9(9)V99");
-    private Field ptr = new Field("99999");
-    private Field tmpX1 = new Field("X(20)");
-    private Field tmpX2 = new Field("X(20)");
-    private void skrivNframe() {
-        call(webpara.webut, "<table CELLSPACING=0><tr valign=top>");
-        //     CALL WEBUT USING "<td><input name=x1 class=tt size=25>" 
-        //     CALL WEBUT USING "<td><input name=x3 class=tt size=25>" 
-        //     IF MKODER = "J" 
-        //         CALL WEBUT USING "<td><input name=x4 class=tt size=25>" 
-        //     END-IF 
-        //     CALL WEBUT USING "<tr><td><input name=x2 class=tt size=25>" 
-        //     CALL WEBUT USING "<td align=right>%m <input name=n1 class=tt size=8>" "Sum" 
-        //     CALL WEBUT USING "<td><input type=button name=xb value='%m' onclick=spara()>" "SP" 
-        //     CALL WEBUT USING "<br><br><input type=button name=xb value='%m' onclick=bak()>" "Alm" 
-        call(webpara.webut, "</table></form>");
-    }
-
--- a/server.src/prg/pro/Webtidx3.java
-    private lib.bas.Std std=new lib.bas.Std(Webtidx3.this);
-    private Field lag = new Field("S9(9)");
-    private Field tb = new Field("S9(9)");
-    private Field fkodKat = new Field("99");
-    private Field fkodKod = new Field("999");
-    private Field fkodEof = new Field("X");
-    private Field ffaktEof = new Field("X");
-    private Field tmpPfak = new Field("--9.99");
-    private Field tmpBel = new Field("S9(8)V99");
-    private Field tmpHel = new Field("S9(8)");
-    private Field s1 = new Field("S9(9)V99");
-    private Field s2 = new Field("S9(9)V99");
-    private Field f = new Field("X");
-    private Field f2 = new Field("X");
-    private Field massDatum = new Field("9(8)");
-    private Field massrad = new Field("X(300)");
-    private Field oKat = new Field("XX");
-    private Field lnr1 = new Field("999");
-    private Field i = new Field("999");
-    private Field ptr = new Field("99999");
-    private Field x = new Field("9999");
-    private Field y = new Field("9999");
-    private Field getFel = new Field("X");
-    private Field getNamn = new Field("X(50)");
-    private Field fel = new Field("99");
-    private Field stanna = new Field("X", "N");
-    private Field spaLnr = new Field("9999");
--- a/server.src/prg/pro/Webtidxf.java
-    private lib.bas.Std std=new lib.bas.Std(Webtidxf.this);



-    private Field spaLnr = new Field("9999");
-    private void closeDown() {
-    }
-
--- a/server.src/prg/pro/Webtlg.java
-    private lib.pro.Webtidin webtidin=new lib.pro.Webtidin(Webtlg.this);
-    private Field tmp = new Field("X(50)");
-    private Field frame = new Field("X");
-    private Field p1 = new Field("X");
--- a/server.src/prg/pro/Webuppd.java
-    private lib.pro.Statpost prostat=new lib.pro.Statpost(Webuppd.this, pa);
-    private Field fsortEof = new Field("X", "N");
-    private void stangRaderaFsort() {
-        fsort.close();
-        fsort.deleteFile();
-    }
-
--- a/server.src/prg/pro/Wspa2m.java
-    private lib.bas.Medapost basmeda=new lib.bas.Medapost(Wspa2m.this);
-    private lib.bas.Toupper toupper=new lib.bas.Toupper(Wspa2m.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Wspa2m.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Wspa2m.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Wspa2m.this, pa);
-    private lib.pro.Tidwpost protidw=new lib.pro.Tidwpost(Wspa2m.this, pa);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Wspa2m.this, pa);
-    private lib.bas.Std std=new lib.bas.Std(Wspa2m.this);
-    private Field wspaEof = new Field("X", "N");
-    private Field tmps = new Field("X(1000)");
-    private Field tidwTmp = new Field("X(10000)");
-    private Field tmp6 = new Field("9(6)");
-    private Field spaName = new Field("X(50)");
-    private Field spaLnr = new Field("9999");
-    private Field ii = new Field("9999");



-    private Field lag = new Field("S9(9)");
-    private Field tb = new Field("S9(9)");
-    private Field fkodKat = new Field("99");
-    private Field fkodKod = new Field("999");
-    private Field fkodEof = new Field("X");
-    private Field ffaktEof = new Field("X");
-    private Field tmpPfak = new Field("--9.99");
-    private Field tmpBel = new Field("S9(9)V99");
-    private Field s1 = new Field("S9(9)V99");
-    private Field s2 = new Field("S9(9)V99");
-    private Field f = new Field("X");
-    private Field f2 = new Field("X");
-    private Field datum = new Field("9(8)");
-    private Field kopDatum = new Field("9(8)");
-    private Field oKat = new Field("XX");
-    private Field lnr = new Field("999");
-    private Field timK00 = new Field("9(6)");
-    private Field forsta = new Field("XXX");
-    private Field cLast = new Field("X");
-    private Field kop = new Field("X");
-    private Field frame = new Field("X");
-    private Field path = new Field("X(100)");
-    private Field antalexporterade = new Field("999");
-    private Field antalvita = new Field("999");
-    private Field tmpRader = new Field("999");
-    private Field ejSlut = new Field("X");
-    private Field sumTim = new Field("S9(9)V99");
-    private Field f1typ = new Field("X");
-    private Field f1val = new Field("X(10)");
-    private Field slump = new Field("X(20)");
-    private Field koprad = new Field("XXX");
-    private Field funk = new Field("X");
-    private Field tmpDatum = new Field("9(8)");
-    private Field tmpDatum2 = new Field("9(8)");
-    private Field antalroda = new Field("999");
-    private Field antalbakat = new Field("999");
-    private Field tmp2 = new Field("99");
-    private Field ejSlutford = new Field("X");
-    private Field timPerDag = new Field("S9(9)V99");
-    private Field timK = new Field("9(4)V99");
-    private Field wsCale = new Field("S9(9)V99");
-    private Field alm = new Field("X", "N");
-    private Field newlook = new Field("X", "J");
--- a/server.src/prg/pro/Xbuvi01.java
-    private Field unixSystem = new Field("X(6)", "SYSTEM");
-    private Field z13TknG = new Field("X(10)");

-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field tmpEgetId = new Field("X(100)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/pro/Xbuvi02.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Xbuvi02.this);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Xbuvi02.this, pa);
-    private Field unixSystem = new Field("X(6)", "SYSTEM");
-    private Field z13TknG = new Field("X(10)");

-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field tmpEgetId = new Field("X(100)");
-    private Field tmpAtyp = new Field("X(50)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equals(".") || infilField.ref(infilFieldPek,1).equals(",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/pro/Xcarf01.java
-    private Field unixSystem = new Field("X(6)", "SYSTEM");
-    private Field z13TknG = new Field("X(10)");

-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
--- a/server.src/prg/pro/Xcarf02.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Xcarf02.this);
-    private Field z13TknG = new Field("X(10)");

--- a/server.src/prg/pro/Xexpl01.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Xexpl01.this);
-    private Field z13TknG = new Field("X(10)");

--- a/server.src/prg/pro/Xgrou01.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Xgrou01.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Xgrou01.this, pa);
-    private Field unixSystem = new Field("X(6)", "SYSTEM");
-    private Field z13TknG = new Field("X(10)");

-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/pro/Xgrou03.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Xgrou03.this);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Xgrou03.this, pa);
-    private Field unixSystem = new Field("X(6)", "SYSTEM");
-    private Field z13TknG = new Field("X(10)");

-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field tmpStatus = new Field("X(50)");
-    private Field tmpEgetId = new Field("X(100)");
-    private Field tmpBesk = new Field("X(100)");
-    private Field tmpAtyp = new Field("X(50)");
-    private Field antalOk = new Field("S9(9)");
-    private Field antalOkD = new Field("---B---B--9");
-    private Field antalOkSt = new Field("S9(9)");
-    private Field antalFel = new Field("S9(9)");
-    private Field antalFelD = new Field("---B---B--9");
-    private Field antalFelSt = new Field("S9(9)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");

-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/pro/Xheso01.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Xheso01.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Xheso01.this, pa);
-    private Field z13TknG = new Field("X(10)");

--- a/server.src/prg/pro/Xheso02.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Xheso02.this);
-    private Field z13TknG = new Field("X(10)");

--- a/server.src/prg/pro/Xheso03.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Xheso03.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Xheso03.this, pa);
-    private Field z13TknG = new Field("X(10)");

--- a/server.src/prg/pro/Xinte01.java
-    private Field unixSystem = new Field("X(6)", "SYSTEM");
-    private Field z13TknG = new Field("X(10)");

-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field tmpSamFakt = new Field("X");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");

-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/pro/Xinte02.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Xinte02.this);
-    private lib.pro.Defkpost prodefk=new lib.pro.Defkpost(Xinte02.this, pa);
-    private Field unixSystem = new Field("X(6)", "SYSTEM");
-    private Field z13TknG = new Field("X(10)");
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field tmpEgetId = new Field("X(100)");
-    private Field tmpAtyp = new Field("X(50)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");

-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/pro/Xjbr01.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Xjbr01.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Xjbr01.this, pa);
-    private Field unixSystem = new Field("X(6)", "SYSTEM");
-    private Field z13TknG = new Field("X(10)");
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field tmpKundid = new Field("X(4)");
-    private Field tmpNamnkun = new Field("X(50)");
-    private Field tmpProjtyp = new Field("X");
-    private Field tmpArbtyp1 = new Field("X(4)");
-    private Field tmpProjkat = new Field("99");
-    private Field tmpFvaluta = new Field("XXX");
-    private Field tmpBtDag = new Field("999");
-    private Field tmpGrupp = new Field("X(4)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");
-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/pro/Xkase01.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Xkase01.this);
-    private Field z13TknG = new Field("X(10)");
--- a/server.src/prg/pro/Xkase03.java
-    private Field z13TknG = new Field("X(10)");
-    private Field tmpKey = new Field("X(100)");
-    private Field ejSlutford = new Field("X");
--- a/server.src/prg/pro/Xkase13.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Xkase13.this);
-    private Field z13TknG = new Field("X(10)");
--- a/server.src/prg/pro/Xkase14.java
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Xkase14.this);
-    private Field z13TknG = new Field("X(10)");
--- a/server.src/prg/pro/Xklar01.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Xklar01.this);
-    private Field unixSystem = new Field("X(6)", "SYSTEM");
-    private Field z13TknG = new Field("X(10)");
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field tmpEgetId = new Field("X(100)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");

-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/pro/Xknfa01.java
-    private Field unixSystem = new Field("X(6)", "SYSTEM");
-    private Field z13TknG = new Field("X(10)");
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field tmpEgetId = new Field("X(100)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");

-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/pro/Xpsco01.java
-    private Field z13TknG = new Field("X(10)");
--- a/server.src/prg/pro/Xreko01.java
-    private Field unixSystem = new Field("X(6)", "SYSTEM");
-    private Field z13TknG = new Field("X(10)");
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field tmpEgetId = new Field("X(100)");
-    private Field tmpLand = new Field("X(50)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");

-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/pro/Xreko02.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Xreko02.this);
-    private Field unixSystem = new Field("X(6)", "SYSTEM");
-    private Field z13TknG = new Field("X(10)");
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field tmpEgetId = new Field("X(100)");
-    private Field tmpAtyp = new Field("X(50)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");

-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/pro/Xrysk01.java
-    private Field unixSystem = new Field("X(6)", "SYSTEM");
-    private Field z13TknG = new Field("X(10)");

-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field tmpEgetId = new Field("X(100)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");

-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/pro/Xsatafix.java
-    private lib.bas.Ftgspost basftgs=new lib.bas.Ftgspost(Xsatafix.this);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Xsatafix.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Xsatafix.this, pa);
-    private Field z13TknG = new Field("X(10)");
--- a/server.src/prg/pro/Xtros01.java
-    private Field unixSystem = new Field("X(6)", "SYSTEM");
-    private Field z13TknG = new Field("X(10)");
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field tmpLandkod = new Field("XX");
-    private Field tmpKundkat = new Field("99");
-    private Field tmpSprak = new Field("99");
-    private Field tmpBetdag = new Field("99");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");

-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/pro/Xwear01.java
-    private Field unixSystem = new Field("X(6)", "SYSTEM");
-    private Field z13TknG = new Field("X(10)");
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field tmpEgetId = new Field("X(100)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");

-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/pro/Ydipl01.java
-    private Field unixSystem = new Field("X(6)", "SYSTEM");
-    private Field z13TknG = new Field("X(10)");
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field tmpEgetId = new Field("X(100)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");

-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/pro/Ydipl02.java
-    private Field z13TknG = new Field("X(10)");
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");

-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/pro/Ygmnc01.java
-    private lib.bas.Beho beho=new lib.bas.Beho(Ygmnc01.this);
-    private lib.med.Datab da=new lib.med.Datab(Ygmnc01.this);
-    private lib.med.Recarea medrecarea=new lib.med.Recarea(Ygmnc01.this);
-    private lib.bas.Skripost basskri=new lib.bas.Skripost(Ygmnc01.this);
-    private Field wspaEof = new Field("X", "N");
--- a/server.src/prg/pro/Yjbr01.java
-    private Field z13TknG = new Field("X(10)");
--- a/server.src/prg/pro/Ykrews.java
-    private lib.bas.Maxipost basmaxi=new lib.bas.Maxipost(Ykrews.this);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(Ykrews.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Ykrews.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Ykrews.this, pa);
-    private lib.pro.Projpost proproj=new lib.pro.Projpost(Ykrews.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Ykrews.this);
--- a/server.src/prg/pro/Ykrewsbg.java
-    private Field tabfilP3 = new Field("X(80)");
-    private Field tabfilP4 = new Field("X(80)");
-    private Field tabfilP5 = new Field("X(80)");
-    private Field tabfilP6 = new Field("X(80)");
-    private Field tabfilP7 = new Field("X(80)");
-    private Field hel = new Field("S9(9)");
-    private Field bel = new Field("S9(9)V99");
-    private Field z13TknG = new Field("X(10)");
-    private void tabfilLeftP1() {
-        tabfilP.set(tabfilP1);
-        tabfilLeft();
-        tabfilP1.set(tabfilP);
-    }
-
-    private void tabfilLeftP2() {
-        tabfilP.set(tabfilP2);
-        tabfilLeft();
-        tabfilP2.set(tabfilP);
-    }
-
-    private void tabfilLeftP3() {
-        tabfilP.set(tabfilP3);
-        tabfilLeft();
-        tabfilP3.set(tabfilP);
-    }
-
-    private void tabfilLeftP4() {
-        tabfilP.set(tabfilP4);
-        tabfilLeft();
-        tabfilP4.set(tabfilP);
-    }
-
-    private void tabfilLeftP5() {
-        tabfilP.set(tabfilP5);
-        tabfilLeft();
-        tabfilP5.set(tabfilP);
-    }
-
-    private void tabfilLeftP6() {
-        tabfilP.set(tabfilP6);
-        tabfilLeft();
-        tabfilP6.set(tabfilP);
-    }
-
-    private void tabfilLeftP7() {
-        tabfilP.set(tabfilP7);
-        tabfilLeft();
-        tabfilP7.set(tabfilP);
-    }
-
-    private void tabfilLeft() {
-        if (!(tabfilP.equals(SPACE))) {
-            for (tabfilPek.set(1);(!((!(tabfilP.ref(tabfilPek,1).equals(SPACE)) && !(tabfilP.ref(tabfilPek,1).equals("0"))) || 
-                            (tabfilPek.compareTo(25)>0)));tabfilPek.increment(1)) {
-            }
-            tabfilTmpRad.set(tabfilP.ref(tabfilPek));
-            tabfilP.set(tabfilTmpRad);
-        }
-    }
-
-    private void tabfilTalP2() {
-        tabfilTal();
-        tabfilP2.set(tabfilP);
-    }
-
-    private void tabfilTalP3() {
-        tabfilTal();
-        tabfilP3.set(tabfilP);
-    }
-
-    private void tabfilTalP4() {
-        tabfilTal();
-        tabfilP4.set(tabfilP);
-    }
-
-    private void tabfilTalP5() {
-        tabfilTal();
-        tabfilP5.set(tabfilP);
-    }
-
-    private void tabfilTalP6() {
-        tabfilTal();
-        tabfilP6.set(tabfilP);
-    }
-
-    private void tabfilTalP7() {
-        tabfilTal();
-        tabfilP7.set(tabfilP);
-    }
-
-    private void tabfilKonvP3() {
-        tabfilP.set(tabfilP3);
-        tabfilKonv();
-        tabfilP3.set(tabfilP);
-    }
-
-    private void tabfilKonvP4() {
-        tabfilP.set(tabfilP4);
-        tabfilKonv();
-        tabfilP4.set(tabfilP);
-    }
-
-    private void tabfilKonvP5() {
-        tabfilP.set(tabfilP5);
-        tabfilKonv();
-        tabfilP5.set(tabfilP);
-    }
-
-    private void tabfilKonvP6() {
-        tabfilP.set(tabfilP6);
-        tabfilKonv();
-        tabfilP6.set(tabfilP);
-    }
-
-    private void tabfilKonvP7() {
-        tabfilP.set(tabfilP7);
-        tabfilKonv();
-        tabfilP7.set(tabfilP);
-    }
-
-    private void z13ToUpper() {
-        z13TknG.convert("abcdefghijklmnopqrstuvwxyz","ABCDEFGHIJKLMNOPQRSTUVWXYZ");
-        z13TknG.convert(new String(new char[]{0x60,0x7d,0x7b,0x7c,0x7e}),new String(new char[]{0x40,0x5d,0x5b,0x5c,0x5e}));
-    }
-
--- a/server.src/prg/pro/Ymerws.java
-    private lib.bas.Maxipost basmaxi=new lib.bas.Maxipost(Ymerws.this);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Ymerws.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Ymerws.this);
-    private Field tmpTecken = new Field("X(100)");
--- a/server.src/prg/pro/Yping01.java
-    private Field unixSystem = new Field("X(6)", "SYSTEM");
-    private Field z13TknG = new Field("X(10)");
-    private Field infilFieldPek = new Field("S9(9)");
-    private Field infilFieldNum = new Field("S9(9)V99");
-    private Field infilFieldHel = new Field("S9(9)");
-    private Field infilFieldTkn = new Field("X");
-    private Field infilFieldDec = new Field("X");
-    private Field infilFieldDecValue = new Field("S9(9)");
-    private Field infilField9 = new Field("9");
-    private Field tmpEgetId = new Field("X(100)");
-    private Field infOk = new Field("X");
-    private Field tidnPek = new Field("S9(9)");
-    private Field ktrlJ = new Field("S9(9)");
-    private Field ktrlN = new Field("S9(9)");
-    private Field ktrlBl = new Field("S9(9)");
-    private Field x = new Field("S9(9)");
-    private Field y = new Field("S9(9)");
-    private Field infilNamn = new Field("X(50)");
-    private Field infilEof = new Field("X");
-    private Field utfilNamn = new Field("X(50)");
-    private Field utfilEof = new Field("X");

-    private void readFileTonum() {
-        infilFieldNum.set(ZERO);
-        infilFieldDec.set("N");
-        infilFieldTkn.set("+");
-        infilFieldPek.set(1);
-        while (!(infilFieldPek.compareTo(80)>0)) {
-            if (infilField.ref(infilFieldPek,1).isNumeric()) {
-                infilField9.ref(1,1).set(infilField.ref(infilFieldPek,1));
-                if (infilFieldDec.equals("N")) {
-                    infilFieldNum.set(infilFieldNum.multiply(10).add(infilField9));
-                }
-                else {
-                    infilFieldNum.set(infilFieldNum.add(infilField9.divide(infilFieldDecValue)));
-                    infilFieldDecValue.multiplyBy(10);
-                }
-            }
-            else if (infilField.ref(infilFieldPek,1).equals("-")) {
-                infilFieldTkn.set("-");
-            }
-            else if (infilField.ref(infilFieldPek,1).equalsEither(".", ",")) {
-                infilFieldDec.set("J");
-                infilFieldDecValue.set(10);
-            }
-            infilFieldPek.increment(1);
-        }
-        if (infilFieldTkn.equals("-")) {
-            infilFieldNum.multiplyBy(-1);
-        }
-    }
-
--- a/server.src/prg/pro/Ytalaws.java
-    private lib.bas.Maxipost basmaxi=new lib.bas.Maxipost(Ytalaws.this);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(Ytalaws.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Ytalaws.this);
-    private Field tmpTecken = new Field("X(100)");
--- a/server.src/prg/pro/Ytryws.java
-    private lib.bas.Maxipost basmaxi=new lib.bas.Maxipost(Ytryws.this);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Ytryws.this);
-    private Field tmpTecken = new Field("X(100)");
--- a/server.src/prg/pro/Ywearws.java
-    private lib.bas.Maxipost basmaxi=new lib.bas.Maxipost(Ywearws.this);
-    private lib.lev.Levepost levleve=new lib.lev.Levepost(Ywearws.this, pa);
-    private lib.pro.Medapost promeda=new lib.pro.Medapost(Ywearws.this, pa);
-    private lib.pro.Kundpost prokund=new lib.pro.Kundpost(Ywearws.this, pa);
-    private lib.pro.Recarea prorecarea=new lib.pro.Recarea(Ywearws.this);
--- a/server.src/prg/pro/Zfil1545.java
--- a/server.src/prg/pro/Zrekv546.java
-    private lib.pro.Stddata stddata=new lib.pro.Stddata(Zrekv546.this);
--- a/server.src/prg/pro/Zsala546.java
--- a/server.src/prg/pro/Zsata546.java
